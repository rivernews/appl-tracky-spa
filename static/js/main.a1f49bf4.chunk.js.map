{"version":3,"sources":["store/auth/types.ts","utils/rest-api.ts","store/data-model/base-model.ts","utils/auth.ts","store/auth/actions.ts","store/rest-api-redux-factory.ts","store/data-model/address.ts","store/data-model/link.ts","store/data-model/company.ts","store/data-model/application.ts","components/social-auth/social-auth-login-button.tsx","components/social-auth/social-auth-logout-button.tsx","components/social-auth/social-auth-button.tsx","components/form-factory/form-base-field/form-base-field-meta.tsx","pages/landing-page/landing-page.tsx","components/form-factory/form-input-field/form-input-field.tsx","components/form-factory/form-factory.tsx","components/form-factory/form-input-field/form-input-field-meta.tsx","components/social-auth/login-form.tsx","pages/login-page/local-login-page.tsx","components/company/company-component.tsx","store/data-model/application-status.ts","store/data-model/application-status-link.ts","components/form-factory/form-base-field/form-base-field.tsx","components/form-factory/form-link-field/form-link-field.tsx","components/form-factory/form-link-field/form-link-field-component.tsx","components/form-factory/form-link-field/form-link-field-meta.tsx","components/form-factory/form-application-status-link-field/form-application-status-link-field.tsx","components/form-factory/form-application-status-link-field/form-application-status-link-field-component.tsx","components/form-factory/form-application-status-link-field/form-application-status-link-field-meta.tsx","components/application-status/application-status-form-component.tsx","components/application-status/application-status-component.tsx","components/application/application-form-component.tsx","components/application/application-component.tsx","components/company-application/company-application-component.tsx","pages/user-app-page/user-app-page.tsx","components/form-factory/form-address-field/form-address-field.tsx","components/form-factory/form-address-field/form-address-field-component.tsx","components/form-factory/form-address-field/form-address-field-meta.tsx","components/company/company-form-component.tsx","pages/add-com-page/add-com-page.tsx","pages/user-com-app-page/user-com-app-page.tsx","components/user-info/user-info.tsx","pages/user-profile-page/user-profile-page.tsx","pages/page-routes/page-routes.tsx","App.tsx","serviceWorker.ts","store/actions.ts","store/auth/reducers.ts","sagas/auth/sagas.ts","sagas/saga-config.ts","store/reducers.ts","store/store-config.ts","index.tsx"],"names":["AuthActionNames","RequestStatus","CrudType","RestMethod","BaseModel","_ref","_ref$uuid","uuid","_ref$created_at","created_at","_ref$modified_at","modified_at","Object","classCallCheck","this","createClass","key","value","Yup","shape","AuthObject","_BaseModel","_this","_ref$code","code","_ref$provider","provider","_ref$redirect_uri","redirect_uri","args","objectWithoutProperties","possibleConstructorReturn","getPrototypeOf","call","inherits","AuthenticationService","state","clientID","redirectUri","apiLoginUrl","socialAuthProvider","userEmail","apiLoginToken","userFirstName","userLastName","objectID","serverLogin","socialLoginCode","authFormData","_this2","RestApiService","post","data","endpointUrl","serverLogout","_callee","regenerator_default","a","wrap","_context","prev","next","console","log","abrupt","stop","CrudMapToRest","crudType","CREATE","POST","READ","LIST","GET","UPDATE","PATCH","DELETE","RestApi","apiBaseUrl","get","absoluteUrl","objectName","fetch","getRelativeUrl","objectSpread","method","setApiAuthHeaders","then","res","json","_ref2","body","JSON","stringify","patch","_ref3","delete","_ref4","_ref5","url","concat","undefined","mode","credentials","headers","Authorization","Content-Type","RequestedLoginAuth","socialAuthToken","type","REQUESTED_LOGIN_AUTH","payload","requestStatus","REQUESTING","RequestedLogoutAuth","REQUESTED_LOGOUT_AUTH","SuccessLoginAuth","userName","expireDateTime","apiToken","avatarUrl","isLocal","SUCCESS_AUTH","SUCCESS","isLogin","SuccessLogoutAuth","FailureAuth","error","FAILURE_AUTH","FAILURE","RestApiReduxFactory","initialObjectInstance","crudKeywords","values","ObjectRestApiRedux","_loop","crudKeyword","_i","_arr","_i2","length","actionTypeName","action","toUpperCase","TRIGGERED","objectClassInstance","successCallback","failureCallback","finalCallback","formData","jsonResponse","triggerFormData","newState","lastChangedObjectID","results","sagaHandler","mark","triggerAction","put","sent","status","Error","t0","saga","objectTriggerActionChannel","objectTriggerAction","_context2","actionChannel","take","initialState","collection","sagas","map","actions","storeReducer","objectStore","arguments","objectAction","split","newObject","defineProperty","resObjectList","newObjects","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","done","object","err","return","afterStore","targetDeleteObject","omit","Address","_ref$place_name","place_name","_ref$country","country","_ref$state","_ref$city","city","_ref$street","street","_ref$full_address","full_address","_ref$zipcode","zipcode","max","Link","_ref$text","text","_ref$user","user","_ref$url","_ref$order","order","default","when","is","required","Company","_ref$labels","labels","_ref$name","name","_ref$hq_location","hq_location","_ref$home_page","home_page","_ref$ratings","ratings","_ref$applications","applications","schema","CompanyRestApiRedux","CompanyActions","CompanyReducer","CompanySagas","Application","_ref$user_company","user_company","_ref$position_title","position_title","_ref$job_description_","job_description_page","_ref$job_source","job_source","ApplicationRestApiRedux","ApplicationActions","ApplicationReducer","ApplicationSagas","SocialAuthLoginButton","_Component","_getPrototypeOf2","_len","Array","_key","apply","onLoginButtonClicked","clickEvent","renderProps","onClick","onAuthSuccess","authResponse","props","onSuccess","onAuthFailure","onFailure","react_default","createElement","className","google_login","render","react_button_dist_default","unelevated","icon","dist_default","hasRipple","disabled","clientId","responseType","Component","SocialAuthLogoutButton","onClickWhenIsLocal","onLogoutSuccess","SocialAuthButton","onSocialLoginSuccess","googleOauthResponse","setState","requestedLoginAuth","onSocialLoginFailure","onSocialLogoutSuccess","requestedLogoutAuth","auth","social_auth_logout_button_SocialAuthLogoutButton","social_auth_login_button_SocialAuthLoginButton","InputFieldType","SocialAuthButtonContainer","withRouter","connect","store","dispatch","styles","backgroundColor","color","LandingPage","formFactoryProps","onStaffLoginClick","history","push","style","react_router","to","href","target","LandingPageContainer","registerLocalLoginSuccess","listApplication","listCompany","FormInputField","formik_esm","fieldName","field","form","react_text_field_dist_default","label","onTrailingIconSelect","trailingIcon","role","react_text_field_dist","assign","TEXT","inputType","ActionButtonType","FormBaseFieldMeta","model","formField","isDynamic","dynamicLimit","getInstanceDataFromFormikValues","isArray","alert","instanceData","FormInputFieldMeta","_FormBaseFieldMeta","FormActionButtonProps","FormFactory","initialInstance","validationSchema","onSubmit","setSubmitting","formFieldPropsList","fieldProps","getInstance","createInstanceTriggerAction","updateInstanceTriggerAction","instance","enforcedInstanceData","onSubmitSuccess","initialValues","isSubmitting","formFieldMeta","index","formikValues","actionButtonPropsList","actionButtonProps","BUTTON","children","LoginForm","PASSWORD","SUBMIT","onCancel","onSubmitLoginForm","asyncToGenerator","parsedJsonResponse","ok","statusText","token","registerLoginSuccess","username","avatar_url","onLoginSuccess","_x","_x2","password","form_factory_FormFactory","LocalLoginPage","onLoginFormCancel","login_form_LoginForm","LocalLoginPageContainer","CompanyComponent","company","react_router_dom","react_icon_button_dist_default","onEditIconClicked","onDeleteIconClicked","includes","ApplicationStatus","_ref$application","application","_ref$applicationstatu","applicationstatuslink_set","_ref$date","date","utcNowDateString","matches","now","Date","UTC","getUTCFullYear","getUTCMonth","getUTCDate","toISOString","ApplicationStatusRestApiRedux","ApplicationStatusActions","ApplicationStatusReducer","ApplicationStatusSagas","ApplicationStatusLink","_ref$application_stat","application_status","_ref$link","link","FormBaseDynamicFieldControlls","formikArrayHelpers","remove","BaseDynamicFieldAddButton","withFormBaseField","FormFieldComponent","form_base_field_FormBaseDynamicFieldControlls","form_base_field_BaseDynamicFieldAddButton","FormLinkField","FormLinkFieldComponent","textInputFieldMeta","urlInputFieldMeta","form_input_field_FormInputField","FormLinkFieldMeta","FormApplicationStatusLinkField","FormApplicationStatusLinkFieldComponent","linkFieldProps","FormApplicationStatusLinkFieldMeta","ApplicationStatusFormComponent","DATE","applicationStatus","createApplicationStatus","updateApplicationStatus","ApplicationStatusFormComponentContainer","applicationStatusStore","applicationStatusFormData","ApplicationStatusComponent","isFormOpened","renderDisplay","deleteApplicationStatus","applicationStatusLink","renderFormController","isOnlyForm","ApplicationStatusComponentContainer","applicationStatusToDelete","callback","ApplicationFormComponent","createApplication","updateApplication","ApplicationFormComponentContainer","applicationStore","applicationFormData","ApplicationComponent","renderApplicationFormController","event","renderApplicationDisplay","applicationStatusList","deleteApplication","isShowApplicationStatuses","ApplicationComponentController","applicationToDelete","CompanyApplicationComponent","onDeleteClick","deleteCompany","company_component_CompanyComponent","filter","CompanyApplicationComponentContainer","companyToDelete","updateCompany","companyToUpdate","UserAppPage","UserAppPageContainer","FormAddressField","FormAddressFieldComponent","fullAddressInputFieldMeta","placeNameInputFieldMeta","FormAddressFieldMeta","CompanyFormComponent","createCompany","CompanyFormComponentContainer","companyFormData","AddComPage","match","params","newCompany","goBack","AddComPageContainer","UserComAppPage","companyUuid","renderAll","UserComAppPageContainer","UserInfo","toString","UserProfilePage","user_info_UserInfo","UserProfilePageContainer","PageRoutes","location","pathname","path","exact","component","react_top_app_bar_dist_default","title","actionItems","height","borderRadius","src","react_top_app_bar_dist","PageRoutesContainer","App","Boolean","window","hostname","RootActionNames","initialAuthState","authReducer","authStore","authAction","resetAllStoreAction","ResetAllStore","authLoginSagaHandler","authLoginSaga","authLogoutSagaHandler","authLogoutSaga","requestedLoginAuthAction","email","warn","_marked","takeEvery","_marked2","requestedLogoutAuthAction","_context3","_marked3","_context4","_marked4","sagaMiddleware","createSagaMiddleware","rootSaga","all","toConsumableArray","createBrowserHistory","basename","createStore","rootState","rootStateChecked","router","connectRouter","compose","applyMiddleware","routerMiddleware","run","ReactDOM","es","esm","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a1f49bf4.chunk.js","sourcesContent":["import { Action } from \"redux\";\n\nimport { RequestStatus } from \"../../utils/rest-api\";\n\n/**\n * Store Types\n */\n\n// complete store type\nexport interface IUpdateAuthState {\n    requestStatus: RequestStatus\n    isLogin: boolean\n    isLocal: boolean\n    userName: string\n    socialAuthToken: string\n    apiToken: string\n    expireDateTime: string\n    avatarUrl: string\n}\n\n// async partial store types\nexport interface IRequestedLoginAuthState {\n    requestStatus: RequestStatus\n    socialAuthToken: string\n}\n\nexport interface IRequestedLogoutAuthState {\n    requestStatus: RequestStatus\n}\n\nexport interface ISuccessAuthState {\n    requestStatus: RequestStatus\n    isLogin: boolean\n    isLocal: boolean\n    userName: string\n    expireDateTime: string\n    apiToken: string\n    avatarUrl: string\n}\n\nexport interface IFailureAuthState {\n    requestStatus: RequestStatus,\n    error: any\n}\n\n// add more state types for this reducer - auth reducer\n// ...\n\n\n\n\n\n/**\n * Action Types\n */\n\nexport enum AuthActionNames {\n    UPDATE_AUTH = \"Update auth\",\n    REQUESTED_LOGIN_AUTH = \"Requested login auth\",\n    REQUESTED_LOGOUT_AUTH = \"Requested logout auth\",\n    SUCCESS_AUTH = \"Success auth\",\n    FAILURE_AUTH = \"Failure auth\",\n\n    // 1. add more action for this reducer - auth reducer\n    // 2. write the type interface for the action below\n    // ...\n}\n\nexport interface IUpdateAuthAction extends Action<AuthActionNames.UPDATE_AUTH> {\n    type: typeof AuthActionNames.UPDATE_AUTH;\n    payload: IUpdateAuthState;\n}\n\nexport interface IRequestedLoginAuthAction extends Action<AuthActionNames.REQUESTED_LOGIN_AUTH> {\n    type: typeof AuthActionNames.REQUESTED_LOGIN_AUTH;\n    payload: IRequestedLoginAuthState;\n}\n\nexport interface IRequestedLogoutAuthAction extends Action<AuthActionNames.REQUESTED_LOGOUT_AUTH> {\n    type: typeof AuthActionNames.REQUESTED_LOGOUT_AUTH;\n    payload: IRequestedLogoutAuthState;\n}\n\nexport interface ISuccessAuthAction extends Action<AuthActionNames.SUCCESS_AUTH> {\n    type: typeof AuthActionNames.SUCCESS_AUTH;\n    payload: ISuccessAuthState;\n}\n\nexport interface IFailureAuthAction extends Action<AuthActionNames.FAILURE_AUTH> {\n    type: typeof AuthActionNames.FAILURE_AUTH;\n    payload: IFailureAuthState;\n}\n\n// use union | ... | ... to add more action types\nexport type TAuthActions = IUpdateAuthAction | IRequestedLoginAuthAction | IRequestedLogoutAuthAction | ISuccessAuthAction | IFailureAuthAction","import React from \"react\";\nimport { TObject, IObjectBase } from \"../store/rest-api-redux-factory\";\nimport { BaseModel } from \"../store/data-model/base-model\";\nimport { AuthenticationService } from \"./auth\";\n\nexport enum RequestStatus {\n    TRIGGERED = \"triggered\",\n    REQUESTING = \"requesting\",\n    SUCCESS = \"success\",\n    FAILURE = \"failre\"\n}\n\nexport enum CrudType {\n    CREATE = \"create\",\n    READ = \"read\",\n    LIST = \"list\",\n    UPDATE = \"update\",\n    DELETE = \"delete\"\n}\n\nexport enum RestMethod {\n    POST = \"post\",\n    GET = \"get\",\n    PATCH = \"patch\",\n    DELETE = \"delete\"\n}\n\nexport const CrudMapToRest = (crudType: CrudType): RestMethod => {\n    switch (crudType) {\n        case CrudType.CREATE:\n            return RestMethod.POST;\n        case CrudType.READ:\n            return RestMethod.GET;\n        case CrudType.LIST:\n            return RestMethod.GET;\n        case CrudType.UPDATE:\n            return RestMethod.PATCH;\n        case CrudType.DELETE:\n            return RestMethod.DELETE;\n\n        default:\n            return RestMethod.GET;\n    }\n};\n\nexport interface IRequestParams<Schema> {\n    endpointUrl?: string;\n    absoluteUrl?: string;\n    objectName?: string;\n    data?: TObject<Schema> | Array<TObject<Schema>>;\n}\n\nexport interface IListRestApiResponse<Schema> {\n    count: number;\n    next: any;\n    previous: any;\n    results: Array<TObject<Schema>>;\n}\n\nexport type ISingleRestApiResponse<Schema> = TObject<Schema>;\n\nexport function IsSingleRestApiResponseTypeGuard<Schema>(\n    response: ISingleRestApiResponse<Schema> | IListRestApiResponse<Schema>\n): response is ISingleRestApiResponse<Schema> {\n    return (<ISingleRestApiResponse<Schema>>response).uuid !== undefined;\n}\n\nfunction IsSingleFormDataTypeGuard<Schema>(\n    formData: TObject<Schema> | Array<TObject<Schema>>\n): formData is TObject<Schema> {\n    return (<TObject<Schema>>formData).uuid !== undefined;\n}\n\nexport class RestApi {\n    state = {\n        clientID: `732988498848-vuhd6g61bnlqe372i3l5pbpnerteu6na.apps.googleusercontent.com`,\n        code: ``,\n        redirectUri: `postmessage`,\n        apiBaseUrl: (process.env.NODE_ENV === 'development') ? \n        `http://localhost:8000/api/`\n        :\n        `https://appl-tracky-api-https.shaungc.com/api/`\n        ,\n        apiLoginUrl: `login/social/`,\n        socialAuthProvider: `google-oauth2`,\n\n        userEmail: ``,\n        apiLoginToken: ``,\n        userFirstName: ``,\n        userLastName: ``,\n\n        objectID: ``\n    };\n\n    get = <Schema>({ endpointUrl, absoluteUrl, objectName, data }: IRequestParams<Schema>) => {\n        return fetch(\n            this.getRelativeUrl({\n                endpointUrl,\n                absoluteUrl,\n                objectName,\n                data\n            }),\n            {\n                method: \"GET\",\n                ...this.setApiAuthHeaders()\n            }\n        ).then(res => res.json());\n    };\n\n    post = <Schema>({ data, objectName, endpointUrl }: IRequestParams<Schema>) => {\n        console.log(`restapi:post fired`);\n        return fetch(\n            this.getRelativeUrl({\n                endpointUrl,\n                objectName,\n                data\n            }),\n            {\n                method: \"POST\",\n                ...this.setApiAuthHeaders(),\n                body: JSON.stringify(data)\n            }\n        ).then(res => res.json());\n        // let caller handle error in their own .catch()\n    };\n\n    patch = <Schema>({ data, objectName, endpointUrl }: IRequestParams<Schema>) => {\n        return fetch(\n            this.getRelativeUrl({\n                endpointUrl,\n                objectName,\n                data\n            }),\n            {\n                method: \"PATCH\",\n                ...this.setApiAuthHeaders(),\n                body: JSON.stringify(data)\n            }\n        ).then(res => res.json());\n    };\n\n    delete = <Schema>({ data, objectName, endpointUrl }: IRequestParams<Schema>) => {\n        return fetch(\n            this.getRelativeUrl({\n                endpointUrl,\n                objectName,\n                data\n            }),\n            {\n                method: \"DELETE\",\n                ...this.setApiAuthHeaders(),\n                body: JSON.stringify(data)\n            }\n        );\n    };\n\n    /** helper */\n    private getRelativeUrl = <Schema>({\n        objectName,\n        data,\n        endpointUrl,\n        absoluteUrl,\n    }: IRequestParams<Schema>) => {\n        let url = \"\";\n        if (absoluteUrl) {\n            url = absoluteUrl;\n        }\n        else if (endpointUrl) {\n            url = `${this.state.apiBaseUrl}${endpointUrl}`;\n        } else {\n            if (data && IsSingleFormDataTypeGuard(data) && data.uuid) {\n                url = `${this.state.apiBaseUrl}${objectName}/${data.uuid}/`;\n            } else {\n                url = `${this.state.apiBaseUrl}${objectName}/`;\n            }\n        }\n        console.log(`restapi: url: ${url}, objname=${objectName}`);\n        return url;\n    };\n\n    private setApiAuthHeaders = (): RequestInit => {\n\n        this.state.apiLoginToken = (\n            AuthenticationService.state.apiLoginToken\n        ) ? AuthenticationService.state.apiLoginToken : this.state.apiLoginToken;\n\n        console.log(\"api: set header: got credentials?\", this.state.apiLoginToken);\n        return {\n            mode: \"cors\",\n            credentials: this.state.apiLoginToken ? \"include\" : \"omit\",\n            headers: {\n                Authorization: this.state.apiLoginToken\n                    ? `JWT ${this.state.apiLoginToken}`\n                    : ``,\n                \"Content-Type\": \"application/json\"\n            }\n        };\n    };\n}\n\n/** create restapi singleton */\nexport const RestApiService = new RestApi();\n","import * as Yup from \"yup\";\n\nexport type IRelationship = string;\n\nexport interface IBaseModelProps {\n    uuid?: IRelationship\n    created_at?: string\n    modified_at?: string\n}\n\nexport class BaseModel {\n    uuid: string\n    created_at: string\n    modified_at: string\n    \n    constructor({\n        uuid = \"\",\n        created_at = \"\",\n        modified_at = \"\",\n    }: IBaseModelProps) {\n        this.uuid = uuid;\n        this.created_at = created_at;\n        this.modified_at = modified_at;\n    }\n\n    static schema() {\n        return Yup.object<BaseModel>().shape({});\n    }\n}\n\n// for newing model class instance and access base class's assets\nexport type DataModelInstance<Model = BaseModel> = Model & BaseModel\n\nexport type DataModelClass<DataModel = any> = DataModelInstance<DataModel> & (new (props: any) => DataModel)","import { RestApiService } from \"./rest-api\";\nimport { BaseModel, IBaseModelProps } from \"../store/data-model/base-model\";\n\nexport interface IAuthObjectProps {\n    code?: string\n    provider?: string\n    redirect_uri?: string\n}\n\nexport class AuthObject extends BaseModel {\n    code: string\n    provider: string\n    redirect_uri: string\n\n    constructor({\n        code = \"\",\n        provider = \"\",\n        redirect_uri = \"\",\n        ...args\n    }: IAuthObjectProps & IBaseModelProps) {\n        super(args);\n        this.code = code;\n        this.provider = provider;\n        this.redirect_uri = redirect_uri;\n    }\n}\n\nclass Authentication {\n    state = {\n        clientID: `732988498848-vuhd6g61bnlqe372i3l5pbpnerteu6na.apps.googleusercontent.com`,\n\n        redirectUri: `postmessage`,\n        apiLoginUrl: `login/social/`,\n        socialAuthProvider: `google-oauth2`,\n\n        userEmail: ``,\n        apiLoginToken: ``,\n        userFirstName: ``,\n        userLastName: ``,\n\n        objectID: ``\n    };\n\n    serverLogin = (socialLoginCode: string) => {\n        let authFormData = new AuthObject({\n            code: socialLoginCode,\n            provider: this.state.socialAuthProvider,\n            redirect_uri: this.state.redirectUri\n        })\n        return RestApiService\n            .post<AuthObject>({\n                data: authFormData,\n                endpointUrl: this.state.apiLoginUrl\n            })\n    }\n\n    serverLogout = async () => {\n        console.log(\"server logout...\");\n        // no server-side invalidate implement at this point (a common case for JWT, however)\n        this.state.userEmail = \"\";\n        this.state.userFirstName = \"\"\n        this.state.userLastName = \"\"\n        this.state.apiLoginToken = RestApiService.state.apiLoginToken = \"\";\n        return;\n    }\n}\n\nexport const AuthenticationService = new Authentication();","import { ActionCreator } from \"redux\";\n\nimport {\n    /** state types */\n    IUpdateAuthState,\n    IRequestedLoginAuthState,\n    /** action types */\n    IUpdateAuthAction,\n    IRequestedLoginAuthAction,\n    IRequestedLogoutAuthAction,\n    ISuccessAuthAction,\n    IFailureAuthAction,\n    /** action names */\n    AuthActionNames\n} from \"./types\";\n\nimport { RequestStatus } from \"../../utils/rest-api\";\n\nexport const UpdateAuth = (newAuthState: IUpdateAuthState): IUpdateAuthAction => {\n    return {\n        type: AuthActionNames.UPDATE_AUTH,\n        payload: newAuthState\n    };\n};\n\nexport const RequestedLoginAuth = (socialAuthToken: string): IRequestedLoginAuthAction => {\n    return {\n        type: AuthActionNames.REQUESTED_LOGIN_AUTH,\n        payload: {\n            requestStatus: RequestStatus.REQUESTING,\n            socialAuthToken\n        }\n    };\n};\n\nexport const RequestedLogoutAuth = (): IRequestedLogoutAuthAction => {\n    return {\n        type: AuthActionNames.REQUESTED_LOGOUT_AUTH,\n        payload: {\n            requestStatus: RequestStatus.REQUESTING,\n        }\n    };\n};\n\nexport const SuccessLoginAuth = (userName: string, expireDateTime: string, apiToken: string, avatarUrl: string, isLocal: boolean): ISuccessAuthAction => {\n    console.log(\"action username:\", userName);\n    return {\n        type: AuthActionNames.SUCCESS_AUTH,\n        payload: {\n            requestStatus: RequestStatus.SUCCESS,\n            isLogin: true,\n            isLocal: isLocal ? true : false,\n            userName,\n            expireDateTime,\n            apiToken,\n            avatarUrl\n        }\n    };\n};\n\nexport const SuccessLogoutAuth = (): ISuccessAuthAction => {\n    return {\n        type: AuthActionNames.SUCCESS_AUTH,\n        payload: {\n            requestStatus: RequestStatus.SUCCESS,\n            isLogin: false,\n            isLocal: false,\n            userName: \"\",\n            expireDateTime: \"\",\n            apiToken: \"\",\n            avatarUrl: \"\",\n        }\n    };\n};\n\nexport const FailureAuth = (error: any): IFailureAuthAction => {\n    return {\n        type: AuthActionNames.FAILURE_AUTH,\n        payload: {\n            requestStatus: RequestStatus.FAILURE,\n            error\n        }\n    };\n};\n\n// write new actions here for this reducer - auth reducer\n// ...\n","import { Action, Reducer } from \"redux\";\nimport { takeEvery, take, call, put, actionChannel } from \"redux-saga/effects\";\nimport { SagaIterator } from \"redux-saga\";\nimport {\n    RequestStatus,\n    CrudType,\n    CrudMapToRest,\n    RestApiService,\n    IRequestParams,\n    ISingleRestApiResponse,\n    IListRestApiResponse,\n    IsSingleRestApiResponseTypeGuard\n} from \"../utils/rest-api\";\nimport omit from \"lodash/omit\";\n\n/** state & store */\n\nexport interface IObjectBase {\n    uuid: string;\n}\n\nexport type TObject<Schema> = IObjectBase & { [Property in keyof Schema]: Schema[Property] };\n\ninterface IObjectList<Schema> {\n    [uuid: string]: TObject<Schema>;\n}\n\nexport interface IObjectStore<Schema> {\n    lastChangedObjectID?: string;\n    requestStatus: RequestStatus;\n    error?: any;\n    collection: IObjectList<Schema>;\n}\n\n/** action */\n\ntype IObjectRestApiReduxFactoryActions = {\n    [restfulKeyword: string]: {\n        [asyncKeyword: string]: {\n            actionTypeName: string;\n            action: Function;\n            saga?: () => SagaIterator;\n        };\n    };\n};\n\nexport interface IObjectAction<Schema> extends Action {\n    type: string;\n    crudType: CrudType;\n\n    // for deleteAction or other actions to obtain the original instance obj passed into trigger action\n    triggerFormData?: TObject<Schema> | Array<TObject<Schema>>;\n\n    // for saga to perform additional side effect e.g. navigation\n    // only for triggerActions\n    successCallback?: Function;\n    failureCallback?: (error: any) => void;\n    finalCallback?: Function;\n\n    // for custumized api call\n    absoluteUrl?: string\n    \n    payload: {\n        formData?: TObject<Schema> | Array<TObject<Schema>>;\n        lastChangedObjectID?: string;\n        requestStatus: RequestStatus;\n        error?: any;\n    };\n}\n\n/** factory API */\n\ninterface IRestApiReduxFactory<Schema> {\n    actions: IObjectRestApiReduxFactoryActions;\n    storeReducer: Reducer<IObjectStore<Schema>>\n    sagas: Array<() => SagaIterator>;\n}\n\nexport const RestApiReduxFactory = <Schema extends IObjectBase>(\n    /** should have uuid */ objectName: string,\n    initialObjectInstance: TObject<Schema>\n): IRestApiReduxFactory<Schema> => {\n    type TObjectSchema = typeof initialObjectInstance;\n    const crudKeywords = Object.values(CrudType);\n\n    let ObjectRestApiRedux: IObjectRestApiReduxFactoryActions = {};\n    for (let crudKeyword of crudKeywords) {\n        ObjectRestApiRedux[crudKeyword] = {};\n        /** store */\n        // TODO?: action state\n\n        /** action */\n        // action type names\n        for (let requestStatus of Object.values(RequestStatus)) {\n            ObjectRestApiRedux[crudKeyword][requestStatus] = {\n                actionTypeName: \"\",\n                action: () => {}\n            };\n            ObjectRestApiRedux[crudKeyword][\n                requestStatus\n            ].actionTypeName = `${requestStatus.toUpperCase()}_${crudKeyword.toUpperCase()}_${objectName.toUpperCase()}`;\n        }\n\n        // async actions ( & state...)\n        ObjectRestApiRedux[crudKeyword][RequestStatus.TRIGGERED].action = (\n            objectClassInstance?: TObjectSchema,\n            successCallback?: Function,\n            failureCallback?: (error: any) => void,\n            finalCallback?: Function,\n            absoluteUrl?: string,\n        ): IObjectAction<TObjectSchema> => {\n            console.log(`action:fired, trigger, ${crudKeyword}`);\n            return {\n                type:\n                    ObjectRestApiRedux[crudKeyword][RequestStatus.TRIGGERED]\n                        .actionTypeName,\n                crudType: crudKeyword,\n                finalCallback,\n                successCallback,\n                failureCallback,\n                absoluteUrl,\n                payload: {\n                    requestStatus: RequestStatus.TRIGGERED,\n                    formData: objectClassInstance\n                }\n            };\n        };\n        ObjectRestApiRedux[crudKeyword][\n            RequestStatus.REQUESTING\n        ].action = (): IObjectAction<TObjectSchema> => {\n            return {\n                type:\n                    ObjectRestApiRedux[crudKeyword][RequestStatus.REQUESTING]\n                        .actionTypeName,\n                crudType: crudKeyword,\n                payload: {\n                    requestStatus: RequestStatus.REQUESTING\n                }\n            };\n        };\n        ObjectRestApiRedux[crudKeyword][RequestStatus.SUCCESS].action = (\n            /** api response */\n            jsonResponse:\n            | IListRestApiResponse<TObjectSchema>\n            | ISingleRestApiResponse<TObjectSchema>,\n            triggerFormData?: TObject<Schema> | Array<TObject<Schema>>\n        ): IObjectAction<TObjectSchema> => {\n            let newState = {\n                type:\n                    ObjectRestApiRedux[crudKeyword][RequestStatus.SUCCESS]\n                        .actionTypeName,\n                crudType: crudKeyword\n            };\n            // if is delete success, we don't need formData (& the server responds nothing for DELETE as well)\n            if (crudKeyword === CrudType.DELETE) {\n                return {\n                    ...newState,\n                    triggerFormData,\n                    payload: {\n                        requestStatus: RequestStatus.SUCCESS,\n                    }\n                }\n            }\n            else if (IsSingleRestApiResponseTypeGuard(jsonResponse)) {\n                return {\n                    ...newState,\n                    payload: {\n                        requestStatus: RequestStatus.SUCCESS,\n                        formData: <ISingleRestApiResponse<TObjectSchema>>(\n                            jsonResponse\n                        ),\n                        lastChangedObjectID: jsonResponse.uuid\n                    }\n                };\n            } else {\n                return {\n                    ...newState,\n                    payload: {\n                        requestStatus: RequestStatus.SUCCESS,\n                        formData: (<IListRestApiResponse<TObjectSchema>>(\n                            jsonResponse\n                        )).results\n                    }\n                };\n            }\n        };\n        ObjectRestApiRedux[crudKeyword][RequestStatus.FAILURE].action = (\n            error: any\n        ): IObjectAction<TObjectSchema> => {\n            return {\n                type:\n                    ObjectRestApiRedux[crudKeyword][RequestStatus.FAILURE]\n                        .actionTypeName,\n                crudType: crudKeyword,\n                payload: {\n                    requestStatus: RequestStatus.FAILURE,\n                    error\n                }\n            };\n        };\n\n        /** saga */\n        const sagaHandler = function*(\n            triggerAction: IObjectAction<TObjectSchema>\n        ) {\n            console.log(`Saga: action intercepted; aync=trigger, crud=${crudKeyword}, obj=${objectName}; ready to call api`);\n            const formData = triggerAction.payload.formData;\n            const absoluteUrl = triggerAction.absoluteUrl;\n\n            yield put(\n                ObjectRestApiRedux[crudKeyword][\n                    RequestStatus.REQUESTING\n                ].action()\n            );\n\n            try {\n                // api call\n                const jsonResponse:\n                    | IListRestApiResponse<TObjectSchema>\n                    | ISingleRestApiResponse<TObjectSchema> \n                    | any = yield call(\n                    (<(params: IRequestParams<TObjectSchema>) => void>RestApiService[CrudMapToRest(crudKeyword)]),\n                    {\n                        data: formData,\n                        objectName,\n                        absoluteUrl,\n                    }\n                );\n\n                console.log(\"Saga: res from server\", jsonResponse);\n\n                if (jsonResponse.status && jsonResponse.status >= 400) {\n                    console.error(\"Server error, see message in res.\");\n                    throw new Error(\"Server error, see message in res.\");\n                } \n\n                // if there is .next in res, then it's paginated data and we should perform a next request to next page data\n                if(jsonResponse.next) {\n                    console.log(\"Saga: res contains next url, so we will also trigger list request for next=\", jsonResponse.next);\n                    yield put(ObjectRestApiRedux[CrudType.LIST][RequestStatus.TRIGGERED].action(\n                        undefined, undefined, undefined, undefined, jsonResponse.next\n                    ));\n                }\n\n                // success state\n                if (crudKeyword === CrudType.DELETE) {\n                    yield put(\n                        ObjectRestApiRedux[CrudType.DELETE][\n                            RequestStatus.SUCCESS\n                        ].action(jsonResponse, formData)\n                    );\n                } else {\n                    console.log(\"Saga: ready to dispatch success action\")\n                    yield put(\n                        ObjectRestApiRedux[crudKeyword][\n                            RequestStatus.SUCCESS\n                        ].action(jsonResponse)\n                    );\n                }\n\n                if (triggerAction.successCallback) {\n                    triggerAction.successCallback();\n                }\n            } catch (error) {\n                // error state\n                yield put(\n                    ObjectRestApiRedux[crudKeyword][\n                        RequestStatus.FAILURE\n                    ].action(error)\n                );\n\n                if (triggerAction.failureCallback) {\n                    triggerAction.failureCallback(error);\n                }\n                return;\n            }\n\n            if (triggerAction.finalCallback) {\n                triggerAction.finalCallback();\n            }\n        };\n\n        ObjectRestApiRedux[crudKeyword][\n            RequestStatus.TRIGGERED\n        ].saga = function*() {\n            console.log(`Saga: action intercepted; async=trigger, crud=${crudKeyword}, obj=${objectName}`);\n            \n            // queue style \n            const objectTriggerActionChannel = yield actionChannel(\n                ObjectRestApiRedux[crudKeyword][RequestStatus.TRIGGERED]\n                    .actionTypeName\n            )\n\n            while (true) {\n                const objectTriggerAction = yield take(objectTriggerActionChannel);\n                yield call(sagaHandler, objectTriggerAction);\n            }\n        };\n    }\n\n    const initialState: IObjectStore<TObjectSchema> = {\n        collection: {},\n        requestStatus: RequestStatus.SUCCESS\n    };\n\n    const storeReducer: Reducer<IObjectStore<Schema>> = (\n        objectStore: IObjectStore<TObjectSchema> = initialState,\n        action: Action\n    ): IObjectStore<TObjectSchema> => {\n        \n        const objectAction = action as IObjectAction<TObjectSchema>;\n\n        if (\n            !(objectAction && objectAction.payload && objectAction.payload.requestStatus) ||\n            !(action.type.split(\"_\")[2] === objectName.toUpperCase())\n        ) {\n            return {\n                ...objectStore\n            };\n        }\n\n        // async success\n        if (objectAction.payload.requestStatus === RequestStatus.SUCCESS) {\n            // CREATE\n            if (objectAction.crudType === CrudType.CREATE) {\n                let newObject = <TObject<TObjectSchema>>objectAction.payload.formData;\n                return {\n                    collection: {\n                        ...objectStore.collection,\n                        [newObject.uuid]: newObject\n                    },\n                    requestStatus: objectAction.payload.requestStatus,\n                    lastChangedObjectID: objectAction.payload.lastChangedObjectID\n                };\n            }\n\n            // LIST\n            else if (objectAction.crudType === CrudType.LIST) {\n                const resObjectList = <Array<TObject<TObjectSchema>>>(\n                    objectAction.payload.formData\n                );\n                let newObjects: IObjectList<TObjectSchema> = {};\n                for (let object of resObjectList) {\n                    newObjects[object.uuid] = object;\n                }\n                console.log(\"Reducer: crud=list, action=\", objectAction)\n                console.log(\"initialState=\", initialState)\n                console.log(\"beforestore=\", objectStore)\n                console.log(\"newlistobjects=\", newObjects)\n\n                const afterStore: IObjectStore<TObjectSchema> = {\n                    collection: {\n                        ...objectStore.collection,\n                        ...newObjects\n                    },\n                    requestStatus: objectAction.payload.requestStatus\n                };\n                console.log(\"afterstore=\", afterStore)\n\n                return afterStore;\n            }\n\n            // UPDATE\n            else if (objectAction.crudType === CrudType.UPDATE) {\n                let newObject = <TObject<TObjectSchema>>objectAction.payload.formData;\n                return {\n                    collection: {\n                        ...objectStore.collection,\n                        [newObject.uuid]: newObject\n                    },\n                    requestStatus: objectAction.payload.requestStatus,\n                    lastChangedObjectID: objectAction.payload.lastChangedObjectID\n                };\n            }\n\n            // DELETE\n            else if (objectAction.crudType === CrudType.DELETE) {\n                let targetDeleteObject = <TObject<TObjectSchema>>objectAction.triggerFormData;\n                console.log(\"Reducer: delete, targetobj=\", targetDeleteObject)\n\n                console.log(\"Reducer: delete, beforestore=\", objectStore)\n                \n                const afterStore = {\n                    collection: omit(objectStore.collection, [targetDeleteObject.uuid]),\n                    requestStatus: objectAction.payload.requestStatus\n                }\n                console.log(\"Reducer: delete, afterstore\", afterStore)\n\n                return afterStore;\n            }\n        }\n\n        // async trigger\n        else if (objectAction.payload.requestStatus === RequestStatus.TRIGGERED) {\n            return {\n                ...objectStore,\n                requestStatus: objectAction.payload.requestStatus\n            };\n        }\n\n        // async requesting & failure\n        else {\n            return {\n                ...objectStore,\n                ...objectAction.payload\n            };\n        }\n\n        // no effect\n        return {\n            ...objectStore\n        };\n    };\n\n    const sagas = crudKeywords.map((crudKeyword) => \n        (<() => SagaIterator>ObjectRestApiRedux[crudKeyword][RequestStatus.TRIGGERED].saga)\n    );\n\n    return {\n        actions: ObjectRestApiRedux,\n        storeReducer,\n        sagas\n    };\n};\n","import { RestApiReduxFactory } from \"../rest-api-redux-factory\";\nimport { BaseModel, IBaseModelProps } from \"./base-model\";\nimport * as Yup from \"yup\";\n\nexport interface IAddressProps {\n    place_name?: string;\n    country?: string;\n    state?: string;\n    city?: string;\n    street?: string;\n    full_address?: string;\n    zipcode?: string;\n}\n\nexport class Address extends BaseModel {\n    place_name: string;\n    country: string;\n    state: string;\n    city: string;\n    street: string;\n    full_address: string;\n    zipcode: string;\n\n    constructor({\n        place_name = \"\",\n        country = \"\",\n        state = \"\",\n        city = \"\",\n        street = \"\",\n        full_address = \"\",\n        zipcode = \"\",\n        ...args\n    }: IAddressProps & IBaseModelProps) {\n        super(args);\n        this.place_name = place_name;\n        this.country = country;\n        this.state = state;\n        this.place_name = place_name;\n        this.city = city;\n        this.street = street;\n        this.full_address = full_address;\n        this.zipcode = zipcode;\n    }\n\n    static schema(){\n        return Yup.object<Address>().shape({\n            full_address: Yup.string().max(200),\n            street: Yup.string().max(150),\n            city: Yup.string().max(50),\n            state: Yup.string().max(50),\n            country: Yup.string().max(50),\n            place_name: Yup.string().max(50),\n            zipcode: Yup.string().max(20),\n        });\n    }\n\n}\n\nconst initialAddressInstance = new Address({});\nconst AddressRestApiRedux = RestApiReduxFactory<Address>(\n    \"addresses\",\n    initialAddressInstance\n);","import { BaseModel, IBaseModelProps } from \"./base-model\";\nimport * as Yup from \"yup\";\n\ninterface ILinkProps {\n    text?: string;\n    user?: any;\n    url?: string;\n    order?: number;\n}\n\nexport class Link extends BaseModel {\n    public text: string;\n    public user: any;\n    public url: string;\n    public order: number;\n\n    constructor({\n        text = \"\",\n        user = {},\n        url = \"\",\n        order = 0,\n        ...args\n    }: ILinkProps & IBaseModelProps) {\n        super(args);\n        this.text = text;\n        this.user = user;\n        this.url = url;\n        this.order = order;\n    }\n\n    static schema(){\n        return Yup.object<Link>().shape({\n            text:  Yup.string().max(200),\n            url: Yup.string().default(\"#\").when(\n                \"text\", {\n                    is: (text) => text,\n                    then: Yup.string().required(\"Since you gave the link some text, let's provide an url as well...!\").max(500, \"URL is too long, only less than 500 characters please\")\n                }\n            ),\n        });\n    }\n}\n","import { RestApiReduxFactory } from \"../rest-api-redux-factory\";\nimport { BaseModel, IBaseModelProps } from \"./base-model\";\nimport { Address } from \"./address\";\nimport { Link } from \"./link\";\nimport * as Yup from \"yup\";\n\ninterface ICompanyProps {\n    user?: string;\n    labels?: any;\n    name?: string;\n    hq_location?: Address;\n    home_page?: Link;\n    ratings?: any;\n    applications?: any;\n}\n\nexport class Company extends BaseModel {\n    public user: string;\n    public labels: any;\n    public name: string;\n    public hq_location: Address;\n    public home_page: Link;\n    public ratings: any;\n    public applications: any;\n\n    constructor({\n        user = \"\",\n        labels = [],\n        name = \"\",\n        hq_location = new Address({}),\n        home_page = new Link({}),\n        ratings = {},\n        applications = {},\n        ...args\n    }: ICompanyProps & IBaseModelProps) {\n        super(args);\n        this.user = user;\n        this.labels = labels;\n        this.name = name;\n        this.hq_location = hq_location;\n        this.home_page = home_page;\n        this.ratings = ratings;\n        this.applications = applications;\n    }\n\n    static schema(){\n        return Yup.object<Company>().shape({\n            name: Yup.string().required(\"Every company needs a name...!\").max(100),\n            home_page: Link.schema(),\n            hq_location: Address.schema()\n        });\n    }\n}\n\nconst initialCompanyInstance = new Company({});\nconst CompanyRestApiRedux = RestApiReduxFactory<Company>(\n    \"companies\",\n    initialCompanyInstance\n);\nexport const CompanyActions = CompanyRestApiRedux.actions;\nexport const CompanyReducer = CompanyRestApiRedux.storeReducer;\nexport const CompanySagas = CompanyRestApiRedux.sagas;\n","import { RestApiReduxFactory } from \"../rest-api-redux-factory\";\nimport { BaseModel, IBaseModelProps, IRelationship } from \"./base-model\";\nimport { Link } from \"./link\";\nimport * as Yup from \"yup\";\n\ninterface IApplicationProps {\n    user?: IRelationship;\n    user_company?: IRelationship;\n    position_title?: string;\n    job_description_page?: Link;\n    job_source?: Link;\n    labels?: any;\n}\n\nexport class Application extends BaseModel {\n    public user: string;\n    public user_company: IRelationship;\n    public position_title: string;\n    public job_description_page: Link;\n    public job_source: Link;\n    public labels: any;\n\n    constructor({\n        user = \"\",\n        user_company = \"\",\n        position_title = \"\",\n        job_description_page = new Link({}),\n        job_source = new Link({}),\n        labels = {},\n        ...args\n    }: IApplicationProps & IBaseModelProps) {\n        super(args);\n        this.user = user;\n        this.user_company = user_company;\n        this.position_title = position_title;\n        this.job_description_page = job_description_page;\n        this.job_source = job_source;\n        this.labels = labels;\n    }\n\n    static schema(){\n        return Yup.object<Application>().shape({\n            position_title: Yup.string().required(\"We need a title...!\").max(150, \"No more than 150 characters\"),\n            job_description_page: Link.schema(),\n            job_source: Link.schema(),\n        });\n    }\n}\n\nconst initialApplicationInstance = new Application({});\nconst ApplicationRestApiRedux = RestApiReduxFactory<Application>(\n    \"applications\",\n    initialApplicationInstance\n);\nexport const ApplicationActions = ApplicationRestApiRedux.actions;\nexport const ApplicationReducer = ApplicationRestApiRedux.storeReducer;\nexport const ApplicationSagas = ApplicationRestApiRedux.sagas;\n","import React, { Component } from \"react\";\n\n/** Components */\nimport { GoogleLogin } from \"react-google-login\";\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n\ninterface ISocialAuthLoginButtonProps {\n    clientID: string;\n    redirectUri?: string;\n    onSuccess(authResponse?: any): void;\n    onFailure?(error: any): void;\n    disabled?: boolean;\n}\n\nexport class SocialAuthLoginButton extends Component<\n    ISocialAuthLoginButtonProps\n> {\n    onLoginButtonClicked = (clickEvent: any, renderProps: any) => {\n        console.log(\"login button clicked\", clickEvent, renderProps);\n        renderProps.onClick(clickEvent);\n    };\n\n    onAuthSuccess = (authResponse?: any) => {\n        console.log(\"login button auth success\");\n        this.props.onSuccess(authResponse);\n    };\n\n    onAuthFailure = (error: any) => {\n        console.log(\"login button auth failed\");\n        if (this.props.onFailure) {\n            this.props.onFailure(error);\n        }\n    };\n\n    render() {\n        return (\n            <div className=\"UserAuthButton\">\n                <GoogleLogin\n                    render={(renderProps: any) => (\n                        <Button\n                            onClick={clickEvent =>\n                                this.onLoginButtonClicked(\n                                    clickEvent,\n                                    renderProps\n                                )\n                            }\n                            unelevated\n                            icon={\n                                <MaterialIcon hasRipple icon=\"account_circle\" />\n                            }\n                            disabled={this.props.disabled}\n                        >\n                            Google Login\n                        </Button>\n                    )}\n                    onSuccess={this.onAuthSuccess}\n                    onFailure={this.onAuthFailure}\n                    clientId={this.props.clientID}\n                    responseType=\"code\"\n                    redirectUri={this.props.redirectUri || \"postmessage\"}\n                />\n            </div>\n        );\n    }\n}\n","import React, { Component } from \"react\";\n\n/** Components */\nimport { GoogleLogout } from \"react-google-login\";\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n\ninterface ISocialAuthLogoutButtonProps {\n    isLocal: boolean\n    onClickWhenIsLocal?(): void\n    onSuccess(authResponse?: any): void;\n    disabled?: boolean\n}\n\nexport class SocialAuthLogoutButton extends Component<\n    ISocialAuthLogoutButtonProps\n> {\n    onAuthSuccess = (authResponse?: any) => {\n        this.props.onSuccess(authResponse);\n    };\n\n    render() {\n        return (\n            <div className=\"UserAuthButton\">\n                <GoogleLogout\n                    render={(renderProps: any) => (\n                        <Button\n                            onClick={(this.props.isLocal) ? this.props.onClickWhenIsLocal : renderProps.onClick}\n                            unelevated\n                            icon={<MaterialIcon hasRipple icon=\"eject\" />}\n                            disabled={this.props.disabled}\n                        >\n                            Logout\n                        </Button>\n                    )}\n                    onLogoutSuccess={this.onAuthSuccess}\n                />\n            </div>\n        );\n    }\n}\n","import React, { Component } from \"react\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\n\n/** Redux */\nimport { Dispatch } from \"redux\";\nimport { connect } from \"react-redux\";\nimport { IRootState } from \"../../store/types\";\nimport { IUpdateAuthAction, IRequestedLoginAuthAction, TAuthActions, IUpdateAuthState } from \"../../store/auth/types\";\nimport { UpdateAuth, RequestedLoginAuth, RequestedLogoutAuth } from \"../../store/auth/actions\";\n\n/** rest api */\nimport { RequestStatus } from \"../../utils/rest-api\";\n\n/** Components */\nimport { SocialAuthLoginButton } from \"./social-auth-login-button\";\nimport { SocialAuthLogoutButton } from \"./social-auth-logout-button\";\n\ninterface ISocialAuthButtonProps extends RouteComponentProps {\n    auth: IUpdateAuthState;\n    requestedLoginAuth: (socialAuthToken: string) => void;\n    requestedLogoutAuth: () => void;\n}\n\nclass SocialAuthButton extends Component<\n    ISocialAuthButtonProps\n> {\n    state = {\n        clientID: `732988498848-vuhd6g61bnlqe372i3l5pbpnerteu6na.apps.googleusercontent.com`,\n        code: ``,\n        redirectUri: `postmessage`,\n        apiBaseUrl: `http://localhost:8000/`,\n        apiLoginUrl: `login/social/`,\n        socialAuthProvider: `google-oauth2`,\n\n        userEmail: ``,\n        apiLoginToken: ``,\n        userFirstName: ``,\n        userLastName: ``,\n\n        objectID: ``\n    };\n\n    onSocialLoginSuccess = (googleOauthResponse: any) => {\n        console.log(\"Google Oauth2 res:\", googleOauthResponse);\n        this.setState(\n            {\n                code: googleOauthResponse.code\n            },\n            () => {\n                // this.apiLogin();\n                console.log(\"social button: request auth...\");\n                this.props.requestedLoginAuth(this.state.code);\n            }\n        );\n    };\n\n    onSocialLoginFailure = (error: any) => {\n        console.error(\"Social login failed:\", error);\n    };\n\n    onSocialLogoutSuccess = () => {\n        console.log(\"Social logout success, now our web app logout\");\n        this.props.requestedLogoutAuth();\n    };\n\n    render() {\n        return (\n            <div className=\"SocialAuth\">\n                auth requestStatus: {this.props.auth.requestStatus} <br></br>\n                {!this.props.auth.isLogin ? (\n                    <SocialAuthLoginButton\n                        clientID={this.state.clientID}\n                        onSuccess={this.onSocialLoginSuccess}\n                        onFailure={this.onSocialLoginFailure}\n                        disabled={this.props.auth.requestStatus === RequestStatus.REQUESTING}\n                    />\n                ) : (\n                    <SocialAuthLogoutButton\n                        isLocal={this.props.auth.isLocal}\n\n                        onClickWhenIsLocal={this.onSocialLogoutSuccess}\n                        onSuccess={this.onSocialLogoutSuccess}\n                        \n                        disabled={this.props.auth.requestStatus === RequestStatus.REQUESTING}\n                    />\n                )}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => {\n    return {\n        auth: store.auth\n    };\n};\n\nfunction mapDispatchToProps(dispatch: Dispatch<TAuthActions>) {\n    return {\n        requestedLoginAuth: (socialAuthToken: string) => {\n            dispatch(\n                RequestedLoginAuth(socialAuthToken)\n            );\n        },\n        requestedLogoutAuth: () => {\n            dispatch(\n                RequestedLogoutAuth()\n            );\n        }\n    };\n}\n\nexport const SocialAuthButtonContainer = withRouter(connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(SocialAuthButton));\n","import React from \"react\";\nimport { FormikValues } from \"formik\";\nimport { DataModelClass } from \"../../../store/data-model/base-model\";\nimport { FormInputField } from \"../form-input-field/form-input-field\";\n\nexport enum InputFieldType {\n    // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input\n    TEXT = \"text\",\n    PASSWORD = \"password\",\n    EMAIL = \"email\",\n    URL = \"url\",\n    DATE = \"date\"\n}\n\n// API for caller to new meta class\nexport interface IFieldBaseMetaProps {\n    fieldName: string\n    label: string;\n\n    isDynamic?: boolean;\n    dynamicLimit?: number;\n    getInstanceDataFromFormikValues?: (formikValues: FormikValues) => any // has to be optional since we want to let caller just use `fieldName` by default to access formik's values\n}\n\n// for form field props\nexport interface IFormBaseFieldProps extends IFieldBaseMetaProps {\n    model?: DataModelClass\n    formikValues?: FormikValues // for form field to load data (e.g. initial value) at a specific position in formik's `values`\n    // getInstanceDataFromFormikValues?: // when it's dynamic field, will use this to render dynamic fields\n}\n\n// for the base meta class\ninterface IFormBaseFieldMeta extends IFieldBaseMetaProps {\n    model?: DataModelClass\n    formField?: React.ComponentType<IFormBaseFieldProps>\n\n    getInstance: (values: FormikValues) => any // for form factory to loop over fieldmeta and obtain field's data instance\n    getInstanceDataFromFormikValues: (formikValues: FormikValues) => any // required because getInstance() depends on it\n}\n\nexport class FormBaseFieldMeta implements IFormBaseFieldMeta {\n    fieldName: string\n    label: string\n\n    model?: DataModelClass\n    formField: React.ComponentType<IFormBaseFieldProps>\n\n    isDynamic?: boolean;\n    dynamicLimit?: number;\n    getInstanceDataFromFormikValues: (formikValues: FormikValues) => any\n\n    constructor(props: IFieldBaseMetaProps) {\n        this.fieldName = props.fieldName;\n        this.label = props.label;\n\n        this.isDynamic = props.isDynamic;\n        this.dynamicLimit = props.dynamicLimit;\n\n        if (props.getInstanceDataFromFormikValues) {\n            this.getInstanceDataFromFormikValues = props.getInstanceDataFromFormikValues;\n        }\n        else {\n            this.getInstanceDataFromFormikValues = (values: FormikValues) => {\n                if (!(values && values[this.fieldName])) {\n                    alert(\"Oops! Something might go wrong. Info: at class FormBaseFieldMeta.\")\n                    console.error(\"values =\", values, \" this.fieldName =\", this.fieldName);\n                    return (this.isDynamic) ? [] : \"\";\n                }\n                else {\n                    if (this.isDynamic && !Array.isArray(values[this.fieldName])) {\n                        alert(\"Oops! Something might go wrong. Info: at class FormBaseFieldMeta.\")\n                        console.error(\"isDynamic=true, but the value is not an array:\");\n                        console.error(\"values =\", values, \" this.fieldName =\", this.fieldName);\n                    }\n                    return values[this.fieldName];\n                }\n            }\n        }\n\n        this.formField = FormInputField;\n    }\n\n    getInstance(values: FormikValues) {\n        const model = this.model;\n        if (model) {\n            if (this.isDynamic) {\n\n                return this.getInstanceDataFromFormikValues(values).map((instanceData: any) => new model(instanceData))\n            }\n            else {\n                return new model(values[this.fieldName]);\n            }\n        }\n\n        // assume field values are plain string/num or other basic types\n        return values[this.fieldName];\n    }\n}","import React, { Component } from \"react\";\nimport { withRouter, RouteComponentProps, Redirect } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch, AnyAction } from \"redux\";\nimport { IRootState } from \"../../store/types\";\nimport { IUpdateAuthState } from \"../../store/auth/types\";\nimport { SuccessLoginAuth } from \"../../store/auth/actions\";\nimport { CompanyActions, Company } from \"../../store/data-model/company\";\nimport {\n    ApplicationActions,\n    Application\n} from \"../../store/data-model/application\";\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\n\n/** Components */\nimport { SocialAuthButtonContainer } from \"../../components/social-auth/social-auth-button\";\n// form\nimport {\n    FormFactory,\n    FormActionButtonProps,\n    IFormFactoryProps,\n    ActionButtonType\n} from \"../../components/form-factory/form-factory\";\nimport { FormInputFieldMeta } from \"../../components/form-factory/form-input-field/form-input-field-meta\";\nimport { InputFieldType } from \"../../components/form-factory/form-base-field/form-base-field-meta\";\nimport { ErrorMessage, FormikValues, FormikErrors } from \"formik\";\n    import { LoginForm } from \"../../components/social-auth/login-form\";\n// api\nimport { AuthenticationService } from \"../../utils/auth\";\nimport { RestApiService } from \"../../utils/rest-api\";\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n\n\nlet styles = {\n    backgroundColor: \"purple\",\n    color: \"white\"\n};\n\ninterface ILandingPageProps extends RouteComponentProps {\n    auth: IUpdateAuthState;\n\n    /** redux */\n    registerLocalLoginSuccess: (userName: string, apiToken: string, avatarUrl: string) => void;\n    listApplication: () => void\n    listCompany: () => void\n}\n\nclass LandingPage extends Component<ILandingPageProps> {\n    formFactoryProps: any;\n\n    constructor(props: ILandingPageProps) {\n        super(props);\n    }\n\n    onStaffLoginClick = () => {\n        // request com & app list (dispatch)\n        // this.props.listApplication();\n        // this.props.listCompany();\n        this.props.history.push(\"/login/\");\n    }\n\n    render() {\n        return (\n            <div className=\"LandingPage\" style={styles}>\n                {/** redirect logged in user to private routes */\n                this.props.auth.isLogin && <Redirect to=\"/home/\" />}\n                \n                <h1>Appl Tracky</h1>\n\n                <SocialAuthButtonContainer />\n\n                <Button\n                    onClick={this.onStaffLoginClick}\n                    unelevated\n                    icon={\n                        <MaterialIcon hasRipple icon=\"warning\" />\n                    }\n                >\n                    Staff Only\n                </Button>\n\n                <hr />\n                \n                <Button\n                    href=\"https://github.com/rivernews/appl-tracky-spa\"\n                    target=\"_blank\"\n                    unelevated\n                    icon={\n                        <MaterialIcon hasRipple icon=\"code\" />\n                    }\n                >\n                    Github Repository\n                </Button>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: IRootState) => ({\n    auth: state.auth\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>) => {\n    // actionName = (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {\n        registerLocalLoginSuccess: (userName: string, apiToken: string, avatarUrl: string) =>\n            dispatch(SuccessLoginAuth(userName, \"\", apiToken, avatarUrl, true)),\n        listApplication: () =>\n            dispatch(\n                ApplicationActions[CrudType.LIST][\n                    RequestStatus.TRIGGERED\n                ].action(new Application({}))\n            ),\n        listCompany: () =>\n            dispatch(\n                CompanyActions[CrudType.LIST][\n                    RequestStatus.TRIGGERED\n                ].action(new Company({}))\n            )\n    };\n};\n\nexport const LandingPageContainer = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(LandingPage)\n);\n","import React, { Component } from \"react\";\n\n/** Components */\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\n// mdc-react input\nimport \"@material/react-text-field/dist/text-field.css\";\nimport TextField, { Input } from \"@material/react-text-field\";\n// formik\nimport {\n    Field, FieldProps,\n    ErrorMessage,\n} from \"formik\";\n// input field\nimport { IFormInputFieldProps } from \"./form-input-field-meta\";\nimport { InputFieldType } from \"../form-base-field/form-base-field-meta\";\n\nexport class FormInputField extends Component<IFormInputFieldProps> {\n    render() {\n        return (\n            <div className=\"FormInputField\">\n                <Field\n                    name={this.props.fieldName}\n                    render={({ field, form }: FieldProps<number | string>) => (\n                        <TextField\n                            label={this.props.label}\n                            onTrailingIconSelect={this.props.onTrailingIconSelect}\n                            trailingIcon={this.props.onTrailingIconSelect && <MaterialIcon role=\"button\" icon=\"clear\" />}\n                        >\n                            <Input\n                                type={this.props.type || InputFieldType.TEXT}\n                                inputType=\"input\"\n                                {...field}\n                            />\n                        </TextField>\n                    )}\n                />\n                <ErrorMessage name={this.props.fieldName} />\n            </div>\n        );\n    }\n}","import React, { Component } from \"react\";\n\n/** Components */\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n// data model\nimport { DataModelClass, DataModelInstance, BaseModel } from \"../../store/data-model/base-model\";\n// formik\nimport {\n    Formik,\n    Form,\n    FormikValues,\n    FormikErrors,\n    FormikTouched\n} from \"formik\";\n// yup\nimport * as Yup from 'yup';\n// base field\nimport { FormBaseFieldMeta } from \"./form-base-field/form-base-field-meta\";\n\nexport enum ActionButtonType {\n    SUBMIT = \"submit\",\n    BUTTON = \"button\"\n}\n\nexport class FormActionButtonProps {\n    constructor(\n        public text: string = \"\",\n        public onClick?: (event: any) => void,\n        public type?: ActionButtonType\n    ) { }\n}\n\nexport interface IFormFactoryProps<IDataModel> {\n    onSubmitSuccess?: () => void;\n\n    // pass in either `initialValues` or `initialInstance`, this is important for yup to render error message. If no initial info at all, yup will not display errors properly.\n    // `initialValues` should be used only for customize form; for data model forms please use `initialInstance` so update & create form can be handled together\n    initialValues?: any\n    initialInstance?: DataModelInstance<IDataModel>;\n    enforcedInstanceData?: any;\n\n    model?: DataModelClass;\n    actionButtonPropsList: Array<FormActionButtonProps>;\n    formFieldPropsList: Array<FormBaseFieldMeta>\n    \n    validationSchema?: Yup.Schema<IDataModel>\n\n    onSubmit?: (\n        values: FormikValues,\n        { setSubmitting }: { setSubmitting: Function }\n    ) => void;\n    \n    createInstanceTriggerAction?: (\n        instance: IDataModel,\n        successCallback?: Function,\n        finalCallback?: Function,\n    ) => void;\n    updateInstanceTriggerAction?: (\n        instance: IDataModel,\n        successCallback?: Function,\n        finalCallback?: Function,\n    ) => void;\n}\n\nexport class FormFactory<DataModel> extends Component<\n    IFormFactoryProps<DataModel>\n    > {\n\n    initialInstance?: DataModelInstance<any>;\n    validationSchema?: Yup.Schema<DataModel>;\n\n    constructor(props: IFormFactoryProps<DataModel>) {\n        super(props);\n\n        // guarantee this.initialInstance\n        if (this.props.model && !this.props.initialInstance) {\n            // for create form\n            const model = this.props.model;\n            this.initialInstance = new model({});\n        }\n        else {\n            // for update form\n            this.initialInstance = this.props.initialInstance;\n        }\n\n        // form behavior integrity check\n        if (!this.initialInstance) {\n            if (!this.props.initialValues || !this.props.onSubmit) {\n                throw Error(\"ERROR: form factory has no initialInstance - seems like you're building a custom form that does not use data model. Please pass in initialValues and onSubmit in props to handle the behavior manually.\");\n            }\n        }\n\n        this.validationSchema = this.props.validationSchema || this.props.model.schema;\n        console.log(\"this.validationSchema =\", this.validationSchema);\n    }\n\n    onSubmit = (\n        values: FormikValues,\n        { setSubmitting }: { setSubmitting: Function }\n    ) => {\n        console.log(\"submit values =\", values); setSubmitting(false);\n\n        setSubmitting(true);\n        let instanceData: any = {};\n        for (let fieldProps of this.props.formFieldPropsList) {\n            const keyName = fieldProps.fieldName;\n            instanceData[keyName] = fieldProps.getInstance(values);\n        }\n\n        // packaging\n        const model = this.props.model;\n        if (\n            model && this.props.createInstanceTriggerAction && this.props.updateInstanceTriggerAction &&\n            this.initialInstance\n        ) {\n            // a create / update form is assumed\n\n            const instance = new model({\n                uuid: this.initialInstance.uuid,\n                ...instanceData,\n                ...this.props.enforcedInstanceData\n            })\n            console.log(\"instanceData =\", instanceData);\n            console.log(\"instance =\", instance);\n\n            // dispatch API request\n            if (!instance.uuid) {\n                console.log(\"ready to send create instance\");\n                this.props.createInstanceTriggerAction(instance, this.props.onSubmitSuccess, () => setSubmitting(false));\n            } else {\n                console.log(\"ready to send update instance\");\n                this.props.updateInstanceTriggerAction(instance, this.props.onSubmitSuccess, () => setSubmitting(false));\n            }\n        }\n        else if (this.props.onSubmit) {\n            // if caller has customize onSubmit, then use it instead\n            this.props.onSubmit(values, { setSubmitting });\n        }\n        else {\n            console.log(\"this.props.initialInstance =\", this.props.initialInstance);\n            console.log(\"this.props.onSubmit =\", this.props.onSubmit);\n            console.log(\"this.props.model =\", this.props.model);\n            alert(\"Something is wrong with the form...!\")\n            throw Error(\"ERROR: form factory props not properly configured. See above props.\")\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"FormFactory\">\n                <Formik\n                    initialValues={this.initialInstance || this.props.initialValues}\n                    validationSchema={this.validationSchema}\n                    onSubmit={this.onSubmit}\n                >\n                    {({\n                        values,\n                        isSubmitting\n                    }: {\n                        values: FormikValues,\n                        touched: FormikTouched<FormikValues>,\n                        [props: string]: any\n                    }) => (\n                            <Form>\n                                {this.props.formFieldPropsList.map((formFieldMeta: FormBaseFieldMeta, index: number) => (\n                                    <formFieldMeta.formField \n                                        key={index}\n                                        {...formFieldMeta}\n                                        formikValues={values}\n                                    />\n                                ) )}\n                                {this.props.actionButtonPropsList.map(\n                                    (actionButtonProps: FormActionButtonProps, index) => (\n                                        <Button\n                                            key={index}\n                                            type={actionButtonProps.type || ActionButtonType.BUTTON}\n                                            disabled={isSubmitting}\n                                            unelevated\n                                            onClick={actionButtonProps.onClick}\n                                            children={actionButtonProps.text}\n                                        />\n                                    )\n                                )}\n                            </Form>\n                        )}\n                </Formik>\n            </div>\n        );\n    }\n}\n","// base field\nimport { InputFieldType, FormBaseFieldMeta, IFormBaseFieldProps, IFieldBaseMetaProps } from \"../form-base-field/form-base-field-meta\";\n// input field\nimport { FormInputField } from \"./form-input-field\";\n\n\n// API for caller to new props for input field\nexport interface IFormInputFieldProps extends IFormBaseFieldProps {\n    type?: InputFieldType\n    onTrailingIconSelect?: () => void\n}\n\n// for defining meta\nexport interface IFormInputFieldMetaProps extends IFieldBaseMetaProps {\n    type?: InputFieldType\n    onTrailingIconSelect?: () => void\n}\n\nexport class FormInputFieldMeta extends FormBaseFieldMeta {\n    type?: InputFieldType\n    onTrailingIconSelect?: () => void\n\n    constructor({\n        type,\n        onTrailingIconSelect,\n        ...props\n    }: IFormInputFieldMetaProps) {\n        super(props)\n        this.type = type;\n        this.onTrailingIconSelect = onTrailingIconSelect;\n\n        this.formField = FormInputField;\n    }\n}","import React from \"react\";\n\nimport { FormikValues } from \"formik\";\nimport { RestApiService } from \"../../utils/rest-api\";\nimport { AuthenticationService } from \"../../utils/auth\";\nimport { FormBaseFieldMeta, InputFieldType } from \"../form-factory/form-base-field/form-base-field-meta\";\nimport { FormInputFieldMeta } from \"../form-factory/form-input-field/form-input-field-meta\";\nimport { FormActionButtonProps, ActionButtonType, FormFactory } from \"../form-factory/form-factory\";\n// yup\nimport * as Yup from 'yup';\n\ninterface ILoginFormProps {\n    registerLoginSuccess: (userName: string, apiToken: string, avatarUrl: string) => void;\n    onLoginSuccess: () => void\n    onCancel: () => void\n}\n\nexport const LoginForm = (props: ILoginFormProps) => {\n\n    const formFieldPropsList: Array<FormBaseFieldMeta> = [\n        new FormInputFieldMeta({\n            fieldName: \"username\",\n            label: \"Username\"\n        }),\n        new FormInputFieldMeta({\n            fieldName: \"password\",\n            label: \"Password\",\n            type: InputFieldType.PASSWORD\n        }),\n    ];\n    const actionButtonPropsList: Array<FormActionButtonProps> = [\n        new FormActionButtonProps(\"Login\", undefined, ActionButtonType.SUBMIT),\n        new FormActionButtonProps(\"Cancel\", props.onCancel)\n    ];\n\n    const onSubmitLoginForm = async (\n        values: FormikValues,\n        { setSubmitting }: { setSubmitting: Function }\n    ) => {\n        setSubmitting(false);\n        console.log(\"values =\", values);\n\n        try {\n            // post to get login token\n            const res = await fetch(`${RestApiService.state.apiBaseUrl}api-token-auth/`, {\n                method: \"POST\",\n                mode: \"cors\",\n                credentials: \"omit\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify(values)\n            });\n\n            if (!res.ok) {\n                console.log(\"INFO: server res =\", res);\n                throw Error(res.statusText)\n            }\n\n            const parsedJsonResponse = await res.json();\n            // set login token\n            AuthenticationService.state.apiLoginToken = parsedJsonResponse.token;\n            // set redux auth store isLogin state --- have to write action and reducer.\n            props.registerLoginSuccess(values.username, parsedJsonResponse.token, parsedJsonResponse.avatar_url);\n\n            props.onLoginSuccess();\n        }\n        catch (err) {\n            alert(\"Oops! Wrong username or password.\");\n            console.error(\"ERROR: login failed. See error message:\");\n            console.error(err);\n        }\n    };\n\n    // validation\n    const loginFormInitialValues = {\n        username: \"\",\n        password: \"\"\n    }\n    type ILoginFormShape = typeof loginFormInitialValues;\n    const validationSchema: Yup.Schema<ILoginFormShape> = Yup.object<ILoginFormShape>().shape({\n        username: Yup.string().required(\"Forgot to type username...?\"),\n        password: Yup.string().required(\"Password please...!\")\n    })\n\n\n    return (\n        <div className=\"loginForm\">\n            <FormFactory\n                initialValues={loginFormInitialValues}\n    \n                formFieldPropsList={formFieldPropsList}\n                actionButtonPropsList={actionButtonPropsList}\n\n                validationSchema={validationSchema}\n    \n                onSubmit={onSubmitLoginForm}\n            />\n        </div>\n    )\n}","import React, { Component } from \"react\";\nimport { withRouter, RouteComponentProps, Redirect } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch, AnyAction } from \"redux\";\nimport { IRootState } from \"../../store/types\";\nimport { IUpdateAuthState } from \"../../store/auth/types\";\nimport { SuccessLoginAuth } from \"../../store/auth/actions\";\nimport { CompanyActions, Company } from \"../../store/data-model/company\";\nimport {\n    ApplicationActions,\n    Application\n} from \"../../store/data-model/application\";\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\n\n/** Components */\nimport { SocialAuthButtonContainer } from \"../../components/social-auth/social-auth-button\";\n// form\nimport {\n    FormFactory,\n    FormActionButtonProps,\n    IFormFactoryProps,\n    ActionButtonType\n} from \"../../components/form-factory/form-factory\";\nimport { FormInputFieldMeta } from \"../../components/form-factory/form-input-field/form-input-field-meta\";\nimport { InputFieldType } from \"../../components/form-factory/form-base-field/form-base-field-meta\";\nimport { ErrorMessage, FormikValues, FormikErrors } from \"formik\";\n    import { LoginForm } from \"../../components/social-auth/login-form\";\n// api\nimport { AuthenticationService } from \"../../utils/auth\";\nimport { RestApiService } from \"../../utils/rest-api\";\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n/** Components */\n\ninterface ILocalLoginPageProps extends RouteComponentProps {\n\n\n    /** redux */\n    auth: IUpdateAuthState;\n    registerLocalLoginSuccess: (userName: string, apiToken: string, avatarUrl: string) => void;\n    listApplication: () => void\n    listCompany: () => void\n}\n\nclass LocalLoginPage extends Component<ILocalLoginPageProps> {\n\n    onLoginFormCancel = () => {\n        this.props.history.push(\"/\");\n    }\n\n    onLoginSuccess = () => {\n        // request com & app list (dispatch)\n        this.props.listApplication();\n        this.props.listCompany();\n    }\n\n    render() {\n        return (\n            <div className=\"LocalLoginPage\">\n                {/** redirect logged in user to private routes */\n                this.props.auth.isLogin && <Redirect to=\"/home/\" />}\n\n                <h1>Login Portal for Staff</h1>\n                <LoginForm \n                    registerLoginSuccess={this.props.registerLocalLoginSuccess}\n                    onLoginSuccess={this.onLoginSuccess}\n                    onCancel={this.onLoginFormCancel}\n                />\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    auth: store.auth\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>) => {\n    // actionName: (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {\n        registerLocalLoginSuccess: (userName: string, apiToken: string, avatarUrl: string) =>\n            dispatch(SuccessLoginAuth(userName, \"\", apiToken, avatarUrl, true)),\n        listApplication: () =>\n            dispatch(\n                ApplicationActions[CrudType.LIST][\n                    RequestStatus.TRIGGERED\n                ].action(new Application({}))\n            ),\n        listCompany: () =>\n            dispatch(\n                CompanyActions[CrudType.LIST][\n                    RequestStatus.TRIGGERED\n                ].action(new Company({}))\n            )\n    }\n};\n\nexport const LocalLoginPageContainer = withRouter(connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(LocalLoginPage));\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\n\n/** Redux */\nimport { Company } from \"../../store/data-model/company\";\n\n/** Components */\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc-react icon button\nimport '@material/react-icon-button/dist/icon-button.css';\nimport IconButton from '@material/react-icon-button';\n\ninterface ICompanyComponentProps {\n    company: Company;\n    onDeleteIconClicked?: (event: any) => void\n    onEditIconClicked?: (event: any) => void\n}\n\nexport class CompanyComponent extends Component<ICompanyComponentProps> {\n    render() {\n        const company = this.props.company;\n        return (\n            <div className=\"CompanyComponent\">\n                <p>\n                    <Link to={`/com-app/${company.uuid}/`}>\n                        {company.name}\n                    </Link>\n                    <IconButton onClick={this.props.onEditIconClicked}>\n                        <MaterialIcon hasRipple icon=\"edit\" />\n                    </IconButton>\n                    <IconButton onClick={this.props.onDeleteIconClicked}>\n                        <MaterialIcon hasRipple icon=\"delete\" />\n                    </IconButton>\n\n                    <br />\n\n                    {(company.hq_location.full_address) && <span>\n                        <strong>{company.hq_location.place_name || \"Location\"}:</strong> {company.hq_location.full_address}\n                    </span>}\n\n                    <br />\n                    \n                    {(company.home_page.url) && <span>\n                        <strong>Company Website: </strong>\n                        {(company.home_page.url) && <a target=\"_blank\" href={\n                            (company.home_page.url && company.home_page.url.includes(\"//\")) ?\n                                company.home_page.url :\n                                `//${company.home_page.url}`\n                        }>\n                            {company.home_page.text || \"Link\"}\n                        </a>}\n                    </span>}\n                    \n                    <br />\n                </p>\n            </div>\n        );\n    }\n}\n","import { RestApiReduxFactory } from \"../rest-api-redux-factory\";\nimport { BaseModel, IBaseModelProps, IRelationship } from \"./base-model\";\nimport { ApplicationStatusLink } from \"./application-status-link\";\nimport * as Yup from \"yup\";\n\ninterface IApplicationStatusProps {\n    text?: string;\n    application?: IRelationship;\n    applicationstatuslink_set?: Array<ApplicationStatusLink>\n    date?: string;\n    order?: number\n}\n\nexport class ApplicationStatus extends BaseModel {\n    public text: string;\n    public application: IRelationship;\n    // public applicationstatuslink_set: Array<ApplicationStatusLink>\n    public applicationstatuslink_set: Array<ApplicationStatusLink>\n    public date: string;\n    public order: number;\n\n    constructor({\n        text = \"\",\n        application = \"\",\n        // applicationstatuslink_set = [],\n        applicationstatuslink_set = [],\n        date = ApplicationStatus.utcNowDateString(),\n        order = 0,\n        ...args\n    }: IApplicationStatusProps & IBaseModelProps) {\n        super(args);\n        this.text = text;\n        this.application = application;\n        this.applicationstatuslink_set = applicationstatuslink_set;\n        this.date = date;\n        this.order = order;\n    }\n\n    static schema(){\n        return Yup.object<ApplicationStatus>().shape({\n            text: Yup.string().required(\"Give a quick one or two words for the status\").max(50, \"No more than 50 characters\"),\n            date: Yup.string().matches(/\\d{4}-0{0,1}\\d{1}-\\d{2}/),\n            order: Yup.number()\n        });\n    }\n\n    static utcNowDateString() {\n        const now = new Date();\n        const utcNow = new Date(Date.UTC(now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate() ));\n        const utcNowTimeString = utcNow.toISOString().split(\"T\")[0]\n        return utcNowTimeString;\n    }\n}\n\nconst initialApplicationStatusInstance = new ApplicationStatus({});\nconst ApplicationStatusRestApiRedux = RestApiReduxFactory<ApplicationStatus>(\n    \"application-statuses\",\n    initialApplicationStatusInstance\n);\nexport const ApplicationStatusActions = ApplicationStatusRestApiRedux.actions;\nexport const ApplicationStatusReducer = ApplicationStatusRestApiRedux.storeReducer;\nexport const ApplicationStatusSagas = ApplicationStatusRestApiRedux.sagas;\n","import { RestApiReduxFactory } from \"../rest-api-redux-factory\";\nimport { BaseModel, IBaseModelProps, IRelationship } from \"./base-model\";\nimport { Link } from \"./link\";\n\ninterface IApplicationStatusLinkProps {\n    application_status?: IRelationship;\n    link?: Link;\n}\n\nexport class ApplicationStatusLink extends BaseModel {\n    public application_status: IRelationship;\n    public link: Link;\n\n    constructor({\n        application_status = \"\",\n        link = new Link({}),\n        ...args\n    }: IApplicationStatusLinkProps & IBaseModelProps) {\n        super(args);\n        this.application_status = application_status;\n        this.link = link;\n    }\n}","import React from \"react\";\n\n/** Components */\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n// mdc-react icon button\nimport '@material/react-icon-button/dist/icon-button.css';\nimport IconButton from '@material/react-icon-button';\n// data model\nimport { DataModelClass } from \"../../../store/data-model/base-model\";\n// formik\nimport {\n    FieldArray,\n    ArrayHelpers,\n} from \"formik\";\n// base field\nimport { IFormBaseFieldProps } from \"./form-base-field-meta\";\n\ninterface IFormBaseDyanmicFieldControllsProps {\n    index: number\n    formikArrayHelpers: ArrayHelpers\n}\n\nconst FormBaseDynamicFieldControlls = (props: IFormBaseDyanmicFieldControllsProps) => {\n\n    const deleteField = () => {\n        props.formikArrayHelpers.remove(props.index);\n    }\n\n    return (\n        <div className=\"FormBaseDynamicFieldControlls\">\n            <IconButton onClick={deleteField}>\n                <MaterialIcon hasRipple icon=\"delete\" />\n            </IconButton>\n        </div>\n    )\n}\n\nconst BaseDynamicFieldAddButton = (props: {\n    formikArrayHelpers: ArrayHelpers\n    model?: DataModelClass\n    label: string\n}) => {\n\n    const onAddClick = () => {\n        if (props.model) {\n            const model = props.model;\n            props.formikArrayHelpers.push(new model({}));\n        } else {\n            props.formikArrayHelpers.push({});\n        }\n    }\n\n    return (\n        <Button type=\"button\" onClick={onAddClick} children={`New ${props.label}`} />\n    )\n}\n\nexport const withFormBaseField = (FormFieldComponent: React.ComponentType<IFormBaseFieldProps>) => (props: IFormBaseFieldProps) => {\n\n    if (props.isDynamic && !props.formikValues) {\n        alert(\"Oops! Something's wrong.\");\n        throw Error(\"When `isDynamic` is true, you need to pass over `formikValues`.\");\n    }\n\n    const formikValues = props.formikValues;\n    const getInstanceDataFromFormikValues = props.getInstanceDataFromFormikValues;\n\n    return (\n        (props.isDynamic && getInstanceDataFromFormikValues && formikValues) ?\n            (<FieldArray\n                name={props.fieldName}\n                render={formikArrayHelpers => (\n                    <div className=\"FormApplicationStatusLinkFieldsContainer\">\n                        {getInstanceDataFromFormikValues(formikValues).map((instanceData: any, index: number) => (\n                            <div key={index} className=\"FormBaseDynamicField\">\n                                <FormFieldComponent\n                                    fieldName={`${props.fieldName}[${index}]`}\n                                    label={`${props.label} ${index}`}\n                                    formikValues={props.formikValues}\n                                    getInstanceDataFromFormikValues={props.getInstanceDataFromFormikValues}\n                                />\n                                <FormBaseDynamicFieldControlls\n                                    index={index}\n                                    formikArrayHelpers={formikArrayHelpers}\n                                />\n                            </div>\n                        ))}\n\n                        <BaseDynamicFieldAddButton\n                            formikArrayHelpers={formikArrayHelpers}\n                            label={props.label}\n                            model={props.model}\n                        />\n                    </div>\n                )}\n            />)\n            :\n            (<FormFieldComponent\n                fieldName={props.fieldName}\n                label={props.label}\n                formikValues={props.formikValues}\n                getInstanceDataFromFormikValues={props.getInstanceDataFromFormikValues}\n            />)\n    )\n}","/** Components */\n// base field\nimport { withFormBaseField } from \"../form-base-field/form-base-field\";\n// link field\nimport { FormLinkFieldComponent } from \"./form-link-field-component\";\n\nexport const FormLinkField = withFormBaseField(FormLinkFieldComponent);\n","import React, { Component } from \"react\";\n\n/** Components */\n// mdc-react input\nimport \"@material/react-text-field/dist/text-field.css\";\n\nimport { FormInputFieldMeta } from \"../form-input-field/form-input-field-meta\";\nimport { FormInputField } from \"../form-input-field/form-input-field\";\nimport { IFormBaseFieldProps } from \"../form-base-field/form-base-field-meta\";\n\nexport interface IFormLinkFieldComponentProps extends IFormBaseFieldProps {\n}\n\nexport class FormLinkFieldComponent extends Component<IFormLinkFieldComponentProps> {\n\n    textInputFieldMeta: FormInputFieldMeta;\n    urlInputFieldMeta: FormInputFieldMeta;\n\n    constructor(props: IFormLinkFieldComponentProps) {\n        super(props)\n\n        this.textInputFieldMeta = new FormInputFieldMeta({\n            fieldName: `${this.props.fieldName}.text`,\n            label: \"Description\"\n        });\n        this.urlInputFieldMeta = new FormInputFieldMeta({\n            fieldName: `${this.props.fieldName}.url`,\n            label: \"Link url\"\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"FormLinkField\">\n                {this.props.label && <h4>{this.props.label}</h4>}\n                <FormInputField\n                    {...this.textInputFieldMeta}\n                />\n\n                <FormInputField\n                    {...this.urlInputFieldMeta}\n                />\n            </div>\n        );\n    }\n}","// data model\nimport { Link } from \"../../../store/data-model/link\";\n\n/** Components */\n// base field\nimport { IFieldBaseMetaProps, FormBaseFieldMeta } from \"../form-base-field/form-base-field-meta\";\nimport { FormLinkField } from \"./form-link-field\";\n\nexport class FormLinkFieldMeta extends FormBaseFieldMeta {\n\n    constructor(props: IFieldBaseMetaProps) {\n        super(props)\n        this.model = Link;\n        this.formField = FormLinkField;\n    }\n}\n","/** Components */\n// link field\nimport { FormApplicationStatusLinkFieldComponent } from \"./form-application-status-link-field-component\";\n// base dynamic field\nimport { withFormBaseField } from \"../form-base-field/form-base-field\";\n\nexport const FormApplicationStatusLinkField = withFormBaseField(FormApplicationStatusLinkFieldComponent);","import React, { Component } from \"react\";\n\n/** Components */\n// mdc-react input\nimport \"@material/react-text-field/dist/text-field.css\";\n// link form\nimport { FormLinkFieldMeta } from \"../form-link-field/form-link-field-meta\";\nimport { FormLinkField } from \"../form-link-field/form-link-field\";\nimport { IFormBaseFieldProps } from \"../form-base-field/form-base-field-meta\";\n\nexport interface IFormApplicationStatusLinkFieldComponentProps extends IFormBaseFieldProps {\n}\n\nexport class FormApplicationStatusLinkFieldComponent extends Component<IFormApplicationStatusLinkFieldComponentProps> {\n\n    linkFieldProps: FormLinkFieldMeta;\n\n    constructor(props: IFormApplicationStatusLinkFieldComponentProps) {\n        super(props)\n\n        this.linkFieldProps = new FormLinkFieldMeta({\n            fieldName: `${this.props.fieldName}.link`,\n            label: ``,\n            isDynamic: false, // Link is a one-to-one field in application status link model\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"FormApplicationStatusLinkField\">\n                {this.props.label && <h4>{this.props.label}</h4>}\n                <FormLinkField\n                    {...this.linkFieldProps}\n                    formikValues={this.props.formikValues}\n                    getInstanceDataFromFormikValues={this.props.getInstanceDataFromFormikValues}\n                />\n            </div>\n        );\n    }\n}","// data model\nimport { ApplicationStatusLink } from \"../../../store/data-model/application-status-link\";\n\n/** Components */\nimport { FormBaseFieldMeta, IFieldBaseMetaProps } from \"../form-base-field/form-base-field-meta\";\nimport { FormApplicationStatusLinkField } from \"./form-application-status-link-field\";\n\nexport class FormApplicationStatusLinkFieldMeta extends FormBaseFieldMeta {\n\n    constructor(props: IFieldBaseMetaProps) {\n        super(props)\n        this.model = ApplicationStatusLink;\n        this.formField = FormApplicationStatusLinkField;\n    }\n}\n","import React, { Component } from \"react\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\nimport { IObjectStore, IObjectAction } from \"../../store/rest-api-redux-factory\";\n// data models\nimport {\n    ApplicationStatus,\n    ApplicationStatusActions\n} from \"../../store/data-model/application-status\";\nimport {\n    ApplicationStatusLink,\n} from \"../../store/data-model/application-status-link\";\nimport { Application } from \"../../store/data-model/application\";\n\n/** Rest API */\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\n\n/** Components */\nimport {\n    FormFactory,\n    FormActionButtonProps,\n    IFormFactoryProps,\n    ActionButtonType\n} from \"../form-factory/form-factory\";\nimport {FormInputFieldMeta } from \"../form-factory/form-input-field/form-input-field-meta\";\nimport { InputFieldType, FormBaseFieldMeta } from \"../form-factory/form-base-field/form-base-field-meta\";\n// form fields\nimport { FormApplicationStatusLinkFieldMeta } from \"../form-factory/form-application-status-link-field/form-application-status-link-field-meta\";\n\ninterface IApplicationStatusFormComponentProps extends RouteComponentProps {\n    applicationStatus?: ApplicationStatus; // for update form\n    onSubmitSuccess?: () => void;\n    onCancel: () => void;\n\n    /** redux */\n    application: Application;\n    applicationStatusStore: IObjectStore<ApplicationStatus>\n    createApplicationStatus: (\n        applicationStatusFormData: ApplicationStatus,\n        successCallback?: Function,\n        finalCallback?: Function,\n    ) => void;\n    updateApplicationStatus: (\n        applicationStatusFormData: ApplicationStatus,\n        successCallback?: Function,\n        finalCallback?: Function,\n    ) => void;\n}\n\nclass ApplicationStatusFormComponent extends Component<\n    IApplicationStatusFormComponentProps\n> {\n    formFieldPropsList: Array<FormBaseFieldMeta>;\n    actionButtonPropsList: Array<FormActionButtonProps>;\n\n    constructor(props: IApplicationStatusFormComponentProps) {\n        super(props);\n\n        this.formFieldPropsList = [\n            new FormInputFieldMeta({\n                fieldName: \"text\",\n                label: \"Status*\",\n            }),\n            new FormInputFieldMeta({\n                fieldName: \"date\",\n                label: \"Date\",\n                type: InputFieldType.DATE\n            }),\n            new FormApplicationStatusLinkFieldMeta({\n                fieldName: `applicationstatuslink_set`,\n                label: `Status Link`,\n                isDynamic: true,\n            }),\n        ];\n\n        this.actionButtonPropsList = [\n            new FormActionButtonProps(\n                this.props.applicationStatus ?\n                \"Save Status\":\n                \"Create Status\",\n                undefined,\n                ActionButtonType.SUBMIT\n            ),\n            new FormActionButtonProps(\"Cancel\", this.props.onCancel)\n        ];\n    }\n\n    render() {\n        return (\n            <div className=\"ApplicationStatusFormComponent\">\n                <FormFactory\n                    model={ApplicationStatus}\n                    initialInstance={new ApplicationStatus({\n                        ...this.props.applicationStatus,\n                    })}\n                    enforcedInstanceData={{\n                        application: this.props.application.uuid\n                    }}\n        \n                    formFieldPropsList={this.formFieldPropsList}\n                    actionButtonPropsList={this.actionButtonPropsList}\n        \n                    createInstanceTriggerAction={this.props.createApplicationStatus}\n                    updateInstanceTriggerAction={this.props.updateApplicationStatus}\n\n                    onSubmitSuccess={this.props.onSubmitSuccess}\n                />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    // prop: store.prop\n    applicationStatusStore: store.applicationStatus\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<ApplicationStatus> | IObjectAction<ApplicationStatusLink>>) => {\n    // actionName: (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {\n        createApplicationStatus: (\n            applicationStatusFormData: ApplicationStatus,\n            successCallback?: Function,\n            failureCallback?: Function,\n        ) =>\n            dispatch(\n                ApplicationStatusActions[CrudType.CREATE][\n                    RequestStatus.TRIGGERED\n                ].action(applicationStatusFormData, successCallback, undefined, failureCallback)\n            )\n        ,\n        updateApplicationStatus: (\n            applicationStatusFormData: ApplicationStatus,\n            successCallback?: Function,\n            failureCallback?: Function,\n        ) =>\n            dispatch(\n                ApplicationStatusActions[CrudType.UPDATE][\n                    RequestStatus.TRIGGERED\n                ].action(applicationStatusFormData, successCallback, undefined, failureCallback)\n            )\n        ,\n    };\n};\n\nexport const ApplicationStatusFormComponentContainer = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(ApplicationStatusFormComponent)\n);\n","import React, { Component } from \"react\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\nimport {\n    IObjectAction,\n} from \"../../store/rest-api-redux-factory\";\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\n\n/** data model */\nimport {\n    ApplicationStatus,\n    ApplicationStatusActions\n} from \"../../store/data-model/application-status\";\nimport { Application } from \"../../store/data-model/application\";\n\n/** Components */\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc-react icon button\nimport \"@material/react-icon-button/dist/icon-button.css\";\nimport IconButton from \"@material/react-icon-button\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\nimport { ApplicationStatusFormComponentContainer } from \"./application-status-form-component\";\n\ninterface IApplicationStatusComponentProps extends RouteComponentProps {\n    applicationStatus?: ApplicationStatus;\n    application?: Application; // needed by form\n    isOnlyForm?: boolean; // needed by add-button\n    deleteApplicationStatus: (\n        applicationStatusToDelete: ApplicationStatus,\n        callback?: Function\n    ) => void;\n}\n\ninterface IApplicationStatusComponentState {\n    isFormOpened: boolean;\n}\n\nclass ApplicationStatusComponent extends Component<\n    IApplicationStatusComponentProps,\n    IApplicationStatusComponentState\n> {\n    state = {\n        isFormOpened: false\n    };\n\n    render() {\n        return (\n            <div className=\"ApplicationStatusComponent\">\n                {(this.state.isFormOpened || this.props.isOnlyForm) && this.props.application ? (\n                    this.renderFormController(\n                        this.props.application,\n                        this.props.applicationStatus\n                    )\n                ) : this.props.applicationStatus ? (\n                    this.renderDisplay(this.props.applicationStatus)\n                ) : (\n                    <span>\n                        Nothing to render: no application status provided so\n                        cannot display; no application provided so form for\n                        create/update are not allowed.\n                    </span>\n                )}\n            </div>\n        );\n    }\n\n    renderDisplay = (applicationStatus: ApplicationStatus) => {\n        return (\n            <div className=\"ApplicationStatusComponent\">\n                <p>\n                    <span>Status: {applicationStatus.text}</span>\n                    <IconButton\n                        onClick={() => {\n                            console.log(\"application status component: edit button clicked.\")\n                            this.setState({isFormOpened: true});\n                        }}\n                    >\n                        <MaterialIcon hasRipple icon=\"edit\" />\n                    </IconButton>\n                    <IconButton\n                        onClick={() =>\n                            this.props.deleteApplicationStatus(\n                                applicationStatus\n                            )\n                        }\n                    >\n                        <MaterialIcon hasRipple icon=\"delete\" />\n                    </IconButton>\n                    <br />\n                    <span>{applicationStatus.date}</span>\n                    <br />\n                    {applicationStatus.applicationstatuslink_set.map(\n                        applicationStatusLink => {\n                            return (\n                                applicationStatusLink &&\n                                applicationStatusLink.link && (\n                                    <span key={applicationStatusLink.uuid}>\n                                        <a\n                                            href={\n                                                (\n                                                    applicationStatusLink.link.url && \n                                                    applicationStatusLink.link.url.includes(\"//\")\n                                                ) ?\n                                                applicationStatusLink.link.url :\n                                                `//${applicationStatusLink.link.url}`\n                                            }\n                                            target=\"_blank\"\n                                        >\n                                            {applicationStatusLink.link.text}\n                                        </a>{\" \"}\n                                        |{\" \"}\n                                    </span>\n                                )\n                            );\n                        }\n                    )}\n                </p>\n            </div>\n        );\n    };\n\n    renderFormController = (\n        application: Application,\n        applicationStatus?: ApplicationStatus\n    ) => {\n        return (\n            <div className=\"application-status-form-controller\">\n                {/* new application status form */}\n                {!this.state.isFormOpened ? (\n                    <Button\n                        onClick={clickEvent => {\n                            this.setState({\n                                isFormOpened: true\n                            });\n                        }}\n                        unelevated\n                        icon={<MaterialIcon hasRipple icon=\"add\" />}\n                    >\n                        Add New Status\n                    </Button>\n                ) : (\n                    <div className=\"application-component__status-form\">\n                        <h3>\n                            Add new status to application for{\" \"}\n                            {application.position_title}{\" \"}\n                        </h3>\n                        <ApplicationStatusFormComponentContainer\n                            application={application}\n                            applicationStatus={applicationStatus}\n                            onCancel={() => {\n                                this.setState({\n                                    isFormOpened: false\n                                });\n                            }}\n                            onSubmitSuccess={() => {\n                                this.setState({\n                                    isFormOpened: false\n                                });\n                            }}\n                        />\n                    </div>\n                )}\n            </div>\n        );\n    };\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    // prop: store.prop\n});\n\nconst mapDispatchToProps = (\n    dispatch: Dispatch<IObjectAction<ApplicationStatus>>\n) => {\n    // actionName: (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {\n        deleteApplicationStatus: (\n            applicationStatusToDelete: ApplicationStatus,\n            callback?: Function\n        ) =>\n            dispatch(\n                ApplicationStatusActions[CrudType.DELETE][\n                    RequestStatus.TRIGGERED\n                ].action(applicationStatusToDelete, callback)\n            )\n    };\n};\n\nexport const ApplicationStatusComponentContainer = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(ApplicationStatusComponent)\n);\n","import React, { Component } from \"react\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\nimport {\n    IObjectStore,\n    IObjectAction\n} from \"../../store/rest-api-redux-factory\";\n// data models\nimport { Company } from \"../../store/data-model/company\";\nimport {\n    Application,\n    ApplicationActions\n} from \"../../store/data-model/application\";\n\n/** Components */\nimport {\n    FormFactory,\n    FormActionButtonProps,\n    ActionButtonType\n} from \"../form-factory/form-factory\";\n// form field\nimport { FormBaseFieldMeta } from \"../form-factory/form-base-field/form-base-field-meta\";\nimport { FormInputFieldMeta } from \"../form-factory/form-input-field/form-input-field-meta\";\nimport { FormLinkFieldMeta } from \"../form-factory/form-link-field/form-link-field-meta\";\n\ninterface IApplicationFormComponentProps {\n    application?: Application;\n    onCancel: (event: any) => void;\n    onSubmitSuccess?: () => void;\n\n    company: Company;\n    /** redux */\n    applicationStore: IObjectStore<Application>;\n    createApplication: (\n        applicationFormData: Application,\n        successCallback?: Function,\n        finalCallback?: Function,\n    ) => void;\n    updateApplication: (\n        applicationFormData: Application,\n        successCallback?: Function,\n        finalCallback?: Function,\n    ) => void;\n}\n\nclass ApplicationFormComponent extends Component<\n    IApplicationFormComponentProps\n> {\n\n    formFieldPropsList: Array<FormBaseFieldMeta>;\n    actionButtonPropsList: Array<FormActionButtonProps>;\n\n    constructor(props: IApplicationFormComponentProps) {\n        super(props);\n\n        this.formFieldPropsList = [\n            new FormInputFieldMeta({\n                fieldName: \"position_title\",\n                label: \"Position Title*\"\n            }),\n            new FormLinkFieldMeta({\n                fieldName: \"job_description_page\",\n                label: \"Job Description Link\",\n            }),\n            new FormLinkFieldMeta({\n                fieldName: \"job_source\",\n                label: \"Job Source Link\",\n            }),\n        ];\n        this.actionButtonPropsList = [\n            new FormActionButtonProps(\n                this.props.company ? \"Save Application\" : \"Create Application\",\n                undefined,\n                ActionButtonType.SUBMIT\n            ),\n            new FormActionButtonProps(\"Cancel\", this.props.onCancel)\n        ]\n    }\n\n    render() {\n        return (\n            <div className=\"ApplicationFormComponent\">\n                {/* <FormFactory {...this.formFactoryProps} /> */}\n                <FormFactory\n                    model={Application}\n                    initialInstance={new Application({\n                        ...this.props.application,\n                    })}\n                    enforcedInstanceData={{\n                        user_company: this.props.company.uuid\n                    }}\n        \n                    formFieldPropsList={this.formFieldPropsList}\n                    actionButtonPropsList={this.actionButtonPropsList}\n        \n                    createInstanceTriggerAction={this.props.createApplication}\n                    updateInstanceTriggerAction={this.props.updateApplication}\n\n                    onSubmitSuccess={this.props.onSubmitSuccess}\n                />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    applicationStore: store.application\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<Application>>) => {\n    return {\n        createApplication: (\n            applicationFormData: Application,\n            successCallback?: Function,\n            finalCallback?: Function,\n        ) =>\n            dispatch(\n                ApplicationActions[CrudType.CREATE][\n                    RequestStatus.TRIGGERED\n                ].action(applicationFormData, successCallback, undefined, finalCallback)\n            )\n        ,\n        updateApplication: (\n            applicationFormData: Application,\n            successCallback?: Function,\n            finalCallback?: Function,\n        ) =>\n            dispatch(\n                ApplicationActions[CrudType.UPDATE][\n                    RequestStatus.TRIGGERED\n                ].action(applicationFormData, successCallback, undefined, finalCallback)\n            )\n        ,\n    };\n};\n\nexport const ApplicationFormComponentContainer = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ApplicationFormComponent);\n","import React, { Component } from \"react\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport {\n    Application,\n    ApplicationActions\n} from \"../../store/data-model/application\";\nimport { IRootState } from \"../../store/types\";\nimport { IObjectAction } from \"../../store/rest-api-redux-factory\";\nimport { Dispatch } from \"redux\";\n\n/** data model */\nimport { ApplicationStatus } from \"../../store/data-model/application-status\";\nimport { Company } from \"../../store/data-model/company\";\n\n/** rest api */\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\n\n/** Components */\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\nimport IconButton from \"@material/react-icon-button\";\nimport { ApplicationStatusComponentContainer } from \"../application-status/application-status-component\";\nimport { ApplicationFormComponentContainer } from \"./application-form-component\";\n\n/** Types */\ninterface IApplicationComponentProps {\n    application?: Application;\n\n    /** application form */\n    company?: Company;\n\n    isOnlyForm?: boolean;\n\n    applicationStatusList?: Array<ApplicationStatus>;\n    isShowApplicationStatuses?: boolean;\n\n    /** redux */\n    deleteApplication: (\n        applicationToDelete: Application,\n        callback?: Function\n    ) => void;\n}\n\ninterface IApplicationComponentState {\n    isFormOpened: boolean;\n}\n\n/** Main Class */\nexport class ApplicationComponent extends Component<\n    IApplicationComponentProps,\n    IApplicationComponentState\n> {\n    state = {\n        isFormOpened: false\n    };\n\n    render() {\n        return (\n            <div className=\"application-component\">\n                {this.state.isFormOpened || this.props.isOnlyForm\n                    ? this.renderApplicationFormController()\n                    : this.props.application &&\n                      Array.isArray(this.props.applicationStatusList) &&\n                      this.renderApplicationDisplay(\n                          this.props.application,\n                          this.props.applicationStatusList\n                      )}\n            </div>\n        );\n    }\n\n    renderApplicationFormController = () => {\n        return (\n            this.props.company && ( // application create or udpate must have company associate with it.\n                <div className=\"application-form-controller\">\n                    {!this.state.isFormOpened ? (\n                        <Button\n                            onClick={clickEvent => {\n                                this.setState({\n                                    isFormOpened: true\n                                });\n                            }}\n                            unelevated\n                            icon={<MaterialIcon hasRipple icon=\"add\" />}\n                        >\n                            Add Application\n                        </Button>\n                    ) : (\n                        <ApplicationFormComponentContainer\n                            onCancel={event => {\n                                console.log(\"onCancel clicked\");\n                                this.setState({\n                                    isFormOpened: false\n                                });\n                            }}\n                            onSubmitSuccess={() =>\n                                this.setState({\n                                    isFormOpened: false\n                                })\n                            }\n                            company={this.props.company}\n                            application={this.props.application}\n                        />\n                    )}\n                </div>\n            )\n        );\n    };\n\n    renderApplicationDisplay = (\n        application: Application,\n        applicationStatusList: Array<ApplicationStatus>\n    ) => {\n        return (\n            <div className=\"application-component-display\">\n                {/* application display view */}\n                <h3>Application</h3>\n                <p>\n                    <span>\n                        <strong>Position:</strong> {application.position_title}\n                    </span>\n\n                    <IconButton\n                        onClick={() => {\n                            this.setState({\n                                isFormOpened: true // open form and close display\n                            });\n                        }}\n                    >\n                        <MaterialIcon hasRipple icon=\"edit\" />\n                    </IconButton>\n                    <IconButton\n                        onClick={() =>\n                            this.props.deleteApplication(application)\n                        }\n                    >\n                        <MaterialIcon hasRipple icon=\"delete\" />\n                    </IconButton>\n                    <br />\n                    <span>Application UUID: {application.uuid}</span>\n                    <br />\n                    {application.job_description_page.url && (\n                        <span>\n                            <strong>JD Page: </strong>\n                            <a\n                                target=\"_blank\"\n                                href={\n                                    application.job_description_page.url && application.job_description_page.url.includes(\"//\") ?\n                                    application.job_description_page.url :\n                                    `//${application.job_description_page.url}`\n                                }\n                            >\n                                {application.job_description_page.text || \"Link\"}\n                            </a>\n                        </span> \n                    )}\n\n                    <br />\n                    {application.job_source.url && (\n                        <span>\n                            <strong>Job Source: </strong>\n                            <a target=\"_blank\" href={\n                                (application.job_source.url && application.job_source.url.includes(\"//\")) ?\n                                application.job_source.url :\n                                `//${application.job_source.url}`\n                            }>\n                                {application.job_source.text || \"Link\"}\n                            </a>\n                        </span>\n                    )}\n                </p>\n\n                {/* application statuses list */}\n                {this.props.isShowApplicationStatuses &&\n                    applicationStatusList.map(status => {\n                        return (\n                            <ApplicationStatusComponentContainer\n                                key={status.uuid}\n                                applicationStatus={status}\n                                application={application}\n                            />\n                        );\n                    })}\n\n                {/* application status form controller */}\n                <ApplicationStatusComponentContainer\n                    application={application}\n                    isOnlyForm\n                />\n            </div>\n        );\n    };\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<Application>>) => {\n    // actionName: (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {\n        deleteApplication: (\n            applicationToDelete: Application,\n            callback?: Function\n        ) =>\n            dispatch(\n                ApplicationActions[CrudType.DELETE][\n                    RequestStatus.TRIGGERED\n                ].action(applicationToDelete, callback)\n            )\n    };\n};\n\nexport const ApplicationComponentController = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ApplicationComponent);\n","import React, { Component } from \"react\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\nimport {\n    IObjectAction,\n    IObjectStore\n} from \"../../store/rest-api-redux-factory\";\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\n// data models\nimport { CompanyActions, Company } from \"../../store/data-model/company\";\nimport {\n    ApplicationActions,\n    Application\n} from \"../../store/data-model/application\";\nimport { ApplicationStatus } from \"../../store/data-model/application-status\";\n\n/** Components */\n// objects\nimport { CompanyComponent } from \"../company/company-component\";\nimport { ApplicationComponentController } from \"../application/application-component\";\n\ninterface ICompanyApplicationComponentProps extends RouteComponentProps {\n    company: Company;\n    applicationStore: IObjectStore<Application>;\n    applicationStatusStore: IObjectStore<ApplicationStatus>;\n    isShowApplicationStatuses?: boolean;\n    deleteCompany: (companyToDelete: Company, callback?: Function) => void;\n    updateCompany: (companyToUpdate: Company, callback?: Function) => void;\n}\n\nclass CompanyApplicationComponent extends Component<\n    ICompanyApplicationComponentProps\n> {\n    onDeleteClick = (event: any) => {\n        if (this.props.company.uuid) {\n            this.props.deleteCompany(this.props.company);\n        } else {\n            console.error(\"Attempted to delete but company obj has no uuid\");\n        }\n    };\n\n    render() {\n        return (\n            <div className=\"CompanyApplicationContainer\">\n                <CompanyComponent\n                    company={this.props.company}\n                    onDeleteIconClicked={this.onDeleteClick}\n                    onEditIconClicked={() => {\n                        this.props.history.push(`/com-form/${this.props.company.uuid}/`);\n                    }}\n                />\n                {Object.values(this.props.applicationStore.collection)\n                    .filter(\n                        application =>\n                            application.user_company === this.props.company.uuid\n                    )\n                    .map(application => {\n                        const applicationStatusList =\n                            this.props.isShowApplicationStatuses || false\n                                ? Object.values(\n                                      this.props.applicationStatusStore\n                                          .collection\n                                  ).filter(\n                                      applicationStatus =>\n                                          applicationStatus.application ===\n                                          application.uuid\n                                  )\n                                : [];\n                        return (\n                            <ApplicationComponentController\n                                key={application.uuid}\n                                application={application}\n                                company={this.props.company}\n                                applicationStatusList={applicationStatusList}\n                                isShowApplicationStatuses={\n                                    this.props.isShowApplicationStatuses\n                                }\n                            />\n                        );\n                    })}\n                {!this.props.isShowApplicationStatuses && <hr />}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    // prop: store.prop\n    applicationStore: store.application,\n    applicationStatusStore: store.applicationStatus\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<Application>>) => {\n    // actionName: (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {\n        deleteCompany: (companyToDelete: Company, callback?: Function) =>\n            dispatch(\n                CompanyActions[CrudType.DELETE][RequestStatus.TRIGGERED].action(\n                    companyToDelete,\n                    callback\n                )\n            ),\n        updateCompany: (companyToUpdate: Company, callback?: Function) =>\n            dispatch(\n                CompanyActions[CrudType.UPDATE][RequestStatus.TRIGGERED].action(\n                    companyToUpdate,\n                    callback\n                )\n            )\n    };\n};\n\nexport const CompanyApplicationComponentContainer = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(CompanyApplicationComponent)\n);\n","import React, { Component } from \"react\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\nimport { IObjectAction, IObjectStore } from \"../../store/rest-api-redux-factory\";\n// data models\nimport { Company } from \"../../store/data-model/company\";\nimport { Application } from \"../../store/data-model/application\";\n\n/** Components */\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n// objects\nimport { CompanyApplicationComponentContainer } from \"../../components/company-application/company-application-component\";\n\ninterface IUserAppPageProps extends RouteComponentProps {\n    company: IObjectStore<Company>\n    application: IObjectStore<Application>\n}\n\nclass UserAppPage extends Component<IUserAppPageProps> {\n\n    componentDidMount() {\n    }\n\n    render() {\n        return (\n            <div className=\"UserAppPage\">\n                <h1>Your Applications</h1>\n                <Button\n                    onClick={()=>{ this.props.history.push(\"/com-form/\") }}\n                    unelevated\n                    icon={<MaterialIcon hasRipple icon=\"add\" />}\n                    children=\"Add Company\"\n                />\n                <br></br>\n                {\n                    (this.props.company.collection !== {}) && Object.values(this.props.company.collection).map((company) => {\n                        return (\n                            <CompanyApplicationComponentContainer key={company.uuid} company={company} />\n                        )\n                    })\n                }\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    // prop: store.prop\n    company: store.company,\n    application: store.application,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<{}>>) => {\n    // actionName = (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n\n    return {\n        // listObject: (callback?: Function) =>\n        //     dispatch(\n        //         ObjectActions[CrudType.LIST][RequestStatus.TRIGGERED].action(\n        //             new Object({}),\n        //             callback\n        //         )\n        //     ),\n    }\n};\n\nexport const UserAppPageContainer = withRouter(connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(UserAppPage));\n","/** Components */\n// base field\nimport { withFormBaseField } from \"../form-base-field/form-base-field\";\n// link field\nimport { FormAddressFieldComponent } from \"./form-address-field-component\";\n\nexport const FormAddressField = withFormBaseField(FormAddressFieldComponent);\n","import React, { Component } from \"react\";\n\n/** Components */\n// mdc-react input\nimport \"@material/react-text-field/dist/text-field.css\";\n\nimport { FormInputFieldMeta } from \"../form-input-field/form-input-field-meta\";\nimport { FormInputField } from \"../form-input-field/form-input-field\";\nimport { IFormBaseFieldProps } from \"../form-base-field/form-base-field-meta\";\n\nexport interface IFormAddressFieldComponentProps extends IFormBaseFieldProps {\n}\n\nexport class FormAddressFieldComponent extends Component<IFormAddressFieldComponentProps> {\n\n    fullAddressInputFieldMeta: FormInputFieldMeta;\n    placeNameInputFieldMeta: FormInputFieldMeta;\n\n    constructor(props: IFormAddressFieldComponentProps) {\n        super(props)\n\n        this.fullAddressInputFieldMeta = new FormInputFieldMeta({\n            fieldName: `${this.props.fieldName}.full_address`,\n            label: `Full Address`\n        });\n        this.placeNameInputFieldMeta = new FormInputFieldMeta({\n            fieldName: `${this.props.fieldName}.place_name`,\n            label: `Place Name`\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"FormAddressField\">\n                {this.props.label && <h4>{this.props.label}</h4>}\n                \n                <FormInputField\n                    {...this.placeNameInputFieldMeta}\n                />\n\n                <FormInputField\n                    {...this.fullAddressInputFieldMeta}\n                />\n                \n            </div>\n        );\n    }\n}","// data model\nimport { Address } from \"../../../store/data-model/address\";\n\n/** Components */\n// base field\nimport { IFieldBaseMetaProps, FormBaseFieldMeta } from \"../form-base-field/form-base-field-meta\";\nimport { FormAddressField } from \"./form-address-field\";\n\nexport class FormAddressFieldMeta extends FormBaseFieldMeta {\n\n    constructor(props: IFieldBaseMetaProps) {\n        super(props)\n        this.model = Address;\n        this.formField = FormAddressField;\n    }\n}\n","import React, { Component } from \"react\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\nimport {\n    IObjectAction\n} from \"../../store/rest-api-redux-factory\";\n// data models\nimport { Company, CompanyActions } from \"../../store/data-model/company\";\n\n/** Components */\nimport {\n    FormFactory,\n    FormActionButtonProps,\n    ActionButtonType\n} from \"../form-factory/form-factory\";\n// form field\nimport { FormBaseFieldMeta } from \"../form-factory/form-base-field/form-base-field-meta\";\nimport { FormInputFieldMeta } from \"../form-factory/form-input-field/form-input-field-meta\";\nimport { FormLinkFieldMeta } from \"../form-factory/form-link-field/form-link-field-meta\";\nimport { FormAddressFieldMeta } from \"../form-factory/form-address-field/form-address-field-meta\";\n\ninterface ICompanyFormComponentProps {\n    company?: Company;\n    onCancel: (event: any) => void;\n    onSubmitSuccess?: () => void;\n\n    /** redux */\n    createCompany: (companyFormData: Company, successCallback?: Function, finalCallback?: Function) => void;\n    updateCompany: (companyFormData: Company, successCallback?: Function, finalCallback?: Function) => void;\n}\n\nclass CompanyFormComponent extends Component<ICompanyFormComponentProps> {\n\n    formFieldPropsList: Array<FormBaseFieldMeta>;\n    actionButtonPropsList: Array<FormActionButtonProps>;\n\n    constructor(props: ICompanyFormComponentProps) {\n        super(props);\n\n        this.formFieldPropsList = [\n            new FormInputFieldMeta({\n                fieldName: \"name\",\n                label: \"Company Name*\"\n            }),\n\n            new FormAddressFieldMeta({\n                fieldName: \"hq_location\",\n                label: \"Headquarter Location\"\n            }),\n\n            new FormLinkFieldMeta({\n                fieldName: \"home_page\",\n                label: \"Company Website\"\n            }),\n        ];\n\n        this.actionButtonPropsList = [\n            new FormActionButtonProps(\n                !this.props.company ? \"Create Company\" : \"Save Company\",\n                undefined,\n                ActionButtonType.SUBMIT\n            ),\n            new FormActionButtonProps(\"Cancel\", this.props.onCancel)\n        ]\n\n    }\n\n    render() {\n        return (\n            <div className=\"CompanyFormComponent\">\n                <FormFactory\n                    model={Company}\n                    initialInstance={this.props.company}\n        \n                    formFieldPropsList={this.formFieldPropsList}\n                    actionButtonPropsList={this.actionButtonPropsList}\n        \n                    createInstanceTriggerAction={this.props.createCompany}\n                    updateInstanceTriggerAction={this.props.updateCompany}\n\n                    onSubmitSuccess={this.props.onSubmitSuccess}\n                />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => ({});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<Company>>) => {\n    return {\n        createCompany: (companyFormData: Company, successCallback?: Function, finalCallback?: Function) =>\n            dispatch(\n                CompanyActions[CrudType.CREATE][RequestStatus.TRIGGERED].action(\n                    companyFormData,\n                    successCallback,\n                    undefined,\n                    finalCallback,\n                )\n            ),\n        updateCompany: (companyFormData: Company, successCallback?: Function, finalCallback?: Function) =>\n            dispatch(\n                CompanyActions[CrudType.UPDATE][RequestStatus.TRIGGERED].action(\n                    companyFormData,\n                    successCallback,\n                    undefined,\n                    finalCallback,\n                )\n            )\n    };\n};\n\nexport const CompanyFormComponentContainer = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(CompanyFormComponent);\n","import React, { Component } from \"react\";\n\n/** route */\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\n// REST API\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\nimport {\n    IObjectAction,\n    IObjectStore\n} from \"../../store/rest-api-redux-factory\";\nimport { CompanyActions, Company } from \"../../store/data-model/company\";\nimport { Address } from \"../../store/data-model/address\";\nimport { Link } from \"../../store/data-model/link\";\n\n/** Components */\n//mdc-react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc-react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n// mdc-react input\nimport \"@material/react-text-field/dist/text-field.css\";\nimport TextField, { HelperText, Input } from \"@material/react-text-field\";\nimport { CompanyFormComponentContainer } from \"../../components/company/company-form-component\";\n\ninterface IAddComPageParams {\n    uuid?: string;\n}\n\ninterface IAddComPageProps extends RouteComponentProps<IAddComPageParams> {\n    company: IObjectStore<Company>;\n}\n\nclass AddComPage extends Component<IAddComPageProps> {\n    render() {\n        const company: Company | undefined = (this.props.match.params.uuid && this.props.company.collection[this.props.match.params.uuid])\n            ? this.props.company.collection[this.props.match.params.uuid]\n            : undefined;\n        console.log(\n            \"com form page: params is\",\n            this.props.match.params.uuid,\n            \"company is\",\n            company\n        );\n        return (\n            <div className=\"AddComPage\">\n                <h1>{!company ? \"Add a Company\" : `Update Company`}</h1>\n                <CompanyFormComponentContainer\n                    company={company}\n                    onSubmitSuccess={() => {\n                        console.log(\"com form page: onSubmitSuccess\");\n                        if (this.props.company.lastChangedObjectID) {\n                            let newCompany = this.props.company.collection[\n                                this.props.company.lastChangedObjectID\n                            ];\n                            console.log(\"new company:\", newCompany);\n                            this.props.history.push(\n                                `/com-app/${newCompany.uuid}/`\n                            );\n                        } else {\n                            console.error(\"store has no lastChangedObjectID\");\n                        }\n                    }}\n                    onCancel={event => {\n                        this.props.history.goBack()\n                    }}\n                />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: IRootState) => ({\n    // prop: state.prop\n    company: state.company\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<Company>>) => {\n    // actionName = (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {};\n};\n\nexport const AddComPageContainer = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(AddComPage)\n);\n","import React, { Component } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { RouteComponentProps } from \"react-router\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\n// rest api\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\nimport {\n    IObjectStore,\n    IObjectAction\n} from \"../../store/rest-api-redux-factory\";\nimport { Company } from \"../../store/data-model/company\";\nimport { Link } from \"../../store/data-model/link\";\nimport {\n    Application,\n    ApplicationActions\n} from \"../../store/data-model/application\";\n\n/** Components */\nimport { CompanyApplicationComponentContainer } from \"../../components/company-application/company-application-component\";\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n// mdc-react input\nimport \"@material/react-text-field/dist/text-field.css\";\nimport { ApplicationComponentController } from \"../../components/application/application-component\";\n\ninterface IUserComAppPageParams {\n    uuid: string;\n}\n\ninterface IUserComAppPageProps\n    extends RouteComponentProps<IUserComAppPageParams> {\n    company: IObjectStore<Company>;\n    createApplication: (\n        applicationFormData: Application,\n        callback?: Function\n    ) => void;\n}\n\ninterface IUserComAppPageState {\n    companyUuid: string;\n    company: Company;\n}\n\nclass UserComAppPage extends Component<\n    IUserComAppPageProps,\n    IUserComAppPageState\n> {\n    readonly state: IUserComAppPageState = {\n        companyUuid: \"\",\n        company: new Company({})\n    };\n\n    componentDidMount() {\n        let companyUuid = this.props.match.params.uuid;\n        console.log(\"mount, got uuid from route?\", companyUuid);\n        if (\n            this.props.company.collection &&\n            companyUuid in this.props.company.collection\n        ) {\n            this.setState({\n                companyUuid,\n                company: new Company(this.props.company.collection[companyUuid])\n            });\n        }\n    }\n\n    renderAll() {\n        if (!this.state.company.uuid) {\n            return;\n        }\n\n        return (\n            <div className=\"user-com-app-page-content\">\n                <Button\n                    onClick={clickEvent => {\n                        this.props.history.push(\"/\");\n                    }}\n                >\n                    Back\n                </Button>\n                <h1>{this.state.company.name}</h1>\n                \n                {/* application form controller - always create form */}\n                <ApplicationComponentController \n                    company={this.state.company}\n                    isOnlyForm\n                />\n\n                <br />\n\n                {/* application list */}\n                {this.state.company.uuid && (\n                    <CompanyApplicationComponentContainer\n                        company={this.state.company}\n                        isShowApplicationStatuses\n                    />\n                )}\n            </div>\n        );\n    }\n\n    render() {\n        return (\n            <div className=\"UserComAppPage\">\n                {this.state.companyUuid &&\n                this.props.company.collection &&\n                this.state.companyUuid in this.props.company.collection ? (\n                    this.renderAll()\n                ) : this.state.companyUuid ? (\n                    <h1>No company found. Uuid={this.state.companyUuid}</h1>\n                ) : (\n                    <h1>Company uuid not specified</h1>\n                )}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => {\n    return {\n        // prop: store.prop\n        company: store.company,\n    };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<Application>>) => {\n    // actionName = (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {\n        createApplication: (\n            applicationFormData: Application,\n            callback?: Function\n        ) =>\n            dispatch(\n                ApplicationActions[CrudType.CREATE][\n                    RequestStatus.TRIGGERED\n                ].action(applicationFormData, callback)\n            )\n    };\n};\n\nexport const UserComAppPageContainer = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(UserComAppPage)\n);\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { IUpdateAuthState } from \"../../store/auth/types\";\n\ninterface UserInfoProps {\n    auth: IUpdateAuthState;\n}\n\nexport class UserInfo extends Component<UserInfoProps, any> {\n    render() {\n        return (\n            <div>\n                <div>\n                    Logged in:{\" \"}\n                    {(this.props.auth.isLogin &&\n                        this.props.auth.isLogin.toString()) ||\n                        \"undefine\"}\n                </div>\n                <div>User Name: {this.props.auth.userName || \"(empty)\"}</div>\n                <div>\n                    Token (for API): {this.props.auth.apiToken || \"(empty)\"}\n                </div>\n            </div>\n        );\n    }\n}\n","import React, { Component } from \"react\";\n\n/** redux */\nimport { connect } from \"react-redux\";\nimport { IRootState } from \"../../store/types\";\nimport { IUpdateAuthState } from \"../../store/auth/types\";\n\n/** Routes & pages */\nimport { UserInfo } from \"../../components/user-info/user-info\";\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\n\n/** Components */\nimport { SocialAuthButtonContainer } from \"../../components/social-auth/social-auth-button\";\n\ninterface IUserProfilePageProps extends RouteComponentProps {\n    auth: IUpdateAuthState;\n}\n\nclass UserProfilePage extends Component<IUserProfilePageProps, any> {\n    render() {\n        return (\n            <div>\n                <h1>My Profile</h1>\n                <UserInfo auth={this.props.auth} />\n                <SocialAuthButtonContainer />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => {\n    return {\n        auth: store.auth\n    };\n};\n\nexport const UserProfilePageContainer = withRouter(connect(mapStateToProps)(UserProfilePage));\n","import React, { Component } from \"react\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { IRootState } from \"../../store/types\";\nimport { IUpdateAuthState } from \"../../store/auth/types\";\n\n/** Routing & Pages */\nimport {\n    Route,\n    Redirect,\n    Switch,\n    Link,\n    withRouter,\n    RouteComponentProps\n} from \"react-router-dom\";\n// pages\nimport { LandingPageContainer } from \"../landing-page/landing-page\";\nimport { LocalLoginPageContainer } from \"../login-page/local-login-page\";\nimport { UserAppPageContainer } from \"../user-app-page/user-app-page\";\nimport { AddComPageContainer } from \"../add-com-page/add-com-page\";\nimport { UserComAppPageContainer } from \"../user-com-app-page/user-com-app-page\";\nimport { UserProfilePageContainer } from \"../user-profile-page/user-profile-page\";\n\n/** MDC React */\nimport TopAppBar, { TopAppBarFixedAdjust } from \"@material/react-top-app-bar\";\nimport \"@material/react-top-app-bar/dist/top-app-bar.css\";\n// import '@material/react-material-icon/dist/material-icon.css';\nimport MaterialIcon from \"@material/react-material-icon\";\n// style\nimport \"@material/react-ripple/dist/ripple.css\";\n\n// import {withRipple} from '@material/react-ripple';\n\ninterface IPageRoutesProps extends RouteComponentProps {\n    auth: IUpdateAuthState;\n}\n\nclass PageRoutes extends Component<IPageRoutesProps> {\n    render() {\n        return (\n            <div className=\"PageRoutesContainer\">\n                {(\n                    this.props.location.pathname === \"/\" ||\n                    this.props.location.pathname === \"/login/\"\n                    // add more public page routres here\n                    // ...\n                ) ? (\n                    <Switch>\n                        <Route path=\"/\" exact component={LandingPageContainer} />\n                        <Route path=\"/login/\" exact component={LocalLoginPageContainer} />\n                        {\n                            /** add more public page routes here */\n                            // ...\n                        }\n                    </Switch>\n                ) : (\n                    <div className=\"PrivateRoutesContainer\">\n                        {/** protect private routes */\n                        !this.props.auth.isLogin && <Redirect to=\"/\" />}\n\n                        <TopAppBar\n                            title=\"Appl Tracky\"\n                            actionItems={[\n                                <Link to=\"/home/\">\n                                    <MaterialIcon\n                                        hasRipple\n                                        key=\"itemHome\"\n                                        icon=\"home\"\n                                    />\n                                </Link>,\n\n                                <Link to=\"/profile/\">\n                                    {this.props.auth.avatarUrl === \"\" ? (\n                                        <MaterialIcon\n                                            hasRipple\n                                            key=\"itemProfile\"\n                                            icon=\"account_circle\"\n                                        />\n                                    ) : (\n                                        <img style={{\n                                            \"height\": \"100%\",\n                                            \"borderRadius\": \"50%\",\n                                        }} src={this.props.auth.avatarUrl} />\n                                    )}\n                                </Link>\n                            ]}\n                        />\n                        <TopAppBarFixedAdjust>\n                            <Switch>\n                                <Route\n                                    path=\"/home/\"\n                                    component={UserAppPageContainer}\n                                />\n                                <Route\n                                    path=\"/com-form/:uuid?/\"\n                                    component={AddComPageContainer}\n                                />\n                                <Route\n                                    path=\"/com-app/:uuid/\"\n                                    component={UserComAppPageContainer}\n                                />\n                                <Route\n                                    path=\"/com-app/\"\n                                    component={UserComAppPageContainer}\n                                />\n                                <Route\n                                    path=\"/profile/\"\n                                    component={UserProfilePageContainer}\n                                />\n                                {/** add more private page routes here */}\n                            </Switch>\n                        </TopAppBarFixedAdjust>\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    auth: store.auth\n});\n\nconst mapDispatchToProps = {};\n\nexport const PageRoutesContainer = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(PageRoutes)\n);\n","/** React core */\nimport React, { Component } from \"react\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { IRootState } from \"./store/types\";\n\n/** Routes & pages */\nimport { PageRoutesContainer } from \"./pages/page-routes/page-routes\";\n\n/** Locals */\nimport \"./App.css\";\n\ninterface IAppProps {}\n\nclass App extends Component<IAppProps> {\n    componentDidMount() {}\n\n    render() {\n        return (\n            <div className=\"App\">\n                <PageRoutesContainer />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => {\n    return {};\n};\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export enum RootActionNames {\n    ResetAllStore = \"RESET_ALL_STORE\"\n}\n\nexport const resetAllStoreAction = () => {\n    return {\n        type: RootActionNames.ResetAllStore,\n    }\n}","import { Reducer, Action } from 'redux';\n\nimport { \n    /** store */\n    IUpdateAuthState, \n    /** action */\n    AuthActionNames, TAuthActions \n} from \"./types\";\n\nimport { RequestStatus } from \"../../utils/rest-api\";\n\nconst initialAuthState: IUpdateAuthState = {\n    requestStatus: RequestStatus.SUCCESS,\n    isLogin: false,\n    isLocal: false,\n    socialAuthToken: \"\",\n    apiToken: \"\",\n    userName: \"\",\n    expireDateTime: \"\",\n    avatarUrl: \"\",\n}\n\n// authStore will be stored as a sub-entry in global store; this is defined in ./store/types.ts\nexport const authReducer: Reducer<IUpdateAuthState> = (authStore = initialAuthState, action: Action)  => {\n    // add reducer for new actions here\n    // ...\n\n    const authAction = action as TAuthActions;\n\n    return {\n        ...authStore,\n        ...authAction.payload\n    }\n}","/** redux */\nimport {\n    AuthActionNames,\n    IRequestedLoginAuthAction,\n    IRequestedLogoutAuthAction\n} from \"../../store/auth/types\";\nimport {\n    SuccessLoginAuth,\n    SuccessLogoutAuth,\n    FailureAuth\n} from \"../../store/auth/actions\";\nimport { resetAllStoreAction } from \"../../store/actions\";\nimport { CompanyActions, Company } from \"../../store/data-model/company\";\nimport { ApplicationActions, Application } from \"../../store/data-model/application\";\nimport { ApplicationStatusActions, ApplicationStatus } from \"../../store/data-model/application-status\";\n// redux-saga\nimport { takeEvery, call, put } from \"redux-saga/effects\";\n\n/** router */\nimport { push } from \"connected-react-router\";\n\n/** api */\nimport { AuthenticationService } from \"../../utils/auth\";\nimport { RestApiService, CrudType, RequestStatus } from \"../../utils/rest-api\";\n\nfunction* authLoginSagaHandler(\n    requestedLoginAuthAction: IRequestedLoginAuthAction\n) {\n    // RequestAuth action triggered & injecting side effects here...\n    console.log(\"auth saga: initialize\");\n    const { socialAuthToken } = requestedLoginAuthAction.payload;\n    console.log(\"auth saga: request fired\");\n    try {\n        // TODO: define interface typing for api response\n        const jsonResponse = yield call(AuthenticationService.serverLogin, socialAuthToken);\n        console.log(\"auth saga: server login using code from social button. server jsonRes=\", jsonResponse);\n        AuthenticationService.state.apiLoginToken = jsonResponse.token;\n        yield put(SuccessLoginAuth(\n            jsonResponse.email, \"\", \n            jsonResponse.token, \n            jsonResponse.avatar_url,\n            false // is not local login, is social login\n        ));\n        // yield put(push(\"/home/\"));\n\n        // initial fetch user data\n        yield put(ApplicationActions[CrudType.LIST][RequestStatus.TRIGGERED].action(new Application({})))\n        yield put(CompanyActions[CrudType.LIST][RequestStatus.TRIGGERED].action(new Company({})))\n        yield put(ApplicationStatusActions[CrudType.LIST][RequestStatus.TRIGGERED].action(new ApplicationStatus({})))\n    } catch (error) {\n        console.warn(\"auth saga: error\")\n        yield put(FailureAuth(error));\n        return;\n    }\n}\n\nexport function* authLoginSaga() {\n    yield takeEvery(AuthActionNames.REQUESTED_LOGIN_AUTH, authLoginSagaHandler);\n}\n\nfunction* authLogoutSagaHandler(\n    requestedLogoutAuthAction: IRequestedLogoutAuthAction\n) {\n    // RequestAuth action triggered & injecting side effects here...\n    console.log(\"auth logout saga: fired\");\n    try {\n        yield call(AuthenticationService.serverLogout);\n\n        // clear all store\n    } catch (error) {\n        yield put(FailureAuth(error));\n        return;\n    }\n\n    console.log(\"auth logout saga: navigating\");\n    yield put(SuccessLogoutAuth());\n    // yield put(push(\"/\"));\n\n    // clear all redux store\n    yield put(resetAllStoreAction());\n}\n\nexport function* authLogoutSaga() {\n    yield takeEvery(\n        AuthActionNames.REQUESTED_LOGOUT_AUTH,\n        authLogoutSagaHandler\n    );\n}\n\n// add new saga handler here && a `takeEvery` saga.\n// ...","import createSagaMiddleware from 'redux-saga';\nimport { all } from \"redux-saga/effects\";\nimport { authLoginSaga, authLogoutSaga } from \"./auth/sagas\";\n// rest api\nimport { CompanySagas } from \"../store/data-model/company\";\nimport { ApplicationSagas } from \"../store/data-model/application\";\nimport { ApplicationStatusSagas } from \"../store/data-model/application-status\";\n\n/** setup saga */\nconst sagaMiddleware = createSagaMiddleware();\n\nexport {\n    sagaMiddleware\n};\n\nconst rootSaga = function*() {\n    yield all([\n        authLoginSaga(),\n        authLogoutSaga(),\n        ...CompanySagas.map((saga) => saga()),\n        ...ApplicationSagas.map((saga) => saga()),\n        ...ApplicationStatusSagas.map((saga) => saga()),\n        // add new saga here\n        // ...\n    ]);\n};\n\nexport const runSagaMiddleaware = () => {\n    sagaMiddleware.run(rootSaga)\n}\n\n","/** redux */\nimport { combineReducers, Reducer, AnyAction, Action } from \"redux\";\nimport { connectRouter, LocationChangeAction } from 'connected-react-router';\nimport { authReducer } from \"./auth/reducers\";\nimport { TAuthActions } from \"./auth/types\";\nimport { IRootState } from \"./types\";\nimport { RootActionNames } from \"./actions\";\n// rest api\nimport { CompanyReducer } from \"./data-model/company\";\nimport { ApplicationReducer } from \"./data-model/application\";\nimport { ApplicationStatusReducer } from \"./data-model/application-status\";\n\n/** router */\nimport { History } from \"history\";\n\n// root reducer with router state\nexport const createRootReducer = (history: History<any>): Reducer<IRootState> => {\n    // return combineReducers<IRootState>({\n    //     router: connectRouter(history),\n    \n    //     // add more reducers here\n    //     auth: authReducer,\n    //     company: CompanyReducer,\n    //     address: AddressReducer,\n    //     application: ApplicationReducer,\n    //     // ...\n    // })\n\n    const rootReducer: Reducer<IRootState> = (rootState: IRootState | undefined, action: Action): IRootState  => {\n\n        let rootStateChecked: any = {}\n        if (!rootState) {\n            rootStateChecked.router = undefined;\n            rootStateChecked.auth = undefined;\n            rootStateChecked.company = undefined;\n            rootStateChecked.application = undefined;\n            rootStateChecked.applicationStatus = undefined;\n            // add initial state for new sub-store here\n            // ...\n        } else if (action.type === RootActionNames.ResetAllStore) {\n            rootStateChecked = {\n                router: rootState.router\n            }\n        } else {\n            rootStateChecked = rootState;\n        }\n\n        console.log(\"beforeRootStore\", rootState);\n\n        const afterStore  = { \n            ...rootState,\n            router: connectRouter(history)(rootStateChecked.router, action as LocationChangeAction),\n            auth: authReducer(rootStateChecked.auth, action),\n            company: CompanyReducer(rootStateChecked.company, action),\n            application: ApplicationReducer(rootStateChecked.application, action),\n            applicationStatus: ApplicationStatusReducer(rootStateChecked.applicationStatus, action),\n            // add new reducer here\n            // ...\n        }\n        console.log(\"afterRootStore\", afterStore);\n\n        return afterStore;\n    }\n\n    return rootReducer;\n}","/** redux */\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport { IRootState } from \"../store/types\";\nimport { createRootReducer } from \"../store/reducers\";\n\n/** router */\nimport { createBrowserHistory } from 'history';\nimport { routerMiddleware } from 'connected-react-router';\n\n/** middleware */\n// saga\nimport { sagaMiddleware, runSagaMiddleaware } from \"../sagas/saga-config\";\n\n\n\nconst history = createBrowserHistory({\n    basename: (process.env.NODE_ENV === 'development') ?  \n    ``\n    :\n    `/appl-tracky-spa`\n});\n\nconst preloadedState = {\n\n};\n\n// generate the singleton store from redux\nexport const store = createStore<IRootState, any, any, any>(\n    createRootReducer(history),\n    preloadedState,\n    compose(\n        applyMiddleware(\n            routerMiddleware(history),\n            sagaMiddleware,\n            // ... add other middlewares ...\n        )\n    )\n);\n\n/** after mount saga middlewares to store, run them */\nrunSagaMiddleaware();\n\nexport {\n    history\n};","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n/** redux */\nimport { Provider } from \"react-redux\";\nimport { Store } from \"redux\";\n/** root store */\nimport { IRootState } from \"./store/types\";\nimport { store } from \"./store/store-config\";\n\n/** router */\nimport { ConnectedRouter } from \"connected-react-router\";\nimport { history } from \"./store/store-config\";\n\n/** types */\ninterface IRootProps {\n    store: Store<IRootState>;\n}\n\n/** root component - just to wrap the App into redux store */\nconst Root: React.SFC<IRootProps> = props => {\n    return (\n        <Provider store={props.store}>\n            <ConnectedRouter history={history} >\n                <App />\n            </ConnectedRouter>\n        </Provider>\n    );\n};\n\nReactDOM.render(<Root store={store} />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}