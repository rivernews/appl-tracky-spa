{"version":3,"sources":["store/auth/types.ts","utils/rest-api.ts","store/data-model/base-model.ts","utils/auth.ts","store/auth/actions.ts","store/rest-api-redux-factory.ts","store/data-model/address.ts","store/data-model/link.ts","store/data-model/company.ts","store/data-model/application.ts","components/social-auth/social-auth-login-button.tsx","components/social-auth/social-auth-logout-button.tsx","components/social-auth/social-auth-button.tsx","components/form-factory/form-field-factory.tsx","components/form-factory/form-factory.tsx","pages/landing-page/landing-page.tsx","components/company/company-component.tsx","store/data-model/application-status.ts","store/data-model/application-status-link.ts","components/application-status/application-status-form-component.tsx","components/application-status/application-status-component.tsx","components/application/application-component.tsx","components/company-application/company-application-component.tsx","pages/user-app-page/user-app-page.tsx","components/company/company-form-component.tsx","pages/add-com-page/add-com-page.tsx","components/application/application-form-component.tsx","pages/user-com-app-page/user-com-app-page.tsx","components/user-info/user-info.tsx","pages/user-profile-page/user-profile-page.tsx","pages/page-routes/page-routes.tsx","App.tsx","serviceWorker.ts","store/actions.ts","store/auth/reducers.ts","sagas/auth/sagas.ts","sagas/saga-config.ts","store/reducers.ts","store/store-config.ts","index.tsx"],"names":["AuthActionNames","RequestStatus","CrudType","RestMethod","BaseModel","_ref","_ref$uuid","uuid","_ref$created_at","created_at","_ref$modified_at","modified_at","Object","classCallCheck","this","AuthObject","_BaseModel","_this","_ref$code","code","_ref$provider","provider","_ref$redirect_uri","redirect_uri","args","objectWithoutProperties","possibleConstructorReturn","getPrototypeOf","call","inherits","AuthenticationService","state","clientID","redirectUri","apiLoginUrl","socialAuthProvider","userEmail","apiLoginToken","userFirstName","userLastName","objectID","serverLogin","socialLoginCode","authFormData","_this2","RestApiService","post","data","endpointUrl","serverLogout","_callee","regenerator_default","a","wrap","_context","prev","next","console","log","abrupt","stop","CrudMapToRest","crudType","CREATE","POST","READ","LIST","GET","UPDATE","PATCH","DELETE","RestApi","apiBaseUrl","get","objectName","fetch","getRelativeUrl","objectSpread","method","setApiAuthHeaders","then","res","json","_ref2","body","JSON","stringify","patch","_ref3","delete","_ref4","_ref5","url","concat","undefined","mode","credentials","headers","Authorization","Content-Type","RequestedLoginAuth","socialAuthToken","type","REQUESTED_LOGIN_AUTH","payload","requestStatus","REQUESTING","RequestedLogoutAuth","REQUESTED_LOGOUT_AUTH","SuccessLoginAuth","userName","expireDateTime","apiToken","avatarUrl","SUCCESS_AUTH","SUCCESS","isLogin","SuccessLogoutAuth","FailureAuth","error","FAILURE_AUTH","FAILURE","RestApiReduxFactory","initialObjectInstance","crudKeywords","values","ObjectRestApiRedux","_loop","crudKeyword","_i","_arr","_i2","length","actionTypeName","action","toUpperCase","TRIGGERED","objectClassInstance","callback","formData","jsonResponse","triggerFormData","newState","lastChangedObjectID","results","sagaHandler","mark","triggerAction","put","sent","status","Error","t0","saga","_context2","takeEvery","initialState","collection","sagas","map","actions","storeReducer","objectStore","arguments","objectAction","split","newObject","defineProperty","resObjectList","newObjects","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","done","object","value","err","return","afterStore","targetDeleteObject","omit","Address","_ref$place_name","place_name","_ref$country","country","_ref$state","_ref$city","city","_ref$street","street","_ref$full_address","full_address","_ref$zipcode","zipcode","AddressRestApiRedux","AddressReducer","AddressSagas","Link","_ref$text","text","_ref$user","user","_ref$url","_ref$order","order","Company","_ref$labels","labels","_ref$name","name","_ref$hq_location","hq_location","_ref$home_page","home_page","_ref$ratings","ratings","_ref$applications","applications","CompanyRestApiRedux","CompanyActions","CompanyReducer","CompanySagas","Application","_ref$user_company","user_company","_ref$position_title","position_title","_ref$job_description_","job_description_page","_ref$job_source","job_source","ApplicationRestApiRedux","ApplicationActions","ApplicationReducer","ApplicationSagas","SocialAuthLoginButton","_Component","_getPrototypeOf2","_len","Array","_key","apply","onLoginButtonClicked","clickEvent","renderProps","onClick","onAuthSuccess","authResponse","props","onSuccess","onAuthFailure","onFailure","createClass","key","react_default","createElement","className","google_login","render","react_button_dist_default","unelevated","icon","dist_default","hasRipple","disabled","clientId","responseType","Component","SocialAuthLogoutButton","onLogoutSuccess","SocialAuthButton","onSocialLoginSuccess","googleOauthResponse","setState","requestedLoginAuth","onSocialLoginFailure","onSocialLogoutSuccess","requestedLogoutAuth","auth","social_auth_logout_button_SocialAuthLogoutButton","social_auth_login_button_SocialAuthLoginButton","InputFieldType","SocialAuthButtonContainer","withRouter","connect","store","dispatch","ActionButtonType","FormInputFieldProps","fieldName","label","onTrailingIconSelect","FormInputFieldFactory","react_text_field_dist_default","react_text_field_dist","TEXT","inputType","onChange","onBlur","formik_esm","FormActionButtonProps","FormFactory","initialValues","validate","onSubmit","errors","touched","handleChange","handleBlur","isSubmitting","handleSubmit","formInputFieldPropsList","formInputFieldProps","index","form_field_factory_FormInputFieldFactory","assign","actionButtonPropsList","actionButtonProps","BUTTON","children","styles","backgroundColor","color","LandingPage","formFactoryProps","validateLoginForm","onSubmitLoginForm","setSubmitting","token","loginSuccess","username","avatar_url","listApplication","listCompany","catch","prepareLoginForm","password","PASSWORD","SUBMIT","style","react_router","to","form_factory_FormFactory","href","target","LandingPageContainer","CompanyComponent","company","react_router_dom","react_icon_button_dist_default","onEditIconClicked","onDeleteIconClicked","ApplicationStatus","_ref$application","application","_ref$applicationstatu","applicationstatuslink_set","_ref$date","date","ApplicationStatusRestApiRedux","ApplicationStatusActions","ApplicationStatusReducer","ApplicationStatusSagas","ApplicationStatusLink","_ref$application_stat","application_status","_ref$link","link","ApplicationStatusFormComponent","application_status__text","application_status__date","application__id","links","indexes","push","applicationStatusLinks","applicationStatus","createApplicationStatus","onSubmitSuccess","application_status__link0__url","application_status__link0__text","application_status__link1__url","application_status__link1__text","DATE","onCancel","ApplicationStatusFormComponentContainer","applicationStatusStore","applicationStatusFormData","ApplicationStatusComponent","deleteApplicationStatus","applicationStatusLink","ApplicationStatusComponentContainer","applicationStatusToDelete","ApplicationComponent","isApplicationStatusFormOpened","isShowApplicationStatuses","applicationStatusList","CompanyApplicationComponent","onDeleteClick","event","deleteCompany","company_component_CompanyComponent","history","applicationStore","filter","application_component_ApplicationComponent","CompanyApplicationComponentContainer","companyToDelete","updateCompany","companyToUpdate","UserAppPage","UserAppPageContainer","CompanyFormComponent","validateAppForm","company__name","test","company__home_page__url","onSubmitAppForm","company__hq_location__full_address","createCompany","CompanyFormComponentContainer","companyFormData","AddComPage","match","params","newCompany","AddComPageContainer","ApplicationFormComponent","application__position_title","application__job_description_page__url","application__job_source__url","application__user_company__id","createApplication","newApplication","ApplicationFormComponentContainer","applicationFormData","UserComAppPage","isApplicationFormOpened","companyUuid","renderAll","UserComAppPageContainer","UserInfo","toString","UserProfilePage","user_info_UserInfo","UserProfilePageContainer","PageRoutes","location","pathname","path","exact","component","react_top_app_bar_dist_default","title","actionItems","height","borderRadius","src","react_top_app_bar_dist","PageRoutesContainer","App","Boolean","window","hostname","RootActionNames","initialAuthState","authReducer","authStore","authAction","resetAllStoreAction","ResetAllStore","authLoginSagaHandler","authLoginSaga","authLogoutSagaHandler","authLogoutSaga","requestedLoginAuthAction","email","warn","_marked","_marked2","requestedLogoutAuthAction","_context3","_marked3","_context4","_marked4","sagaMiddleware","createSagaMiddleware","rootSaga","all","toConsumableArray","createBrowserHistory","basename","createStore","rootState","rootStateChecked","router","address","connectRouter","compose","applyMiddleware","routerMiddleware","run","ReactDOM","es","esm","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c66bcd2f.chunk.js","sourcesContent":["import { Action } from \"redux\";\n\nimport { RequestStatus } from \"../../utils/rest-api\";\n\n/**\n * Store Types\n */\n\n// complete store type\nexport interface IUpdateAuthState {\n    requestStatus: RequestStatus\n    isLogin: boolean\n    userName: string\n    socialAuthToken: string\n    apiToken: string\n    expireDateTime: string\n    avatarUrl: string\n}\n\n// async partial store types\nexport interface IRequestedLoginAuthState {\n    requestStatus: RequestStatus\n    socialAuthToken: string\n}\n\nexport interface IRequestedLogoutAuthState {\n    requestStatus: RequestStatus\n}\n\nexport interface ISuccessAuthState {\n    requestStatus: RequestStatus\n    isLogin: boolean\n    userName: string\n    expireDateTime: string\n    apiToken: string\n    avatarUrl: string\n}\n\nexport interface IFailureAuthState {\n    requestStatus: RequestStatus,\n    error: any\n}\n\n// add more state types for this reducer - auth reducer\n// ...\n\n\n\n\n\n/**\n * Action Types\n */\n\nexport enum AuthActionNames {\n    UPDATE_AUTH = \"Update auth\",\n    REQUESTED_LOGIN_AUTH = \"Requested login auth\",\n    REQUESTED_LOGOUT_AUTH = \"Requested logout auth\",\n    SUCCESS_AUTH = \"Success auth\",\n    FAILURE_AUTH = \"Failure auth\",\n\n    // 1. add more action for this reducer - auth reducer\n    // 2. write the type interface for the action below\n    // ...\n}\n\nexport interface IUpdateAuthAction extends Action<AuthActionNames.UPDATE_AUTH> {\n    type: typeof AuthActionNames.UPDATE_AUTH;\n    payload: IUpdateAuthState;\n}\n\nexport interface IRequestedLoginAuthAction extends Action<AuthActionNames.REQUESTED_LOGIN_AUTH> {\n    type: typeof AuthActionNames.REQUESTED_LOGIN_AUTH;\n    payload: IRequestedLoginAuthState;\n}\n\nexport interface IRequestedLogoutAuthAction extends Action<AuthActionNames.REQUESTED_LOGOUT_AUTH> {\n    type: typeof AuthActionNames.REQUESTED_LOGOUT_AUTH;\n    payload: IRequestedLogoutAuthState;\n}\n\nexport interface ISuccessAuthAction extends Action<AuthActionNames.SUCCESS_AUTH> {\n    type: typeof AuthActionNames.SUCCESS_AUTH;\n    payload: ISuccessAuthState;\n}\n\nexport interface IFailureAuthAction extends Action<AuthActionNames.FAILURE_AUTH> {\n    type: typeof AuthActionNames.FAILURE_AUTH;\n    payload: IFailureAuthState;\n}\n\n// use union | ... | ... to add more action types\nexport type TAuthActions = IUpdateAuthAction | IRequestedLoginAuthAction | IRequestedLogoutAuthAction | ISuccessAuthAction | IFailureAuthAction","import React from \"react\";\nimport { TObject, IObjectBase } from \"../store/rest-api-redux-factory\";\nimport { BaseModel } from \"../store/data-model/base-model\";\nimport { AuthenticationService } from \"./auth\";\n\nexport enum RequestStatus {\n    TRIGGERED = \"triggered\",\n    REQUESTING = \"requesting\",\n    SUCCESS = \"success\",\n    FAILURE = \"failre\"\n}\n\nexport enum CrudType {\n    CREATE = \"create\",\n    READ = \"read\",\n    LIST = \"list\",\n    UPDATE = \"update\",\n    DELETE = \"delete\"\n}\n\nexport enum RestMethod {\n    POST = \"post\",\n    GET = \"get\",\n    PATCH = \"patch\",\n    DELETE = \"delete\"\n}\n\nexport const CrudMapToRest = (crudType: CrudType): RestMethod => {\n    switch (crudType) {\n        case CrudType.CREATE:\n            return RestMethod.POST;\n        case CrudType.READ:\n            return RestMethod.GET;\n        case CrudType.LIST:\n            return RestMethod.GET;\n        case CrudType.UPDATE:\n            return RestMethod.PATCH;\n        case CrudType.DELETE:\n            return RestMethod.DELETE;\n\n        default:\n            return RestMethod.GET;\n    }\n};\n\nexport interface IRequestParams<Schema> {\n    endpointUrl?: string;\n    objectName?: string;\n    data?: TObject<Schema> | Array<TObject<Schema>>;\n}\n\nexport interface IListRestApiResponse<Schema> {\n    count: number;\n    next: any;\n    previous: any;\n    results: Array<TObject<Schema>>;\n}\n\nexport type ISingleRestApiResponse<Schema> = TObject<Schema>;\n\nexport function IsSingleRestApiResponseTypeGuard<Schema>(\n    response: ISingleRestApiResponse<Schema> | IListRestApiResponse<Schema>\n): response is ISingleRestApiResponse<Schema> {\n    return (<ISingleRestApiResponse<Schema>>response).uuid !== undefined;\n}\n\nfunction IsSingleFormDataTypeGuard<Schema>(\n    formData: TObject<Schema> | Array<TObject<Schema>>\n): formData is TObject<Schema> {\n    return (<TObject<Schema>>formData).uuid !== undefined;\n}\n\nexport class RestApi {\n    state = {\n        clientID: `732988498848-vuhd6g61bnlqe372i3l5pbpnerteu6na.apps.googleusercontent.com`,\n        code: ``,\n        redirectUri: `postmessage`,\n        apiBaseUrl: (process.env.NODE_ENV === 'development') ? \n        `http://localhost:8000/api/`\n        :\n        `https://appl-tracky-api-https.shaungc.com/api/`\n        ,\n        apiLoginUrl: `login/social/`,\n        socialAuthProvider: `google-oauth2`,\n\n        userEmail: ``,\n        apiLoginToken: ``,\n        userFirstName: ``,\n        userLastName: ``,\n\n        objectID: ``\n    };\n\n    get = <Schema>({ endpointUrl, objectName, data }: IRequestParams<Schema>) => {\n        return fetch(\n            this.getRelativeUrl({\n                endpointUrl,\n                objectName,\n                data\n            }),\n            {\n                method: \"GET\",\n                ...this.setApiAuthHeaders()\n            }\n        ).then(res => res.json());\n    };\n\n    post = <Schema>({ data, objectName, endpointUrl }: IRequestParams<Schema>) => {\n        console.log(`restapi:post fired`);\n        return fetch(\n            this.getRelativeUrl({\n                endpointUrl,\n                objectName,\n                data\n            }),\n            {\n                method: \"POST\",\n                ...this.setApiAuthHeaders(),\n                body: JSON.stringify(data)\n            }\n        ).then(res => res.json());\n        // let caller handle error in their own .catch()\n    };\n\n    patch = <Schema>({ data, objectName, endpointUrl }: IRequestParams<Schema>) => {\n        return fetch(\n            this.getRelativeUrl({\n                endpointUrl,\n                objectName,\n                data\n            }),\n            {\n                method: \"PATCH\",\n                ...this.setApiAuthHeaders(),\n                body: JSON.stringify(data)\n            }\n        ).then(res => res.json());\n    };\n\n    delete = <Schema>({ data, objectName, endpointUrl }: IRequestParams<Schema>) => {\n        return fetch(\n            this.getRelativeUrl({\n                endpointUrl,\n                objectName,\n                data\n            }),\n            {\n                method: \"DELETE\",\n                ...this.setApiAuthHeaders(),\n                body: JSON.stringify(data)\n            }\n        );\n    };\n\n    /** helper */\n    private getRelativeUrl = <Schema>({\n        objectName,\n        data,\n        endpointUrl\n    }: IRequestParams<Schema>) => {\n        let url = \"\";\n        if (endpointUrl) {\n            url = `${this.state.apiBaseUrl}${endpointUrl}`;\n        } else {\n            if (data && IsSingleFormDataTypeGuard(data) && data.uuid) {\n                url = `${this.state.apiBaseUrl}${objectName}/${data.uuid}/`;\n            } else {\n                url = `${this.state.apiBaseUrl}${objectName}/`;\n            }\n        }\n        console.log(`restapi: url: ${url}, objname=${objectName}`);\n        return url;\n    };\n\n    private setApiAuthHeaders = (): RequestInit => {\n\n        this.state.apiLoginToken = (\n            AuthenticationService.state.apiLoginToken\n        ) ? AuthenticationService.state.apiLoginToken : this.state.apiLoginToken;\n\n        console.log(\"api: set header: got credentials?\", this.state.apiLoginToken);\n        return {\n            mode: \"cors\",\n            credentials: this.state.apiLoginToken ? \"include\" : \"omit\",\n            headers: {\n                Authorization: this.state.apiLoginToken\n                    ? `JWT ${this.state.apiLoginToken}`\n                    : ``,\n                \"Content-Type\": \"application/json\"\n            }\n        };\n    };\n}\n\n/** create restapi singleton */\nexport const RestApiService = new RestApi();\n","export type IRelationship = string;\n\nexport interface IBaseModelProps {\n    uuid?: IRelationship\n    created_at?: string\n    modified_at?: string\n}\n\nexport class BaseModel {\n    uuid: string\n    created_at: string\n    modified_at: string\n    \n    constructor({\n        uuid = \"\",\n        created_at = \"\",\n        modified_at = \"\",\n    }: IBaseModelProps) {\n        this.uuid = uuid;\n        this.created_at = created_at;\n        this.modified_at = modified_at;\n    }\n}","import { RestApiService } from \"./rest-api\";\nimport { BaseModel, IBaseModelProps } from \"../store/data-model/base-model\";\n\nexport interface IAuthObjectProps {\n    code?: string\n    provider?: string\n    redirect_uri?: string\n}\n\nexport class AuthObject extends BaseModel {\n    code: string\n    provider: string\n    redirect_uri: string\n\n    constructor({\n        code = \"\",\n        provider = \"\",\n        redirect_uri = \"\",\n        ...args\n    }: IAuthObjectProps & IBaseModelProps) {\n        super(args);\n        this.code = code;\n        this.provider = provider;\n        this.redirect_uri = redirect_uri;\n    }\n}\n\nclass Authentication {\n    state = {\n        clientID: `732988498848-vuhd6g61bnlqe372i3l5pbpnerteu6na.apps.googleusercontent.com`,\n\n        redirectUri: `postmessage`,\n        apiLoginUrl: `login/social/`,\n        socialAuthProvider: `google-oauth2`,\n\n        userEmail: ``,\n        apiLoginToken: ``,\n        userFirstName: ``,\n        userLastName: ``,\n\n        objectID: ``\n    };\n\n    serverLogin = (socialLoginCode: string) => {\n        let authFormData = new AuthObject({\n            code: socialLoginCode,\n            provider: this.state.socialAuthProvider,\n            redirect_uri: this.state.redirectUri\n        })\n        return RestApiService\n            .post<AuthObject>({\n                data: authFormData,\n                endpointUrl: this.state.apiLoginUrl\n            })\n    }\n\n    serverLogout = async () => {\n        console.log(\"server logout...\");\n        // no server-side invalidate implement at this point (a common case for JWT, however)\n        this.state.userEmail = \"\";\n        this.state.userFirstName = \"\"\n        this.state.userLastName = \"\"\n        this.state.apiLoginToken = RestApiService.state.apiLoginToken = \"\";\n        return;\n    }\n}\n\nexport const AuthenticationService = new Authentication();","import { ActionCreator } from \"redux\";\n\nimport {\n    /** state types */\n    IUpdateAuthState,\n    IRequestedLoginAuthState,\n    /** action types */\n    IUpdateAuthAction,\n    IRequestedLoginAuthAction,\n    IRequestedLogoutAuthAction,\n    ISuccessAuthAction,\n    IFailureAuthAction,\n    /** action names */\n    AuthActionNames\n} from \"./types\";\n\nimport { RequestStatus } from \"../../utils/rest-api\";\n\nexport const UpdateAuth = (newAuthState: IUpdateAuthState): IUpdateAuthAction => {\n    return {\n        type: AuthActionNames.UPDATE_AUTH,\n        payload: newAuthState\n    };\n};\n\nexport const RequestedLoginAuth = (socialAuthToken: string): IRequestedLoginAuthAction => {\n    return {\n        type: AuthActionNames.REQUESTED_LOGIN_AUTH,\n        payload: {\n            requestStatus: RequestStatus.REQUESTING,\n            socialAuthToken\n        }\n    };\n};\n\nexport const RequestedLogoutAuth = (): IRequestedLogoutAuthAction => {\n    return {\n        type: AuthActionNames.REQUESTED_LOGOUT_AUTH,\n        payload: {\n            requestStatus: RequestStatus.REQUESTING,\n        }\n    };\n};\n\nexport const SuccessLoginAuth = (userName: string, expireDateTime: string, apiToken: string, avatarUrl: string): ISuccessAuthAction => {\n    console.log(\"action username:\", userName);\n    return {\n        type: AuthActionNames.SUCCESS_AUTH,\n        payload: {\n            requestStatus: RequestStatus.SUCCESS,\n            isLogin: true,\n            userName,\n            expireDateTime,\n            apiToken,\n            avatarUrl\n        }\n    };\n};\n\nexport const SuccessLogoutAuth = (): ISuccessAuthAction => {\n    return {\n        type: AuthActionNames.SUCCESS_AUTH,\n        payload: {\n            requestStatus: RequestStatus.SUCCESS,\n            isLogin: false,\n            userName: \"\",\n            expireDateTime: \"\",\n            apiToken: \"\",\n            avatarUrl: \"\",\n        }\n    };\n};\n\nexport const FailureAuth = (error: any): IFailureAuthAction => {\n    return {\n        type: AuthActionNames.FAILURE_AUTH,\n        payload: {\n            requestStatus: RequestStatus.FAILURE,\n            error\n        }\n    };\n};\n\n// write new actions here for this reducer - auth reducer\n// ...\n","import { Action, Reducer } from \"redux\";\nimport { takeEvery, call, put } from \"redux-saga/effects\";\nimport { SagaIterator } from \"redux-saga\";\nimport {\n    RequestStatus,\n    CrudType,\n    CrudMapToRest,\n    RestApiService,\n    IRequestParams,\n    ISingleRestApiResponse,\n    IListRestApiResponse,\n    IsSingleRestApiResponseTypeGuard\n} from \"../utils/rest-api\";\nimport omit from \"lodash/omit\";\n\n/** state & store */\n\nexport interface IObjectBase {\n    uuid: string;\n}\n\nexport type TObject<Schema> = IObjectBase & { [Property in keyof Schema]: Schema[Property] };\n\ninterface IObjectList<Schema> {\n    [uuid: string]: TObject<Schema>;\n}\n\nexport interface IObjectStore<Schema> {\n    lastChangedObjectID?: string;\n    requestStatus: RequestStatus;\n    error?: any;\n    collection: IObjectList<Schema>;\n}\n\n/** action */\n\ntype IObjectRestApiReduxFactoryActions = {\n    [restfulKeyword: string]: {\n        [asyncKeyword: string]: {\n            actionTypeName: string;\n            action: Function;\n            saga?: () => SagaIterator;\n        };\n    };\n};\n\nexport interface IObjectAction<Schema> extends Action {\n    type: string;\n    crudType: CrudType;\n\n    // for deleteAction or other actions to obtain the original instance obj passed into trigger action\n    triggerFormData?: TObject<Schema> | Array<TObject<Schema>>;\n\n    // for saga to perform additional side effect e.g. navigation\n    callback?: Function;\n    \n    payload: {\n        formData?: TObject<Schema> | Array<TObject<Schema>>;\n        lastChangedObjectID?: string;\n        requestStatus: RequestStatus;\n        error?: any;\n    };\n}\n\n/** factory API */\n\ninterface IRestApiReduxFactory<Schema> {\n    actions: IObjectRestApiReduxFactoryActions;\n    storeReducer: Reducer<IObjectStore<Schema>>\n    sagas: Array<() => SagaIterator>;\n}\n\nexport const RestApiReduxFactory = <Schema extends IObjectBase>(\n    /** should have uuid */ objectName: string,\n    initialObjectInstance: TObject<Schema>\n): IRestApiReduxFactory<Schema> => {\n    type TObjectSchema = typeof initialObjectInstance;\n    const crudKeywords = Object.values(CrudType);\n\n    let ObjectRestApiRedux: IObjectRestApiReduxFactoryActions = {};\n    for (let crudKeyword of crudKeywords) {\n        ObjectRestApiRedux[crudKeyword] = {};\n        /** store */\n        // TODO?: action state\n\n        /** action */\n        // action type names\n        for (let requestStatus of Object.values(RequestStatus)) {\n            ObjectRestApiRedux[crudKeyword][requestStatus] = {\n                actionTypeName: \"\",\n                action: () => {}\n            };\n            ObjectRestApiRedux[crudKeyword][\n                requestStatus\n            ].actionTypeName = `${requestStatus.toUpperCase()}_${crudKeyword.toUpperCase()}_${objectName.toUpperCase()}`;\n        }\n\n        // async actions ( & state...)\n        ObjectRestApiRedux[crudKeyword][RequestStatus.TRIGGERED].action = (\n            objectClassInstance: TObjectSchema,\n            callback?: Function\n        ): IObjectAction<TObjectSchema> => {\n            console.log(`action:fired, trigger, ${crudKeyword}`);\n            return {\n                type:\n                    ObjectRestApiRedux[crudKeyword][RequestStatus.TRIGGERED]\n                        .actionTypeName,\n                crudType: crudKeyword,\n                callback: callback,\n                payload: {\n                    requestStatus: RequestStatus.TRIGGERED,\n                    formData: objectClassInstance\n                }\n            };\n        };\n        ObjectRestApiRedux[crudKeyword][\n            RequestStatus.REQUESTING\n        ].action = (): IObjectAction<TObjectSchema> => {\n            return {\n                type:\n                    ObjectRestApiRedux[crudKeyword][RequestStatus.REQUESTING]\n                        .actionTypeName,\n                crudType: crudKeyword,\n                payload: {\n                    requestStatus: RequestStatus.REQUESTING\n                }\n            };\n        };\n        ObjectRestApiRedux[crudKeyword][RequestStatus.SUCCESS].action = (\n            /** api response */\n            jsonResponse:\n            | IListRestApiResponse<TObjectSchema>\n            | ISingleRestApiResponse<TObjectSchema>,\n            triggerFormData?: TObject<Schema> | Array<TObject<Schema>>\n        ): IObjectAction<TObjectSchema> => {\n            let newState = {\n                type:\n                    ObjectRestApiRedux[crudKeyword][RequestStatus.SUCCESS]\n                        .actionTypeName,\n                crudType: crudKeyword\n            };\n            // if is delete success, we don't need formData (& the server responds nothing for DELETE as well)\n            if (crudKeyword === CrudType.DELETE) {\n                return {\n                    ...newState,\n                    triggerFormData,\n                    payload: {\n                        requestStatus: RequestStatus.SUCCESS,\n                    }\n                }\n            }\n            else if (IsSingleRestApiResponseTypeGuard(jsonResponse)) {\n                return {\n                    ...newState,\n                    payload: {\n                        requestStatus: RequestStatus.SUCCESS,\n                        formData: <ISingleRestApiResponse<TObjectSchema>>(\n                            jsonResponse\n                        ),\n                        lastChangedObjectID: jsonResponse.uuid\n                    }\n                };\n            } else {\n                return {\n                    ...newState,\n                    payload: {\n                        requestStatus: RequestStatus.SUCCESS,\n                        formData: (<IListRestApiResponse<TObjectSchema>>(\n                            jsonResponse\n                        )).results\n                    }\n                };\n            }\n        };\n        ObjectRestApiRedux[crudKeyword][RequestStatus.FAILURE].action = (\n            error: any\n        ): IObjectAction<TObjectSchema> => {\n            return {\n                type:\n                    ObjectRestApiRedux[crudKeyword][RequestStatus.FAILURE]\n                        .actionTypeName,\n                crudType: crudKeyword,\n                payload: {\n                    requestStatus: RequestStatus.FAILURE,\n                    error\n                }\n            };\n        };\n\n        /** saga */\n        const sagaHandler = function*(\n            triggerAction: IObjectAction<TObjectSchema>\n        ) {\n            console.log(`Saga: action intercepted; aync=trigger, crud=${crudKeyword}, obj=${objectName}; ready to call api`);\n            const formData = triggerAction.payload.formData;\n            yield put(\n                ObjectRestApiRedux[crudKeyword][\n                    RequestStatus.REQUESTING\n                ].action()\n            );\n            try {\n                // api call\n                const jsonResponse:\n                    | IListRestApiResponse<TObjectSchema>\n                    | ISingleRestApiResponse<TObjectSchema> \n                    | any = yield call(\n                    (<(params: IRequestParams<TObjectSchema>) => void>RestApiService[CrudMapToRest(crudKeyword)]),\n                    {\n                        data: formData,\n                        objectName\n                    }\n                );\n\n                console.log(\"Saga: res from server\", jsonResponse);\n\n                if (jsonResponse.status && jsonResponse.status >= 400) {\n                    console.error(\"Server error, see message in res.\");\n                    throw new Error(\"Server error, see message in res.\");\n                } \n\n                // success state\n                if (crudKeyword === CrudType.DELETE) {\n                    yield put(\n                        ObjectRestApiRedux[CrudType.DELETE][\n                            RequestStatus.SUCCESS\n                        ].action(jsonResponse, formData)\n                    );\n                } else {\n                    console.log(\"Saga: ready to dispatch success action\")\n                    yield put(\n                        ObjectRestApiRedux[crudKeyword][\n                            RequestStatus.SUCCESS\n                        ].action(jsonResponse)\n                    );\n                }\n\n                if (triggerAction.callback) {\n                    triggerAction.callback();\n                }\n            } catch (error) {\n                // error state\n                yield put(\n                    ObjectRestApiRedux[crudKeyword][\n                        RequestStatus.FAILURE\n                    ].action(error)\n                );\n                return;\n            }\n        };\n\n        ObjectRestApiRedux[crudKeyword][\n            RequestStatus.TRIGGERED\n        ].saga = function*() {\n            console.log(`Saga: action intercepted; async=trigger, crud=${crudKeyword}, obj=${objectName}`);\n            yield takeEvery(\n                ObjectRestApiRedux[crudKeyword][RequestStatus.TRIGGERED]\n                    .actionTypeName,\n                sagaHandler\n            );\n        };\n    }\n\n    const initialState: IObjectStore<TObjectSchema> = {\n        collection: {},\n        requestStatus: RequestStatus.SUCCESS\n    };\n\n    const storeReducer: Reducer<IObjectStore<Schema>> = (\n        objectStore: IObjectStore<TObjectSchema> = initialState,\n        action: Action\n    ): IObjectStore<TObjectSchema> => {\n        \n        const objectAction = action as IObjectAction<TObjectSchema>;\n\n        if (\n            !(objectAction && objectAction.payload && objectAction.payload.requestStatus) ||\n            !(action.type.split(\"_\")[2] === objectName.toUpperCase())\n        ) {\n            return {\n                ...objectStore\n            };\n        }\n\n        // async success\n        if (objectAction.payload.requestStatus === RequestStatus.SUCCESS) {\n            // CREATE\n            if (objectAction.crudType === CrudType.CREATE) {\n                let newObject = <TObject<TObjectSchema>>objectAction.payload.formData;\n                return {\n                    collection: {\n                        ...objectStore.collection,\n                        [newObject.uuid]: newObject\n                    },\n                    requestStatus: objectAction.payload.requestStatus,\n                    lastChangedObjectID: objectAction.payload.lastChangedObjectID\n                };\n            }\n\n            // LIST\n            else if (objectAction.crudType === CrudType.LIST) {\n                const resObjectList = <Array<TObject<TObjectSchema>>>(\n                    objectAction.payload.formData\n                );\n                let newObjects: IObjectList<TObjectSchema> = {};\n                for (let object of resObjectList) {\n                    newObjects[object.uuid] = object;\n                }\n                console.log(\"Reducer: crud=list, action=\", objectAction)\n                console.log(\"initialState=\", initialState)\n                console.log(\"beforestore=\", objectStore)\n                console.log(\"newlistobjects=\", newObjects)\n\n                const afterStore: IObjectStore<TObjectSchema> = {\n                    collection: {\n                        ...objectStore.collection,\n                        ...newObjects\n                    },\n                    requestStatus: objectAction.payload.requestStatus\n                };\n                console.log(\"afterstore=\", afterStore)\n\n                return afterStore;\n            }\n\n            // UPDATE\n            else if (objectAction.crudType === CrudType.UPDATE) {\n                let newObject = <TObject<TObjectSchema>>objectAction.payload.formData;\n                return {\n                    collection: {\n                        ...objectStore.collection,\n                        [newObject.uuid]: newObject\n                    },\n                    requestStatus: objectAction.payload.requestStatus,\n                    lastChangedObjectID: objectAction.payload.lastChangedObjectID\n                };\n            }\n\n            // DELETE\n            else if (objectAction.crudType === CrudType.DELETE) {\n                let targetDeleteObject = <TObject<TObjectSchema>>objectAction.triggerFormData;\n                console.log(\"Reducer: delete, targetobj=\", targetDeleteObject)\n\n                console.log(\"Reducer: delete, beforestore=\", objectStore)\n                \n                const afterStore = {\n                    collection: omit(objectStore.collection, [targetDeleteObject.uuid]),\n                    requestStatus: objectAction.payload.requestStatus\n                }\n                console.log(\"Reducer: delete, afterstore\", afterStore)\n\n                return afterStore;\n            }\n        }\n\n        // async trigger\n        else if (objectAction.payload.requestStatus === RequestStatus.TRIGGERED) {\n            return {\n                ...objectStore,\n                requestStatus: objectAction.payload.requestStatus\n            };\n        }\n\n        // async requesting & failure\n        else {\n            return {\n                ...objectStore,\n                ...objectAction.payload\n            };\n        }\n\n        // no effect\n        return {\n            ...objectStore\n        };\n    };\n\n    const sagas = crudKeywords.map((crudKeyword) => \n        (<() => SagaIterator>ObjectRestApiRedux[crudKeyword][RequestStatus.TRIGGERED].saga)\n    );\n\n    return {\n        actions: ObjectRestApiRedux,\n        storeReducer,\n        sagas\n    };\n};\n","import { RestApiReduxFactory } from \"../rest-api-redux-factory\";\nimport { BaseModel, IBaseModelProps } from \"./base-model\";\n\nexport interface IAddressProps {\n    place_name?: string;\n    country?: string;\n    state?: string;\n    city?: string;\n    street?: string;\n    full_address?: string;\n    zipcode?: string;\n}\n\nexport class Address extends BaseModel {\n    place_name: string;\n    country: string;\n    state: string;\n    city: string;\n    street: string;\n    full_address: string;\n    zipcode: string;\n\n    constructor({\n        place_name = \"\",\n        country = \"\",\n        state = \"\",\n        city = \"\",\n        street = \"\",\n        full_address = \"\",\n        zipcode = \"\",\n        ...args\n    }: IAddressProps & IBaseModelProps) {\n        super(args);\n        this.place_name = place_name;\n        this.country = country;\n        this.state = state;\n        this.place_name = place_name;\n        this.city = city;\n        this.street = street;\n        this.full_address = full_address;\n        this.zipcode = zipcode;\n    }\n}\n\nconst initialAddressInstance = new Address({});\nconst AddressRestApiRedux = RestApiReduxFactory<Address>(\n    \"addresses\",\n    initialAddressInstance\n);\nexport const AddressActions = AddressRestApiRedux.actions;\nexport const AddressReducer = AddressRestApiRedux.storeReducer;\nexport const AddressSagas = AddressRestApiRedux.sagas;\n","import { BaseModel, IBaseModelProps } from \"./base-model\";\n\ninterface ILinkProps {\n    text?: string;\n    user?: any;\n    url?: string;\n    order?: number;\n}\n\nexport class Link extends BaseModel {\n    public text: string;\n    public user: any;\n    public url: string;\n    public order: number;\n\n    constructor({\n        text = \"\",\n        user = {},\n        url = \"\",\n        order = 0,\n        ...args\n    }: ILinkProps & IBaseModelProps) {\n        super(args);\n        this.text = text;\n        this.user = user;\n        this.url = url;\n        this.order = order;\n    }\n}\n","import { RestApiReduxFactory } from \"../rest-api-redux-factory\";\nimport { BaseModel, IBaseModelProps } from \"./base-model\";\nimport { Address } from \"./address\";\nimport { Link } from \"./link\";\n\ninterface ICompanyProps {\n    user?: string;\n    labels?: any;\n    name?: string;\n    hq_location?: Address;\n    home_page?: Link;\n    ratings?: any;\n    applications?: any;\n}\n\nexport class Company extends BaseModel {\n    public user: string;\n    public labels: any;\n    public name: string;\n    public hq_location: Address;\n    public home_page: Link;\n    public ratings: any;\n    public applications: any;\n\n    constructor({\n        user = \"\",\n        labels = [],\n        name = \"\",\n        hq_location = new Address({}),\n        home_page = new Link({}),\n        ratings = {},\n        applications = {},\n        ...args\n    }: ICompanyProps & IBaseModelProps) {\n        super(args);\n        this.user = user;\n        this.labels = labels;\n        this.name = name;\n        this.hq_location = hq_location;\n        this.home_page = home_page;\n        this.ratings = ratings;\n        this.applications = applications;\n    }\n}\n\nconst initialCompanyInstance = new Company({});\nconst CompanyRestApiRedux = RestApiReduxFactory<Company>(\n    \"companies\",\n    initialCompanyInstance\n);\nexport const CompanyActions = CompanyRestApiRedux.actions;\nexport const CompanyReducer = CompanyRestApiRedux.storeReducer;\nexport const CompanySagas = CompanyRestApiRedux.sagas;\n","import { RestApiReduxFactory } from \"../rest-api-redux-factory\";\nimport { BaseModel, IBaseModelProps, IRelationship } from \"./base-model\";\nimport { Link } from \"./link\";\n\ninterface IApplicationProps {\n    user?: IRelationship;\n    user_company?: IRelationship;\n    position_title?: string;\n    job_description_page?: Link;\n    job_source?: Link;\n    labels?: any;\n}\n\nexport class Application extends BaseModel {\n    public user: string;\n    public user_company: IRelationship;\n    public position_title: string;\n    public job_description_page: Link;\n    public job_source: Link;\n    public labels: any;\n\n    constructor({\n        user = \"\",\n        user_company = \"\",\n        position_title = \"\",\n        job_description_page = new Link({}),\n        job_source = new Link({}),\n        labels = {},\n        ...args\n    }: IApplicationProps & IBaseModelProps) {\n        super(args);\n        this.user = user;\n        this.user_company = user_company;\n        this.position_title = position_title;\n        this.job_description_page = job_description_page;\n        this.job_source = job_source;\n        this.labels = labels;\n    }\n}\n\nconst initialApplicationInstance = new Application({});\nconst ApplicationRestApiRedux = RestApiReduxFactory<Application>(\n    \"applications\",\n    initialApplicationInstance\n);\nexport const ApplicationActions = ApplicationRestApiRedux.actions;\nexport const ApplicationReducer = ApplicationRestApiRedux.storeReducer;\nexport const ApplicationSagas = ApplicationRestApiRedux.sagas;\n","import React, { Component } from \"react\";\n\n/** Components */\nimport { GoogleLogin } from \"react-google-login\";\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n\ninterface ISocialAuthLoginButtonProps {\n    clientID: string;\n    redirectUri?: string;\n    onSuccess(authResponse?: any): void;\n    onFailure?(error: any): void;\n    disabled?: boolean;\n}\n\nexport class SocialAuthLoginButton extends Component<\n    ISocialAuthLoginButtonProps\n> {\n    onLoginButtonClicked = (clickEvent: any, renderProps: any) => {\n        console.log(\"login button clicked\", clickEvent, renderProps);\n        renderProps.onClick(clickEvent);\n    };\n\n    onAuthSuccess = (authResponse?: any) => {\n        console.log(\"login button auth success\");\n        this.props.onSuccess(authResponse);\n    };\n\n    onAuthFailure = (error: any) => {\n        console.log(\"login button auth failed\");\n        if (this.props.onFailure) {\n            this.props.onFailure(error);\n        }\n    };\n\n    render() {\n        return (\n            <div className=\"UserAuthButton\">\n                <GoogleLogin\n                    render={(renderProps: any) => (\n                        <Button\n                            onClick={clickEvent =>\n                                this.onLoginButtonClicked(\n                                    clickEvent,\n                                    renderProps\n                                )\n                            }\n                            unelevated\n                            icon={\n                                <MaterialIcon hasRipple icon=\"account_circle\" />\n                            }\n                            disabled={this.props.disabled}\n                        >\n                            Google Login\n                        </Button>\n                    )}\n                    onSuccess={this.onAuthSuccess}\n                    onFailure={this.onAuthFailure}\n                    clientId={this.props.clientID}\n                    responseType=\"code\"\n                    redirectUri={this.props.redirectUri || \"postmessage\"}\n                />\n            </div>\n        );\n    }\n}\n","import React, { Component } from \"react\";\n\n/** Components */\nimport { GoogleLogout } from \"react-google-login\";\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n\ninterface ISocialAuthLogoutButtonProps {\n    onSuccess(authResponse?: any): void;\n    disabled?: boolean\n}\n\nexport class SocialAuthLogoutButton extends Component<\n    ISocialAuthLogoutButtonProps\n> {\n    onAuthSuccess = (authResponse?: any) => {\n        this.props.onSuccess(authResponse);\n    };\n\n    render() {\n        return (\n            <div className=\"UserAuthButton\">\n                <GoogleLogout\n                    render={(renderProps: any) => (\n                        <Button\n                            onClick={renderProps.onClick}\n                            unelevated\n                            icon={<MaterialIcon hasRipple icon=\"eject\" />}\n                            disabled={this.props.disabled}\n                        >\n                            Logout\n                        </Button>\n                    )}\n                    onLogoutSuccess={this.onAuthSuccess}\n                />\n            </div>\n        );\n    }\n}\n","import React, { Component } from \"react\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\n\n/** Redux */\nimport { Dispatch } from \"redux\";\nimport { connect } from \"react-redux\";\nimport { IRootState } from \"../../store/types\";\nimport { IUpdateAuthAction, IRequestedLoginAuthAction, TAuthActions, IUpdateAuthState } from \"../../store/auth/types\";\nimport { UpdateAuth, RequestedLoginAuth, RequestedLogoutAuth } from \"../../store/auth/actions\";\n\n/** rest api */\nimport { RequestStatus } from \"../../utils/rest-api\";\n\n/** Components */\nimport { SocialAuthLoginButton } from \"./social-auth-login-button\";\nimport { SocialAuthLogoutButton } from \"./social-auth-logout-button\";\n\ninterface ISocialAuthButtonProps extends RouteComponentProps {\n    auth: IUpdateAuthState;\n    requestedLoginAuth: (socialAuthToken: string) => void;\n    requestedLogoutAuth: () => void;\n}\n\nclass SocialAuthButton extends Component<\n    ISocialAuthButtonProps\n> {\n    state = {\n        clientID: `732988498848-vuhd6g61bnlqe372i3l5pbpnerteu6na.apps.googleusercontent.com`,\n        code: ``,\n        redirectUri: `postmessage`,\n        apiBaseUrl: `http://localhost:8000/`,\n        apiLoginUrl: `login/social/`,\n        socialAuthProvider: `google-oauth2`,\n\n        userEmail: ``,\n        apiLoginToken: ``,\n        userFirstName: ``,\n        userLastName: ``,\n\n        objectID: ``\n    };\n\n    onSocialLoginSuccess = (googleOauthResponse: any) => {\n        console.log(\"Google Oauth2 res:\", googleOauthResponse);\n        this.setState(\n            {\n                code: googleOauthResponse.code\n            },\n            () => {\n                // this.apiLogin();\n                console.log(\"social button: request auth...\");\n                this.props.requestedLoginAuth(this.state.code);\n            }\n        );\n    };\n\n    onSocialLoginFailure = (error: any) => {\n        console.error(\"Social login failed:\", error);\n    };\n\n    onSocialLogoutSuccess = () => {\n        console.log(\"Social logout success, now our web app logout\");\n        this.props.requestedLogoutAuth();\n    };\n\n    render() {\n        return (\n            <div className=\"SocialAuth\">\n                auth requestStatus: {this.props.auth.requestStatus} <br></br>\n                {!this.props.auth.isLogin ? (\n                    <SocialAuthLoginButton\n                        clientID={this.state.clientID}\n                        onSuccess={this.onSocialLoginSuccess}\n                        onFailure={this.onSocialLoginFailure}\n                        disabled={this.props.auth.requestStatus === RequestStatus.REQUESTING}\n                    />\n                ) : (\n                    <SocialAuthLogoutButton\n                        onSuccess={this.onSocialLogoutSuccess}\n                        disabled={this.props.auth.requestStatus === RequestStatus.REQUESTING}\n                    />\n                )}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => {\n    return {\n        auth: store.auth\n    };\n};\n\nfunction mapDispatchToProps(dispatch: Dispatch<TAuthActions>) {\n    return {\n        requestedLoginAuth: (socialAuthToken: string) => {\n            dispatch(\n                RequestedLoginAuth(socialAuthToken)\n            );\n        },\n        requestedLogoutAuth: () => {\n            dispatch(\n                RequestedLogoutAuth()\n            );\n        }\n    };\n}\n\nexport const SocialAuthButtonContainer = withRouter(connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(SocialAuthButton));\n","import React, { Component } from \"react\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\n\n/** Components */\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n// mdc-react input\nimport \"@material/react-text-field/dist/text-field.css\";\nimport TextField, { HelperText, Input } from \"@material/react-text-field\";\n// formik\nimport {\n    Formik,\n    Form,\n    Field,\n    ErrorMessage,\n    FormikValues,\n    FormikTouched,\n    FormikErrors,\n} from \"formik\";\n\nexport enum InputFieldType {\n    // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input\n    TEXT = \"text\",\n    PASSWORD = \"password\",\n    EMAIL = \"email\",\n    URL = \"url\",\n    DATE = \"date\"\n}\n\nexport class FormInputFieldProps {\n    constructor(\n        public fieldName: string = \"\",\n        public label: string = \"\",\n        public type?: InputFieldType,\n        public onTrailingIconSelect?: () => void\n    ) {}\n}\n\ninterface IFormInputFieldFactoryProps extends FormInputFieldProps {\n    /* formik */\n    onChange: (event: any) => void\n    onBlur: (event: any) => void\n    values: FormikValues\n    errors: FormikErrors<FormikValues>\n    touched: FormikTouched<FormikValues>\n}\n\nexport class FormInputFieldFactory extends Component<IFormInputFieldFactoryProps> {\n    render() {\n        return (\n            <div className=\"FormFieldFactory\">\n                <TextField\n                    label={this.props.label}\n                    onTrailingIconSelect={this.props.onTrailingIconSelect}\n                    // trailingIcon={<MaterialIcon role=\"button\" icon=\"clear\" />}\n                >\n                    <Input\n                        type={this.props.type || InputFieldType.TEXT}\n                        name={this.props.fieldName}\n                        inputType=\"input\"\n                        onChange={this.props.onChange}\n                        onBlur={this.props.onBlur}\n                        value={this.props.values[this.props.fieldName]}\n                    />\n                </TextField>\n                <ErrorMessage name={this.props.fieldName} />\n            </div>\n        );\n    }\n}","import React, { Component } from \"react\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\n\n/** Components */\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n// mdc-react input\nimport \"@material/react-text-field/dist/text-field.css\";\nimport TextField, { HelperText, Input } from \"@material/react-text-field\";\n// formik\nimport {\n    Formik,\n    Form,\n    Field,\n    ErrorMessage,\n    FormikValues,\n    FormikErrors,\n    FormikTouched\n} from \"formik\";\nimport { FormInputFieldFactory, FormInputFieldProps } from \"./form-field-factory\";\n\nexport enum ActionButtonType {\n    SUBMIT = \"submit\",\n    BUTTON = \"button\"\n}\n\nexport class FormActionButtonProps {\n    constructor(\n        public text: string = \"\", \n        public onClick?: (event: any) => void, \n        public type?: ActionButtonType\n    ) {}\n}\n\nexport interface IFormFactoryProps<DataModel> {\n    initialValues: DataModel;\n\n    validate: (values: FormikValues) => FormikErrors<FormikValues>;\n    onSubmit: (\n        values: FormikValues,\n        { setSubmitting }: { setSubmitting: Function }\n    ) => void;\n\n    actionButtonPropsList: Array<FormActionButtonProps>;\n    formInputFieldPropsList: Array<FormInputFieldProps>\n}\n\nexport class FormFactory<DataModel> extends Component<\n    IFormFactoryProps<DataModel>\n> {\n    render() {\n        return (\n            <div className=\"FormFactory\">\n                <Formik\n                    initialValues={this.props.initialValues}\n                    validate={this.props.validate}\n                    onSubmit={this.props.onSubmit}\n                >\n                    {({\n                        values,\n                        errors,\n                        touched,\n                        handleChange,\n                        handleBlur,\n                        handleSubmit,\n                        isSubmitting\n                    }: {\n                        values: FormikValues,\n                        touched: FormikTouched<FormikValues>,\n                        [props: string]: any\n                    }) => (\n                        <Form>\n                            {this.props.formInputFieldPropsList.map((formInputFieldProps: FormInputFieldProps, index) => (\n                                <FormInputFieldFactory \n                                    key={index}\n                                    {...formInputFieldProps} \n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    values={values}\n                                    errors={errors}\n                                    touched={touched}\n                                />\n                            ))}\n                            {this.props.actionButtonPropsList.map(\n                                (actionButtonProps: FormActionButtonProps, index) => (\n                                    <Button\n                                        key={index}\n                                        type={actionButtonProps.type || ActionButtonType.BUTTON}\n                                        disabled={isSubmitting}\n                                        unelevated\n                                        onClick={actionButtonProps.onClick}\n                                        children={actionButtonProps.text}\n                                    />\n                                )\n                            )}\n                        </Form>\n                    )}\n                </Formik>\n            </div>\n        );\n    }\n}\n","import React, { Component } from \"react\";\nimport { withRouter, RouteComponentProps, Redirect } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch, AnyAction } from \"redux\";\nimport { IRootState } from \"../../store/types\";\nimport { IUpdateAuthState } from \"../../store/auth/types\";\nimport { SuccessLoginAuth } from \"../../store/auth/actions\";\nimport { CompanyActions, Company } from \"../../store/data-model/company\";\nimport {\n    ApplicationActions,\n    Application\n} from \"../../store/data-model/application\";\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\n\n/** Components */\nimport { SocialAuthButtonContainer } from \"../../components/social-auth/social-auth-button\";\n// form\nimport {\n    FormFactory,\n    FormActionButtonProps,\n    IFormFactoryProps,\n    ActionButtonType\n} from \"../../components/form-factory/form-factory\";\nimport {\n    FormInputFieldFactory,\n    FormInputFieldProps,\n    InputFieldType\n} from \"../../components/form-factory/form-field-factory\";\nimport { ErrorMessage, FormikValues, FormikErrors } from \"formik\";\nimport { AuthenticationService } from \"../../utils/auth\";\nimport { RestApiService } from \"../../utils/rest-api\";\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n\n\nlet styles = {\n    backgroundColor: \"purple\",\n    color: \"white\"\n};\n\ninterface ILandingPageProps extends RouteComponentProps {\n    auth: IUpdateAuthState;\n    loginSuccess: (userName: string, apiToken: string, avatarUrl: string) => void;\n    listApplication: () => void\n    listCompany: () => void\n}\n\nclass LandingPage extends Component<ILandingPageProps> {\n    formFactoryProps: any;\n\n    constructor(props: ILandingPageProps) {\n        super(props);\n        this.prepareLoginForm();\n    }\n\n    validateLoginForm = (values: FormikValues) => {\n        let errors: FormikErrors<any> = {};\n        return errors;\n    };\n\n    onSubmitLoginForm = (\n        values: FormikValues,\n        { setSubmitting }: { setSubmitting: Function }\n    ) => {\n        setSubmitting(false);\n        console.log(\"values=\", values);\n\n        // post to get login token\n\n        fetch(`${RestApiService.state.apiBaseUrl}api-token-auth/`, {\n            method: \"POST\",\n            mode: \"cors\",\n            credentials: \"omit\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(values)\n        })\n            .then(res => res.json())\n            .then(res => {\n                console.log(\"res=\", res);\n                // set login token\n                AuthenticationService.state.apiLoginToken = res.token;\n\n                // set redux auth store isLogin state --- have to write action and reducer.\n                this.props.loginSuccess(values.username, res.token, res.avatar_url);\n\n                // request com & app list (dispatch)\n                this.props.listApplication();\n                this.props.listCompany();\n            })\n            .catch(err => {\n                console.error(\"login error~~\", err);\n            });\n    };\n\n    prepareLoginForm = () => {\n        const initialValues = {\n            username: \"\",\n            password: \"\"\n        };\n\n        this.formFactoryProps = {\n            initialValues: initialValues,\n            validate: this.validateLoginForm,\n            onSubmit: this.onSubmitLoginForm,\n            formInputFieldPropsList: [\n                new FormInputFieldProps(\"username\", \"Username\"),\n                new FormInputFieldProps(\n                    \"password\",\n                    \"Password\",\n                    InputFieldType.PASSWORD\n                )\n            ],\n            actionButtonPropsList: [\n                new FormActionButtonProps(\"Login\", undefined, ActionButtonType.SUBMIT)\n            ]\n        };\n    };\n\n    render() {\n        return (\n            <div className=\"LandingPage\" style={styles}>\n                {/** redirect logged in user to private routes */\n                this.props.auth.isLogin && <Redirect to=\"/home/\" />}\n                <h1>Appl Tracky</h1>\n                <SocialAuthButtonContainer />\n                <h2>Or login locally (admin only):</h2>\n                <FormFactory {...this.formFactoryProps} />\n                <hr />\n                <Button\n                    href=\"https://github.com/rivernews/appl-tracky-spa\"\n                    target=\"_blank\"\n                    unelevated\n                    icon={\n                        <MaterialIcon hasRipple icon=\"code\" />\n                    }\n                >\n                    Github Repository\n                </Button>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: IRootState) => ({\n    auth: state.auth\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>) => {\n    // actionName = (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {\n        loginSuccess: (userName: string, apiToken: string, avatarUrl: string) =>\n            dispatch(SuccessLoginAuth(userName, \"\", apiToken, avatarUrl)),\n        listApplication: () =>\n            dispatch(\n                ApplicationActions[CrudType.LIST][\n                    RequestStatus.TRIGGERED\n                ].action(new Application({}))\n            ),\n        listCompany: () =>\n            dispatch(\n                CompanyActions[CrudType.LIST][\n                    RequestStatus.TRIGGERED\n                ].action(new Company({}))\n            )\n    };\n};\n\nexport const LandingPageContainer = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(LandingPage)\n);\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\n\n/** Redux */\nimport { Company } from \"../../store/data-model/company\";\n\n/** Components */\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc-react icon button\nimport '@material/react-icon-button/dist/icon-button.css';\nimport IconButton from '@material/react-icon-button';\n\ninterface ICompanyComponentProps {\n    company: Company;\n    onDeleteIconClicked?: (event: any) => void\n    onEditIconClicked?: (event: any) => void\n}\n\nexport class CompanyComponent extends Component<ICompanyComponentProps> {\n    render() {\n        const company = this.props.company;\n        return (\n            <div className=\"CompanyComponent\">\n                <p>\n                    <Link to={`/com-app/${company.uuid}/`}>\n                        {company.name}\n                    </Link>\n                    <IconButton onClick={this.props.onEditIconClicked}>\n                        <MaterialIcon hasRipple icon=\"edit\"/>\n                    </IconButton>\n                    <IconButton onClick={this.props.onDeleteIconClicked}>\n                        <MaterialIcon hasRipple icon=\"delete\"/>\n                    </IconButton>\n                    <br />\n                    <span>\n                        <strong>UUID:</strong> {company.uuid}\n                    </span>\n                    <br />\n                    <span>\n                        <strong>HQ:</strong> {company.hq_location.full_address}\n                    </span>\n                    <br />\n                    <a target=\"_blank\" href={company.home_page.url}>\n                        <strong>Homepage</strong>\n                    </a>\n                    <br />\n                </p>\n            </div>\n        );\n    }\n}\n","import { RestApiReduxFactory } from \"../rest-api-redux-factory\";\nimport { BaseModel, IBaseModelProps, IRelationship } from \"./base-model\";\nimport { ApplicationStatusLink } from \"./application-status-link\";\n\ninterface IApplicationStatusProps {\n    text?: string;\n    application?: IRelationship;\n    applicationstatuslink_set?: Array<ApplicationStatusLink>\n    date?: string;\n    order?: number\n}\n\nexport class ApplicationStatus extends BaseModel {\n    public text: string;\n    public application: IRelationship;\n    public applicationstatuslink_set: Array<ApplicationStatusLink>\n    public date: string;\n    public order: number;\n\n    constructor({\n        text = \"\",\n        application = \"\",\n        applicationstatuslink_set = [],\n        date = \"\",\n        order = 0,\n        ...args\n    }: IApplicationStatusProps & IBaseModelProps) {\n        super(args);\n        this.text = text;\n        this.application = application;\n        this.applicationstatuslink_set = applicationstatuslink_set;\n        this.date = date;\n        this.order = order;\n    }\n}\n\nconst initialApplicationStatusInstance = new ApplicationStatus({});\nconst ApplicationStatusRestApiRedux = RestApiReduxFactory<ApplicationStatus>(\n    \"application-statuses\",\n    initialApplicationStatusInstance\n);\nexport const ApplicationStatusActions = ApplicationStatusRestApiRedux.actions;\nexport const ApplicationStatusReducer = ApplicationStatusRestApiRedux.storeReducer;\nexport const ApplicationStatusSagas = ApplicationStatusRestApiRedux.sagas;\n","import { RestApiReduxFactory } from \"../rest-api-redux-factory\";\nimport { BaseModel, IBaseModelProps, IRelationship } from \"./base-model\";\nimport { Link } from \"./link\";\n\ninterface IApplicationStatusLinkProps {\n    application_status?: IRelationship;\n    link?: Link;\n}\n\nexport class ApplicationStatusLink extends BaseModel {\n    public application_status: IRelationship;\n    public link: Link;\n\n    constructor({\n        application_status = \"\",\n        link = new Link({}),\n        ...args\n    }: IApplicationStatusLinkProps & IBaseModelProps) {\n        super(args);\n        this.application_status = application_status;\n        this.link = link;\n    }\n}","import React, { Component } from \"react\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\nimport { IObjectStore, IObjectAction } from \"../../store/rest-api-redux-factory\";\n// data models\nimport {\n    ApplicationStatus,\n    ApplicationStatusActions\n} from \"../../store/data-model/application-status\";\nimport {\n    ApplicationStatusLink,\n} from \"../../store/data-model/application-status-link\";\nimport { Application } from \"../../store/data-model/application\";\nimport { Link } from \"../../store/data-model/link\";\n\n/** Rest API */\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\n\n/** Components */\nimport {\n    FormFactory,\n    FormActionButtonProps,\n    IFormFactoryProps,\n    ActionButtonType\n} from \"../form-factory/form-factory\";\nimport {\n    FormInputFieldFactory,\n    FormInputFieldProps,\n    InputFieldType\n} from \"../form-factory/form-field-factory\";\nimport { ErrorMessage, FormikValues, FormikErrors } from \"formik\";\n\ninterface IApplicationStatusFormComponentProps extends RouteComponentProps {\n    onCancel: (event: any) => void;\n    onSubmitSuccess?: () => void;\n\n    /** redux */\n    application: Application;\n    applicationStatusStore: IObjectStore<ApplicationStatus>\n    createApplicationStatus: (\n        applicationStatusFormData: ApplicationStatus,\n        callback?: Function\n    ) => void;\n}\n\nclass ApplicationStatusFormComponent extends Component<\n    IApplicationStatusFormComponentProps\n> {\n    formFactoryProps: IFormFactoryProps<any>;\n\n    constructor(props: IApplicationStatusFormComponentProps) {\n        super(props);\n\n        const initialValues = {\n            application_status__text: \"\",\n            application_status__date: \"\",\n            application_status__link0__url: \"\",\n            application_status__link0__text: \"\",\n            application_status__link1__url: \"\",\n            application_status__link1__text: \"\",\n        }\n\n        this.formFactoryProps = {\n            initialValues: initialValues,\n            validate: this.validate,\n            onSubmit: this.onSubmit,\n            formInputFieldPropsList: [\n                new FormInputFieldProps(\"application_status__text\", \"Status*\"),\n                new FormInputFieldProps(\n                    \"application_status__date\",\n                    \"Date\",\n                    InputFieldType.DATE\n                ),\n                new FormInputFieldProps(\"application_status__link0__url\", \"Link 0 URL\"),\n                new FormInputFieldProps(\"application_status__link0__text\", \"Link 0 Text\"),\n                new FormInputFieldProps(\"application_status__link1__url\", \"Link 1 URL\"),\n                new FormInputFieldProps(\"application_status__link1__text\", \"Link 1 Text\"),\n            ],\n            actionButtonPropsList: [\n                new FormActionButtonProps(\n                    \"Add\",\n                    undefined,\n                    ActionButtonType.SUBMIT\n                ),\n                new FormActionButtonProps(\"Cancel\", this.props.onCancel)\n            ]\n        };\n    }\n\n    validate = (values: FormikValues) => {\n        let errors: FormikErrors<any> = {};\n        if (!values.application_status__text) {\n            errors.application_status__text = \"Required\";\n        }\n        if (!values.application_status__date) {\n            errors.application_status__date = \"Please give a valid date\";\n        }\n        return errors;\n    };\n\n    onSubmit = (\n        values: FormikValues,\n        { setSubmitting }: { setSubmitting: Function }\n    ) => {\n        setSubmitting(false);\n        console.log(\"values=\", values);\n\n        // prepare relational objects\n        const application__id = this.props.application.uuid;\n        if (!application__id) {\n            console.error(\n                \"Application object has no uuid so cannot submit form.\"\n            );\n            return;\n        }\n\n        // create link(s)\n        let links = [];\n        const indexes = [0, 1];\n        for (let index of indexes) {\n            if (values[`application_status__link${index}__url`]) {\n                links.push(new Link({\n                    url: values[`application_status__link${index}__url`],\n                    text: values[`application_status__link${index}__text`] || `Link of status`,\n                }))\n            }\n        }\n        // create main object for applicationStatusLink(s)\n        const applicationStatusLinks = links.map(link => {\n            return new ApplicationStatusLink({\n                link,\n            });\n        });\n\n        // create main object for application status\n        const applicationStatus = new ApplicationStatus({\n            text: values.application_status__text,\n            application: application__id,\n            date: values.application_status__date,\n            applicationstatuslink_set: applicationStatusLinks,\n        });\n\n        // dispatch for application status\n        this.props.createApplicationStatus(applicationStatus, () => {\n            this.props.onSubmitSuccess && this.props.onSubmitSuccess();\n        });\n    };\n\n    render() {\n        return (\n            <div className=\"ApplicationStatusFormComponent\">\n                <FormFactory {...this.formFactoryProps} />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    // prop: store.prop\n    applicationStatusStore: store.applicationStatus\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<ApplicationStatus> | IObjectAction<ApplicationStatusLink>>) => {\n    // actionName: (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {\n        createApplicationStatus: (\n            applicationStatusFormData: ApplicationStatus,\n            callback?: Function\n        ) =>\n            dispatch(\n                ApplicationStatusActions[CrudType.CREATE][\n                    RequestStatus.TRIGGERED\n                ].action(applicationStatusFormData, callback)\n            ),\n    };\n};\n\nexport const ApplicationStatusFormComponentContainer = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(ApplicationStatusFormComponent)\n);\n","import React, { Component } from \"react\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\nimport {\n    IObjectAction,\n    IObjectStore\n} from \"../../store/rest-api-redux-factory\";\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\n\n/** data model */\nimport { ApplicationStatus, ApplicationStatusActions } from \"../../store/data-model/application-status\";\nimport { ApplicationStatusLink } from \"../../store/data-model/application-status-link\";\n\n/** Components */\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc-react icon button\nimport '@material/react-icon-button/dist/icon-button.css';\nimport IconButton from '@material/react-icon-button';\n\n\ninterface IApplicationStatusComponentProps extends RouteComponentProps {\n    applicationStatus: ApplicationStatus;\n    deleteApplicationStatus: (applicationStatusToDelete: ApplicationStatus, callback?: Function) => void;\n}\n\nclass ApplicationStatusComponent extends Component<\n    IApplicationStatusComponentProps\n> {\n    render() {\n        return (\n            <div className=\"ApplicationStatusComponent\">\n                <p>\n                    <span>Status: {this.props.applicationStatus.text}</span>\n                    <IconButton onClick={() => this.props.deleteApplicationStatus(this.props.applicationStatus)}>\n                        <MaterialIcon hasRipple icon=\"delete\"/>\n                    </IconButton>\n                    <br />\n                    <span>{this.props.applicationStatus.date}</span>\n                    <br />\n                    {this.props.applicationStatus.applicationstatuslink_set.map(\n                        applicationStatusLink => {\n                            console.log(\"applicationStatusLinkID Obj=\", applicationStatusLink);\n                            return (\n                                (applicationStatusLink && applicationStatusLink.link) && <span key={applicationStatusLink.uuid}>\n                                    <a\n                                        href={applicationStatusLink.link.url}\n                                        target=\"_blank\"\n                                    >\n                                        {applicationStatusLink.link.text}\n                                    </a>{\" \"}\n                                    |{\" \"}\n                                </span>\n                            );\n                        }\n                    )}\n                </p>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    // prop: store.prop\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<ApplicationStatus>>) => {\n    // actionName: (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {\n        deleteApplicationStatus: (applicationStatusToDelete: ApplicationStatus, callback?: Function) =>\n        \tdispatch(\n        \t\tApplicationStatusActions[CrudType.DELETE][RequestStatus.TRIGGERED].action(\n        \t\t\tapplicationStatusToDelete,\n        \t\t\tcallback\n        \t\t)\n        \t),\n    };\n};\n\nexport const ApplicationStatusComponentContainer = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(ApplicationStatusComponent)\n);\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\n\n/** Redux */\nimport { Application } from \"../../store/data-model/application\";\n\n/** data model */\nimport { ApplicationStatus } from \"../../store/data-model/application-status\";\n\n/** Components */\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\nimport { ApplicationStatusFormComponentContainer } from \"../../components/application-status/application-status-form-component\";\nimport { ApplicationStatusComponentContainer } from \"../application-status/application-status-component\";\n\n/** Types */\ninterface IApplicationComponentProps {\n    application: Application;\n    applicationStatusList: Array<ApplicationStatus>;\n    isShowApplicationStatuses?: boolean\n}\n\ninterface IApplicationComponentState {\n    isApplicationStatusFormOpened: boolean;\n}\n\n/** Main Class */\nexport class ApplicationComponent extends Component<\n    IApplicationComponentProps,\n    IApplicationComponentState\n> {\n    state = {\n        isApplicationStatusFormOpened: false\n    };\n\n    render() {\n        const application = this.props.application;\n        return application.uuid ? (\n            <div className=\"ApplicationComponent\">\n                {/* application info */}\n                <p>\n                    <span>\n                        <strong>Position:</strong> {application.position_title}\n                    </span>\n                    <br />\n                    <span>Application UUID: {application.uuid}</span>\n                    <br />\n                    {application.job_description_page.url ? (\n                        <a\n                            target=\"_blank\"\n                            href={application.job_description_page.url}\n                        >\n                            <strong>JD Page</strong>\n                        </a>\n                    ) : (\n                        <span>JD Page</span>\n                    )}\n\n                    <br />\n                    {application.job_source.url ? (\n                        <a target=\"_blank\" href={application.job_source.url}>\n                            <strong>Job Source</strong>\n                        </a>\n                    ) : (\n                        <span>Job Source</span>\n                    )}\n                </p>\n\n                {/* application statuses list */}\n                {this.props.isShowApplicationStatuses && this.props.applicationStatusList.map(status => {\n                    return (\n                        <ApplicationStatusComponentContainer\n                            key={status.uuid}\n                            applicationStatus={status}\n                        />\n                    );\n                })}\n\n                {/* new application status form */}\n                {this.props.isShowApplicationStatuses && (!this.state.isApplicationStatusFormOpened ? (\n                    <Button\n                        onClick={clickEvent => {\n                            this.setState({\n                                isApplicationStatusFormOpened: true\n                            });\n                        }}\n                        unelevated\n                        icon={<MaterialIcon hasRipple icon=\"add\" />}\n                    >\n                        Add New Status\n                    </Button>\n                ) : (\n                    <div className=\"application-component__status-form\">\n                        <h3>\n                            Add new status to application for{\" \"}\n                            {this.props.application.position_title}{\" \"}\n                        </h3>\n                        <ApplicationStatusFormComponentContainer\n                            application={this.props.application}\n                            onCancel={clickEvent => {\n                                this.setState({\n                                    isApplicationStatusFormOpened: false\n                                });\n                            }}\n                            onSubmitSuccess={() => {\n                                this.setState({ isApplicationStatusFormOpened: false } )\n                            }}\n                        />\n                    </div>\n                ))}\n            </div>\n        ) : (\n            <span>application object has no uuid.</span>\n        );\n    }\n}\n","import React, { Component } from \"react\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\nimport {\n    IObjectAction,\n    IObjectStore\n} from \"../../store/rest-api-redux-factory\";\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\n// data models\nimport { CompanyActions, Company } from \"../../store/data-model/company\";\nimport {\n    ApplicationActions,\n    Application\n} from \"../../store/data-model/application\";\nimport { ApplicationStatus } from \"../../store/data-model/application-status\";\n\n/** Components */\n// objects\nimport { CompanyComponent } from \"../company/company-component\";\nimport { ApplicationComponent } from \"../application/application-component\";\n\ninterface ICompanyApplicationComponentProps extends RouteComponentProps {\n    company: Company;\n    applicationStore: IObjectStore<Application>;\n    applicationStatusStore: IObjectStore<ApplicationStatus>;\n    isShowApplicationStatuses?: boolean;\n    deleteCompany: (companyToDelete: Company, callback?: Function) => void;\n    updateCompany: (companyToUpdate: Company, callback?: Function) => void;\n}\n\nclass CompanyApplicationComponent extends Component<\n    ICompanyApplicationComponentProps\n> {\n    onDeleteClick = (event: any) => {\n        if (this.props.company.uuid) {\n            this.props.deleteCompany(this.props.company);\n        } else {\n            console.error(\"Attempted to delete but company obj has no uuid\");\n        }\n    };\n\n    render() {\n        return (\n            <div className=\"CompanyApplicationContainer\">\n                <CompanyComponent\n                    company={this.props.company}\n                    onDeleteIconClicked={this.onDeleteClick}\n                    onEditIconClicked={() => {\n                        this.props.history.push(`/com-form/${this.props.company.uuid}/`);\n                    }}\n                />\n                {Object.values(this.props.applicationStore.collection)\n                    .filter(\n                        application =>\n                            application.user_company === this.props.company.uuid\n                    )\n                    .map(application => {\n                        const applicationStatusList =\n                            this.props.isShowApplicationStatuses || false\n                                ? Object.values(\n                                      this.props.applicationStatusStore\n                                          .collection\n                                  ).filter(\n                                      applicationStatus =>\n                                          applicationStatus.application ===\n                                          application.uuid\n                                  )\n                                : [];\n                        return (\n                            <ApplicationComponent\n                                key={application.uuid}\n                                application={application}\n                                applicationStatusList={applicationStatusList}\n                                isShowApplicationStatuses={\n                                    this.props.isShowApplicationStatuses\n                                }\n                            />\n                        );\n                    })}\n                {!this.props.isShowApplicationStatuses && <hr />}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    // prop: store.prop\n    applicationStore: store.application,\n    applicationStatusStore: store.applicationStatus\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<Application>>) => {\n    // actionName: (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {\n        deleteCompany: (companyToDelete: Company, callback?: Function) =>\n            dispatch(\n                CompanyActions[CrudType.DELETE][RequestStatus.TRIGGERED].action(\n                    companyToDelete,\n                    callback\n                )\n            ),\n        updateCompany: (companyToUpdate: Company, callback?: Function) =>\n            dispatch(\n                CompanyActions[CrudType.UPDATE][RequestStatus.TRIGGERED].action(\n                    companyToUpdate,\n                    callback\n                )\n            )\n    };\n};\n\nexport const CompanyApplicationComponentContainer = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(CompanyApplicationComponent)\n);\n","import React, { Component } from \"react\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\nimport { IObjectAction, IObjectStore } from \"../../store/rest-api-redux-factory\";\n// data models\nimport { Company } from \"../../store/data-model/company\";\nimport { Application } from \"../../store/data-model/application\";\n\n/** Components */\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n// objects\nimport { CompanyApplicationComponentContainer } from \"../../components/company-application/company-application-component\";\n\ninterface IUserAppPageProps extends RouteComponentProps {\n    company: IObjectStore<Company>\n    application: IObjectStore<Application>\n}\n\nclass UserAppPage extends Component<IUserAppPageProps> {\n\n    componentDidMount() {\n    }\n\n    render() {\n        return (\n            <div className=\"UserAppPage\">\n                <h1>Your Applications</h1>\n                <Button\n                    onClick={()=>{ this.props.history.push(\"/com-form/\") }}\n                    unelevated\n                    icon={<MaterialIcon hasRipple icon=\"add\" />}\n                    children=\"Add Company\"\n                />\n                <br></br>\n                {\n                    (this.props.company.collection !== {}) && Object.values(this.props.company.collection).map((company) => {\n                        return (\n                            <CompanyApplicationComponentContainer key={company.uuid} company={company} />\n                        )\n                    })\n                }\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    // prop: store.prop\n    company: store.company,\n    application: store.application,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<{}>>) => {\n    // actionName = (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n\n    return {\n        // listObject: (callback?: Function) =>\n        //     dispatch(\n        //         ObjectActions[CrudType.LIST][RequestStatus.TRIGGERED].action(\n        //             new Object({}),\n        //             callback\n        //         )\n        //     ),\n    }\n};\n\nexport const UserAppPageContainer = withRouter(connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(UserAppPage));\n","import React, { Component } from \"react\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\nimport {\n    IObjectStore,\n    IObjectAction\n} from \"../../store/rest-api-redux-factory\";\n// data models\nimport { Company, CompanyActions } from \"../../store/data-model/company\";\nimport { Link } from \"../../store/data-model/link\";\nimport { Address } from \"../../store/data-model/address\";\n\n/** Components */\nimport {\n    FormFactory,\n    FormActionButtonProps,\n    IFormFactoryProps,\n    ActionButtonType\n} from \"../form-factory/form-factory\";\nimport {\n    FormInputFieldFactory,\n    FormInputFieldProps,\n    InputFieldType\n} from \"../form-factory/form-field-factory\";\nimport { ErrorMessage, FormikValues, FormikErrors } from \"formik\";\n\ninterface ICompanyFormComponentProps {\n    company?: Company;\n    onCancel: (event: any) => void;\n    onSubmitSuccess?: () => void;\n\n    /** redux */\n    createCompany: (companyFormData: Company, callback?: Function) => void;\n    updateCompany: (companyFormData: Company, callback?: Function) => void;\n}\n\nclass CompanyFormComponent extends Component<ICompanyFormComponentProps> {\n    formFactoryProps: IFormFactoryProps<any>;\n\n    constructor(props: ICompanyFormComponentProps) {\n        super(props);\n\n        // prepare for new company form\n        const initialValues = {\n            company__name: this.props.company && this.props.company.name ||  \"\",\n            company__hq_location__full_address: this.props.company && this.props.company.hq_location.full_address ||  \"\",\n            company__home_page__url: this.props.company && this.props.company.home_page.url || \"\",\n        };\n\n        this.formFactoryProps = {\n            initialValues: initialValues,\n            validate: this.validateAppForm,\n            onSubmit: this.onSubmitAppForm,\n            formInputFieldPropsList: [\n                new FormInputFieldProps(\"company__name\", \"Company Name*\"),\n                new FormInputFieldProps(\n                    \"company__hq_location__full_address\",\n                    \"HQ Address or Location\"\n                ),\n                new FormInputFieldProps(\n                    \"company__home_page__url\",\n                    \"Company Home Page URL\"\n                )\n            ],\n            actionButtonPropsList: [\n                new FormActionButtonProps(\n                    !this.props.company ? \"Create\" : \"Update\",\n                    undefined,\n                    ActionButtonType.SUBMIT\n                ),\n                new FormActionButtonProps(\"Cancel\", this.props.onCancel)\n            ]\n        };\n    }\n\n    validateAppForm = (values: FormikValues) => {\n        let errors: FormikErrors<any> = {};\n        if (!values.company__name) {\n            errors.company__name = \"Required\";\n        }\n        if (!/^https*\\:\\/\\/.+$/i.test(values.company__home_page__url)) {\n            errors.company__home_page__url =\n                \"Please start by http:// or https://\";\n        }\n        return errors;\n    };\n\n    onSubmitAppForm = (\n        values: FormikValues,\n        { setSubmitting }: { setSubmitting: Function }\n    ) => {\n        setSubmitting(false);\n        console.log(\"values=\", values);\n\n        // prep relationship object by data model\n        const hq_location = new Address({\n            full_address: values.company__hq_location__full_address,\n            place_name: `HQ of ${values.company__name}`\n        });\n        const home_page = new Link({\n            url: values.company__home_page__url,\n            text: `Home page of ${values.company__name}`\n        });\n        // create main object\n        const company = new Company({\n            name: values.company__name,\n            hq_location,\n            home_page\n        });\n\n        // dispatch\n        if (!this.props.company) {\n            console.log(\"company form: dispatching createCompany action\");\n            this.props.createCompany(company, this.props.onSubmitSuccess);\n        }\n        else  {\n            console.log(\"company form: dispatching updateCompany action\");\n            company.uuid = this.props.company.uuid;\n            this.props.updateCompany(company, this.props.onSubmitSuccess);\n        }\n    };\n\n    render() {\n        return (\n            <div className=\"CompanyFormComponent\">\n                <FormFactory {...this.formFactoryProps} />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => ({});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<Company>>) => {\n    return {\n        createCompany: (companyFormData: Company, callback?: Function) =>\n            dispatch(\n                CompanyActions[CrudType.CREATE][RequestStatus.TRIGGERED].action(\n                    companyFormData,\n                    callback\n                )\n            ),\n        updateCompany: (companyFormData: Company, callback?: Function) =>\n            dispatch(\n                CompanyActions[CrudType.UPDATE][RequestStatus.TRIGGERED].action(\n                    companyFormData,\n                    callback\n                )\n            )\n    };\n};\n\nexport const CompanyFormComponentContainer = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(CompanyFormComponent);\n","import React, { Component } from \"react\";\n\n/** route */\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\n// REST API\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\nimport {\n    IObjectAction,\n    IObjectStore\n} from \"../../store/rest-api-redux-factory\";\nimport { CompanyActions, Company } from \"../../store/data-model/company\";\nimport { Address } from \"../../store/data-model/address\";\nimport { Link } from \"../../store/data-model/link\";\n\n/** Components */\n//mdc-react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc-react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n// mdc-react input\nimport \"@material/react-text-field/dist/text-field.css\";\nimport TextField, { HelperText, Input } from \"@material/react-text-field\";\n// formik\nimport { Formik, Form, Field } from \"formik\";\n// form factory\nimport {\n    FormFactory,\n    FormActionButtonProps,\n    IFormFactoryProps\n} from \"../../components/form-factory/form-factory\";\nimport {\n    FormInputFieldFactory,\n    FormInputFieldProps,\n    InputFieldType\n} from \"../../components/form-factory/form-field-factory\";\nimport { ErrorMessage, FormikValues, FormikErrors } from \"formik\";\nimport { CompanyFormComponentContainer } from \"../../components/company/company-form-component\";\n\ninterface IAddComPageParams {\n    uuid?: string;\n}\n\ninterface IAddComPageProps extends RouteComponentProps<IAddComPageParams> {\n    company: IObjectStore<Company>;\n}\n\nclass AddComPage extends Component<IAddComPageProps> {\n    render() {\n        const company: Company | undefined = (this.props.match.params.uuid && this.props.company.collection[this.props.match.params.uuid])\n            ? this.props.company.collection[this.props.match.params.uuid]\n            : undefined;\n        console.log(\n            \"com form page: params is\",\n            this.props.match.params.uuid,\n            \"company is\",\n            company\n        );\n        return (\n            <div className=\"AddComPage\">\n                <h1>{company ? \"Add a Company\" : `Update Company`}</h1>\n                <CompanyFormComponentContainer\n                    company={company}\n                    onSubmitSuccess={() => {\n                        console.log(\"com form page: onSubmitSuccess\");\n                        if (this.props.company.lastChangedObjectID) {\n                            let newCompany = this.props.company.collection[\n                                this.props.company.lastChangedObjectID\n                            ];\n                            console.log(\"new company:\", newCompany);\n                            this.props.history.push(\n                                `/com-app/${newCompany.uuid}/`\n                            );\n                        } else {\n                            console.error(\"store has no lastChangedObjectID\");\n                        }\n                    }}\n                    onCancel={event => {\n                        this.props.history.push(`/`);\n                    }}\n                />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: IRootState) => ({\n    // prop: state.prop\n    company: state.company\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<Company>>) => {\n    // actionName = (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {};\n};\n\nexport const AddComPageContainer = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(AddComPage)\n);\n","import React, { Component } from \"react\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\nimport {\n    IObjectStore,\n    IObjectAction\n} from \"../../store/rest-api-redux-factory\";\n// data models\nimport { Company } from \"../../store/data-model/company\";\nimport {\n    Application,\n    ApplicationActions\n} from \"../../store/data-model/application\";\nimport { Link } from \"../../store/data-model/link\";\n\n/** Components */\nimport {\n    FormFactory,\n    FormActionButtonProps,\n    IFormFactoryProps,\n    ActionButtonType,\n} from \"../form-factory/form-factory\";\nimport {\n    FormInputFieldFactory,\n    FormInputFieldProps,\n    InputFieldType\n} from \"../form-factory/form-field-factory\";\nimport { ErrorMessage, FormikValues, FormikErrors } from \"formik\";\n\ninterface IApplicationFormComponentProps {\n    company: Company;\n    onCancel: (event: any) => void;\n    onSubmitSuccess?: () => void;\n\n    /** redux */\n    application: IObjectStore<Application>;\n    createApplication: (\n        applicationFormData: Application,\n        callback?: Function\n    ) => void;\n}\n\nclass ApplicationFormComponent extends Component<\n    IApplicationFormComponentProps\n> {\n    formFactoryProps: IFormFactoryProps<any>;\n\n    constructor(props: IApplicationFormComponentProps) {\n        super(props);\n\n        // prepare for new application form\n        const initialValues = {\n            application__position_title: \"\",\n            application__job_description_page__url: \"\",\n            application__job_source__url: \"\"\n        };\n\n        this.formFactoryProps = {\n            initialValues: initialValues,\n            validate: this.validateAppForm,\n            onSubmit: this.onSubmitAppForm,\n            formInputFieldPropsList: [\n                new FormInputFieldProps(\n                    \"application__position_title\",\n                    \"Position Title*\"\n                ),\n                new FormInputFieldProps(\n                    \"application__job_description_page__url\",\n                    \"Job Description URL\"\n                ),\n                new FormInputFieldProps(\n                    \"application__job_source__url\",\n                    \"Job Source URL\"\n                )\n            ],\n            actionButtonPropsList: [\n                new FormActionButtonProps(\"Create\", undefined, ActionButtonType.SUBMIT),\n                new FormActionButtonProps(\"Cancel\", this.props.onCancel)\n            ]\n        };\n    }\n\n    validateAppForm = (values: FormikValues) => {\n        let errors: FormikErrors<any> = {};\n        if (!values.application__position_title) {\n            errors.application__position_title = \"Required\";\n        }\n        if (\n            !/^https*\\:\\/\\/.+$/i.test(\n                values.application__job_description_page__url\n            )\n        ) {\n            errors.application__job_description_page__url =\n                \"Please start by http:// or https://\";\n        }\n        if (!/^https*\\:\\/\\/.+$/i.test(values.application__job_source__url)) {\n            errors.application__job_source__url =\n                \"Please start by http:// or https://\";\n        }\n        return errors;\n    };\n\n    onSubmitAppForm = (\n        values: FormikValues,\n        { setSubmitting }: { setSubmitting: Function }\n    ) => {\n        setSubmitting(false);\n\n        // prep relationship object by data model\n        const job_description_page = new Link({\n            url: values.application__job_description_page__url,\n            text: `Job description URL for application ${\n                values.application__position_title\n            } at company ${this.props.company.name}`\n        });\n        const job_source = new Link({\n            url: values.application__job_source__url,\n            text: `Job source URL for application ${\n                values.application__position_title\n            } at company ${this.props.company.name}`\n        });\n        const application__user_company__id = this.props.company.uuid;\n\n        // create main object\n        const application = new Application({\n            position_title: values.application__position_title,\n            job_description_page,\n            job_source,\n            user_company: application__user_company__id\n        });\n\n        // dispatch\n        this.props.createApplication(application, () => {\n            // log print newly created application\n            if (this.props.application.lastChangedObjectID) {\n                const newApplication = this.props.application.collection[\n                    this.props.application.lastChangedObjectID\n                ];\n                console.log(\"new application:\", newApplication);\n                this.props.onSubmitSuccess && this.props.onSubmitSuccess();\n            } else {\n                console.error(\"application store has no lastChangedObjectID\");\n            }\n        });\n    };\n\n    render() {\n        return (\n            <div className=\"ApplicationFormComponent\">\n                <FormFactory {...this.formFactoryProps} />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    application: store.application\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<Application>>) => {\n    return {\n        createApplication: (\n            applicationFormData: Application,\n            callback?: Function\n        ) =>\n            dispatch(\n                ApplicationActions[CrudType.CREATE][\n                    RequestStatus.TRIGGERED\n                ].action(applicationFormData, callback)\n            )\n    };\n};\n\nexport const ApplicationFormComponentContainer = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ApplicationFormComponent);\n","import React, { Component } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { RouteComponentProps } from \"react-router\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\n// rest api\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\nimport {\n    IObjectStore,\n    IObjectAction\n} from \"../../store/rest-api-redux-factory\";\nimport { Company } from \"../../store/data-model/company\";\nimport { Link } from \"../../store/data-model/link\";\nimport {\n    Application,\n    ApplicationActions\n} from \"../../store/data-model/application\";\n\n/** Components */\nimport { CompanyApplicationComponentContainer } from \"../../components/company-application/company-application-component\";\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n// mdc-react input\nimport \"@material/react-text-field/dist/text-field.css\";\nimport TextField, { HelperText, Input } from \"@material/react-text-field\";\n// form factory\nimport {\n    FormFactory,\n    FormActionButtonProps,\n    IFormFactoryProps\n} from \"../../components/form-factory/form-factory\";\n// formik\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\nimport {\n    FormInputFieldFactory,\n    FormInputFieldProps,\n    InputFieldType\n} from \"../../components/form-factory/form-field-factory\";\nimport { FormikValues, FormikErrors } from \"formik\";\nimport { ApplicationFormComponentContainer } from \"../../components/application/application-form-component\";\n\ninterface IUserComAppPageParams {\n    uuid: string;\n}\n\ninterface IUserComAppPageProps\n    extends RouteComponentProps<IUserComAppPageParams> {\n    company: IObjectStore<Company>;\n    application: IObjectStore<Application>;\n    createApplication: (\n        applicationFormData: Application,\n        callback?: Function\n    ) => void;\n}\n\ninterface IUserComAppPageState {\n    isApplicationFormOpened: boolean;\n    companyUuid: string;\n    company: Company;\n}\n\nclass UserComAppPage extends Component<\n    IUserComAppPageProps,\n    IUserComAppPageState\n> {\n    readonly state: IUserComAppPageState = {\n        isApplicationFormOpened: false,\n        companyUuid: \"\",\n        company: new Company({})\n    };\n\n    componentDidMount() {\n        let companyUuid = this.props.match.params.uuid;\n        console.log(\"mount, got uuid from route?\", companyUuid);\n        if (\n            this.props.company.collection &&\n            companyUuid in this.props.company.collection\n        ) {\n            this.setState({\n                companyUuid,\n                company: new Company(this.props.company.collection[companyUuid])\n            });\n        }\n    }\n\n    renderAll() {\n        if (!this.state.company.uuid) {\n            return;\n        }\n\n        return (\n            <div className=\"user-com-app-page-content\">\n                <Button\n                    onClick={clickEvent => {\n                        this.props.history.push(\"/\");\n                    }}\n                >\n                    Back\n                </Button>\n                <h1>{this.state.company.name}</h1>\n\n                {/* application form */}\n                {(!this.state.isApplicationFormOpened) ? (\n                    <Button\n                        onClick={clickEvent => {\n                            this.setState({ isApplicationFormOpened: true });\n                        }}\n                        unelevated\n                        icon={<MaterialIcon hasRipple icon=\"add\" />}\n                    >\n                        Add Application\n                    </Button>\n                ) : (\n                    <ApplicationFormComponentContainer\n                        onCancel={event => {\n                            console.log(\"onCancel clicked\");\n                            this.setState({ isApplicationFormOpened: false })\n                        }}\n                        onSubmitSuccess={() => this.setState({\n                            isApplicationFormOpened: false\n                        })}\n                        company={this.state.company}\n                    />\n                )}\n\n                <br />\n\n                {/* application list */}\n                {this.state.company.uuid && (\n                    <CompanyApplicationComponentContainer\n                        company={this.state.company}\n                        isShowApplicationStatuses\n                    />\n                )}\n            </div>\n        );\n    }\n\n    render() {\n        return (\n            <div className=\"UserComAppPage\">\n                {this.state.companyUuid &&\n                this.props.company.collection &&\n                this.state.companyUuid in this.props.company.collection ? (\n                    this.renderAll()\n                ) : this.state.companyUuid ? (\n                    <h1>No company found. Uuid={this.state.companyUuid}</h1>\n                ) : (\n                    <h1>Company uuid not specified</h1>\n                )}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => {\n    return {\n        // prop: store.prop\n        company: store.company,\n        application: store.application\n    };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<Application>>) => {\n    // actionName = (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {\n        createApplication: (\n            applicationFormData: Application,\n            callback?: Function\n        ) =>\n            dispatch(\n                ApplicationActions[CrudType.CREATE][\n                    RequestStatus.TRIGGERED\n                ].action(applicationFormData, callback)\n            )\n    };\n};\n\nexport const UserComAppPageContainer = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(UserComAppPage)\n);\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { IUpdateAuthState } from \"../../store/auth/types\";\n\ninterface UserInfoProps {\n    auth: IUpdateAuthState;\n}\n\nexport class UserInfo extends Component<UserInfoProps, any> {\n    render() {\n        return (\n            <div>\n                <div>\n                    Logged in:{\" \"}\n                    {(this.props.auth.isLogin &&\n                        this.props.auth.isLogin.toString()) ||\n                        \"undefine\"}\n                </div>\n                <div>User Name: {this.props.auth.userName || \"(empty)\"}</div>\n                <div>\n                    Token (for API): {this.props.auth.apiToken || \"(empty)\"}\n                </div>\n            </div>\n        );\n    }\n}\n","import React, { Component } from \"react\";\n\n/** redux */\nimport { connect } from \"react-redux\";\nimport { IRootState } from \"../../store/types\";\nimport { IUpdateAuthState } from \"../../store/auth/types\";\n\n/** Routes & pages */\nimport { UserInfo } from \"../../components/user-info/user-info\";\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\n\n/** Components */\nimport { SocialAuthButtonContainer } from \"../../components/social-auth/social-auth-button\";\n\ninterface IUserProfilePageProps extends RouteComponentProps {\n    auth: IUpdateAuthState;\n}\n\nclass UserProfilePage extends Component<IUserProfilePageProps, any> {\n    render() {\n        return (\n            <div>\n                <h1>My Profile</h1>\n                <UserInfo auth={this.props.auth} />\n                <SocialAuthButtonContainer />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => {\n    return {\n        auth: store.auth\n    };\n};\n\nexport const UserProfilePageContainer = withRouter(connect(mapStateToProps)(UserProfilePage));\n","import React, { Component } from \"react\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { IRootState } from \"../../store/types\";\nimport { IUpdateAuthState } from \"../../store/auth/types\";\n\n/** Routing & Pages */\nimport {\n    Route,\n    Redirect,\n    Switch,\n    Link,\n    withRouter,\n    RouteComponentProps\n} from \"react-router-dom\";\n// pages\nimport { LandingPageContainer } from \"../landing-page/landing-page\";\nimport { UserAppPageContainer } from \"../user-app-page/user-app-page\";\nimport { AddComPageContainer } from \"../add-com-page/add-com-page\";\nimport { UserComAppPageContainer } from \"../user-com-app-page/user-com-app-page\";\nimport { UserProfilePageContainer } from \"../user-profile-page/user-profile-page\";\n\n/** MDC React */\nimport TopAppBar, { TopAppBarFixedAdjust } from \"@material/react-top-app-bar\";\nimport \"@material/react-top-app-bar/dist/top-app-bar.css\";\n// import '@material/react-material-icon/dist/material-icon.css';\nimport MaterialIcon from \"@material/react-material-icon\";\n// style\nimport \"@material/react-ripple/dist/ripple.css\";\n\n// import {withRipple} from '@material/react-ripple';\n\ninterface IPageRoutesProps extends RouteComponentProps {\n    auth: IUpdateAuthState;\n}\n\nclass PageRoutes extends Component<IPageRoutesProps> {\n    render() {\n        return (\n            <div className=\"PageRoutesContainer\">\n                {this.props.location.pathname === \"/\" ? (\n                    <Route path=\"/\" exact component={LandingPageContainer} />\n                ) : (\n                    <div className=\"PrivateRoutesContainer\">\n                        {/** protect private routes */\n                        !this.props.auth.isLogin && <Redirect to=\"/\" />}\n\n                        <TopAppBar\n                            title=\"Appl Tracky\"\n                            actionItems={[\n                                <Link to=\"/home/\">\n                                    <MaterialIcon\n                                        hasRipple\n                                        key=\"itemHome\"\n                                        icon=\"home\"\n                                    />\n                                </Link>,\n\n                                <Link to=\"/profile/\">\n                                    {this.props.auth.avatarUrl === \"\" ? (\n                                        <MaterialIcon\n                                            hasRipple\n                                            key=\"itemProfile\"\n                                            icon=\"account_circle\"\n                                        />\n                                    ) : (\n                                        <img style={{\n                                            \"height\": \"100%\",\n                                            \"borderRadius\": \"50%\",\n                                        }} src={this.props.auth.avatarUrl} />\n                                    )}\n                                </Link>\n                            ]}\n                        />\n                        <TopAppBarFixedAdjust>\n                            <Switch>\n                                <Route\n                                    path=\"/home/\"\n                                    component={UserAppPageContainer}\n                                />\n                                <Route\n                                    path=\"/com-form/:uuid?/\"\n                                    component={AddComPageContainer}\n                                />\n                                <Route\n                                    path=\"/com-app/:uuid/\"\n                                    component={UserComAppPageContainer}\n                                />\n                                <Route\n                                    path=\"/com-app/\"\n                                    component={UserComAppPageContainer}\n                                />\n                                <Route\n                                    path=\"/profile/\"\n                                    component={UserProfilePageContainer}\n                                />\n                                {/** add more page routes here */}\n                            </Switch>\n                        </TopAppBarFixedAdjust>\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    auth: store.auth\n});\n\nconst mapDispatchToProps = {};\n\nexport const PageRoutesContainer = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(PageRoutes)\n);\n","/** React core */\nimport React, { Component } from \"react\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { IRootState } from \"./store/types\";\n\n/** Routes & pages */\nimport { PageRoutesContainer } from \"./pages/page-routes/page-routes\";\n\n/** Locals */\nimport \"./App.css\";\n\ninterface IAppProps {}\n\nclass App extends Component<IAppProps> {\n    componentDidMount() {}\n\n    render() {\n        return (\n            <div className=\"App\">\n                <PageRoutesContainer />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => {\n    return {};\n};\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { Action } from \"redux\";\nimport { IRootState } from \"./types\";\n\nexport enum RootActionNames {\n    ResetAllStore = \"RESET_ALL_STORE\"\n}\n\nexport const resetAllStoreAction = () => {\n    return {\n        type: RootActionNames.ResetAllStore,\n    }\n}","import { Reducer, Action } from 'redux';\n\nimport { \n    /** store */\n    IUpdateAuthState, \n    /** action */\n    AuthActionNames, TAuthActions \n} from \"./types\";\n\nimport { RequestStatus } from \"../../utils/rest-api\";\n\nconst initialAuthState: IUpdateAuthState = {\n    requestStatus: RequestStatus.SUCCESS,\n    isLogin: false,\n    socialAuthToken: \"\",\n    apiToken: \"\",\n    userName: \"\",\n    expireDateTime: \"\",\n    avatarUrl: \"\",\n}\n\n// authStore will be stored as a sub-entry in global store; this is defined in ./store/types.ts\nexport const authReducer: Reducer<IUpdateAuthState> = (authStore = initialAuthState, action: Action)  => {\n    // add reducer for new actions here\n    // ...\n\n    const authAction = action as TAuthActions;\n\n    return {\n        ...authStore,\n        ...authAction.payload\n    }\n}","/** redux */\nimport {\n    AuthActionNames,\n    IRequestedLoginAuthAction,\n    IRequestedLogoutAuthAction\n} from \"../../store/auth/types\";\nimport {\n    SuccessLoginAuth,\n    SuccessLogoutAuth,\n    FailureAuth\n} from \"../../store/auth/actions\";\nimport { resetAllStoreAction } from \"../../store/actions\";\nimport { CompanyActions, Company } from \"../../store/data-model/company\";\nimport { ApplicationActions, Application } from \"../../store/data-model/application\";\nimport { ApplicationStatusActions, ApplicationStatus } from \"../../store/data-model/application-status\";\n// redux-saga\nimport { takeEvery, call, put } from \"redux-saga/effects\";\n\n/** router */\nimport { push } from \"connected-react-router\";\n\n/** api */\nimport { AuthenticationService } from \"../../utils/auth\";\nimport { RestApiService, CrudType, RequestStatus } from \"../../utils/rest-api\";\n\nfunction* authLoginSagaHandler(\n    requestedLoginAuthAction: IRequestedLoginAuthAction\n) {\n    // RequestAuth action triggered & injecting side effects here...\n    console.log(\"auth saga: initialize\");\n    const { socialAuthToken } = requestedLoginAuthAction.payload;\n    console.log(\"auth saga: request fired\");\n    try {\n        // TODO: define interface typing for api response\n        const jsonResponse = yield call(AuthenticationService.serverLogin, socialAuthToken);\n        console.log(\"auth saga: server login using code from social button. server jsonRes=\", jsonResponse);\n        AuthenticationService.state.apiLoginToken = jsonResponse.token;\n        yield put(SuccessLoginAuth(\n            jsonResponse.email, \"\", \n            jsonResponse.token, \n            jsonResponse.avatar_url\n        ));\n        // yield put(push(\"/home/\"));\n\n        // initial fetch user data\n        yield put(ApplicationActions[CrudType.LIST][RequestStatus.TRIGGERED].action(new Application({})))\n        yield put(CompanyActions[CrudType.LIST][RequestStatus.TRIGGERED].action(new Company({})))\n        yield put(ApplicationStatusActions[CrudType.LIST][RequestStatus.TRIGGERED].action(new ApplicationStatus({})))\n    } catch (error) {\n        console.warn(\"auth saga: error\")\n        yield put(FailureAuth(error));\n        return;\n    }\n}\n\nexport function* authLoginSaga() {\n    yield takeEvery(AuthActionNames.REQUESTED_LOGIN_AUTH, authLoginSagaHandler);\n}\n\nfunction* authLogoutSagaHandler(\n    requestedLogoutAuthAction: IRequestedLogoutAuthAction\n) {\n    // RequestAuth action triggered & injecting side effects here...\n    console.log(\"auth logout saga: fired\");\n    try {\n        yield call(AuthenticationService.serverLogout);\n\n        // clear all store\n    } catch (error) {\n        yield put(FailureAuth(error));\n        return;\n    }\n\n    console.log(\"auth logout saga: navigating\");\n    yield put(SuccessLogoutAuth());\n    // yield put(push(\"/\"));\n\n    // clear all redux store\n    yield put(resetAllStoreAction());\n}\n\nexport function* authLogoutSaga() {\n    yield takeEvery(\n        AuthActionNames.REQUESTED_LOGOUT_AUTH,\n        authLogoutSagaHandler\n    );\n}\n\n// add new saga handler here && a `takeEvery` saga.\n// ...","import createSagaMiddleware from 'redux-saga';\nimport { all } from \"redux-saga/effects\";\nimport { authLoginSaga, authLogoutSaga } from \"./auth/sagas\";\n// rest api\nimport { CompanySagas } from \"../store/data-model/company\";\nimport { AddressSagas } from \"../store/data-model/address\";\nimport { ApplicationSagas } from \"../store/data-model/application\";\nimport { ApplicationStatusSagas } from \"../store/data-model/application-status\";\n\n/** setup saga */\nconst sagaMiddleware = createSagaMiddleware();\n\nexport {\n    sagaMiddleware\n};\n\nconst rootSaga = function*() {\n    yield all([\n        authLoginSaga(),\n        authLogoutSaga(),\n        ...CompanySagas.map((saga) => saga()),\n        ...AddressSagas.map((saga) => saga()),\n        ...ApplicationSagas.map((saga) => saga()),\n        ...ApplicationStatusSagas.map((saga) => saga()),\n        // add new saga here\n        // ...\n    ]);\n};\n\nexport const runSagaMiddleaware = () => {\n    sagaMiddleware.run(rootSaga)\n}\n\n","/** redux */\nimport { combineReducers, Reducer, AnyAction, Action } from \"redux\";\nimport { connectRouter, LocationChangeAction } from 'connected-react-router';\nimport { authReducer } from \"./auth/reducers\";\nimport { TAuthActions } from \"./auth/types\";\nimport { IRootState } from \"./types\";\nimport { RootActionNames } from \"./actions\";\n// rest api\nimport { CompanyReducer } from \"./data-model/company\";\nimport { AddressReducer } from \"./data-model/address\";\nimport { ApplicationReducer } from \"./data-model/application\";\nimport { ApplicationStatusReducer } from \"./data-model/application-status\";\n\n/** router */\nimport { History } from \"history\";\n\n// root reducer with router state\nexport const createRootReducer = (history: History<any>): Reducer<IRootState> => {\n    // return combineReducers<IRootState>({\n    //     router: connectRouter(history),\n    \n    //     // add more reducers here\n    //     auth: authReducer,\n    //     company: CompanyReducer,\n    //     address: AddressReducer,\n    //     application: ApplicationReducer,\n    //     // ...\n    // })\n\n    const rootReducer: Reducer<IRootState> = (rootState: IRootState | undefined, action: Action): IRootState  => {\n\n        let rootStateChecked: any = {}\n        if (!rootState) {\n            rootStateChecked.router = undefined;\n            rootStateChecked.auth = undefined;\n            rootStateChecked.company = undefined;\n            rootStateChecked.address = undefined;\n            rootStateChecked.application = undefined;\n            rootStateChecked.applicationStatus = undefined;\n            // add initial state for new sub-store here\n            // ...\n        } else if (action.type === RootActionNames.ResetAllStore) {\n            rootStateChecked = {\n                router: rootState.router\n            }\n        } else {\n            rootStateChecked = rootState;\n        }\n\n        console.log(\"beforeRootStore\", rootState);\n\n        const afterStore  = { \n            ...rootState,\n            router: connectRouter(history)(rootStateChecked.router, action as LocationChangeAction),\n            auth: authReducer(rootStateChecked.auth, action),\n            company: CompanyReducer(rootStateChecked.company, action),\n            address: AddressReducer(rootStateChecked.address, action),\n            application: ApplicationReducer(rootStateChecked.application, action),\n            applicationStatus: ApplicationStatusReducer(rootStateChecked.applicationStatus, action),\n            // add new reducer here\n            // ...\n        }\n        console.log(\"afterRootStore\", afterStore);\n\n        return afterStore;\n    }\n\n    return rootReducer;\n}","/** redux */\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport { IRootState } from \"../store/types\";\nimport { createRootReducer } from \"../store/reducers\";\n\n/** router */\nimport { createBrowserHistory } from 'history';\nimport { routerMiddleware } from 'connected-react-router';\n\n/** middleware */\n// saga\nimport { sagaMiddleware, runSagaMiddleaware } from \"../sagas/saga-config\";\n\n\n\nconst history = createBrowserHistory({\n    basename: (process.env.NODE_ENV === 'development') ?  \n    ``\n    :\n    `/appl-tracky-spa`\n});\n\nconst preloadedState = {\n\n};\n\n// generate the singleton store from redux\nexport const store = createStore<IRootState, any, any, any>(\n    createRootReducer(history),\n    preloadedState,\n    compose(\n        applyMiddleware(\n            routerMiddleware(history),\n            sagaMiddleware,\n            // ... add other middlewares ...\n        )\n    )\n);\n\n/** after mount saga middlewares to store, run them */\nrunSagaMiddleaware();\n\nexport {\n    history\n};","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n/** redux */\nimport { Provider } from \"react-redux\";\nimport { Store } from \"redux\";\n/** root store */\nimport { IRootState } from \"./store/types\";\nimport { store } from \"./store/store-config\";\n\n/** router */\nimport { ConnectedRouter } from \"connected-react-router\";\nimport { history } from \"./store/store-config\";\n\n/** types */\ninterface IRootProps {\n    store: Store<IRootState>;\n}\n\n/** root component - just to wrap the App into redux store */\nconst Root: React.SFC<IRootProps> = props => {\n    return (\n        <Provider store={props.store}>\n            <ConnectedRouter history={history} >\n                <App />\n            </ConnectedRouter>\n        </Provider>\n    );\n};\n\nReactDOM.render(<Root store={store} />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}