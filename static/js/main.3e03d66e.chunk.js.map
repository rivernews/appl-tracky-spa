{"version":3,"sources":["store/auth/types.ts","utils/rest-api.ts","store/data-model/base-model.ts","utils/auth.ts","store/auth/actions.ts","store/rest-api-redux-factory.ts","store/data-model/address.ts","store/data-model/link.ts","store/data-model/company.ts","store/data-model/application.ts","components/social-auth/social-auth-login-button.tsx","components/social-auth/social-auth-logout-button.tsx","components/social-auth/social-auth-button.tsx","components/form-factory/form-input-field.tsx","components/form-factory/form-factory.tsx","components/form-factory/form-link-field.tsx","pages/landing-page/landing-page.tsx","components/company/company-component.tsx","store/data-model/application-status.ts","store/data-model/application-status-link.ts","components/application-status/application-status-form-component.tsx","components/application-status/application-status-component.tsx","components/application/application-form-component.tsx","components/application/application-component.tsx","components/company-application/company-application-component.tsx","pages/user-app-page/user-app-page.tsx","components/company/company-form-component.tsx","pages/add-com-page/add-com-page.tsx","pages/user-com-app-page/user-com-app-page.tsx","components/user-info/user-info.tsx","pages/user-profile-page/user-profile-page.tsx","pages/page-routes/page-routes.tsx","App.tsx","serviceWorker.ts","store/actions.ts","store/auth/reducers.ts","sagas/auth/sagas.ts","sagas/saga-config.ts","store/reducers.ts","store/store-config.ts","index.tsx"],"names":["AuthActionNames","RequestStatus","CrudType","RestMethod","BaseModel","_ref","_ref$uuid","uuid","_ref$created_at","created_at","_ref$modified_at","modified_at","Object","classCallCheck","this","AuthObject","_BaseModel","_this","_ref$code","code","_ref$provider","provider","_ref$redirect_uri","redirect_uri","args","objectWithoutProperties","possibleConstructorReturn","getPrototypeOf","call","inherits","AuthenticationService","state","clientID","redirectUri","apiLoginUrl","socialAuthProvider","userEmail","apiLoginToken","userFirstName","userLastName","objectID","serverLogin","socialLoginCode","authFormData","_this2","RestApiService","post","data","endpointUrl","serverLogout","_callee","regenerator_default","a","wrap","_context","prev","next","console","log","abrupt","stop","CrudMapToRest","crudType","CREATE","POST","READ","LIST","GET","UPDATE","PATCH","DELETE","RestApi","apiBaseUrl","get","absoluteUrl","objectName","fetch","getRelativeUrl","objectSpread","method","setApiAuthHeaders","then","res","json","_ref2","body","JSON","stringify","patch","_ref3","delete","_ref4","_ref5","url","concat","undefined","mode","credentials","headers","Authorization","Content-Type","RequestedLoginAuth","socialAuthToken","type","REQUESTED_LOGIN_AUTH","payload","requestStatus","REQUESTING","RequestedLogoutAuth","REQUESTED_LOGOUT_AUTH","SuccessLoginAuth","userName","expireDateTime","apiToken","avatarUrl","SUCCESS_AUTH","SUCCESS","isLogin","SuccessLogoutAuth","FailureAuth","error","FAILURE_AUTH","FAILURE","RestApiReduxFactory","initialObjectInstance","crudKeywords","values","ObjectRestApiRedux","_loop","crudKeyword","_i","_arr","_i2","length","actionTypeName","action","toUpperCase","TRIGGERED","objectClassInstance","successCallback","failureCallback","finalCallback","formData","jsonResponse","triggerFormData","newState","lastChangedObjectID","results","sagaHandler","mark","triggerAction","put","sent","status","Error","t0","saga","objectTriggerActionChannel","objectTriggerAction","_context2","actionChannel","take","initialState","collection","sagas","map","actions","storeReducer","objectStore","arguments","objectAction","split","newObject","defineProperty","resObjectList","newObjects","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","done","object","value","err","return","afterStore","targetDeleteObject","omit","Address","_ref$place_name","place_name","_ref$country","country","_ref$state","_ref$city","city","_ref$street","street","_ref$full_address","full_address","_ref$zipcode","zipcode","Link","_ref$text","text","_ref$user","user","_ref$url","_ref$order","order","Company","_ref$labels","labels","_ref$name","name","_ref$hq_location","hq_location","_ref$home_page","home_page","_ref$ratings","ratings","_ref$applications","applications","CompanyRestApiRedux","CompanyActions","CompanyReducer","CompanySagas","Application","_ref$user_company","user_company","_ref$position_title","position_title","_ref$job_description_","job_description_page","_ref$job_source","job_source","ApplicationRestApiRedux","ApplicationActions","ApplicationReducer","ApplicationSagas","SocialAuthLoginButton","_Component","_getPrototypeOf2","_len","Array","_key","apply","onLoginButtonClicked","clickEvent","renderProps","onClick","onAuthSuccess","authResponse","props","onSuccess","onAuthFailure","onFailure","createClass","key","react_default","createElement","className","google_login","render","react_button_dist_default","unelevated","icon","dist_default","hasRipple","disabled","clientId","responseType","Component","SocialAuthLogoutButton","onLogoutSuccess","SocialAuthButton","onSocialLoginSuccess","googleOauthResponse","setState","requestedLoginAuth","onSocialLoginFailure","onSocialLogoutSuccess","requestedLogoutAuth","auth","social_auth_logout_button_SocialAuthLogoutButton","social_auth_login_button_SocialAuthLoginButton","InputFieldType","SocialAuthButtonContainer","withRouter","connect","store","dispatch","ActionButtonType","FormInputFieldProps","fieldName","label","onTrailingIconSelect","FormInputField","react_text_field_dist_default","react_text_field_dist","TEXT","inputType","onChange","onBlur","formik_esm","FormLinkFieldProps","model","FormLinkField","textInputFieldProps","urlInputFieldProps","form_input_field_FormInputField","assign","errors","touched","FormActionButtonProps","FormFactory","initialValues","validate","onSubmit","handleChange","handleBlur","isSubmitting","handleSubmit","formInputFieldPropsList","formFieldProps","index","form_link_field_FormLinkField","actionButtonPropsList","actionButtonProps","BUTTON","children","styles","backgroundColor","color","LandingPage","formFactoryProps","validateLoginForm","onSubmitLoginForm","setSubmitting","token","loginSuccess","username","avatar_url","listApplication","listCompany","catch","prepareLoginForm","password","PASSWORD","SUBMIT","style","react_router","to","form_factory_FormFactory","href","target","LandingPageContainer","CompanyComponent","company","react_router_dom","react_icon_button_dist_default","onEditIconClicked","onDeleteIconClicked","includes","ApplicationStatus","_ref$application","application","_ref$applicationstatu","applicationstatuslink_set","_ref$date","date","ApplicationStatusRestApiRedux","ApplicationStatusActions","ApplicationStatusReducer","ApplicationStatusSagas","ApplicationStatusLink","_ref$application_stat","application_status","_ref$link","link","ApplicationStatusFormComponent","linkFieldsCount","application_status__text","application_status__date","application__id","links","push","applicationStatus","applicationStatusLinks","updateApplicationStatus","onSubmitSuccess","createApplicationStatus","linkFieldInitialValues","linkFieldPropsList","DATE","addLinkField","onCancel","toConsumableArray","ApplicationStatusFormComponentContainer","applicationStatusStore","applicationStatusFormData","ApplicationStatusComponent","isFormOpened","renderDisplay","deleteApplicationStatus","applicationStatusLink","renderFormController","isOnlyForm","ApplicationStatusComponentContainer","applicationStatusToDelete","callback","ApplicationFormComponent","validateAppForm","application__position_title","onSubmitAppForm","application__job_description_page__url","application__job_source__url","application__user_company__id","updateApplication","createApplication","applicationStore","newApplication","ApplicationFormComponentContainer","applicationFormData","ApplicationComponent","renderApplicationFormController","event","renderApplicationDisplay","applicationStatusList","deleteApplication","isShowApplicationStatuses","isArray","ApplicationComponentController","applicationToDelete","CompanyApplicationComponent","onDeleteClick","deleteCompany","company_component_CompanyComponent","history","filter","CompanyApplicationComponentContainer","companyToDelete","updateCompany","companyToUpdate","UserAppPage","UserAppPageContainer","CompanyFormComponent","company__name","company__hq_location__full_address","company__home_page__url","createCompany","CompanyFormComponentContainer","companyFormData","AddComPage","match","params","newCompany","goBack","AddComPageContainer","UserComAppPage","companyUuid","renderAll","UserComAppPageContainer","UserInfo","toString","UserProfilePage","user_info_UserInfo","UserProfilePageContainer","PageRoutes","location","pathname","path","exact","component","react_top_app_bar_dist_default","title","actionItems","height","borderRadius","src","react_top_app_bar_dist","PageRoutesContainer","App","Boolean","window","hostname","RootActionNames","initialAuthState","authReducer","authStore","authAction","resetAllStoreAction","ResetAllStore","authLoginSagaHandler","authLoginSaga","authLogoutSagaHandler","authLogoutSaga","requestedLoginAuthAction","email","warn","_marked","takeEvery","_marked2","requestedLogoutAuthAction","_context3","_marked3","_context4","_marked4","sagaMiddleware","createSagaMiddleware","rootSaga","all","createBrowserHistory","basename","createStore","rootState","rootStateChecked","router","connectRouter","compose","applyMiddleware","routerMiddleware","run","ReactDOM","es","esm","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3e03d66e.chunk.js","sourcesContent":["import { Action } from \"redux\";\n\nimport { RequestStatus } from \"../../utils/rest-api\";\n\n/**\n * Store Types\n */\n\n// complete store type\nexport interface IUpdateAuthState {\n    requestStatus: RequestStatus\n    isLogin: boolean\n    userName: string\n    socialAuthToken: string\n    apiToken: string\n    expireDateTime: string\n    avatarUrl: string\n}\n\n// async partial store types\nexport interface IRequestedLoginAuthState {\n    requestStatus: RequestStatus\n    socialAuthToken: string\n}\n\nexport interface IRequestedLogoutAuthState {\n    requestStatus: RequestStatus\n}\n\nexport interface ISuccessAuthState {\n    requestStatus: RequestStatus\n    isLogin: boolean\n    userName: string\n    expireDateTime: string\n    apiToken: string\n    avatarUrl: string\n}\n\nexport interface IFailureAuthState {\n    requestStatus: RequestStatus,\n    error: any\n}\n\n// add more state types for this reducer - auth reducer\n// ...\n\n\n\n\n\n/**\n * Action Types\n */\n\nexport enum AuthActionNames {\n    UPDATE_AUTH = \"Update auth\",\n    REQUESTED_LOGIN_AUTH = \"Requested login auth\",\n    REQUESTED_LOGOUT_AUTH = \"Requested logout auth\",\n    SUCCESS_AUTH = \"Success auth\",\n    FAILURE_AUTH = \"Failure auth\",\n\n    // 1. add more action for this reducer - auth reducer\n    // 2. write the type interface for the action below\n    // ...\n}\n\nexport interface IUpdateAuthAction extends Action<AuthActionNames.UPDATE_AUTH> {\n    type: typeof AuthActionNames.UPDATE_AUTH;\n    payload: IUpdateAuthState;\n}\n\nexport interface IRequestedLoginAuthAction extends Action<AuthActionNames.REQUESTED_LOGIN_AUTH> {\n    type: typeof AuthActionNames.REQUESTED_LOGIN_AUTH;\n    payload: IRequestedLoginAuthState;\n}\n\nexport interface IRequestedLogoutAuthAction extends Action<AuthActionNames.REQUESTED_LOGOUT_AUTH> {\n    type: typeof AuthActionNames.REQUESTED_LOGOUT_AUTH;\n    payload: IRequestedLogoutAuthState;\n}\n\nexport interface ISuccessAuthAction extends Action<AuthActionNames.SUCCESS_AUTH> {\n    type: typeof AuthActionNames.SUCCESS_AUTH;\n    payload: ISuccessAuthState;\n}\n\nexport interface IFailureAuthAction extends Action<AuthActionNames.FAILURE_AUTH> {\n    type: typeof AuthActionNames.FAILURE_AUTH;\n    payload: IFailureAuthState;\n}\n\n// use union | ... | ... to add more action types\nexport type TAuthActions = IUpdateAuthAction | IRequestedLoginAuthAction | IRequestedLogoutAuthAction | ISuccessAuthAction | IFailureAuthAction","import React from \"react\";\nimport { TObject, IObjectBase } from \"../store/rest-api-redux-factory\";\nimport { BaseModel } from \"../store/data-model/base-model\";\nimport { AuthenticationService } from \"./auth\";\n\nexport enum RequestStatus {\n    TRIGGERED = \"triggered\",\n    REQUESTING = \"requesting\",\n    SUCCESS = \"success\",\n    FAILURE = \"failre\"\n}\n\nexport enum CrudType {\n    CREATE = \"create\",\n    READ = \"read\",\n    LIST = \"list\",\n    UPDATE = \"update\",\n    DELETE = \"delete\"\n}\n\nexport enum RestMethod {\n    POST = \"post\",\n    GET = \"get\",\n    PATCH = \"patch\",\n    DELETE = \"delete\"\n}\n\nexport const CrudMapToRest = (crudType: CrudType): RestMethod => {\n    switch (crudType) {\n        case CrudType.CREATE:\n            return RestMethod.POST;\n        case CrudType.READ:\n            return RestMethod.GET;\n        case CrudType.LIST:\n            return RestMethod.GET;\n        case CrudType.UPDATE:\n            return RestMethod.PATCH;\n        case CrudType.DELETE:\n            return RestMethod.DELETE;\n\n        default:\n            return RestMethod.GET;\n    }\n};\n\nexport interface IRequestParams<Schema> {\n    endpointUrl?: string;\n    absoluteUrl?: string;\n    objectName?: string;\n    data?: TObject<Schema> | Array<TObject<Schema>>;\n}\n\nexport interface IListRestApiResponse<Schema> {\n    count: number;\n    next: any;\n    previous: any;\n    results: Array<TObject<Schema>>;\n}\n\nexport type ISingleRestApiResponse<Schema> = TObject<Schema>;\n\nexport function IsSingleRestApiResponseTypeGuard<Schema>(\n    response: ISingleRestApiResponse<Schema> | IListRestApiResponse<Schema>\n): response is ISingleRestApiResponse<Schema> {\n    return (<ISingleRestApiResponse<Schema>>response).uuid !== undefined;\n}\n\nfunction IsSingleFormDataTypeGuard<Schema>(\n    formData: TObject<Schema> | Array<TObject<Schema>>\n): formData is TObject<Schema> {\n    return (<TObject<Schema>>formData).uuid !== undefined;\n}\n\nexport class RestApi {\n    state = {\n        clientID: `732988498848-vuhd6g61bnlqe372i3l5pbpnerteu6na.apps.googleusercontent.com`,\n        code: ``,\n        redirectUri: `postmessage`,\n        apiBaseUrl: (process.env.NODE_ENV === 'development') ? \n        `http://localhost:8000/api/`\n        :\n        `https://appl-tracky-api-https.shaungc.com/api/`\n        ,\n        apiLoginUrl: `login/social/`,\n        socialAuthProvider: `google-oauth2`,\n\n        userEmail: ``,\n        apiLoginToken: ``,\n        userFirstName: ``,\n        userLastName: ``,\n\n        objectID: ``\n    };\n\n    get = <Schema>({ endpointUrl, absoluteUrl, objectName, data }: IRequestParams<Schema>) => {\n        return fetch(\n            this.getRelativeUrl({\n                endpointUrl,\n                absoluteUrl,\n                objectName,\n                data\n            }),\n            {\n                method: \"GET\",\n                ...this.setApiAuthHeaders()\n            }\n        ).then(res => res.json());\n    };\n\n    post = <Schema>({ data, objectName, endpointUrl }: IRequestParams<Schema>) => {\n        console.log(`restapi:post fired`);\n        return fetch(\n            this.getRelativeUrl({\n                endpointUrl,\n                objectName,\n                data\n            }),\n            {\n                method: \"POST\",\n                ...this.setApiAuthHeaders(),\n                body: JSON.stringify(data)\n            }\n        ).then(res => res.json());\n        // let caller handle error in their own .catch()\n    };\n\n    patch = <Schema>({ data, objectName, endpointUrl }: IRequestParams<Schema>) => {\n        return fetch(\n            this.getRelativeUrl({\n                endpointUrl,\n                objectName,\n                data\n            }),\n            {\n                method: \"PATCH\",\n                ...this.setApiAuthHeaders(),\n                body: JSON.stringify(data)\n            }\n        ).then(res => res.json());\n    };\n\n    delete = <Schema>({ data, objectName, endpointUrl }: IRequestParams<Schema>) => {\n        return fetch(\n            this.getRelativeUrl({\n                endpointUrl,\n                objectName,\n                data\n            }),\n            {\n                method: \"DELETE\",\n                ...this.setApiAuthHeaders(),\n                body: JSON.stringify(data)\n            }\n        );\n    };\n\n    /** helper */\n    private getRelativeUrl = <Schema>({\n        objectName,\n        data,\n        endpointUrl,\n        absoluteUrl,\n    }: IRequestParams<Schema>) => {\n        let url = \"\";\n        if (absoluteUrl) {\n            url = absoluteUrl;\n        }\n        else if (endpointUrl) {\n            url = `${this.state.apiBaseUrl}${endpointUrl}`;\n        } else {\n            if (data && IsSingleFormDataTypeGuard(data) && data.uuid) {\n                url = `${this.state.apiBaseUrl}${objectName}/${data.uuid}/`;\n            } else {\n                url = `${this.state.apiBaseUrl}${objectName}/`;\n            }\n        }\n        console.log(`restapi: url: ${url}, objname=${objectName}`);\n        return url;\n    };\n\n    private setApiAuthHeaders = (): RequestInit => {\n\n        this.state.apiLoginToken = (\n            AuthenticationService.state.apiLoginToken\n        ) ? AuthenticationService.state.apiLoginToken : this.state.apiLoginToken;\n\n        console.log(\"api: set header: got credentials?\", this.state.apiLoginToken);\n        return {\n            mode: \"cors\",\n            credentials: this.state.apiLoginToken ? \"include\" : \"omit\",\n            headers: {\n                Authorization: this.state.apiLoginToken\n                    ? `JWT ${this.state.apiLoginToken}`\n                    : ``,\n                \"Content-Type\": \"application/json\"\n            }\n        };\n    };\n}\n\n/** create restapi singleton */\nexport const RestApiService = new RestApi();\n","export type IRelationship = string;\n\nexport interface IBaseModelProps {\n    uuid?: IRelationship\n    created_at?: string\n    modified_at?: string\n}\n\nexport class BaseModel {\n    uuid: string\n    created_at: string\n    modified_at: string\n    \n    constructor({\n        uuid = \"\",\n        created_at = \"\",\n        modified_at = \"\",\n    }: IBaseModelProps) {\n        this.uuid = uuid;\n        this.created_at = created_at;\n        this.modified_at = modified_at;\n    }\n}","import { RestApiService } from \"./rest-api\";\nimport { BaseModel, IBaseModelProps } from \"../store/data-model/base-model\";\n\nexport interface IAuthObjectProps {\n    code?: string\n    provider?: string\n    redirect_uri?: string\n}\n\nexport class AuthObject extends BaseModel {\n    code: string\n    provider: string\n    redirect_uri: string\n\n    constructor({\n        code = \"\",\n        provider = \"\",\n        redirect_uri = \"\",\n        ...args\n    }: IAuthObjectProps & IBaseModelProps) {\n        super(args);\n        this.code = code;\n        this.provider = provider;\n        this.redirect_uri = redirect_uri;\n    }\n}\n\nclass Authentication {\n    state = {\n        clientID: `732988498848-vuhd6g61bnlqe372i3l5pbpnerteu6na.apps.googleusercontent.com`,\n\n        redirectUri: `postmessage`,\n        apiLoginUrl: `login/social/`,\n        socialAuthProvider: `google-oauth2`,\n\n        userEmail: ``,\n        apiLoginToken: ``,\n        userFirstName: ``,\n        userLastName: ``,\n\n        objectID: ``\n    };\n\n    serverLogin = (socialLoginCode: string) => {\n        let authFormData = new AuthObject({\n            code: socialLoginCode,\n            provider: this.state.socialAuthProvider,\n            redirect_uri: this.state.redirectUri\n        })\n        return RestApiService\n            .post<AuthObject>({\n                data: authFormData,\n                endpointUrl: this.state.apiLoginUrl\n            })\n    }\n\n    serverLogout = async () => {\n        console.log(\"server logout...\");\n        // no server-side invalidate implement at this point (a common case for JWT, however)\n        this.state.userEmail = \"\";\n        this.state.userFirstName = \"\"\n        this.state.userLastName = \"\"\n        this.state.apiLoginToken = RestApiService.state.apiLoginToken = \"\";\n        return;\n    }\n}\n\nexport const AuthenticationService = new Authentication();","import { ActionCreator } from \"redux\";\n\nimport {\n    /** state types */\n    IUpdateAuthState,\n    IRequestedLoginAuthState,\n    /** action types */\n    IUpdateAuthAction,\n    IRequestedLoginAuthAction,\n    IRequestedLogoutAuthAction,\n    ISuccessAuthAction,\n    IFailureAuthAction,\n    /** action names */\n    AuthActionNames\n} from \"./types\";\n\nimport { RequestStatus } from \"../../utils/rest-api\";\n\nexport const UpdateAuth = (newAuthState: IUpdateAuthState): IUpdateAuthAction => {\n    return {\n        type: AuthActionNames.UPDATE_AUTH,\n        payload: newAuthState\n    };\n};\n\nexport const RequestedLoginAuth = (socialAuthToken: string): IRequestedLoginAuthAction => {\n    return {\n        type: AuthActionNames.REQUESTED_LOGIN_AUTH,\n        payload: {\n            requestStatus: RequestStatus.REQUESTING,\n            socialAuthToken\n        }\n    };\n};\n\nexport const RequestedLogoutAuth = (): IRequestedLogoutAuthAction => {\n    return {\n        type: AuthActionNames.REQUESTED_LOGOUT_AUTH,\n        payload: {\n            requestStatus: RequestStatus.REQUESTING,\n        }\n    };\n};\n\nexport const SuccessLoginAuth = (userName: string, expireDateTime: string, apiToken: string, avatarUrl: string): ISuccessAuthAction => {\n    console.log(\"action username:\", userName);\n    return {\n        type: AuthActionNames.SUCCESS_AUTH,\n        payload: {\n            requestStatus: RequestStatus.SUCCESS,\n            isLogin: true,\n            userName,\n            expireDateTime,\n            apiToken,\n            avatarUrl\n        }\n    };\n};\n\nexport const SuccessLogoutAuth = (): ISuccessAuthAction => {\n    return {\n        type: AuthActionNames.SUCCESS_AUTH,\n        payload: {\n            requestStatus: RequestStatus.SUCCESS,\n            isLogin: false,\n            userName: \"\",\n            expireDateTime: \"\",\n            apiToken: \"\",\n            avatarUrl: \"\",\n        }\n    };\n};\n\nexport const FailureAuth = (error: any): IFailureAuthAction => {\n    return {\n        type: AuthActionNames.FAILURE_AUTH,\n        payload: {\n            requestStatus: RequestStatus.FAILURE,\n            error\n        }\n    };\n};\n\n// write new actions here for this reducer - auth reducer\n// ...\n","import { Action, Reducer } from \"redux\";\nimport { takeEvery, take, call, put, actionChannel } from \"redux-saga/effects\";\nimport { SagaIterator } from \"redux-saga\";\nimport {\n    RequestStatus,\n    CrudType,\n    CrudMapToRest,\n    RestApiService,\n    IRequestParams,\n    ISingleRestApiResponse,\n    IListRestApiResponse,\n    IsSingleRestApiResponseTypeGuard\n} from \"../utils/rest-api\";\nimport omit from \"lodash/omit\";\n\n/** state & store */\n\nexport interface IObjectBase {\n    uuid: string;\n}\n\nexport type TObject<Schema> = IObjectBase & { [Property in keyof Schema]: Schema[Property] };\n\ninterface IObjectList<Schema> {\n    [uuid: string]: TObject<Schema>;\n}\n\nexport interface IObjectStore<Schema> {\n    lastChangedObjectID?: string;\n    requestStatus: RequestStatus;\n    error?: any;\n    collection: IObjectList<Schema>;\n}\n\n/** action */\n\ntype IObjectRestApiReduxFactoryActions = {\n    [restfulKeyword: string]: {\n        [asyncKeyword: string]: {\n            actionTypeName: string;\n            action: Function;\n            saga?: () => SagaIterator;\n        };\n    };\n};\n\nexport interface IObjectAction<Schema> extends Action {\n    type: string;\n    crudType: CrudType;\n\n    // for deleteAction or other actions to obtain the original instance obj passed into trigger action\n    triggerFormData?: TObject<Schema> | Array<TObject<Schema>>;\n\n    // for saga to perform additional side effect e.g. navigation\n    // only for triggerActions\n    successCallback?: Function;\n    failureCallback?: (error: any) => void;\n    finalCallback?: Function;\n\n    // for custumized api call\n    absoluteUrl?: string\n    \n    payload: {\n        formData?: TObject<Schema> | Array<TObject<Schema>>;\n        lastChangedObjectID?: string;\n        requestStatus: RequestStatus;\n        error?: any;\n    };\n}\n\n/** factory API */\n\ninterface IRestApiReduxFactory<Schema> {\n    actions: IObjectRestApiReduxFactoryActions;\n    storeReducer: Reducer<IObjectStore<Schema>>\n    sagas: Array<() => SagaIterator>;\n}\n\nexport const RestApiReduxFactory = <Schema extends IObjectBase>(\n    /** should have uuid */ objectName: string,\n    initialObjectInstance: TObject<Schema>\n): IRestApiReduxFactory<Schema> => {\n    type TObjectSchema = typeof initialObjectInstance;\n    const crudKeywords = Object.values(CrudType);\n\n    let ObjectRestApiRedux: IObjectRestApiReduxFactoryActions = {};\n    for (let crudKeyword of crudKeywords) {\n        ObjectRestApiRedux[crudKeyword] = {};\n        /** store */\n        // TODO?: action state\n\n        /** action */\n        // action type names\n        for (let requestStatus of Object.values(RequestStatus)) {\n            ObjectRestApiRedux[crudKeyword][requestStatus] = {\n                actionTypeName: \"\",\n                action: () => {}\n            };\n            ObjectRestApiRedux[crudKeyword][\n                requestStatus\n            ].actionTypeName = `${requestStatus.toUpperCase()}_${crudKeyword.toUpperCase()}_${objectName.toUpperCase()}`;\n        }\n\n        // async actions ( & state...)\n        ObjectRestApiRedux[crudKeyword][RequestStatus.TRIGGERED].action = (\n            objectClassInstance?: TObjectSchema,\n            successCallback?: Function,\n            failureCallback?: (error: any) => void,\n            finalCallback?: Function,\n            absoluteUrl?: string,\n        ): IObjectAction<TObjectSchema> => {\n            console.log(`action:fired, trigger, ${crudKeyword}`);\n            return {\n                type:\n                    ObjectRestApiRedux[crudKeyword][RequestStatus.TRIGGERED]\n                        .actionTypeName,\n                crudType: crudKeyword,\n                finalCallback,\n                successCallback,\n                failureCallback,\n                absoluteUrl,\n                payload: {\n                    requestStatus: RequestStatus.TRIGGERED,\n                    formData: objectClassInstance\n                }\n            };\n        };\n        ObjectRestApiRedux[crudKeyword][\n            RequestStatus.REQUESTING\n        ].action = (): IObjectAction<TObjectSchema> => {\n            return {\n                type:\n                    ObjectRestApiRedux[crudKeyword][RequestStatus.REQUESTING]\n                        .actionTypeName,\n                crudType: crudKeyword,\n                payload: {\n                    requestStatus: RequestStatus.REQUESTING\n                }\n            };\n        };\n        ObjectRestApiRedux[crudKeyword][RequestStatus.SUCCESS].action = (\n            /** api response */\n            jsonResponse:\n            | IListRestApiResponse<TObjectSchema>\n            | ISingleRestApiResponse<TObjectSchema>,\n            triggerFormData?: TObject<Schema> | Array<TObject<Schema>>\n        ): IObjectAction<TObjectSchema> => {\n            let newState = {\n                type:\n                    ObjectRestApiRedux[crudKeyword][RequestStatus.SUCCESS]\n                        .actionTypeName,\n                crudType: crudKeyword\n            };\n            // if is delete success, we don't need formData (& the server responds nothing for DELETE as well)\n            if (crudKeyword === CrudType.DELETE) {\n                return {\n                    ...newState,\n                    triggerFormData,\n                    payload: {\n                        requestStatus: RequestStatus.SUCCESS,\n                    }\n                }\n            }\n            else if (IsSingleRestApiResponseTypeGuard(jsonResponse)) {\n                return {\n                    ...newState,\n                    payload: {\n                        requestStatus: RequestStatus.SUCCESS,\n                        formData: <ISingleRestApiResponse<TObjectSchema>>(\n                            jsonResponse\n                        ),\n                        lastChangedObjectID: jsonResponse.uuid\n                    }\n                };\n            } else {\n                return {\n                    ...newState,\n                    payload: {\n                        requestStatus: RequestStatus.SUCCESS,\n                        formData: (<IListRestApiResponse<TObjectSchema>>(\n                            jsonResponse\n                        )).results\n                    }\n                };\n            }\n        };\n        ObjectRestApiRedux[crudKeyword][RequestStatus.FAILURE].action = (\n            error: any\n        ): IObjectAction<TObjectSchema> => {\n            return {\n                type:\n                    ObjectRestApiRedux[crudKeyword][RequestStatus.FAILURE]\n                        .actionTypeName,\n                crudType: crudKeyword,\n                payload: {\n                    requestStatus: RequestStatus.FAILURE,\n                    error\n                }\n            };\n        };\n\n        /** saga */\n        const sagaHandler = function*(\n            triggerAction: IObjectAction<TObjectSchema>\n        ) {\n            console.log(`Saga: action intercepted; aync=trigger, crud=${crudKeyword}, obj=${objectName}; ready to call api`);\n            const formData = triggerAction.payload.formData;\n            const absoluteUrl = triggerAction.absoluteUrl;\n\n            yield put(\n                ObjectRestApiRedux[crudKeyword][\n                    RequestStatus.REQUESTING\n                ].action()\n            );\n\n            try {\n                // api call\n                const jsonResponse:\n                    | IListRestApiResponse<TObjectSchema>\n                    | ISingleRestApiResponse<TObjectSchema> \n                    | any = yield call(\n                    (<(params: IRequestParams<TObjectSchema>) => void>RestApiService[CrudMapToRest(crudKeyword)]),\n                    {\n                        data: formData,\n                        objectName,\n                        absoluteUrl,\n                    }\n                );\n\n                console.log(\"Saga: res from server\", jsonResponse);\n\n                if (jsonResponse.status && jsonResponse.status >= 400) {\n                    console.error(\"Server error, see message in res.\");\n                    throw new Error(\"Server error, see message in res.\");\n                } \n\n                // if there is .next in res, then it's paginated data and we should perform a next request to next page data\n                if(jsonResponse.next) {\n                    console.log(\"Saga: res contains next url, so we will also trigger list request for next=\", jsonResponse.next);\n                    yield put(ObjectRestApiRedux[CrudType.LIST][RequestStatus.TRIGGERED].action(\n                        undefined, undefined, undefined, undefined, jsonResponse.next\n                    ));\n                }\n\n                // success state\n                if (crudKeyword === CrudType.DELETE) {\n                    yield put(\n                        ObjectRestApiRedux[CrudType.DELETE][\n                            RequestStatus.SUCCESS\n                        ].action(jsonResponse, formData)\n                    );\n                } else {\n                    console.log(\"Saga: ready to dispatch success action\")\n                    yield put(\n                        ObjectRestApiRedux[crudKeyword][\n                            RequestStatus.SUCCESS\n                        ].action(jsonResponse)\n                    );\n                }\n\n                if (triggerAction.successCallback) {\n                    triggerAction.successCallback();\n                }\n            } catch (error) {\n                // error state\n                yield put(\n                    ObjectRestApiRedux[crudKeyword][\n                        RequestStatus.FAILURE\n                    ].action(error)\n                );\n\n                if (triggerAction.failureCallback) {\n                    triggerAction.failureCallback(error);\n                }\n                return;\n            }\n\n            if (triggerAction.finalCallback) {\n                triggerAction.finalCallback();\n            }\n        };\n\n        ObjectRestApiRedux[crudKeyword][\n            RequestStatus.TRIGGERED\n        ].saga = function*() {\n            console.log(`Saga: action intercepted; async=trigger, crud=${crudKeyword}, obj=${objectName}`);\n            \n            // queue style \n            const objectTriggerActionChannel = yield actionChannel(\n                ObjectRestApiRedux[crudKeyword][RequestStatus.TRIGGERED]\n                    .actionTypeName\n            )\n\n            while (true) {\n                const objectTriggerAction = yield take(objectTriggerActionChannel);\n                yield call(sagaHandler, objectTriggerAction);\n            }\n        };\n    }\n\n    const initialState: IObjectStore<TObjectSchema> = {\n        collection: {},\n        requestStatus: RequestStatus.SUCCESS\n    };\n\n    const storeReducer: Reducer<IObjectStore<Schema>> = (\n        objectStore: IObjectStore<TObjectSchema> = initialState,\n        action: Action\n    ): IObjectStore<TObjectSchema> => {\n        \n        const objectAction = action as IObjectAction<TObjectSchema>;\n\n        if (\n            !(objectAction && objectAction.payload && objectAction.payload.requestStatus) ||\n            !(action.type.split(\"_\")[2] === objectName.toUpperCase())\n        ) {\n            return {\n                ...objectStore\n            };\n        }\n\n        // async success\n        if (objectAction.payload.requestStatus === RequestStatus.SUCCESS) {\n            // CREATE\n            if (objectAction.crudType === CrudType.CREATE) {\n                let newObject = <TObject<TObjectSchema>>objectAction.payload.formData;\n                return {\n                    collection: {\n                        ...objectStore.collection,\n                        [newObject.uuid]: newObject\n                    },\n                    requestStatus: objectAction.payload.requestStatus,\n                    lastChangedObjectID: objectAction.payload.lastChangedObjectID\n                };\n            }\n\n            // LIST\n            else if (objectAction.crudType === CrudType.LIST) {\n                const resObjectList = <Array<TObject<TObjectSchema>>>(\n                    objectAction.payload.formData\n                );\n                let newObjects: IObjectList<TObjectSchema> = {};\n                for (let object of resObjectList) {\n                    newObjects[object.uuid] = object;\n                }\n                console.log(\"Reducer: crud=list, action=\", objectAction)\n                console.log(\"initialState=\", initialState)\n                console.log(\"beforestore=\", objectStore)\n                console.log(\"newlistobjects=\", newObjects)\n\n                const afterStore: IObjectStore<TObjectSchema> = {\n                    collection: {\n                        ...objectStore.collection,\n                        ...newObjects\n                    },\n                    requestStatus: objectAction.payload.requestStatus\n                };\n                console.log(\"afterstore=\", afterStore)\n\n                return afterStore;\n            }\n\n            // UPDATE\n            else if (objectAction.crudType === CrudType.UPDATE) {\n                let newObject = <TObject<TObjectSchema>>objectAction.payload.formData;\n                return {\n                    collection: {\n                        ...objectStore.collection,\n                        [newObject.uuid]: newObject\n                    },\n                    requestStatus: objectAction.payload.requestStatus,\n                    lastChangedObjectID: objectAction.payload.lastChangedObjectID\n                };\n            }\n\n            // DELETE\n            else if (objectAction.crudType === CrudType.DELETE) {\n                let targetDeleteObject = <TObject<TObjectSchema>>objectAction.triggerFormData;\n                console.log(\"Reducer: delete, targetobj=\", targetDeleteObject)\n\n                console.log(\"Reducer: delete, beforestore=\", objectStore)\n                \n                const afterStore = {\n                    collection: omit(objectStore.collection, [targetDeleteObject.uuid]),\n                    requestStatus: objectAction.payload.requestStatus\n                }\n                console.log(\"Reducer: delete, afterstore\", afterStore)\n\n                return afterStore;\n            }\n        }\n\n        // async trigger\n        else if (objectAction.payload.requestStatus === RequestStatus.TRIGGERED) {\n            return {\n                ...objectStore,\n                requestStatus: objectAction.payload.requestStatus\n            };\n        }\n\n        // async requesting & failure\n        else {\n            return {\n                ...objectStore,\n                ...objectAction.payload\n            };\n        }\n\n        // no effect\n        return {\n            ...objectStore\n        };\n    };\n\n    const sagas = crudKeywords.map((crudKeyword) => \n        (<() => SagaIterator>ObjectRestApiRedux[crudKeyword][RequestStatus.TRIGGERED].saga)\n    );\n\n    return {\n        actions: ObjectRestApiRedux,\n        storeReducer,\n        sagas\n    };\n};\n","import { RestApiReduxFactory } from \"../rest-api-redux-factory\";\nimport { BaseModel, IBaseModelProps } from \"./base-model\";\n\nexport interface IAddressProps {\n    place_name?: string;\n    country?: string;\n    state?: string;\n    city?: string;\n    street?: string;\n    full_address?: string;\n    zipcode?: string;\n}\n\nexport class Address extends BaseModel {\n    place_name: string;\n    country: string;\n    state: string;\n    city: string;\n    street: string;\n    full_address: string;\n    zipcode: string;\n\n    constructor({\n        place_name = \"\",\n        country = \"\",\n        state = \"\",\n        city = \"\",\n        street = \"\",\n        full_address = \"\",\n        zipcode = \"\",\n        ...args\n    }: IAddressProps & IBaseModelProps) {\n        super(args);\n        this.place_name = place_name;\n        this.country = country;\n        this.state = state;\n        this.place_name = place_name;\n        this.city = city;\n        this.street = street;\n        this.full_address = full_address;\n        this.zipcode = zipcode;\n    }\n}\n\nconst initialAddressInstance = new Address({});\nconst AddressRestApiRedux = RestApiReduxFactory<Address>(\n    \"addresses\",\n    initialAddressInstance\n);","import { BaseModel, IBaseModelProps } from \"./base-model\";\n\ninterface ILinkProps {\n    text?: string;\n    user?: any;\n    url?: string;\n    order?: number;\n}\n\nexport class Link extends BaseModel {\n    public text: string;\n    public user: any;\n    public url: string;\n    public order: number;\n\n    constructor({\n        text = \"\",\n        user = {},\n        url = \"\",\n        order = 0,\n        ...args\n    }: ILinkProps & IBaseModelProps) {\n        super(args);\n        this.text = text;\n        this.user = user;\n        this.url = url;\n        this.order = order;\n    }\n}\n","import { RestApiReduxFactory } from \"../rest-api-redux-factory\";\nimport { BaseModel, IBaseModelProps } from \"./base-model\";\nimport { Address } from \"./address\";\nimport { Link } from \"./link\";\n\ninterface ICompanyProps {\n    user?: string;\n    labels?: any;\n    name?: string;\n    hq_location?: Address;\n    home_page?: Link;\n    ratings?: any;\n    applications?: any;\n}\n\nexport class Company extends BaseModel {\n    public user: string;\n    public labels: any;\n    public name: string;\n    public hq_location: Address;\n    public home_page: Link;\n    public ratings: any;\n    public applications: any;\n\n    constructor({\n        user = \"\",\n        labels = [],\n        name = \"\",\n        hq_location = new Address({}),\n        home_page = new Link({}),\n        ratings = {},\n        applications = {},\n        ...args\n    }: ICompanyProps & IBaseModelProps) {\n        super(args);\n        this.user = user;\n        this.labels = labels;\n        this.name = name;\n        this.hq_location = hq_location;\n        this.home_page = home_page;\n        this.ratings = ratings;\n        this.applications = applications;\n    }\n}\n\nconst initialCompanyInstance = new Company({});\nconst CompanyRestApiRedux = RestApiReduxFactory<Company>(\n    \"companies\",\n    initialCompanyInstance\n);\nexport const CompanyActions = CompanyRestApiRedux.actions;\nexport const CompanyReducer = CompanyRestApiRedux.storeReducer;\nexport const CompanySagas = CompanyRestApiRedux.sagas;\n","import { RestApiReduxFactory } from \"../rest-api-redux-factory\";\nimport { BaseModel, IBaseModelProps, IRelationship } from \"./base-model\";\nimport { Link } from \"./link\";\n\ninterface IApplicationProps {\n    user?: IRelationship;\n    user_company?: IRelationship;\n    position_title?: string;\n    job_description_page?: Link;\n    job_source?: Link;\n    labels?: any;\n}\n\nexport class Application extends BaseModel {\n    public user: string;\n    public user_company: IRelationship;\n    public position_title: string;\n    public job_description_page: Link;\n    public job_source: Link;\n    public labels: any;\n\n    constructor({\n        user = \"\",\n        user_company = \"\",\n        position_title = \"\",\n        job_description_page = new Link({}),\n        job_source = new Link({}),\n        labels = {},\n        ...args\n    }: IApplicationProps & IBaseModelProps) {\n        super(args);\n        this.user = user;\n        this.user_company = user_company;\n        this.position_title = position_title;\n        this.job_description_page = job_description_page;\n        this.job_source = job_source;\n        this.labels = labels;\n    }\n}\n\nconst initialApplicationInstance = new Application({});\nconst ApplicationRestApiRedux = RestApiReduxFactory<Application>(\n    \"applications\",\n    initialApplicationInstance\n);\nexport const ApplicationActions = ApplicationRestApiRedux.actions;\nexport const ApplicationReducer = ApplicationRestApiRedux.storeReducer;\nexport const ApplicationSagas = ApplicationRestApiRedux.sagas;\n","import React, { Component } from \"react\";\n\n/** Components */\nimport { GoogleLogin } from \"react-google-login\";\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n\ninterface ISocialAuthLoginButtonProps {\n    clientID: string;\n    redirectUri?: string;\n    onSuccess(authResponse?: any): void;\n    onFailure?(error: any): void;\n    disabled?: boolean;\n}\n\nexport class SocialAuthLoginButton extends Component<\n    ISocialAuthLoginButtonProps\n> {\n    onLoginButtonClicked = (clickEvent: any, renderProps: any) => {\n        console.log(\"login button clicked\", clickEvent, renderProps);\n        renderProps.onClick(clickEvent);\n    };\n\n    onAuthSuccess = (authResponse?: any) => {\n        console.log(\"login button auth success\");\n        this.props.onSuccess(authResponse);\n    };\n\n    onAuthFailure = (error: any) => {\n        console.log(\"login button auth failed\");\n        if (this.props.onFailure) {\n            this.props.onFailure(error);\n        }\n    };\n\n    render() {\n        return (\n            <div className=\"UserAuthButton\">\n                <GoogleLogin\n                    render={(renderProps: any) => (\n                        <Button\n                            onClick={clickEvent =>\n                                this.onLoginButtonClicked(\n                                    clickEvent,\n                                    renderProps\n                                )\n                            }\n                            unelevated\n                            icon={\n                                <MaterialIcon hasRipple icon=\"account_circle\" />\n                            }\n                            disabled={this.props.disabled}\n                        >\n                            Google Login\n                        </Button>\n                    )}\n                    onSuccess={this.onAuthSuccess}\n                    onFailure={this.onAuthFailure}\n                    clientId={this.props.clientID}\n                    responseType=\"code\"\n                    redirectUri={this.props.redirectUri || \"postmessage\"}\n                />\n            </div>\n        );\n    }\n}\n","import React, { Component } from \"react\";\n\n/** Components */\nimport { GoogleLogout } from \"react-google-login\";\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n\ninterface ISocialAuthLogoutButtonProps {\n    onSuccess(authResponse?: any): void;\n    disabled?: boolean\n}\n\nexport class SocialAuthLogoutButton extends Component<\n    ISocialAuthLogoutButtonProps\n> {\n    onAuthSuccess = (authResponse?: any) => {\n        this.props.onSuccess(authResponse);\n    };\n\n    render() {\n        return (\n            <div className=\"UserAuthButton\">\n                <GoogleLogout\n                    render={(renderProps: any) => (\n                        <Button\n                            onClick={renderProps.onClick}\n                            unelevated\n                            icon={<MaterialIcon hasRipple icon=\"eject\" />}\n                            disabled={this.props.disabled}\n                        >\n                            Logout\n                        </Button>\n                    )}\n                    onLogoutSuccess={this.onAuthSuccess}\n                />\n            </div>\n        );\n    }\n}\n","import React, { Component } from \"react\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\n\n/** Redux */\nimport { Dispatch } from \"redux\";\nimport { connect } from \"react-redux\";\nimport { IRootState } from \"../../store/types\";\nimport { IUpdateAuthAction, IRequestedLoginAuthAction, TAuthActions, IUpdateAuthState } from \"../../store/auth/types\";\nimport { UpdateAuth, RequestedLoginAuth, RequestedLogoutAuth } from \"../../store/auth/actions\";\n\n/** rest api */\nimport { RequestStatus } from \"../../utils/rest-api\";\n\n/** Components */\nimport { SocialAuthLoginButton } from \"./social-auth-login-button\";\nimport { SocialAuthLogoutButton } from \"./social-auth-logout-button\";\n\ninterface ISocialAuthButtonProps extends RouteComponentProps {\n    auth: IUpdateAuthState;\n    requestedLoginAuth: (socialAuthToken: string) => void;\n    requestedLogoutAuth: () => void;\n}\n\nclass SocialAuthButton extends Component<\n    ISocialAuthButtonProps\n> {\n    state = {\n        clientID: `732988498848-vuhd6g61bnlqe372i3l5pbpnerteu6na.apps.googleusercontent.com`,\n        code: ``,\n        redirectUri: `postmessage`,\n        apiBaseUrl: `http://localhost:8000/`,\n        apiLoginUrl: `login/social/`,\n        socialAuthProvider: `google-oauth2`,\n\n        userEmail: ``,\n        apiLoginToken: ``,\n        userFirstName: ``,\n        userLastName: ``,\n\n        objectID: ``\n    };\n\n    onSocialLoginSuccess = (googleOauthResponse: any) => {\n        console.log(\"Google Oauth2 res:\", googleOauthResponse);\n        this.setState(\n            {\n                code: googleOauthResponse.code\n            },\n            () => {\n                // this.apiLogin();\n                console.log(\"social button: request auth...\");\n                this.props.requestedLoginAuth(this.state.code);\n            }\n        );\n    };\n\n    onSocialLoginFailure = (error: any) => {\n        console.error(\"Social login failed:\", error);\n    };\n\n    onSocialLogoutSuccess = () => {\n        console.log(\"Social logout success, now our web app logout\");\n        this.props.requestedLogoutAuth();\n    };\n\n    render() {\n        return (\n            <div className=\"SocialAuth\">\n                auth requestStatus: {this.props.auth.requestStatus} <br></br>\n                {!this.props.auth.isLogin ? (\n                    <SocialAuthLoginButton\n                        clientID={this.state.clientID}\n                        onSuccess={this.onSocialLoginSuccess}\n                        onFailure={this.onSocialLoginFailure}\n                        disabled={this.props.auth.requestStatus === RequestStatus.REQUESTING}\n                    />\n                ) : (\n                    <SocialAuthLogoutButton\n                        onSuccess={this.onSocialLogoutSuccess}\n                        disabled={this.props.auth.requestStatus === RequestStatus.REQUESTING}\n                    />\n                )}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => {\n    return {\n        auth: store.auth\n    };\n};\n\nfunction mapDispatchToProps(dispatch: Dispatch<TAuthActions>) {\n    return {\n        requestedLoginAuth: (socialAuthToken: string) => {\n            dispatch(\n                RequestedLoginAuth(socialAuthToken)\n            );\n        },\n        requestedLogoutAuth: () => {\n            dispatch(\n                RequestedLogoutAuth()\n            );\n        }\n    };\n}\n\nexport const SocialAuthButtonContainer = withRouter(connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(SocialAuthButton));\n","import React, { Component } from \"react\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\n\n/** Components */\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n// mdc-react input\nimport \"@material/react-text-field/dist/text-field.css\";\nimport TextField, { HelperText, Input } from \"@material/react-text-field\";\n// formik\nimport {\n    Formik,\n    Form,\n    Field,\n    ErrorMessage,\n    FormikValues,\n    FormikTouched,\n    FormikErrors,\n} from \"formik\";\n\nexport enum InputFieldType {\n    // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input\n    TEXT = \"text\",\n    PASSWORD = \"password\",\n    EMAIL = \"email\",\n    URL = \"url\",\n    DATE = \"date\"\n}\n\nexport interface IFormFieldProps {\n    fieldName: string\n    label: string\n    model?: any\n}\n\nexport class FormInputFieldProps implements IFormFieldProps {\n    constructor(\n        public fieldName: string = \"\",\n        public label: string = \"\",\n        public type?: InputFieldType,\n        public onTrailingIconSelect?: () => void\n    ) {}\n}\n\nexport interface IFormBaseFieldProps {\n    /* formik */\n    onChange: (event: any) => void\n    onBlur: (event: any) => void\n    values: FormikValues\n    errors: FormikErrors<FormikValues>\n    touched: FormikTouched<FormikValues>\n}\n\ninterface IFormInputFieldProps extends FormInputFieldProps, IFormBaseFieldProps {\n}\n\nexport class FormInputField extends Component<IFormInputFieldProps> {\n    render() {\n        return (\n            <div className=\"FormInputField\">\n                <TextField\n                    label={this.props.label}\n                    onTrailingIconSelect={this.props.onTrailingIconSelect}\n                    // trailingIcon={<MaterialIcon role=\"button\" icon=\"clear\" />}\n                >\n                    <Input\n                        type={this.props.type || InputFieldType.TEXT}\n                        name={this.props.fieldName}\n                        inputType=\"input\"\n                        onChange={this.props.onChange}\n                        onBlur={this.props.onBlur}\n                        value={this.props.values[this.props.fieldName]}\n                    />\n                </TextField>\n                <ErrorMessage name={this.props.fieldName} />\n            </div>\n        );\n    }\n}","import React, { Component } from \"react\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\n// data model\nimport { Link } from \"../../store/data-model/link\";\n\n/** Components */\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n// mdc-react input\nimport \"@material/react-text-field/dist/text-field.css\";\nimport TextField, { HelperText, Input } from \"@material/react-text-field\";\n// formik\nimport {\n    Formik,\n    Form,\n    Field,\n    ErrorMessage,\n    FormikValues,\n    FormikErrors,\n    FormikTouched\n} from \"formik\";\nimport { FormInputField, FormInputFieldProps, IFormFieldProps } from \"./form-input-field\";\n// form fields\nimport { FormLinkField } from \"./form-link-field\";\n\nexport enum ActionButtonType {\n    SUBMIT = \"submit\",\n    BUTTON = \"button\"\n}\n\nexport class FormActionButtonProps {\n    constructor(\n        public text: string = \"\", \n        public onClick?: (event: any) => void, \n        public type?: ActionButtonType\n    ) {}\n}\n\nexport interface IFormFactoryProps<DataModel> {\n    initialValues: DataModel;\n\n    validate: (values: FormikValues) => FormikErrors<FormikValues>;\n    onSubmit: (\n        values: FormikValues,\n        { setSubmitting }: { setSubmitting: Function }\n    ) => void;\n\n    actionButtonPropsList: Array<FormActionButtonProps>;\n    formInputFieldPropsList: Array<FormInputFieldProps>\n}\n\nexport class FormFactory<DataModel> extends Component<\n    IFormFactoryProps<DataModel>\n> {\n    render() {\n        return (\n            <div className=\"FormFactory\">\n                <Formik\n                    initialValues={this.props.initialValues}\n                    validate={this.props.validate}\n                    onSubmit={this.props.onSubmit}\n                >\n                    {({\n                        values,\n                        errors,\n                        touched,\n                        handleChange,\n                        handleBlur,\n                        handleSubmit,\n                        isSubmitting\n                    }: {\n                        values: FormikValues,\n                        touched: FormikTouched<FormikValues>,\n                        [props: string]: any\n                    }) => (\n                        <Form>\n                            {this.props.formInputFieldPropsList.map((formFieldProps: IFormFieldProps, index) => {\n                                if (!formFieldProps.model) {\n                                    return (\n                                        <FormInputField \n                                            key={index}\n                                            {...formFieldProps} \n                                            onChange={handleChange}\n                                            onBlur={handleBlur}\n                                            values={values}\n                                            errors={errors}\n                                            touched={touched}\n                                        />\n                                    )\n                                }\n                                else {\n                                    if (formFieldProps.model === Link) {\n                                        return (\n                                            <FormLinkField\n                                                key={index}\n                                                {...formFieldProps} \n                                                onChange={handleChange}\n                                                onBlur={handleBlur}\n                                                values={values}\n                                                errors={errors}\n                                                touched={touched}\n                                            />\n                                        )\n                                    }\n                                }\n                            })}\n                            {this.props.actionButtonPropsList.map(\n                                (actionButtonProps: FormActionButtonProps, index) => (\n                                    <Button\n                                        key={index}\n                                        type={actionButtonProps.type || ActionButtonType.BUTTON}\n                                        disabled={isSubmitting}\n                                        unelevated\n                                        onClick={actionButtonProps.onClick}\n                                        children={actionButtonProps.text}\n                                    />\n                                )\n                            )}\n                        </Form>\n                    )}\n                </Formik>\n            </div>\n        );\n    }\n}\n","import React, { Component } from \"react\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\n// data model\nimport { Link } from \"../../store/data-model/link\";\n\n/** Components */\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n// mdc-react input\nimport \"@material/react-text-field/dist/text-field.css\";\nimport TextField, { HelperText, Input } from \"@material/react-text-field\";\n// formik\nimport {\n    Formik,\n    Form,\n    Field,\n    ErrorMessage,\n    FormikValues,\n    FormikTouched,\n    FormikErrors,\n} from \"formik\";\n\nimport { FormInputField, FormInputFieldProps, IFormBaseFieldProps, IFormFieldProps } from \"./form-input-field\";\n\nexport class FormLinkFieldProps implements IFormFieldProps {\n    model = Link;\n    constructor(\n        public fieldName: string = \"\",\n        public label: string = \"\"\n    ) {\n    }\n}\n\ninterface IFormLinkFieldProps extends FormInputFieldProps, IFormBaseFieldProps {\n}\n\nexport class FormLinkField extends Component<IFormLinkFieldProps> {\n\n    textInputFieldProps: FormInputFieldProps;\n    urlInputFieldProps: FormInputFieldProps;\n\n    constructor(props: IFormLinkFieldProps) {\n        super(props)\n\n        this.textInputFieldProps = new FormInputFieldProps(`${this.props.fieldName}__text`, \"Description\");\n        this.urlInputFieldProps = new FormInputFieldProps(`${this.props.fieldName}__url`, \"Link url\");\n    }\n\n    render() {\n        return (\n            <div className=\"FormLinkField\">\n                <h4>{this.props.label }</h4>\n                <FormInputField \n                    {...this.textInputFieldProps} \n                    onChange={this.props.onChange}\n                    onBlur={this.props.onBlur}\n                    values={this.props.values}\n                    errors={this.props.errors}\n                    touched={this.props.touched}\n                />\n\n                <FormInputField \n                    {...this.urlInputFieldProps} \n                    onChange={this.props.onChange}\n                    onBlur={this.props.onBlur}\n                    values={this.props.values}\n                    errors={this.props.errors}\n                    touched={this.props.touched}\n                />\n            </div>\n        );\n    }\n}","import React, { Component } from \"react\";\nimport { withRouter, RouteComponentProps, Redirect } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch, AnyAction } from \"redux\";\nimport { IRootState } from \"../../store/types\";\nimport { IUpdateAuthState } from \"../../store/auth/types\";\nimport { SuccessLoginAuth } from \"../../store/auth/actions\";\nimport { CompanyActions, Company } from \"../../store/data-model/company\";\nimport {\n    ApplicationActions,\n    Application\n} from \"../../store/data-model/application\";\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\n\n/** Components */\nimport { SocialAuthButtonContainer } from \"../../components/social-auth/social-auth-button\";\n// form\nimport {\n    FormFactory,\n    FormActionButtonProps,\n    IFormFactoryProps,\n    ActionButtonType\n} from \"../../components/form-factory/form-factory\";\nimport {\n    FormInputField,\n    FormInputFieldProps,\n    InputFieldType\n} from \"../../components/form-factory/form-input-field\";\nimport { ErrorMessage, FormikValues, FormikErrors } from \"formik\";\nimport { AuthenticationService } from \"../../utils/auth\";\nimport { RestApiService } from \"../../utils/rest-api\";\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n\n\nlet styles = {\n    backgroundColor: \"purple\",\n    color: \"white\"\n};\n\ninterface ILandingPageProps extends RouteComponentProps {\n    auth: IUpdateAuthState;\n    loginSuccess: (userName: string, apiToken: string, avatarUrl: string) => void;\n    listApplication: () => void\n    listCompany: () => void\n}\n\nclass LandingPage extends Component<ILandingPageProps> {\n    formFactoryProps: any;\n\n    constructor(props: ILandingPageProps) {\n        super(props);\n        this.prepareLoginForm();\n    }\n\n    validateLoginForm = (values: FormikValues) => {\n        let errors: FormikErrors<any> = {};\n        return errors;\n    };\n\n    onSubmitLoginForm = (\n        values: FormikValues,\n        { setSubmitting }: { setSubmitting: Function }\n    ) => {\n        setSubmitting(false);\n        console.log(\"values=\", values);\n\n        // post to get login token\n\n        fetch(`${RestApiService.state.apiBaseUrl}api-token-auth/`, {\n            method: \"POST\",\n            mode: \"cors\",\n            credentials: \"omit\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(values)\n        })\n            .then(res => res.json())\n            .then(res => {\n                console.log(\"res=\", res);\n                // set login token\n                AuthenticationService.state.apiLoginToken = res.token;\n\n                // set redux auth store isLogin state --- have to write action and reducer.\n                this.props.loginSuccess(values.username, res.token, res.avatar_url);\n\n                // request com & app list (dispatch)\n                this.props.listApplication();\n                this.props.listCompany();\n            })\n            .catch(err => {\n                console.error(\"login error~~\", err);\n            });\n    };\n\n    prepareLoginForm = () => {\n        const initialValues = {\n            username: \"\",\n            password: \"\"\n        };\n\n        this.formFactoryProps = {\n            initialValues: initialValues,\n            validate: this.validateLoginForm,\n            onSubmit: this.onSubmitLoginForm,\n            formInputFieldPropsList: [\n                new FormInputFieldProps(\"username\", \"Username\"),\n                new FormInputFieldProps(\n                    \"password\",\n                    \"Password\",\n                    InputFieldType.PASSWORD\n                )\n            ],\n            actionButtonPropsList: [\n                new FormActionButtonProps(\"Login\", undefined, ActionButtonType.SUBMIT)\n            ]\n        };\n    };\n\n    render() {\n        return (\n            <div className=\"LandingPage\" style={styles}>\n                {/** redirect logged in user to private routes */\n                this.props.auth.isLogin && <Redirect to=\"/home/\" />}\n                <h1>Appl Tracky</h1>\n                <SocialAuthButtonContainer />\n                <h2>Or login locally (admin only):</h2>\n                <FormFactory {...this.formFactoryProps} />\n                <hr />\n                <Button\n                    href=\"https://github.com/rivernews/appl-tracky-spa\"\n                    target=\"_blank\"\n                    unelevated\n                    icon={\n                        <MaterialIcon hasRipple icon=\"code\" />\n                    }\n                >\n                    Github Repository\n                </Button>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: IRootState) => ({\n    auth: state.auth\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>) => {\n    // actionName = (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {\n        loginSuccess: (userName: string, apiToken: string, avatarUrl: string) =>\n            dispatch(SuccessLoginAuth(userName, \"\", apiToken, avatarUrl)),\n        listApplication: () =>\n            dispatch(\n                ApplicationActions[CrudType.LIST][\n                    RequestStatus.TRIGGERED\n                ].action(new Application({}))\n            ),\n        listCompany: () =>\n            dispatch(\n                CompanyActions[CrudType.LIST][\n                    RequestStatus.TRIGGERED\n                ].action(new Company({}))\n            )\n    };\n};\n\nexport const LandingPageContainer = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(LandingPage)\n);\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\n\n/** Redux */\nimport { Company } from \"../../store/data-model/company\";\n\n/** Components */\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc-react icon button\nimport '@material/react-icon-button/dist/icon-button.css';\nimport IconButton from '@material/react-icon-button';\n\ninterface ICompanyComponentProps {\n    company: Company;\n    onDeleteIconClicked?: (event: any) => void\n    onEditIconClicked?: (event: any) => void\n}\n\nexport class CompanyComponent extends Component<ICompanyComponentProps> {\n    render() {\n        const company = this.props.company;\n        return (\n            <div className=\"CompanyComponent\">\n                <p>\n                    <Link to={`/com-app/${company.uuid}/`}>\n                        {company.name}\n                    </Link>\n                    <IconButton onClick={this.props.onEditIconClicked}>\n                        <MaterialIcon hasRipple icon=\"edit\"/>\n                    </IconButton>\n                    <IconButton onClick={this.props.onDeleteIconClicked}>\n                        <MaterialIcon hasRipple icon=\"delete\"/>\n                    </IconButton>\n                    <br />\n                    <span>\n                        <strong>UUID:</strong> {company.uuid}\n                    </span>\n                    <br />\n                    <span>\n                        <strong>HQ:</strong> {company.hq_location.full_address}\n                    </span>\n                    <br />\n                    <a target=\"_blank\" href={\n                        (company.home_page.url && company.home_page.url.includes(\"//\")) ?\n                        company.home_page.url :\n                        `//${company.home_page.url}`\n                    }>\n                        <strong>Homepage</strong>\n                    </a>\n                    <br />\n                </p>\n            </div>\n        );\n    }\n}\n","import { RestApiReduxFactory } from \"../rest-api-redux-factory\";\nimport { BaseModel, IBaseModelProps, IRelationship } from \"./base-model\";\nimport { ApplicationStatusLink } from \"./application-status-link\";\n\ninterface IApplicationStatusProps {\n    text?: string;\n    application?: IRelationship;\n    applicationstatuslink_set?: Array<ApplicationStatusLink>\n    date?: string;\n    order?: number\n}\n\nexport class ApplicationStatus extends BaseModel {\n    public text: string;\n    public application: IRelationship;\n    // public applicationstatuslink_set: Array<ApplicationStatusLink>\n    public applicationstatuslink_set: Array<ApplicationStatusLink>\n    public date: string;\n    public order: number;\n\n    constructor({\n        text = \"\",\n        application = \"\",\n        // applicationstatuslink_set = [],\n        applicationstatuslink_set = [],\n        date = \"\",\n        order = 0,\n        ...args\n    }: IApplicationStatusProps & IBaseModelProps) {\n        super(args);\n        this.text = text;\n        this.application = application;\n        // this.applicationstatuslink_set = applicationstatuslink_set;\n        this.applicationstatuslink_set = applicationstatuslink_set;\n        this.date = date;\n        this.order = order;\n    }\n}\n\nconst initialApplicationStatusInstance = new ApplicationStatus({});\nconst ApplicationStatusRestApiRedux = RestApiReduxFactory<ApplicationStatus>(\n    \"application-statuses\",\n    initialApplicationStatusInstance\n);\nexport const ApplicationStatusActions = ApplicationStatusRestApiRedux.actions;\nexport const ApplicationStatusReducer = ApplicationStatusRestApiRedux.storeReducer;\nexport const ApplicationStatusSagas = ApplicationStatusRestApiRedux.sagas;\n","import { RestApiReduxFactory } from \"../rest-api-redux-factory\";\nimport { BaseModel, IBaseModelProps, IRelationship } from \"./base-model\";\nimport { Link } from \"./link\";\n\ninterface IApplicationStatusLinkProps {\n    application_status?: IRelationship;\n    link?: Link;\n}\n\nexport class ApplicationStatusLink extends BaseModel {\n    public application_status: IRelationship;\n    public link: Link;\n\n    constructor({\n        application_status = \"\",\n        link = new Link({}),\n        ...args\n    }: IApplicationStatusLinkProps & IBaseModelProps) {\n        super(args);\n        this.application_status = application_status;\n        this.link = link;\n    }\n}","import React, { Component } from \"react\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\nimport { IObjectStore, IObjectAction } from \"../../store/rest-api-redux-factory\";\n// data models\nimport {\n    ApplicationStatus,\n    ApplicationStatusActions\n} from \"../../store/data-model/application-status\";\nimport {\n    ApplicationStatusLink,\n} from \"../../store/data-model/application-status-link\";\nimport { Application } from \"../../store/data-model/application\";\nimport { Link } from \"../../store/data-model/link\";\n\n/** Rest API */\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\n\n/** Components */\nimport {\n    FormFactory,\n    FormActionButtonProps,\n    IFormFactoryProps,\n    ActionButtonType\n} from \"../form-factory/form-factory\";\nimport {\n    FormInputField,\n    FormInputFieldProps,\n    InputFieldType\n} from \"../form-factory/form-input-field\";\nimport { FormLinkFieldProps } from \"../form-factory/form-link-field\";\nimport { ErrorMessage, FormikValues, FormikErrors } from \"formik\";\n\ninterface IApplicationStatusFormComponentProps extends RouteComponentProps {\n    applicationStatus?: ApplicationStatus; // for update form\n    onCancel: (event: any) => void;\n    onSubmitSuccess?: () => void;\n\n    /** redux */\n    application: Application;\n    applicationStatusStore: IObjectStore<ApplicationStatus>\n    createApplicationStatus: (\n        applicationStatusFormData: ApplicationStatus,\n        successCallback?: Function,\n        finalCallback?: Function,\n    ) => void;\n    updateApplicationStatus: (\n        applicationStatusFormData: ApplicationStatus,\n        successCallback?: Function,\n        finalCallback?: Function,\n    ) => void;\n}\n\nclass ApplicationStatusFormComponent extends Component<\n    IApplicationStatusFormComponentProps\n> {\n    // formFactoryProps: IFormFactoryProps<any>;\n    linkFieldsCount: number;\n\n    state: {\n        linkFieldPropsList: Array<FormLinkFieldProps>,\n        formFactoryProps: IFormFactoryProps<any>,\n    }\n\n    constructor(props: IApplicationStatusFormComponentProps) {\n        super(props);\n\n        const applicationStatus = this.props.applicationStatus;\n        \n        // setup dynamic link fields for initialValues\n        let linkFieldInitialValues: { [key: string]: string } = {}\n        this.linkFieldsCount = 0;\n        if (applicationStatus) {\n            // is update form\n            this.linkFieldsCount = applicationStatus.applicationstatuslink_set.length;\n        }\n        else {\n            // is create form\n            this.linkFieldsCount = 0; // temp value; provide 2 link fields for create form; TODO: make this dynamic\n        }\n        // setup initialValue, which should be flatten\n        for (let index = 0; index < this.linkFieldsCount; index++) {\n            linkFieldInitialValues[`application_status__application_status_link__link_${index}__url`] = applicationStatus ? applicationStatus.applicationstatuslink_set[index].link.url : \"\";\n            linkFieldInitialValues[`application_status__application_status_link__link_${index}__text`] = applicationStatus ? applicationStatus.applicationstatuslink_set[index].link.text : \"\";\n        }\n\n        const initialValues = {\n            application_status__text: applicationStatus ? applicationStatus.text : \"\",\n            application_status__date: applicationStatus ? applicationStatus.date : \"\",\n            ...linkFieldInitialValues,\n        }\n\n        let linkFieldPropsList: Array<FormLinkFieldProps> = []\n        for (let index = 0; index < this.linkFieldsCount; index++) {\n            linkFieldPropsList.push(\n                new FormLinkFieldProps(`application_status__application_status_link__link_${index}`, `Link ${index}`)\n            )\n        }\n        const formFactoryProps = {\n            initialValues: initialValues,\n            validate: this.validate,\n            onSubmit: this.onSubmit,\n            formInputFieldPropsList: [\n                new FormInputFieldProps(\"application_status__text\", \"Status*\"),\n                new FormInputFieldProps(\n                    \"application_status__date\",\n                    \"Date\",\n                    InputFieldType.DATE\n                ),\n                ...linkFieldPropsList,\n            ],\n            actionButtonPropsList: [\n                new FormActionButtonProps(\n                    \"Add link\",\n                    () => this.addLinkField(),\n                ) ,\n                new FormActionButtonProps(\n                    applicationStatus ?\n                    \"Update Status\":\n                    \"Add Status\",\n                    undefined,\n                    ActionButtonType.SUBMIT\n                ),\n                new FormActionButtonProps(\"Cancel\", this.props.onCancel)\n            ]\n        };\n\n        this.state = {\n            linkFieldPropsList,\n            formFactoryProps\n        }\n    }\n\n    addLinkField() {\n        this.setState({\n            formFactoryProps: {\n                ...this.state.formFactoryProps,\n                formInputFieldPropsList: [\n                    ...this.state.formFactoryProps.formInputFieldPropsList,\n                    new FormLinkFieldProps(`application_status__application_status_link__link_${this.linkFieldsCount}`, `Link ${this.linkFieldsCount}`)\n                ]\n            }\n        }, () => {\n            this.linkFieldsCount++;\n        })\n    }\n\n    validate = (values: FormikValues) => {\n        let errors: FormikErrors<any> = {};\n        if (!values.application_status__text) {\n            errors.application_status__text = \"Required\";\n        }\n        if (!values.application_status__date) {\n            errors.application_status__date = \"Please give a valid date\";\n        }\n        return errors;\n    };\n\n    onSubmit = (\n        values: FormikValues,\n        { setSubmitting }: { setSubmitting: Function }\n    ) => {\n        setSubmitting(true);\n        console.log(\"values=\", values);\n\n        // prepare relational objects\n        const application__id = this.props.application.uuid;\n        if (!application__id) {\n            console.error(\n                \"Application object has no uuid so cannot submit form.\"\n            );\n            return;\n        }\n\n        // create link(s)\n        let links = [];\n        for (let index = 0; index < this.linkFieldsCount; index ++) {\n            links.push(new Link({\n                url: values[`application_status__application_status_link__link_${index}__url`],\n                text: values[`application_status__application_status_link__link_${index}__text`] || `Link of status`,\n                uuid: (this.props.applicationStatus) ? this.props.applicationStatus.applicationstatuslink_set[index] && this.props.applicationStatus.applicationstatuslink_set[index].link.uuid : \"\",\n            }));\n        }\n        // create main object for applicationStatusLink(s)\n        const applicationStatusLinks = links.map((link, index) => {\n            return new ApplicationStatusLink({\n                link,\n                uuid: (this.props.applicationStatus) ? this.props.applicationStatus.applicationstatuslink_set[index] && this.props.applicationStatus.applicationstatuslink_set[index].uuid : \"\",\n            });\n        });\n\n        console.log(\"App status form: sending app status links=\", applicationStatusLinks);\n\n        // create main object for application status\n        const applicationStatus = new ApplicationStatus({\n            text: values.application_status__text,\n            application: application__id,\n            date: values.application_status__date,\n            applicationstatuslink_set: applicationStatusLinks,\n        });\n\n        // dispatch for application status\n        if (!this.props.applicationStatus) {\n            this.props.createApplicationStatus(applicationStatus, this.props.onSubmitSuccess, () => setSubmitting(false));\n        } else {\n            applicationStatus.uuid = this.props.applicationStatus.uuid;\n            this.props.updateApplicationStatus(applicationStatus, this.props.onSubmitSuccess, () => setSubmitting(false));\n        }\n        \n    };\n\n    render() {\n        return (\n            <div className=\"ApplicationStatusFormComponent\">\n                <FormFactory {...this.state.formFactoryProps} />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    // prop: store.prop\n    applicationStatusStore: store.applicationStatus\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<ApplicationStatus> | IObjectAction<ApplicationStatusLink>>) => {\n    // actionName: (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {\n        createApplicationStatus: (\n            applicationStatusFormData: ApplicationStatus,\n            successCallback?: Function,\n            failureCallback?: Function,\n        ) =>\n            dispatch(\n                ApplicationStatusActions[CrudType.CREATE][\n                    RequestStatus.TRIGGERED\n                ].action(applicationStatusFormData, successCallback, undefined, failureCallback)\n            )\n        ,\n        updateApplicationStatus: (\n            applicationStatusFormData: ApplicationStatus,\n            successCallback?: Function,\n            failureCallback?: Function,\n        ) =>\n            dispatch(\n                ApplicationStatusActions[CrudType.UPDATE][\n                    RequestStatus.TRIGGERED\n                ].action(applicationStatusFormData, successCallback, undefined, failureCallback)\n            )\n        ,\n    };\n};\n\nexport const ApplicationStatusFormComponentContainer = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(ApplicationStatusFormComponent)\n);\n","import React, { Component } from \"react\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\nimport {\n    IObjectAction,\n} from \"../../store/rest-api-redux-factory\";\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\n\n/** data model */\nimport {\n    ApplicationStatus,\n    ApplicationStatusActions\n} from \"../../store/data-model/application-status\";\nimport { Application } from \"../../store/data-model/application\";\n\n/** Components */\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc-react icon button\nimport \"@material/react-icon-button/dist/icon-button.css\";\nimport IconButton from \"@material/react-icon-button\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\nimport { ApplicationStatusFormComponentContainer } from \"./application-status-form-component\";\n\ninterface IApplicationStatusComponentProps extends RouteComponentProps {\n    applicationStatus?: ApplicationStatus;\n    application?: Application; // needed by form\n    isOnlyForm?: boolean; // needed by add-button\n    deleteApplicationStatus: (\n        applicationStatusToDelete: ApplicationStatus,\n        callback?: Function\n    ) => void;\n}\n\ninterface IApplicationStatusComponentState {\n    isFormOpened: boolean;\n}\n\nclass ApplicationStatusComponent extends Component<\n    IApplicationStatusComponentProps,\n    IApplicationStatusComponentState\n> {\n    state = {\n        isFormOpened: false\n    };\n\n    render() {\n        return (\n            <div className=\"ApplicationStatusComponent\">\n                {(this.state.isFormOpened || this.props.isOnlyForm) && this.props.application ? (\n                    this.renderFormController(\n                        this.props.application,\n                        this.props.applicationStatus\n                    )\n                ) : this.props.applicationStatus ? (\n                    this.renderDisplay(this.props.applicationStatus)\n                ) : (\n                    <span>\n                        Nothing to render: no application status provided so\n                        cannot display; no application provided so form for\n                        create/update are not allowed.\n                    </span>\n                )}\n            </div>\n        );\n    }\n\n    renderDisplay = (applicationStatus: ApplicationStatus) => {\n        return (\n            <div className=\"ApplicationStatusComponent\">\n                <p>\n                    <span>Status: {applicationStatus.text}</span>\n                    <IconButton\n                        onClick={() => {\n                            console.log(\"application status component: edit button clicked.\")\n                            this.setState({isFormOpened: true});\n                        }}\n                    >\n                        <MaterialIcon hasRipple icon=\"edit\" />\n                    </IconButton>\n                    <IconButton\n                        onClick={() =>\n                            this.props.deleteApplicationStatus(\n                                applicationStatus\n                            )\n                        }\n                    >\n                        <MaterialIcon hasRipple icon=\"delete\" />\n                    </IconButton>\n                    <br />\n                    <span>{applicationStatus.date}</span>\n                    <br />\n                    {applicationStatus.applicationstatuslink_set.map(\n                        applicationStatusLink => {\n                            return (\n                                applicationStatusLink &&\n                                applicationStatusLink.link && (\n                                    <span key={applicationStatusLink.uuid}>\n                                        <a\n                                            href={\n                                                (\n                                                    applicationStatusLink.link.url && \n                                                    applicationStatusLink.link.url.includes(\"//\")\n                                                ) ?\n                                                applicationStatusLink.link.url :\n                                                `//${applicationStatusLink.link.url}`\n                                            }\n                                            target=\"_blank\"\n                                        >\n                                            {applicationStatusLink.link.text}\n                                        </a>{\" \"}\n                                        |{\" \"}\n                                    </span>\n                                )\n                            );\n                        }\n                    )}\n                </p>\n            </div>\n        );\n    };\n\n    renderFormController = (\n        application: Application,\n        applicationStatus?: ApplicationStatus\n    ) => {\n        return (\n            <div className=\"application-status-form-controller\">\n                {/* new application status form */}\n                {!this.state.isFormOpened ? (\n                    <Button\n                        onClick={clickEvent => {\n                            this.setState({\n                                isFormOpened: true\n                            });\n                        }}\n                        unelevated\n                        icon={<MaterialIcon hasRipple icon=\"add\" />}\n                    >\n                        Add New Status\n                    </Button>\n                ) : (\n                    <div className=\"application-component__status-form\">\n                        <h3>\n                            Add new status to application for{\" \"}\n                            {application.position_title}{\" \"}\n                        </h3>\n                        <ApplicationStatusFormComponentContainer\n                            application={application}\n                            applicationStatus={applicationStatus}\n                            onCancel={clickEvent => {\n                                this.setState({\n                                    isFormOpened: false\n                                });\n                            }}\n                            onSubmitSuccess={() => {\n                                this.setState({\n                                    isFormOpened: false\n                                });\n                            }}\n                        />\n                    </div>\n                )}\n            </div>\n        );\n    };\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    // prop: store.prop\n});\n\nconst mapDispatchToProps = (\n    dispatch: Dispatch<IObjectAction<ApplicationStatus>>\n) => {\n    // actionName: (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {\n        deleteApplicationStatus: (\n            applicationStatusToDelete: ApplicationStatus,\n            callback?: Function\n        ) =>\n            dispatch(\n                ApplicationStatusActions[CrudType.DELETE][\n                    RequestStatus.TRIGGERED\n                ].action(applicationStatusToDelete, callback)\n            )\n    };\n};\n\nexport const ApplicationStatusComponentContainer = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(ApplicationStatusComponent)\n);\n","import React, { Component } from \"react\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\nimport {\n    IObjectStore,\n    IObjectAction\n} from \"../../store/rest-api-redux-factory\";\n// data models\nimport { Company } from \"../../store/data-model/company\";\nimport {\n    Application,\n    ApplicationActions\n} from \"../../store/data-model/application\";\nimport { Link } from \"../../store/data-model/link\";\n\n/** Components */\nimport {\n    FormFactory,\n    FormActionButtonProps,\n    IFormFactoryProps,\n    ActionButtonType\n} from \"../form-factory/form-factory\";\nimport {\n    FormInputField,\n    FormInputFieldProps,\n    InputFieldType\n} from \"../form-factory/form-input-field\";\nimport { ErrorMessage, FormikValues, FormikErrors } from \"formik\";\n\ninterface IApplicationFormComponentProps {\n    application?: Application;\n    onCancel: (event: any) => void;\n    onSubmitSuccess?: () => void;\n\n    company: Company;\n    /** redux */\n    applicationStore: IObjectStore<Application>;\n    createApplication: (\n        applicationFormData: Application,\n        successCallback?: Function,\n        finalCallback?: Function,\n    ) => void;\n    updateApplication: (\n        applicationFormData: Application,\n        successCallback?: Function,\n        finalCallback?: Function,\n    ) => void;\n}\n\nclass ApplicationFormComponent extends Component<\n    IApplicationFormComponentProps\n> {\n    formFactoryProps: IFormFactoryProps<any>;\n\n    constructor(props: IApplicationFormComponentProps) {\n        super(props);\n\n        // prepare for new application form\n        const application = this.props.application;\n        const initialValues = {\n            application__position_title: application\n                ? application.position_title\n                : \"\",\n            application__job_description_page__url: application\n                ? application.job_description_page.url || \"\"\n                : \"\",\n            application__job_source__url: application\n                ? application.job_source.url || \"\"\n                : \"\"\n        };\n\n        this.formFactoryProps = {\n            initialValues: initialValues,\n            validate: this.validateAppForm,\n            onSubmit: this.onSubmitAppForm,\n            formInputFieldPropsList: [\n                new FormInputFieldProps(\n                    \"application__position_title\",\n                    \"Position Title*\"\n                ),\n                new FormInputFieldProps(\n                    \"application__job_description_page__url\",\n                    \"Job Description URL\"\n                ),\n                new FormInputFieldProps(\n                    \"application__job_source__url\",\n                    \"Job Source URL\"\n                )\n            ],\n            actionButtonPropsList: [\n                new FormActionButtonProps(\n                    application ? \"Update\" : \"Create\",\n                    undefined,\n                    ActionButtonType.SUBMIT\n                ),\n                new FormActionButtonProps(\"Cancel\", this.props.onCancel)\n            ]\n        };\n    }\n\n    validateAppForm = (values: FormikValues) => {\n        let errors: FormikErrors<any> = {};\n        if (!values.application__position_title) {\n            errors.application__position_title = \"Required\";\n        }\n\n        // if (\n        //     !/^https*\\:\\/\\/.+$/i.test(\n        //         values.application__job_description_page__url\n        //     )\n        // ) {\n        //     errors.application__job_description_page__url =\n        //         \"Please start by http:// or https://\";\n        // }\n        // if (!/^https*\\:\\/\\/.+$/i.test(values.application__job_source__url)) {\n        //     errors.application__job_source__url =\n        //         \"Please start by http:// or https://\";\n        // }\n        return errors;\n    };\n\n    onSubmitAppForm = (\n        values: FormikValues,\n        { setSubmitting }: { setSubmitting: Function }\n    ) => {\n        setSubmitting(true);\n\n        // prep relationship object by data model\n        const job_description_page = new Link({\n            url: values.application__job_description_page__url,\n            text: `Job description URL for application ${\n                values.application__position_title\n            } at company ${this.props.company.name}`\n        });\n        const job_source = new Link({\n            url: values.application__job_source__url,\n            text: `Job source URL for application ${\n                values.application__position_title\n            } at company ${this.props.company.name}`\n        });\n        const application__user_company__id = this.props.company.uuid;\n\n        // create main object\n        const application = new Application({\n            position_title: values.application__position_title,\n            job_description_page,\n            job_source,\n            user_company: application__user_company__id\n        });\n\n        // dispatch\n        if (!this.props.application) {\n            this.props.createApplication(application, () => {\n                // log print newly created application\n                if (this.props.applicationStore.lastChangedObjectID) {\n                    const newApplication = this.props.applicationStore\n                        .collection[\n                        this.props.applicationStore.lastChangedObjectID\n                    ];\n                    console.log(\"new application:\", newApplication);\n                    this.props.onSubmitSuccess && this.props.onSubmitSuccess();\n                } else {\n                    console.error(\n                        \"application store has no lastChangedObjectID\"\n                    );\n                }\n            }, () => setSubmitting(false));\n        } else {\n            console.log(\"Update application form: application=\", application);\n            application.uuid = this.props.application.uuid;\n            this.props.updateApplication(application, this.props.onSubmitSuccess, () => setSubmitting(false));\n        }\n    };\n\n    render() {\n        return (\n            <div className=\"ApplicationFormComponent\">\n                <FormFactory {...this.formFactoryProps} />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    applicationStore: store.application\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<Application>>) => {\n    return {\n        createApplication: (\n            applicationFormData: Application,\n            successCallback?: Function,\n            finalCallback?: Function,\n        ) =>\n            dispatch(\n                ApplicationActions[CrudType.CREATE][\n                    RequestStatus.TRIGGERED\n                ].action(applicationFormData, successCallback, undefined, finalCallback)\n            )\n        ,\n        updateApplication: (\n            applicationFormData: Application,\n            successCallback?: Function,\n            finalCallback?: Function,\n        ) =>\n            dispatch(\n                ApplicationActions[CrudType.UPDATE][\n                    RequestStatus.TRIGGERED\n                ].action(applicationFormData, successCallback, undefined, finalCallback)\n            )\n        ,\n    };\n};\n\nexport const ApplicationFormComponentContainer = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ApplicationFormComponent);\n","import React, { Component } from \"react\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport {\n    Application,\n    ApplicationActions\n} from \"../../store/data-model/application\";\nimport { IRootState } from \"../../store/types\";\nimport { IObjectAction } from \"../../store/rest-api-redux-factory\";\nimport { Dispatch } from \"redux\";\n\n/** data model */\nimport { ApplicationStatus } from \"../../store/data-model/application-status\";\nimport { Company } from \"../../store/data-model/company\";\n\n/** rest api */\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\n\n/** Components */\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\nimport IconButton from \"@material/react-icon-button\";\nimport { ApplicationStatusComponentContainer } from \"../application-status/application-status-component\";\nimport { ApplicationFormComponentContainer } from \"./application-form-component\";\n\n/** Types */\ninterface IApplicationComponentProps {\n    application?: Application;\n\n    /** application form */\n    company?: Company;\n\n    isOnlyForm?: boolean;\n\n    applicationStatusList?: Array<ApplicationStatus>;\n    isShowApplicationStatuses?: boolean;\n\n    /** redux */\n    deleteApplication: (\n        applicationToDelete: Application,\n        callback?: Function\n    ) => void;\n}\n\ninterface IApplicationComponentState {\n    isFormOpened: boolean;\n}\n\n/** Main Class */\nexport class ApplicationComponent extends Component<\n    IApplicationComponentProps,\n    IApplicationComponentState\n> {\n    state = {\n        isFormOpened: false\n    };\n\n    render() {\n        return (\n            <div className=\"application-component\">\n                {this.state.isFormOpened || this.props.isOnlyForm\n                    ? this.renderApplicationFormController()\n                    : this.props.application &&\n                      Array.isArray(this.props.applicationStatusList) &&\n                      this.renderApplicationDisplay(\n                          this.props.application,\n                          this.props.applicationStatusList\n                      )}\n            </div>\n        );\n    }\n\n    renderApplicationFormController = () => {\n        return (\n            this.props.company && ( // application create or udpate must have company associate with it.\n                <div className=\"application-form-controller\">\n                    {!this.state.isFormOpened ? (\n                        <Button\n                            onClick={clickEvent => {\n                                this.setState({\n                                    isFormOpened: true\n                                });\n                            }}\n                            unelevated\n                            icon={<MaterialIcon hasRipple icon=\"add\" />}\n                        >\n                            Add Application\n                        </Button>\n                    ) : (\n                        <ApplicationFormComponentContainer\n                            onCancel={event => {\n                                console.log(\"onCancel clicked\");\n                                this.setState({\n                                    isFormOpened: false\n                                });\n                            }}\n                            onSubmitSuccess={() =>\n                                this.setState({\n                                    isFormOpened: false\n                                })\n                            }\n                            company={this.props.company}\n                            application={this.props.application}\n                        />\n                    )}\n                </div>\n            )\n        );\n    };\n\n    renderApplicationDisplay = (\n        application: Application,\n        applicationStatusList: Array<ApplicationStatus>\n    ) => {\n        return (\n            <div className=\"application-component-display\">\n                {/* application display view */}\n                <h3>Application</h3>\n                <p>\n                    <span>\n                        <strong>Position:</strong> {application.position_title}\n                    </span>\n\n                    <IconButton\n                        onClick={() => {\n                            this.setState({\n                                isFormOpened: true // open form and close display\n                            });\n                        }}\n                    >\n                        <MaterialIcon hasRipple icon=\"edit\" />\n                    </IconButton>\n                    <IconButton\n                        onClick={() =>\n                            this.props.deleteApplication(application)\n                        }\n                    >\n                        <MaterialIcon hasRipple icon=\"delete\" />\n                    </IconButton>\n                    <br />\n                    <span>Application UUID: {application.uuid}</span>\n                    <br />\n                    {application.job_description_page.url ? (\n                        <a\n                            target=\"_blank\"\n                            href={\n                                application.job_description_page.url && application.job_description_page.url.includes(\"//\") ?\n                                application.job_description_page.url :\n                                `//${application.job_description_page.url}`\n                            }\n                        >\n                            <strong>JD Page</strong>\n                        </a>\n                    ) : (\n                        <span>JD Page</span>\n                    )}\n\n                    <br />\n                    {application.job_source.url ? (\n                        <a target=\"_blank\" href={\n                            (application.job_source.url && application.job_source.url.includes(\"//\")) ?\n                            application.job_source.url :\n                            `//${application.job_source.url}`\n                        }>\n                            <strong>Job Source</strong>\n                        </a>\n                    ) : (\n                        <span>Job Source</span>\n                    )}\n                </p>\n\n                {/* application statuses list */}\n                {this.props.isShowApplicationStatuses &&\n                    applicationStatusList.map(status => {\n                        return (\n                            <ApplicationStatusComponentContainer\n                                key={status.uuid}\n                                applicationStatus={status}\n                                application={application}\n                            />\n                        );\n                    })}\n\n                {/* application status form controller */}\n                <ApplicationStatusComponentContainer\n                    application={application}\n                    isOnlyForm\n                />\n            </div>\n        );\n    };\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<Application>>) => {\n    // actionName: (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {\n        deleteApplication: (\n            applicationToDelete: Application,\n            callback?: Function\n        ) =>\n            dispatch(\n                ApplicationActions[CrudType.DELETE][\n                    RequestStatus.TRIGGERED\n                ].action(applicationToDelete, callback)\n            )\n    };\n};\n\nexport const ApplicationComponentController = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ApplicationComponent);\n","import React, { Component } from \"react\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\nimport {\n    IObjectAction,\n    IObjectStore\n} from \"../../store/rest-api-redux-factory\";\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\n// data models\nimport { CompanyActions, Company } from \"../../store/data-model/company\";\nimport {\n    ApplicationActions,\n    Application\n} from \"../../store/data-model/application\";\nimport { ApplicationStatus } from \"../../store/data-model/application-status\";\n\n/** Components */\n// objects\nimport { CompanyComponent } from \"../company/company-component\";\nimport { ApplicationComponentController } from \"../application/application-component\";\n\ninterface ICompanyApplicationComponentProps extends RouteComponentProps {\n    company: Company;\n    applicationStore: IObjectStore<Application>;\n    applicationStatusStore: IObjectStore<ApplicationStatus>;\n    isShowApplicationStatuses?: boolean;\n    deleteCompany: (companyToDelete: Company, callback?: Function) => void;\n    updateCompany: (companyToUpdate: Company, callback?: Function) => void;\n}\n\nclass CompanyApplicationComponent extends Component<\n    ICompanyApplicationComponentProps\n> {\n    onDeleteClick = (event: any) => {\n        if (this.props.company.uuid) {\n            this.props.deleteCompany(this.props.company);\n        } else {\n            console.error(\"Attempted to delete but company obj has no uuid\");\n        }\n    };\n\n    render() {\n        return (\n            <div className=\"CompanyApplicationContainer\">\n                <CompanyComponent\n                    company={this.props.company}\n                    onDeleteIconClicked={this.onDeleteClick}\n                    onEditIconClicked={() => {\n                        this.props.history.push(`/com-form/${this.props.company.uuid}/`);\n                    }}\n                />\n                {Object.values(this.props.applicationStore.collection)\n                    .filter(\n                        application =>\n                            application.user_company === this.props.company.uuid\n                    )\n                    .map(application => {\n                        const applicationStatusList =\n                            this.props.isShowApplicationStatuses || false\n                                ? Object.values(\n                                      this.props.applicationStatusStore\n                                          .collection\n                                  ).filter(\n                                      applicationStatus =>\n                                          applicationStatus.application ===\n                                          application.uuid\n                                  )\n                                : [];\n                        return (\n                            <ApplicationComponentController\n                                key={application.uuid}\n                                application={application}\n                                company={this.props.company}\n                                applicationStatusList={applicationStatusList}\n                                isShowApplicationStatuses={\n                                    this.props.isShowApplicationStatuses\n                                }\n                            />\n                        );\n                    })}\n                {!this.props.isShowApplicationStatuses && <hr />}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    // prop: store.prop\n    applicationStore: store.application,\n    applicationStatusStore: store.applicationStatus\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<Application>>) => {\n    // actionName: (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {\n        deleteCompany: (companyToDelete: Company, callback?: Function) =>\n            dispatch(\n                CompanyActions[CrudType.DELETE][RequestStatus.TRIGGERED].action(\n                    companyToDelete,\n                    callback\n                )\n            ),\n        updateCompany: (companyToUpdate: Company, callback?: Function) =>\n            dispatch(\n                CompanyActions[CrudType.UPDATE][RequestStatus.TRIGGERED].action(\n                    companyToUpdate,\n                    callback\n                )\n            )\n    };\n};\n\nexport const CompanyApplicationComponentContainer = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(CompanyApplicationComponent)\n);\n","import React, { Component } from \"react\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\nimport { IObjectAction, IObjectStore } from \"../../store/rest-api-redux-factory\";\n// data models\nimport { Company } from \"../../store/data-model/company\";\nimport { Application } from \"../../store/data-model/application\";\n\n/** Components */\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n// objects\nimport { CompanyApplicationComponentContainer } from \"../../components/company-application/company-application-component\";\n\ninterface IUserAppPageProps extends RouteComponentProps {\n    company: IObjectStore<Company>\n    application: IObjectStore<Application>\n}\n\nclass UserAppPage extends Component<IUserAppPageProps> {\n\n    componentDidMount() {\n    }\n\n    render() {\n        return (\n            <div className=\"UserAppPage\">\n                <h1>Your Applications</h1>\n                <Button\n                    onClick={()=>{ this.props.history.push(\"/com-form/\") }}\n                    unelevated\n                    icon={<MaterialIcon hasRipple icon=\"add\" />}\n                    children=\"Add Company\"\n                />\n                <br></br>\n                {\n                    (this.props.company.collection !== {}) && Object.values(this.props.company.collection).map((company) => {\n                        return (\n                            <CompanyApplicationComponentContainer key={company.uuid} company={company} />\n                        )\n                    })\n                }\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    // prop: store.prop\n    company: store.company,\n    application: store.application,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<{}>>) => {\n    // actionName = (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n\n    return {\n        // listObject: (callback?: Function) =>\n        //     dispatch(\n        //         ObjectActions[CrudType.LIST][RequestStatus.TRIGGERED].action(\n        //             new Object({}),\n        //             callback\n        //         )\n        //     ),\n    }\n};\n\nexport const UserAppPageContainer = withRouter(connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(UserAppPage));\n","import React, { Component } from \"react\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\nimport {\n    IObjectStore,\n    IObjectAction\n} from \"../../store/rest-api-redux-factory\";\n// data models\nimport { Company, CompanyActions } from \"../../store/data-model/company\";\nimport { Link } from \"../../store/data-model/link\";\nimport { Address } from \"../../store/data-model/address\";\n\n/** Components */\nimport {\n    FormFactory,\n    FormActionButtonProps,\n    IFormFactoryProps,\n    ActionButtonType\n} from \"../form-factory/form-factory\";\nimport {\n    FormInputField,\n    FormInputFieldProps,\n    InputFieldType\n} from \"../form-factory/form-input-field\";\nimport { ErrorMessage, FormikValues, FormikErrors } from \"formik\";\n\ninterface ICompanyFormComponentProps {\n    company?: Company;\n    onCancel: (event: any) => void;\n    onSubmitSuccess?: () => void;\n\n    /** redux */\n    createCompany: (companyFormData: Company, successCallback?: Function, finalCallback?: Function) => void;\n    updateCompany: (companyFormData: Company, successCallback?: Function, finalCallback?: Function) => void;\n}\n\nclass CompanyFormComponent extends Component<ICompanyFormComponentProps> {\n    formFactoryProps: IFormFactoryProps<any>;\n\n    constructor(props: ICompanyFormComponentProps) {\n        super(props);\n\n        // prepare for new company form\n        const initialValues = {\n            company__name: this.props.company && this.props.company.name ||  \"\",\n            company__hq_location__full_address: this.props.company && this.props.company.hq_location.full_address ||  \"\",\n            company__home_page__url: this.props.company && this.props.company.home_page.url || \"\",\n        };\n\n        this.formFactoryProps = {\n            initialValues: initialValues,\n            validate: this.validateAppForm,\n            onSubmit: this.onSubmitAppForm,\n            formInputFieldPropsList: [\n                new FormInputFieldProps(\"company__name\", \"Company Name*\"),\n                new FormInputFieldProps(\n                    \"company__hq_location__full_address\",\n                    \"HQ Address or Location\"\n                ),\n                new FormInputFieldProps(\n                    \"company__home_page__url\",\n                    \"Company Home Page URL\"\n                )\n            ],\n            actionButtonPropsList: [\n                new FormActionButtonProps(\n                    !this.props.company ? \"Create\" : \"Update\",\n                    undefined,\n                    ActionButtonType.SUBMIT\n                ),\n                new FormActionButtonProps(\"Cancel\", this.props.onCancel)\n            ]\n        };\n    }\n\n    validateAppForm = (values: FormikValues) => {\n        let errors: FormikErrors<any> = {};\n        if (!values.company__name) {\n            errors.company__name = \"Required\";\n        }\n        // if (!/^https*\\:\\/\\/.+$/i.test(values.company__home_page__url)) {\n        //     errors.company__home_page__url =\n        //         \"Please start by http:// or https://\";\n        // }\n        return errors;\n    };\n\n    onSubmitAppForm = (\n        values: FormikValues,\n        { setSubmitting }: { setSubmitting: Function }\n    ) => {\n        setSubmitting(true);\n        console.log(\"values=\", values);\n\n        // prep relationship object by data model\n        const hq_location = new Address({\n            full_address: values.company__hq_location__full_address,\n            place_name: `HQ of ${values.company__name}`\n        });\n        const home_page = new Link({\n            url: values.company__home_page__url,\n            text: `Home page of ${values.company__name}`\n        });\n        // create main object\n        const company = new Company({\n            name: values.company__name,\n            hq_location,\n            home_page\n        });\n\n        // dispatch\n        if (!this.props.company) {\n            console.log(\"company form: dispatching createCompany action\");\n            this.props.createCompany(company, this.props.onSubmitSuccess, () => setSubmitting(false));\n        }\n        else  {\n            console.log(\"company form: dispatching updateCompany action\");\n            company.uuid = this.props.company.uuid;\n            this.props.updateCompany(company, this.props.onSubmitSuccess, () => setSubmitting(false));\n        }\n    };\n\n    render() {\n        return (\n            <div className=\"CompanyFormComponent\">\n                <FormFactory {...this.formFactoryProps} />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => ({});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<Company>>) => {\n    return {\n        createCompany: (companyFormData: Company, successCallback?: Function, finalCallback?: Function) =>\n            dispatch(\n                CompanyActions[CrudType.CREATE][RequestStatus.TRIGGERED].action(\n                    companyFormData,\n                    successCallback,\n                    undefined,\n                    finalCallback,\n                )\n            ),\n        updateCompany: (companyFormData: Company, successCallback?: Function, finalCallback?: Function) =>\n            dispatch(\n                CompanyActions[CrudType.UPDATE][RequestStatus.TRIGGERED].action(\n                    companyFormData,\n                    successCallback,\n                    undefined,\n                    finalCallback,\n                )\n            )\n    };\n};\n\nexport const CompanyFormComponentContainer = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(CompanyFormComponent);\n","import React, { Component } from \"react\";\n\n/** route */\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\n// REST API\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\nimport {\n    IObjectAction,\n    IObjectStore\n} from \"../../store/rest-api-redux-factory\";\nimport { CompanyActions, Company } from \"../../store/data-model/company\";\nimport { Address } from \"../../store/data-model/address\";\nimport { Link } from \"../../store/data-model/link\";\n\n/** Components */\n//mdc-react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc-react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n// mdc-react input\nimport \"@material/react-text-field/dist/text-field.css\";\nimport TextField, { HelperText, Input } from \"@material/react-text-field\";\n// formik\nimport { Formik, Form, Field } from \"formik\";\n// form factory\nimport {\n    FormFactory,\n    FormActionButtonProps,\n    IFormFactoryProps\n} from \"../../components/form-factory/form-factory\";\nimport {\n    FormInputField,\n    FormInputFieldProps,\n    InputFieldType\n} from \"../../components/form-factory/form-input-field\";\nimport { ErrorMessage, FormikValues, FormikErrors } from \"formik\";\nimport { CompanyFormComponentContainer } from \"../../components/company/company-form-component\";\n\ninterface IAddComPageParams {\n    uuid?: string;\n}\n\ninterface IAddComPageProps extends RouteComponentProps<IAddComPageParams> {\n    company: IObjectStore<Company>;\n}\n\nclass AddComPage extends Component<IAddComPageProps> {\n    render() {\n        const company: Company | undefined = (this.props.match.params.uuid && this.props.company.collection[this.props.match.params.uuid])\n            ? this.props.company.collection[this.props.match.params.uuid]\n            : undefined;\n        console.log(\n            \"com form page: params is\",\n            this.props.match.params.uuid,\n            \"company is\",\n            company\n        );\n        return (\n            <div className=\"AddComPage\">\n                <h1>{!company ? \"Add a Company\" : `Update Company`}</h1>\n                <CompanyFormComponentContainer\n                    company={company}\n                    onSubmitSuccess={() => {\n                        console.log(\"com form page: onSubmitSuccess\");\n                        if (this.props.company.lastChangedObjectID) {\n                            let newCompany = this.props.company.collection[\n                                this.props.company.lastChangedObjectID\n                            ];\n                            console.log(\"new company:\", newCompany);\n                            this.props.history.push(\n                                `/com-app/${newCompany.uuid}/`\n                            );\n                        } else {\n                            console.error(\"store has no lastChangedObjectID\");\n                        }\n                    }}\n                    onCancel={event => {\n                        this.props.history.goBack()\n                    }}\n                />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: IRootState) => ({\n    // prop: state.prop\n    company: state.company\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<Company>>) => {\n    // actionName = (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {};\n};\n\nexport const AddComPageContainer = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(AddComPage)\n);\n","import React, { Component } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { RouteComponentProps } from \"react-router\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\n// rest api\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\nimport {\n    IObjectStore,\n    IObjectAction\n} from \"../../store/rest-api-redux-factory\";\nimport { Company } from \"../../store/data-model/company\";\nimport { Link } from \"../../store/data-model/link\";\nimport {\n    Application,\n    ApplicationActions\n} from \"../../store/data-model/application\";\n\n/** Components */\nimport { CompanyApplicationComponentContainer } from \"../../components/company-application/company-application-component\";\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n// mdc-react input\nimport \"@material/react-text-field/dist/text-field.css\";\nimport TextField, { HelperText, Input } from \"@material/react-text-field\";\n// form factory\nimport {\n    FormFactory,\n    FormActionButtonProps,\n    IFormFactoryProps\n} from \"../../components/form-factory/form-factory\";\n// formik\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\nimport {\n    FormInputField,\n    FormInputFieldProps,\n    InputFieldType\n} from \"../../components/form-factory/form-input-field\";\nimport { FormikValues, FormikErrors } from \"formik\";\nimport { ApplicationFormComponentContainer } from \"../../components/application/application-form-component\";\nimport { ApplicationComponentController } from \"../../components/application/application-component\";\n\ninterface IUserComAppPageParams {\n    uuid: string;\n}\n\ninterface IUserComAppPageProps\n    extends RouteComponentProps<IUserComAppPageParams> {\n    company: IObjectStore<Company>;\n    createApplication: (\n        applicationFormData: Application,\n        callback?: Function\n    ) => void;\n}\n\ninterface IUserComAppPageState {\n    companyUuid: string;\n    company: Company;\n}\n\nclass UserComAppPage extends Component<\n    IUserComAppPageProps,\n    IUserComAppPageState\n> {\n    readonly state: IUserComAppPageState = {\n        companyUuid: \"\",\n        company: new Company({})\n    };\n\n    componentDidMount() {\n        let companyUuid = this.props.match.params.uuid;\n        console.log(\"mount, got uuid from route?\", companyUuid);\n        if (\n            this.props.company.collection &&\n            companyUuid in this.props.company.collection\n        ) {\n            this.setState({\n                companyUuid,\n                company: new Company(this.props.company.collection[companyUuid])\n            });\n        }\n    }\n\n    renderAll() {\n        if (!this.state.company.uuid) {\n            return;\n        }\n\n        return (\n            <div className=\"user-com-app-page-content\">\n                <Button\n                    onClick={clickEvent => {\n                        this.props.history.push(\"/\");\n                    }}\n                >\n                    Back\n                </Button>\n                <h1>{this.state.company.name}</h1>\n                \n                {/* application form controller - always create form */}\n                <ApplicationComponentController \n                    company={this.state.company}\n                    isOnlyForm\n                />\n\n                <br />\n\n                {/* application list */}\n                {this.state.company.uuid && (\n                    <CompanyApplicationComponentContainer\n                        company={this.state.company}\n                        isShowApplicationStatuses\n                    />\n                )}\n            </div>\n        );\n    }\n\n    render() {\n        return (\n            <div className=\"UserComAppPage\">\n                {this.state.companyUuid &&\n                this.props.company.collection &&\n                this.state.companyUuid in this.props.company.collection ? (\n                    this.renderAll()\n                ) : this.state.companyUuid ? (\n                    <h1>No company found. Uuid={this.state.companyUuid}</h1>\n                ) : (\n                    <h1>Company uuid not specified</h1>\n                )}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => {\n    return {\n        // prop: store.prop\n        company: store.company,\n    };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<Application>>) => {\n    // actionName = (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {\n        createApplication: (\n            applicationFormData: Application,\n            callback?: Function\n        ) =>\n            dispatch(\n                ApplicationActions[CrudType.CREATE][\n                    RequestStatus.TRIGGERED\n                ].action(applicationFormData, callback)\n            )\n    };\n};\n\nexport const UserComAppPageContainer = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(UserComAppPage)\n);\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { IUpdateAuthState } from \"../../store/auth/types\";\n\ninterface UserInfoProps {\n    auth: IUpdateAuthState;\n}\n\nexport class UserInfo extends Component<UserInfoProps, any> {\n    render() {\n        return (\n            <div>\n                <div>\n                    Logged in:{\" \"}\n                    {(this.props.auth.isLogin &&\n                        this.props.auth.isLogin.toString()) ||\n                        \"undefine\"}\n                </div>\n                <div>User Name: {this.props.auth.userName || \"(empty)\"}</div>\n                <div>\n                    Token (for API): {this.props.auth.apiToken || \"(empty)\"}\n                </div>\n            </div>\n        );\n    }\n}\n","import React, { Component } from \"react\";\n\n/** redux */\nimport { connect } from \"react-redux\";\nimport { IRootState } from \"../../store/types\";\nimport { IUpdateAuthState } from \"../../store/auth/types\";\n\n/** Routes & pages */\nimport { UserInfo } from \"../../components/user-info/user-info\";\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\n\n/** Components */\nimport { SocialAuthButtonContainer } from \"../../components/social-auth/social-auth-button\";\n\ninterface IUserProfilePageProps extends RouteComponentProps {\n    auth: IUpdateAuthState;\n}\n\nclass UserProfilePage extends Component<IUserProfilePageProps, any> {\n    render() {\n        return (\n            <div>\n                <h1>My Profile</h1>\n                <UserInfo auth={this.props.auth} />\n                <SocialAuthButtonContainer />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => {\n    return {\n        auth: store.auth\n    };\n};\n\nexport const UserProfilePageContainer = withRouter(connect(mapStateToProps)(UserProfilePage));\n","import React, { Component } from \"react\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { IRootState } from \"../../store/types\";\nimport { IUpdateAuthState } from \"../../store/auth/types\";\n\n/** Routing & Pages */\nimport {\n    Route,\n    Redirect,\n    Switch,\n    Link,\n    withRouter,\n    RouteComponentProps\n} from \"react-router-dom\";\n// pages\nimport { LandingPageContainer } from \"../landing-page/landing-page\";\nimport { UserAppPageContainer } from \"../user-app-page/user-app-page\";\nimport { AddComPageContainer } from \"../add-com-page/add-com-page\";\nimport { UserComAppPageContainer } from \"../user-com-app-page/user-com-app-page\";\nimport { UserProfilePageContainer } from \"../user-profile-page/user-profile-page\";\n\n/** MDC React */\nimport TopAppBar, { TopAppBarFixedAdjust } from \"@material/react-top-app-bar\";\nimport \"@material/react-top-app-bar/dist/top-app-bar.css\";\n// import '@material/react-material-icon/dist/material-icon.css';\nimport MaterialIcon from \"@material/react-material-icon\";\n// style\nimport \"@material/react-ripple/dist/ripple.css\";\n\n// import {withRipple} from '@material/react-ripple';\n\ninterface IPageRoutesProps extends RouteComponentProps {\n    auth: IUpdateAuthState;\n}\n\nclass PageRoutes extends Component<IPageRoutesProps> {\n    render() {\n        return (\n            <div className=\"PageRoutesContainer\">\n                {this.props.location.pathname === \"/\" ? (\n                    <Route path=\"/\" exact component={LandingPageContainer} />\n                ) : (\n                    <div className=\"PrivateRoutesContainer\">\n                        {/** protect private routes */\n                        !this.props.auth.isLogin && <Redirect to=\"/\" />}\n\n                        <TopAppBar\n                            title=\"Appl Tracky\"\n                            actionItems={[\n                                <Link to=\"/home/\">\n                                    <MaterialIcon\n                                        hasRipple\n                                        key=\"itemHome\"\n                                        icon=\"home\"\n                                    />\n                                </Link>,\n\n                                <Link to=\"/profile/\">\n                                    {this.props.auth.avatarUrl === \"\" ? (\n                                        <MaterialIcon\n                                            hasRipple\n                                            key=\"itemProfile\"\n                                            icon=\"account_circle\"\n                                        />\n                                    ) : (\n                                        <img style={{\n                                            \"height\": \"100%\",\n                                            \"borderRadius\": \"50%\",\n                                        }} src={this.props.auth.avatarUrl} />\n                                    )}\n                                </Link>\n                            ]}\n                        />\n                        <TopAppBarFixedAdjust>\n                            <Switch>\n                                <Route\n                                    path=\"/home/\"\n                                    component={UserAppPageContainer}\n                                />\n                                <Route\n                                    path=\"/com-form/:uuid?/\"\n                                    component={AddComPageContainer}\n                                />\n                                <Route\n                                    path=\"/com-app/:uuid/\"\n                                    component={UserComAppPageContainer}\n                                />\n                                <Route\n                                    path=\"/com-app/\"\n                                    component={UserComAppPageContainer}\n                                />\n                                <Route\n                                    path=\"/profile/\"\n                                    component={UserProfilePageContainer}\n                                />\n                                {/** add more page routes here */}\n                            </Switch>\n                        </TopAppBarFixedAdjust>\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    auth: store.auth\n});\n\nconst mapDispatchToProps = {};\n\nexport const PageRoutesContainer = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(PageRoutes)\n);\n","/** React core */\nimport React, { Component } from \"react\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { IRootState } from \"./store/types\";\n\n/** Routes & pages */\nimport { PageRoutesContainer } from \"./pages/page-routes/page-routes\";\n\n/** Locals */\nimport \"./App.css\";\n\ninterface IAppProps {}\n\nclass App extends Component<IAppProps> {\n    componentDidMount() {}\n\n    render() {\n        return (\n            <div className=\"App\">\n                <PageRoutesContainer />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => {\n    return {};\n};\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { Action } from \"redux\";\nimport { IRootState } from \"./types\";\n\nexport enum RootActionNames {\n    ResetAllStore = \"RESET_ALL_STORE\"\n}\n\nexport const resetAllStoreAction = () => {\n    return {\n        type: RootActionNames.ResetAllStore,\n    }\n}","import { Reducer, Action } from 'redux';\n\nimport { \n    /** store */\n    IUpdateAuthState, \n    /** action */\n    AuthActionNames, TAuthActions \n} from \"./types\";\n\nimport { RequestStatus } from \"../../utils/rest-api\";\n\nconst initialAuthState: IUpdateAuthState = {\n    requestStatus: RequestStatus.SUCCESS,\n    isLogin: false,\n    socialAuthToken: \"\",\n    apiToken: \"\",\n    userName: \"\",\n    expireDateTime: \"\",\n    avatarUrl: \"\",\n}\n\n// authStore will be stored as a sub-entry in global store; this is defined in ./store/types.ts\nexport const authReducer: Reducer<IUpdateAuthState> = (authStore = initialAuthState, action: Action)  => {\n    // add reducer for new actions here\n    // ...\n\n    const authAction = action as TAuthActions;\n\n    return {\n        ...authStore,\n        ...authAction.payload\n    }\n}","/** redux */\nimport {\n    AuthActionNames,\n    IRequestedLoginAuthAction,\n    IRequestedLogoutAuthAction\n} from \"../../store/auth/types\";\nimport {\n    SuccessLoginAuth,\n    SuccessLogoutAuth,\n    FailureAuth\n} from \"../../store/auth/actions\";\nimport { resetAllStoreAction } from \"../../store/actions\";\nimport { CompanyActions, Company } from \"../../store/data-model/company\";\nimport { ApplicationActions, Application } from \"../../store/data-model/application\";\nimport { ApplicationStatusActions, ApplicationStatus } from \"../../store/data-model/application-status\";\n// redux-saga\nimport { takeEvery, call, put } from \"redux-saga/effects\";\n\n/** router */\nimport { push } from \"connected-react-router\";\n\n/** api */\nimport { AuthenticationService } from \"../../utils/auth\";\nimport { RestApiService, CrudType, RequestStatus } from \"../../utils/rest-api\";\n\nfunction* authLoginSagaHandler(\n    requestedLoginAuthAction: IRequestedLoginAuthAction\n) {\n    // RequestAuth action triggered & injecting side effects here...\n    console.log(\"auth saga: initialize\");\n    const { socialAuthToken } = requestedLoginAuthAction.payload;\n    console.log(\"auth saga: request fired\");\n    try {\n        // TODO: define interface typing for api response\n        const jsonResponse = yield call(AuthenticationService.serverLogin, socialAuthToken);\n        console.log(\"auth saga: server login using code from social button. server jsonRes=\", jsonResponse);\n        AuthenticationService.state.apiLoginToken = jsonResponse.token;\n        yield put(SuccessLoginAuth(\n            jsonResponse.email, \"\", \n            jsonResponse.token, \n            jsonResponse.avatar_url\n        ));\n        // yield put(push(\"/home/\"));\n\n        // initial fetch user data\n        yield put(ApplicationActions[CrudType.LIST][RequestStatus.TRIGGERED].action(new Application({})))\n        yield put(CompanyActions[CrudType.LIST][RequestStatus.TRIGGERED].action(new Company({})))\n        yield put(ApplicationStatusActions[CrudType.LIST][RequestStatus.TRIGGERED].action(new ApplicationStatus({})))\n    } catch (error) {\n        console.warn(\"auth saga: error\")\n        yield put(FailureAuth(error));\n        return;\n    }\n}\n\nexport function* authLoginSaga() {\n    yield takeEvery(AuthActionNames.REQUESTED_LOGIN_AUTH, authLoginSagaHandler);\n}\n\nfunction* authLogoutSagaHandler(\n    requestedLogoutAuthAction: IRequestedLogoutAuthAction\n) {\n    // RequestAuth action triggered & injecting side effects here...\n    console.log(\"auth logout saga: fired\");\n    try {\n        yield call(AuthenticationService.serverLogout);\n\n        // clear all store\n    } catch (error) {\n        yield put(FailureAuth(error));\n        return;\n    }\n\n    console.log(\"auth logout saga: navigating\");\n    yield put(SuccessLogoutAuth());\n    // yield put(push(\"/\"));\n\n    // clear all redux store\n    yield put(resetAllStoreAction());\n}\n\nexport function* authLogoutSaga() {\n    yield takeEvery(\n        AuthActionNames.REQUESTED_LOGOUT_AUTH,\n        authLogoutSagaHandler\n    );\n}\n\n// add new saga handler here && a `takeEvery` saga.\n// ...","import createSagaMiddleware from 'redux-saga';\nimport { all } from \"redux-saga/effects\";\nimport { authLoginSaga, authLogoutSaga } from \"./auth/sagas\";\n// rest api\nimport { CompanySagas } from \"../store/data-model/company\";\nimport { ApplicationSagas } from \"../store/data-model/application\";\nimport { ApplicationStatusSagas } from \"../store/data-model/application-status\";\n\n/** setup saga */\nconst sagaMiddleware = createSagaMiddleware();\n\nexport {\n    sagaMiddleware\n};\n\nconst rootSaga = function*() {\n    yield all([\n        authLoginSaga(),\n        authLogoutSaga(),\n        ...CompanySagas.map((saga) => saga()),\n        ...ApplicationSagas.map((saga) => saga()),\n        ...ApplicationStatusSagas.map((saga) => saga()),\n        // add new saga here\n        // ...\n    ]);\n};\n\nexport const runSagaMiddleaware = () => {\n    sagaMiddleware.run(rootSaga)\n}\n\n","/** redux */\nimport { combineReducers, Reducer, AnyAction, Action } from \"redux\";\nimport { connectRouter, LocationChangeAction } from 'connected-react-router';\nimport { authReducer } from \"./auth/reducers\";\nimport { TAuthActions } from \"./auth/types\";\nimport { IRootState } from \"./types\";\nimport { RootActionNames } from \"./actions\";\n// rest api\nimport { CompanyReducer } from \"./data-model/company\";\nimport { ApplicationReducer } from \"./data-model/application\";\nimport { ApplicationStatusReducer } from \"./data-model/application-status\";\n\n/** router */\nimport { History } from \"history\";\n\n// root reducer with router state\nexport const createRootReducer = (history: History<any>): Reducer<IRootState> => {\n    // return combineReducers<IRootState>({\n    //     router: connectRouter(history),\n    \n    //     // add more reducers here\n    //     auth: authReducer,\n    //     company: CompanyReducer,\n    //     address: AddressReducer,\n    //     application: ApplicationReducer,\n    //     // ...\n    // })\n\n    const rootReducer: Reducer<IRootState> = (rootState: IRootState | undefined, action: Action): IRootState  => {\n\n        let rootStateChecked: any = {}\n        if (!rootState) {\n            rootStateChecked.router = undefined;\n            rootStateChecked.auth = undefined;\n            rootStateChecked.company = undefined;\n            rootStateChecked.application = undefined;\n            rootStateChecked.applicationStatus = undefined;\n            // add initial state for new sub-store here\n            // ...\n        } else if (action.type === RootActionNames.ResetAllStore) {\n            rootStateChecked = {\n                router: rootState.router\n            }\n        } else {\n            rootStateChecked = rootState;\n        }\n\n        console.log(\"beforeRootStore\", rootState);\n\n        const afterStore  = { \n            ...rootState,\n            router: connectRouter(history)(rootStateChecked.router, action as LocationChangeAction),\n            auth: authReducer(rootStateChecked.auth, action),\n            company: CompanyReducer(rootStateChecked.company, action),\n            application: ApplicationReducer(rootStateChecked.application, action),\n            applicationStatus: ApplicationStatusReducer(rootStateChecked.applicationStatus, action),\n            // add new reducer here\n            // ...\n        }\n        console.log(\"afterRootStore\", afterStore);\n\n        return afterStore;\n    }\n\n    return rootReducer;\n}","/** redux */\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport { IRootState } from \"../store/types\";\nimport { createRootReducer } from \"../store/reducers\";\n\n/** router */\nimport { createBrowserHistory } from 'history';\nimport { routerMiddleware } from 'connected-react-router';\n\n/** middleware */\n// saga\nimport { sagaMiddleware, runSagaMiddleaware } from \"../sagas/saga-config\";\n\n\n\nconst history = createBrowserHistory({\n    basename: (process.env.NODE_ENV === 'development') ?  \n    ``\n    :\n    `/appl-tracky-spa`\n});\n\nconst preloadedState = {\n\n};\n\n// generate the singleton store from redux\nexport const store = createStore<IRootState, any, any, any>(\n    createRootReducer(history),\n    preloadedState,\n    compose(\n        applyMiddleware(\n            routerMiddleware(history),\n            sagaMiddleware,\n            // ... add other middlewares ...\n        )\n    )\n);\n\n/** after mount saga middlewares to store, run them */\nrunSagaMiddleaware();\n\nexport {\n    history\n};","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n/** redux */\nimport { Provider } from \"react-redux\";\nimport { Store } from \"redux\";\n/** root store */\nimport { IRootState } from \"./store/types\";\nimport { store } from \"./store/store-config\";\n\n/** router */\nimport { ConnectedRouter } from \"connected-react-router\";\nimport { history } from \"./store/store-config\";\n\n/** types */\ninterface IRootProps {\n    store: Store<IRootState>;\n}\n\n/** root component - just to wrap the App into redux store */\nconst Root: React.SFC<IRootProps> = props => {\n    return (\n        <Provider store={props.store}>\n            <ConnectedRouter history={history} >\n                <App />\n            </ConnectedRouter>\n        </Provider>\n    );\n};\n\nReactDOM.render(<Root store={store} />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}