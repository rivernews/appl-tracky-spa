{"version":3,"sources":["store/auth/types.ts","utils/rest-api.ts","store/data-model/base-model.ts","utils/auth.ts","store/auth/actions.ts","store/rest-api-redux-factory.ts","store/data-model/address.ts","store/data-model/link.ts","store/data-model/company.ts","store/data-model/application.ts","components/social-auth/social-auth-login-button.tsx","components/social-auth/social-auth-logout-button.tsx","components/social-auth/social-auth-button.tsx","components/form-factory/form-base-field/form-base-field-meta.tsx","components/form-factory/form-input-field/form-input-field.tsx","components/form-factory/form-factory.tsx","components/form-factory/form-input-field/form-input-field-meta.tsx","components/social-auth/login-form.tsx","pages/landing-page/landing-page.tsx","components/company/company-component.tsx","store/data-model/application-status.ts","store/data-model/application-status-link.ts","components/form-factory/form-base-field/form-base-field.tsx","components/form-factory/form-link-field/form-link-field.tsx","components/form-factory/form-link-field/form-link-field-component.tsx","components/form-factory/form-link-field/form-link-field-meta.tsx","components/form-factory/form-application-status-link-field/form-application-status-link-field.tsx","components/form-factory/form-application-status-link-field/form-application-status-link-field-component.tsx","components/form-factory/form-application-status-link-field/form-application-status-link-field-meta.tsx","components/application-status/application-status-form-component.tsx","components/application-status/application-status-component.tsx","components/application/application-form-component.tsx","components/application/application-component.tsx","components/company-application/company-application-component.tsx","pages/user-app-page/user-app-page.tsx","components/form-factory/form-address-field/form-address-field.tsx","components/form-factory/form-address-field/form-address-field-component.tsx","components/form-factory/form-address-field/form-address-field-meta.tsx","components/company/company-form-component.tsx","pages/add-com-page/add-com-page.tsx","pages/user-com-app-page/user-com-app-page.tsx","components/user-info/user-info.tsx","pages/user-profile-page/user-profile-page.tsx","pages/page-routes/page-routes.tsx","App.tsx","serviceWorker.ts","store/actions.ts","store/auth/reducers.ts","sagas/auth/sagas.ts","sagas/saga-config.ts","store/reducers.ts","store/store-config.ts","index.tsx"],"names":["AuthActionNames","RequestStatus","CrudType","RestMethod","BaseModel","_ref","_ref$uuid","uuid","_ref$created_at","created_at","_ref$modified_at","modified_at","Object","classCallCheck","this","AuthObject","_BaseModel","_this","_ref$code","code","_ref$provider","provider","_ref$redirect_uri","redirect_uri","args","objectWithoutProperties","possibleConstructorReturn","getPrototypeOf","call","inherits","AuthenticationService","state","clientID","redirectUri","apiLoginUrl","socialAuthProvider","userEmail","apiLoginToken","userFirstName","userLastName","objectID","serverLogin","socialLoginCode","authFormData","_this2","RestApiService","post","data","endpointUrl","serverLogout","_callee","regenerator_default","a","wrap","_context","prev","next","console","log","abrupt","stop","CrudMapToRest","crudType","CREATE","POST","READ","LIST","GET","UPDATE","PATCH","DELETE","RestApi","apiBaseUrl","get","absoluteUrl","objectName","fetch","getRelativeUrl","objectSpread","method","setApiAuthHeaders","then","res","json","_ref2","body","JSON","stringify","patch","_ref3","delete","_ref4","_ref5","url","concat","undefined","mode","credentials","headers","Authorization","Content-Type","RequestedLoginAuth","socialAuthToken","type","REQUESTED_LOGIN_AUTH","payload","requestStatus","REQUESTING","RequestedLogoutAuth","REQUESTED_LOGOUT_AUTH","SuccessLoginAuth","userName","expireDateTime","apiToken","avatarUrl","isLocal","SUCCESS_AUTH","SUCCESS","isLogin","SuccessLogoutAuth","FailureAuth","error","FAILURE_AUTH","FAILURE","RestApiReduxFactory","initialObjectInstance","crudKeywords","values","ObjectRestApiRedux","_loop","crudKeyword","_i","_arr","_i2","length","actionTypeName","action","toUpperCase","TRIGGERED","objectClassInstance","successCallback","failureCallback","finalCallback","formData","jsonResponse","triggerFormData","newState","lastChangedObjectID","results","sagaHandler","mark","triggerAction","put","sent","status","Error","t0","saga","objectTriggerActionChannel","objectTriggerAction","_context2","actionChannel","take","initialState","collection","sagas","map","actions","storeReducer","objectStore","arguments","objectAction","split","newObject","defineProperty","resObjectList","newObjects","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","done","object","value","err","return","afterStore","targetDeleteObject","omit","Address","_ref$place_name","place_name","_ref$country","country","_ref$state","_ref$city","city","_ref$street","street","_ref$full_address","full_address","_ref$zipcode","zipcode","Link","_ref$text","text","_ref$user","user","_ref$url","_ref$order","order","Company","_ref$labels","labels","_ref$name","name","_ref$hq_location","hq_location","_ref$home_page","home_page","_ref$ratings","ratings","_ref$applications","applications","CompanyRestApiRedux","CompanyActions","CompanyReducer","CompanySagas","Application","_ref$user_company","user_company","_ref$position_title","position_title","_ref$job_description_","job_description_page","_ref$job_source","job_source","ApplicationRestApiRedux","ApplicationActions","ApplicationReducer","ApplicationSagas","SocialAuthLoginButton","_Component","_getPrototypeOf2","_len","Array","_key","apply","onLoginButtonClicked","clickEvent","renderProps","onClick","onAuthSuccess","authResponse","props","onSuccess","onAuthFailure","onFailure","createClass","key","react_default","createElement","className","google_login","render","react_button_dist_default","unelevated","icon","dist_default","hasRipple","disabled","clientId","responseType","Component","SocialAuthLogoutButton","onClickWhenIsLocal","onLogoutSuccess","SocialAuthButton","onSocialLoginSuccess","googleOauthResponse","setState","requestedLoginAuth","onSocialLoginFailure","onSocialLogoutSuccess","requestedLogoutAuth","auth","social_auth_logout_button_SocialAuthLogoutButton","social_auth_login_button_SocialAuthLoginButton","InputFieldType","SocialAuthButtonContainer","withRouter","connect","store","dispatch","FormInputField","formik_esm","fieldName","field","form","react_text_field_dist_default","label","onTrailingIconSelect","trailingIcon","role","react_text_field_dist","assign","TEXT","inputType","ActionButtonType","FormBaseFieldMeta","model","formField","isDynamic","dynamicLimit","getInstanceDataFromFormikValues","isArray","alert","instanceData","FormInputFieldMeta","_FormBaseFieldMeta","FormActionButtonProps","FormFactory","initialInstance","onSubmit","setSubmitting","formFieldPropsList","fieldProps","getInstance","createInstanceTriggerAction","updateInstanceTriggerAction","instance","enforcedInstanceData","onSubmitSuccess","initialValues","validate","isSubmitting","formFieldMeta","index","formikValues","actionButtonPropsList","actionButtonProps","BUTTON","children","LoginForm","PASSWORD","SUBMIT","onSubmitLoginForm","asyncToGenerator","parsedJsonResponse","ok","statusText","token","registerLoginSuccess","username","avatar_url","onLoginSuccess","_x","_x2","form_factory_FormFactory","styles","backgroundColor","color","LandingPage","formFactoryProps","listApplication","listCompany","style","react_router","to","login_form_LoginForm","registerLocalLoginSuccess","href","target","LandingPageContainer","CompanyComponent","company","react_router_dom","react_icon_button_dist_default","onEditIconClicked","onDeleteIconClicked","includes","ApplicationStatus","_ref$application","application","_ref$applicationstatu","applicationstatuslink_set","_ref$date","date","ApplicationStatusRestApiRedux","ApplicationStatusActions","ApplicationStatusReducer","ApplicationStatusSagas","ApplicationStatusLink","_ref$application_stat","application_status","_ref$link","link","FormBaseDynamicFieldControlls","formikArrayHelpers","remove","BaseDynamicFieldAddButton","push","withFormBaseField","FormFieldComponent","form_base_field_FormBaseDynamicFieldControlls","form_base_field_BaseDynamicFieldAddButton","FormLinkField","FormLinkFieldComponent","textInputFieldMeta","urlInputFieldMeta","form_input_field_FormInputField","FormLinkFieldMeta","FormApplicationStatusLinkField","FormApplicationStatusLinkFieldComponent","linkFieldProps","FormApplicationStatusLinkFieldMeta","ApplicationStatusFormComponent","errors","DATE","applicationStatus","onCancel","createApplicationStatus","updateApplicationStatus","ApplicationStatusFormComponentContainer","applicationStatusStore","applicationStatusFormData","ApplicationStatusComponent","isFormOpened","renderDisplay","deleteApplicationStatus","applicationStatusLink","renderFormController","isOnlyForm","ApplicationStatusComponentContainer","applicationStatusToDelete","callback","ApplicationFormComponent","validateAppForm","createApplication","updateApplication","ApplicationFormComponentContainer","applicationStore","applicationFormData","ApplicationComponent","renderApplicationFormController","event","renderApplicationDisplay","applicationStatusList","deleteApplication","isShowApplicationStatuses","ApplicationComponentController","applicationToDelete","CompanyApplicationComponent","onDeleteClick","deleteCompany","company_component_CompanyComponent","history","filter","CompanyApplicationComponentContainer","companyToDelete","updateCompany","companyToUpdate","UserAppPage","UserAppPageContainer","FormAddressField","FormAddressFieldComponent","fullAddressInputFieldMeta","placeNameInputFieldMeta","FormAddressFieldMeta","CompanyFormComponent","createCompany","CompanyFormComponentContainer","companyFormData","AddComPage","match","params","newCompany","goBack","AddComPageContainer","UserComAppPage","companyUuid","renderAll","UserComAppPageContainer","UserInfo","toString","UserProfilePage","user_info_UserInfo","UserProfilePageContainer","PageRoutes","location","pathname","path","exact","component","react_top_app_bar_dist_default","title","actionItems","height","borderRadius","src","react_top_app_bar_dist","PageRoutesContainer","App","Boolean","window","hostname","RootActionNames","initialAuthState","authReducer","authStore","authAction","resetAllStoreAction","ResetAllStore","authLoginSagaHandler","authLoginSaga","authLogoutSagaHandler","authLogoutSaga","requestedLoginAuthAction","email","warn","_marked","takeEvery","_marked2","requestedLogoutAuthAction","_context3","_marked3","_context4","_marked4","sagaMiddleware","createSagaMiddleware","rootSaga","all","toConsumableArray","createBrowserHistory","basename","createStore","rootState","rootStateChecked","router","connectRouter","compose","applyMiddleware","routerMiddleware","run","ReactDOM","es","esm","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.10c4b935.chunk.js","sourcesContent":["import { Action } from \"redux\";\n\nimport { RequestStatus } from \"../../utils/rest-api\";\n\n/**\n * Store Types\n */\n\n// complete store type\nexport interface IUpdateAuthState {\n    requestStatus: RequestStatus\n    isLogin: boolean\n    isLocal: boolean\n    userName: string\n    socialAuthToken: string\n    apiToken: string\n    expireDateTime: string\n    avatarUrl: string\n}\n\n// async partial store types\nexport interface IRequestedLoginAuthState {\n    requestStatus: RequestStatus\n    socialAuthToken: string\n}\n\nexport interface IRequestedLogoutAuthState {\n    requestStatus: RequestStatus\n}\n\nexport interface ISuccessAuthState {\n    requestStatus: RequestStatus\n    isLogin: boolean\n    isLocal: boolean\n    userName: string\n    expireDateTime: string\n    apiToken: string\n    avatarUrl: string\n}\n\nexport interface IFailureAuthState {\n    requestStatus: RequestStatus,\n    error: any\n}\n\n// add more state types for this reducer - auth reducer\n// ...\n\n\n\n\n\n/**\n * Action Types\n */\n\nexport enum AuthActionNames {\n    UPDATE_AUTH = \"Update auth\",\n    REQUESTED_LOGIN_AUTH = \"Requested login auth\",\n    REQUESTED_LOGOUT_AUTH = \"Requested logout auth\",\n    SUCCESS_AUTH = \"Success auth\",\n    FAILURE_AUTH = \"Failure auth\",\n\n    // 1. add more action for this reducer - auth reducer\n    // 2. write the type interface for the action below\n    // ...\n}\n\nexport interface IUpdateAuthAction extends Action<AuthActionNames.UPDATE_AUTH> {\n    type: typeof AuthActionNames.UPDATE_AUTH;\n    payload: IUpdateAuthState;\n}\n\nexport interface IRequestedLoginAuthAction extends Action<AuthActionNames.REQUESTED_LOGIN_AUTH> {\n    type: typeof AuthActionNames.REQUESTED_LOGIN_AUTH;\n    payload: IRequestedLoginAuthState;\n}\n\nexport interface IRequestedLogoutAuthAction extends Action<AuthActionNames.REQUESTED_LOGOUT_AUTH> {\n    type: typeof AuthActionNames.REQUESTED_LOGOUT_AUTH;\n    payload: IRequestedLogoutAuthState;\n}\n\nexport interface ISuccessAuthAction extends Action<AuthActionNames.SUCCESS_AUTH> {\n    type: typeof AuthActionNames.SUCCESS_AUTH;\n    payload: ISuccessAuthState;\n}\n\nexport interface IFailureAuthAction extends Action<AuthActionNames.FAILURE_AUTH> {\n    type: typeof AuthActionNames.FAILURE_AUTH;\n    payload: IFailureAuthState;\n}\n\n// use union | ... | ... to add more action types\nexport type TAuthActions = IUpdateAuthAction | IRequestedLoginAuthAction | IRequestedLogoutAuthAction | ISuccessAuthAction | IFailureAuthAction","import React from \"react\";\nimport { TObject, IObjectBase } from \"../store/rest-api-redux-factory\";\nimport { BaseModel } from \"../store/data-model/base-model\";\nimport { AuthenticationService } from \"./auth\";\n\nexport enum RequestStatus {\n    TRIGGERED = \"triggered\",\n    REQUESTING = \"requesting\",\n    SUCCESS = \"success\",\n    FAILURE = \"failre\"\n}\n\nexport enum CrudType {\n    CREATE = \"create\",\n    READ = \"read\",\n    LIST = \"list\",\n    UPDATE = \"update\",\n    DELETE = \"delete\"\n}\n\nexport enum RestMethod {\n    POST = \"post\",\n    GET = \"get\",\n    PATCH = \"patch\",\n    DELETE = \"delete\"\n}\n\nexport const CrudMapToRest = (crudType: CrudType): RestMethod => {\n    switch (crudType) {\n        case CrudType.CREATE:\n            return RestMethod.POST;\n        case CrudType.READ:\n            return RestMethod.GET;\n        case CrudType.LIST:\n            return RestMethod.GET;\n        case CrudType.UPDATE:\n            return RestMethod.PATCH;\n        case CrudType.DELETE:\n            return RestMethod.DELETE;\n\n        default:\n            return RestMethod.GET;\n    }\n};\n\nexport interface IRequestParams<Schema> {\n    endpointUrl?: string;\n    absoluteUrl?: string;\n    objectName?: string;\n    data?: TObject<Schema> | Array<TObject<Schema>>;\n}\n\nexport interface IListRestApiResponse<Schema> {\n    count: number;\n    next: any;\n    previous: any;\n    results: Array<TObject<Schema>>;\n}\n\nexport type ISingleRestApiResponse<Schema> = TObject<Schema>;\n\nexport function IsSingleRestApiResponseTypeGuard<Schema>(\n    response: ISingleRestApiResponse<Schema> | IListRestApiResponse<Schema>\n): response is ISingleRestApiResponse<Schema> {\n    return (<ISingleRestApiResponse<Schema>>response).uuid !== undefined;\n}\n\nfunction IsSingleFormDataTypeGuard<Schema>(\n    formData: TObject<Schema> | Array<TObject<Schema>>\n): formData is TObject<Schema> {\n    return (<TObject<Schema>>formData).uuid !== undefined;\n}\n\nexport class RestApi {\n    state = {\n        clientID: `732988498848-vuhd6g61bnlqe372i3l5pbpnerteu6na.apps.googleusercontent.com`,\n        code: ``,\n        redirectUri: `postmessage`,\n        apiBaseUrl: (process.env.NODE_ENV === 'development') ? \n        `http://localhost:8000/api/`\n        :\n        `https://appl-tracky-api-https.shaungc.com/api/`\n        ,\n        apiLoginUrl: `login/social/`,\n        socialAuthProvider: `google-oauth2`,\n\n        userEmail: ``,\n        apiLoginToken: ``,\n        userFirstName: ``,\n        userLastName: ``,\n\n        objectID: ``\n    };\n\n    get = <Schema>({ endpointUrl, absoluteUrl, objectName, data }: IRequestParams<Schema>) => {\n        return fetch(\n            this.getRelativeUrl({\n                endpointUrl,\n                absoluteUrl,\n                objectName,\n                data\n            }),\n            {\n                method: \"GET\",\n                ...this.setApiAuthHeaders()\n            }\n        ).then(res => res.json());\n    };\n\n    post = <Schema>({ data, objectName, endpointUrl }: IRequestParams<Schema>) => {\n        console.log(`restapi:post fired`);\n        return fetch(\n            this.getRelativeUrl({\n                endpointUrl,\n                objectName,\n                data\n            }),\n            {\n                method: \"POST\",\n                ...this.setApiAuthHeaders(),\n                body: JSON.stringify(data)\n            }\n        ).then(res => res.json());\n        // let caller handle error in their own .catch()\n    };\n\n    patch = <Schema>({ data, objectName, endpointUrl }: IRequestParams<Schema>) => {\n        return fetch(\n            this.getRelativeUrl({\n                endpointUrl,\n                objectName,\n                data\n            }),\n            {\n                method: \"PATCH\",\n                ...this.setApiAuthHeaders(),\n                body: JSON.stringify(data)\n            }\n        ).then(res => res.json());\n    };\n\n    delete = <Schema>({ data, objectName, endpointUrl }: IRequestParams<Schema>) => {\n        return fetch(\n            this.getRelativeUrl({\n                endpointUrl,\n                objectName,\n                data\n            }),\n            {\n                method: \"DELETE\",\n                ...this.setApiAuthHeaders(),\n                body: JSON.stringify(data)\n            }\n        );\n    };\n\n    /** helper */\n    private getRelativeUrl = <Schema>({\n        objectName,\n        data,\n        endpointUrl,\n        absoluteUrl,\n    }: IRequestParams<Schema>) => {\n        let url = \"\";\n        if (absoluteUrl) {\n            url = absoluteUrl;\n        }\n        else if (endpointUrl) {\n            url = `${this.state.apiBaseUrl}${endpointUrl}`;\n        } else {\n            if (data && IsSingleFormDataTypeGuard(data) && data.uuid) {\n                url = `${this.state.apiBaseUrl}${objectName}/${data.uuid}/`;\n            } else {\n                url = `${this.state.apiBaseUrl}${objectName}/`;\n            }\n        }\n        console.log(`restapi: url: ${url}, objname=${objectName}`);\n        return url;\n    };\n\n    private setApiAuthHeaders = (): RequestInit => {\n\n        this.state.apiLoginToken = (\n            AuthenticationService.state.apiLoginToken\n        ) ? AuthenticationService.state.apiLoginToken : this.state.apiLoginToken;\n\n        console.log(\"api: set header: got credentials?\", this.state.apiLoginToken);\n        return {\n            mode: \"cors\",\n            credentials: this.state.apiLoginToken ? \"include\" : \"omit\",\n            headers: {\n                Authorization: this.state.apiLoginToken\n                    ? `JWT ${this.state.apiLoginToken}`\n                    : ``,\n                \"Content-Type\": \"application/json\"\n            }\n        };\n    };\n}\n\n/** create restapi singleton */\nexport const RestApiService = new RestApi();\n","export type IRelationship = string;\n\nexport type DataModelClass = new (props: any) => any\n\nexport interface IBaseModelProps {\n    uuid?: IRelationship\n    created_at?: string\n    modified_at?: string\n}\n\nexport class BaseModel {\n    uuid: string\n    created_at: string\n    modified_at: string\n    \n    constructor({\n        uuid = \"\",\n        created_at = \"\",\n        modified_at = \"\",\n    }: IBaseModelProps) {\n        this.uuid = uuid;\n        this.created_at = created_at;\n        this.modified_at = modified_at;\n    }\n}\n\n// for newing model class instance and access base class's assets\nexport type DataModelInstance<Model = BaseModel> = Model & BaseModel","import { RestApiService } from \"./rest-api\";\nimport { BaseModel, IBaseModelProps } from \"../store/data-model/base-model\";\n\nexport interface IAuthObjectProps {\n    code?: string\n    provider?: string\n    redirect_uri?: string\n}\n\nexport class AuthObject extends BaseModel {\n    code: string\n    provider: string\n    redirect_uri: string\n\n    constructor({\n        code = \"\",\n        provider = \"\",\n        redirect_uri = \"\",\n        ...args\n    }: IAuthObjectProps & IBaseModelProps) {\n        super(args);\n        this.code = code;\n        this.provider = provider;\n        this.redirect_uri = redirect_uri;\n    }\n}\n\nclass Authentication {\n    state = {\n        clientID: `732988498848-vuhd6g61bnlqe372i3l5pbpnerteu6na.apps.googleusercontent.com`,\n\n        redirectUri: `postmessage`,\n        apiLoginUrl: `login/social/`,\n        socialAuthProvider: `google-oauth2`,\n\n        userEmail: ``,\n        apiLoginToken: ``,\n        userFirstName: ``,\n        userLastName: ``,\n\n        objectID: ``\n    };\n\n    serverLogin = (socialLoginCode: string) => {\n        let authFormData = new AuthObject({\n            code: socialLoginCode,\n            provider: this.state.socialAuthProvider,\n            redirect_uri: this.state.redirectUri\n        })\n        return RestApiService\n            .post<AuthObject>({\n                data: authFormData,\n                endpointUrl: this.state.apiLoginUrl\n            })\n    }\n\n    serverLogout = async () => {\n        console.log(\"server logout...\");\n        // no server-side invalidate implement at this point (a common case for JWT, however)\n        this.state.userEmail = \"\";\n        this.state.userFirstName = \"\"\n        this.state.userLastName = \"\"\n        this.state.apiLoginToken = RestApiService.state.apiLoginToken = \"\";\n        return;\n    }\n}\n\nexport const AuthenticationService = new Authentication();","import { ActionCreator } from \"redux\";\n\nimport {\n    /** state types */\n    IUpdateAuthState,\n    IRequestedLoginAuthState,\n    /** action types */\n    IUpdateAuthAction,\n    IRequestedLoginAuthAction,\n    IRequestedLogoutAuthAction,\n    ISuccessAuthAction,\n    IFailureAuthAction,\n    /** action names */\n    AuthActionNames\n} from \"./types\";\n\nimport { RequestStatus } from \"../../utils/rest-api\";\n\nexport const UpdateAuth = (newAuthState: IUpdateAuthState): IUpdateAuthAction => {\n    return {\n        type: AuthActionNames.UPDATE_AUTH,\n        payload: newAuthState\n    };\n};\n\nexport const RequestedLoginAuth = (socialAuthToken: string): IRequestedLoginAuthAction => {\n    return {\n        type: AuthActionNames.REQUESTED_LOGIN_AUTH,\n        payload: {\n            requestStatus: RequestStatus.REQUESTING,\n            socialAuthToken\n        }\n    };\n};\n\nexport const RequestedLogoutAuth = (): IRequestedLogoutAuthAction => {\n    return {\n        type: AuthActionNames.REQUESTED_LOGOUT_AUTH,\n        payload: {\n            requestStatus: RequestStatus.REQUESTING,\n        }\n    };\n};\n\nexport const SuccessLoginAuth = (userName: string, expireDateTime: string, apiToken: string, avatarUrl: string, isLocal: boolean): ISuccessAuthAction => {\n    console.log(\"action username:\", userName);\n    return {\n        type: AuthActionNames.SUCCESS_AUTH,\n        payload: {\n            requestStatus: RequestStatus.SUCCESS,\n            isLogin: true,\n            isLocal: isLocal ? true : false,\n            userName,\n            expireDateTime,\n            apiToken,\n            avatarUrl\n        }\n    };\n};\n\nexport const SuccessLogoutAuth = (): ISuccessAuthAction => {\n    return {\n        type: AuthActionNames.SUCCESS_AUTH,\n        payload: {\n            requestStatus: RequestStatus.SUCCESS,\n            isLogin: false,\n            isLocal: false,\n            userName: \"\",\n            expireDateTime: \"\",\n            apiToken: \"\",\n            avatarUrl: \"\",\n        }\n    };\n};\n\nexport const FailureAuth = (error: any): IFailureAuthAction => {\n    return {\n        type: AuthActionNames.FAILURE_AUTH,\n        payload: {\n            requestStatus: RequestStatus.FAILURE,\n            error\n        }\n    };\n};\n\n// write new actions here for this reducer - auth reducer\n// ...\n","import { Action, Reducer } from \"redux\";\nimport { takeEvery, take, call, put, actionChannel } from \"redux-saga/effects\";\nimport { SagaIterator } from \"redux-saga\";\nimport {\n    RequestStatus,\n    CrudType,\n    CrudMapToRest,\n    RestApiService,\n    IRequestParams,\n    ISingleRestApiResponse,\n    IListRestApiResponse,\n    IsSingleRestApiResponseTypeGuard\n} from \"../utils/rest-api\";\nimport omit from \"lodash/omit\";\n\n/** state & store */\n\nexport interface IObjectBase {\n    uuid: string;\n}\n\nexport type TObject<Schema> = IObjectBase & { [Property in keyof Schema]: Schema[Property] };\n\ninterface IObjectList<Schema> {\n    [uuid: string]: TObject<Schema>;\n}\n\nexport interface IObjectStore<Schema> {\n    lastChangedObjectID?: string;\n    requestStatus: RequestStatus;\n    error?: any;\n    collection: IObjectList<Schema>;\n}\n\n/** action */\n\ntype IObjectRestApiReduxFactoryActions = {\n    [restfulKeyword: string]: {\n        [asyncKeyword: string]: {\n            actionTypeName: string;\n            action: Function;\n            saga?: () => SagaIterator;\n        };\n    };\n};\n\nexport interface IObjectAction<Schema> extends Action {\n    type: string;\n    crudType: CrudType;\n\n    // for deleteAction or other actions to obtain the original instance obj passed into trigger action\n    triggerFormData?: TObject<Schema> | Array<TObject<Schema>>;\n\n    // for saga to perform additional side effect e.g. navigation\n    // only for triggerActions\n    successCallback?: Function;\n    failureCallback?: (error: any) => void;\n    finalCallback?: Function;\n\n    // for custumized api call\n    absoluteUrl?: string\n    \n    payload: {\n        formData?: TObject<Schema> | Array<TObject<Schema>>;\n        lastChangedObjectID?: string;\n        requestStatus: RequestStatus;\n        error?: any;\n    };\n}\n\n/** factory API */\n\ninterface IRestApiReduxFactory<Schema> {\n    actions: IObjectRestApiReduxFactoryActions;\n    storeReducer: Reducer<IObjectStore<Schema>>\n    sagas: Array<() => SagaIterator>;\n}\n\nexport const RestApiReduxFactory = <Schema extends IObjectBase>(\n    /** should have uuid */ objectName: string,\n    initialObjectInstance: TObject<Schema>\n): IRestApiReduxFactory<Schema> => {\n    type TObjectSchema = typeof initialObjectInstance;\n    const crudKeywords = Object.values(CrudType);\n\n    let ObjectRestApiRedux: IObjectRestApiReduxFactoryActions = {};\n    for (let crudKeyword of crudKeywords) {\n        ObjectRestApiRedux[crudKeyword] = {};\n        /** store */\n        // TODO?: action state\n\n        /** action */\n        // action type names\n        for (let requestStatus of Object.values(RequestStatus)) {\n            ObjectRestApiRedux[crudKeyword][requestStatus] = {\n                actionTypeName: \"\",\n                action: () => {}\n            };\n            ObjectRestApiRedux[crudKeyword][\n                requestStatus\n            ].actionTypeName = `${requestStatus.toUpperCase()}_${crudKeyword.toUpperCase()}_${objectName.toUpperCase()}`;\n        }\n\n        // async actions ( & state...)\n        ObjectRestApiRedux[crudKeyword][RequestStatus.TRIGGERED].action = (\n            objectClassInstance?: TObjectSchema,\n            successCallback?: Function,\n            failureCallback?: (error: any) => void,\n            finalCallback?: Function,\n            absoluteUrl?: string,\n        ): IObjectAction<TObjectSchema> => {\n            console.log(`action:fired, trigger, ${crudKeyword}`);\n            return {\n                type:\n                    ObjectRestApiRedux[crudKeyword][RequestStatus.TRIGGERED]\n                        .actionTypeName,\n                crudType: crudKeyword,\n                finalCallback,\n                successCallback,\n                failureCallback,\n                absoluteUrl,\n                payload: {\n                    requestStatus: RequestStatus.TRIGGERED,\n                    formData: objectClassInstance\n                }\n            };\n        };\n        ObjectRestApiRedux[crudKeyword][\n            RequestStatus.REQUESTING\n        ].action = (): IObjectAction<TObjectSchema> => {\n            return {\n                type:\n                    ObjectRestApiRedux[crudKeyword][RequestStatus.REQUESTING]\n                        .actionTypeName,\n                crudType: crudKeyword,\n                payload: {\n                    requestStatus: RequestStatus.REQUESTING\n                }\n            };\n        };\n        ObjectRestApiRedux[crudKeyword][RequestStatus.SUCCESS].action = (\n            /** api response */\n            jsonResponse:\n            | IListRestApiResponse<TObjectSchema>\n            | ISingleRestApiResponse<TObjectSchema>,\n            triggerFormData?: TObject<Schema> | Array<TObject<Schema>>\n        ): IObjectAction<TObjectSchema> => {\n            let newState = {\n                type:\n                    ObjectRestApiRedux[crudKeyword][RequestStatus.SUCCESS]\n                        .actionTypeName,\n                crudType: crudKeyword\n            };\n            // if is delete success, we don't need formData (& the server responds nothing for DELETE as well)\n            if (crudKeyword === CrudType.DELETE) {\n                return {\n                    ...newState,\n                    triggerFormData,\n                    payload: {\n                        requestStatus: RequestStatus.SUCCESS,\n                    }\n                }\n            }\n            else if (IsSingleRestApiResponseTypeGuard(jsonResponse)) {\n                return {\n                    ...newState,\n                    payload: {\n                        requestStatus: RequestStatus.SUCCESS,\n                        formData: <ISingleRestApiResponse<TObjectSchema>>(\n                            jsonResponse\n                        ),\n                        lastChangedObjectID: jsonResponse.uuid\n                    }\n                };\n            } else {\n                return {\n                    ...newState,\n                    payload: {\n                        requestStatus: RequestStatus.SUCCESS,\n                        formData: (<IListRestApiResponse<TObjectSchema>>(\n                            jsonResponse\n                        )).results\n                    }\n                };\n            }\n        };\n        ObjectRestApiRedux[crudKeyword][RequestStatus.FAILURE].action = (\n            error: any\n        ): IObjectAction<TObjectSchema> => {\n            return {\n                type:\n                    ObjectRestApiRedux[crudKeyword][RequestStatus.FAILURE]\n                        .actionTypeName,\n                crudType: crudKeyword,\n                payload: {\n                    requestStatus: RequestStatus.FAILURE,\n                    error\n                }\n            };\n        };\n\n        /** saga */\n        const sagaHandler = function*(\n            triggerAction: IObjectAction<TObjectSchema>\n        ) {\n            console.log(`Saga: action intercepted; aync=trigger, crud=${crudKeyword}, obj=${objectName}; ready to call api`);\n            const formData = triggerAction.payload.formData;\n            const absoluteUrl = triggerAction.absoluteUrl;\n\n            yield put(\n                ObjectRestApiRedux[crudKeyword][\n                    RequestStatus.REQUESTING\n                ].action()\n            );\n\n            try {\n                // api call\n                const jsonResponse:\n                    | IListRestApiResponse<TObjectSchema>\n                    | ISingleRestApiResponse<TObjectSchema> \n                    | any = yield call(\n                    (<(params: IRequestParams<TObjectSchema>) => void>RestApiService[CrudMapToRest(crudKeyword)]),\n                    {\n                        data: formData,\n                        objectName,\n                        absoluteUrl,\n                    }\n                );\n\n                console.log(\"Saga: res from server\", jsonResponse);\n\n                if (jsonResponse.status && jsonResponse.status >= 400) {\n                    console.error(\"Server error, see message in res.\");\n                    throw new Error(\"Server error, see message in res.\");\n                } \n\n                // if there is .next in res, then it's paginated data and we should perform a next request to next page data\n                if(jsonResponse.next) {\n                    console.log(\"Saga: res contains next url, so we will also trigger list request for next=\", jsonResponse.next);\n                    yield put(ObjectRestApiRedux[CrudType.LIST][RequestStatus.TRIGGERED].action(\n                        undefined, undefined, undefined, undefined, jsonResponse.next\n                    ));\n                }\n\n                // success state\n                if (crudKeyword === CrudType.DELETE) {\n                    yield put(\n                        ObjectRestApiRedux[CrudType.DELETE][\n                            RequestStatus.SUCCESS\n                        ].action(jsonResponse, formData)\n                    );\n                } else {\n                    console.log(\"Saga: ready to dispatch success action\")\n                    yield put(\n                        ObjectRestApiRedux[crudKeyword][\n                            RequestStatus.SUCCESS\n                        ].action(jsonResponse)\n                    );\n                }\n\n                if (triggerAction.successCallback) {\n                    triggerAction.successCallback();\n                }\n            } catch (error) {\n                // error state\n                yield put(\n                    ObjectRestApiRedux[crudKeyword][\n                        RequestStatus.FAILURE\n                    ].action(error)\n                );\n\n                if (triggerAction.failureCallback) {\n                    triggerAction.failureCallback(error);\n                }\n                return;\n            }\n\n            if (triggerAction.finalCallback) {\n                triggerAction.finalCallback();\n            }\n        };\n\n        ObjectRestApiRedux[crudKeyword][\n            RequestStatus.TRIGGERED\n        ].saga = function*() {\n            console.log(`Saga: action intercepted; async=trigger, crud=${crudKeyword}, obj=${objectName}`);\n            \n            // queue style \n            const objectTriggerActionChannel = yield actionChannel(\n                ObjectRestApiRedux[crudKeyword][RequestStatus.TRIGGERED]\n                    .actionTypeName\n            )\n\n            while (true) {\n                const objectTriggerAction = yield take(objectTriggerActionChannel);\n                yield call(sagaHandler, objectTriggerAction);\n            }\n        };\n    }\n\n    const initialState: IObjectStore<TObjectSchema> = {\n        collection: {},\n        requestStatus: RequestStatus.SUCCESS\n    };\n\n    const storeReducer: Reducer<IObjectStore<Schema>> = (\n        objectStore: IObjectStore<TObjectSchema> = initialState,\n        action: Action\n    ): IObjectStore<TObjectSchema> => {\n        \n        const objectAction = action as IObjectAction<TObjectSchema>;\n\n        if (\n            !(objectAction && objectAction.payload && objectAction.payload.requestStatus) ||\n            !(action.type.split(\"_\")[2] === objectName.toUpperCase())\n        ) {\n            return {\n                ...objectStore\n            };\n        }\n\n        // async success\n        if (objectAction.payload.requestStatus === RequestStatus.SUCCESS) {\n            // CREATE\n            if (objectAction.crudType === CrudType.CREATE) {\n                let newObject = <TObject<TObjectSchema>>objectAction.payload.formData;\n                return {\n                    collection: {\n                        ...objectStore.collection,\n                        [newObject.uuid]: newObject\n                    },\n                    requestStatus: objectAction.payload.requestStatus,\n                    lastChangedObjectID: objectAction.payload.lastChangedObjectID\n                };\n            }\n\n            // LIST\n            else if (objectAction.crudType === CrudType.LIST) {\n                const resObjectList = <Array<TObject<TObjectSchema>>>(\n                    objectAction.payload.formData\n                );\n                let newObjects: IObjectList<TObjectSchema> = {};\n                for (let object of resObjectList) {\n                    newObjects[object.uuid] = object;\n                }\n                console.log(\"Reducer: crud=list, action=\", objectAction)\n                console.log(\"initialState=\", initialState)\n                console.log(\"beforestore=\", objectStore)\n                console.log(\"newlistobjects=\", newObjects)\n\n                const afterStore: IObjectStore<TObjectSchema> = {\n                    collection: {\n                        ...objectStore.collection,\n                        ...newObjects\n                    },\n                    requestStatus: objectAction.payload.requestStatus\n                };\n                console.log(\"afterstore=\", afterStore)\n\n                return afterStore;\n            }\n\n            // UPDATE\n            else if (objectAction.crudType === CrudType.UPDATE) {\n                let newObject = <TObject<TObjectSchema>>objectAction.payload.formData;\n                return {\n                    collection: {\n                        ...objectStore.collection,\n                        [newObject.uuid]: newObject\n                    },\n                    requestStatus: objectAction.payload.requestStatus,\n                    lastChangedObjectID: objectAction.payload.lastChangedObjectID\n                };\n            }\n\n            // DELETE\n            else if (objectAction.crudType === CrudType.DELETE) {\n                let targetDeleteObject = <TObject<TObjectSchema>>objectAction.triggerFormData;\n                console.log(\"Reducer: delete, targetobj=\", targetDeleteObject)\n\n                console.log(\"Reducer: delete, beforestore=\", objectStore)\n                \n                const afterStore = {\n                    collection: omit(objectStore.collection, [targetDeleteObject.uuid]),\n                    requestStatus: objectAction.payload.requestStatus\n                }\n                console.log(\"Reducer: delete, afterstore\", afterStore)\n\n                return afterStore;\n            }\n        }\n\n        // async trigger\n        else if (objectAction.payload.requestStatus === RequestStatus.TRIGGERED) {\n            return {\n                ...objectStore,\n                requestStatus: objectAction.payload.requestStatus\n            };\n        }\n\n        // async requesting & failure\n        else {\n            return {\n                ...objectStore,\n                ...objectAction.payload\n            };\n        }\n\n        // no effect\n        return {\n            ...objectStore\n        };\n    };\n\n    const sagas = crudKeywords.map((crudKeyword) => \n        (<() => SagaIterator>ObjectRestApiRedux[crudKeyword][RequestStatus.TRIGGERED].saga)\n    );\n\n    return {\n        actions: ObjectRestApiRedux,\n        storeReducer,\n        sagas\n    };\n};\n","import { RestApiReduxFactory } from \"../rest-api-redux-factory\";\nimport { BaseModel, IBaseModelProps } from \"./base-model\";\n\nexport interface IAddressProps {\n    place_name?: string;\n    country?: string;\n    state?: string;\n    city?: string;\n    street?: string;\n    full_address?: string;\n    zipcode?: string;\n}\n\nexport class Address extends BaseModel {\n    place_name: string;\n    country: string;\n    state: string;\n    city: string;\n    street: string;\n    full_address: string;\n    zipcode: string;\n\n    constructor({\n        place_name = \"\",\n        country = \"\",\n        state = \"\",\n        city = \"\",\n        street = \"\",\n        full_address = \"\",\n        zipcode = \"\",\n        ...args\n    }: IAddressProps & IBaseModelProps) {\n        super(args);\n        this.place_name = place_name;\n        this.country = country;\n        this.state = state;\n        this.place_name = place_name;\n        this.city = city;\n        this.street = street;\n        this.full_address = full_address;\n        this.zipcode = zipcode;\n    }\n}\n\nconst initialAddressInstance = new Address({});\nconst AddressRestApiRedux = RestApiReduxFactory<Address>(\n    \"addresses\",\n    initialAddressInstance\n);","import { BaseModel, IBaseModelProps } from \"./base-model\";\n\ninterface ILinkProps {\n    text?: string;\n    user?: any;\n    url?: string;\n    order?: number;\n}\n\nexport class Link extends BaseModel {\n    public text: string;\n    public user: any;\n    public url: string;\n    public order: number;\n\n    constructor({\n        text = \"\",\n        user = {},\n        url = \"\",\n        order = 0,\n        ...args\n    }: ILinkProps & IBaseModelProps) {\n        super(args);\n        this.text = text;\n        this.user = user;\n        this.url = url;\n        this.order = order;\n    }\n}\n","import { RestApiReduxFactory } from \"../rest-api-redux-factory\";\nimport { BaseModel, IBaseModelProps } from \"./base-model\";\nimport { Address } from \"./address\";\nimport { Link } from \"./link\";\n\ninterface ICompanyProps {\n    user?: string;\n    labels?: any;\n    name?: string;\n    hq_location?: Address;\n    home_page?: Link;\n    ratings?: any;\n    applications?: any;\n}\n\nexport class Company extends BaseModel {\n    public user: string;\n    public labels: any;\n    public name: string;\n    public hq_location: Address;\n    public home_page: Link;\n    public ratings: any;\n    public applications: any;\n\n    constructor({\n        user = \"\",\n        labels = [],\n        name = \"\",\n        hq_location = new Address({}),\n        home_page = new Link({}),\n        ratings = {},\n        applications = {},\n        ...args\n    }: ICompanyProps & IBaseModelProps) {\n        super(args);\n        this.user = user;\n        this.labels = labels;\n        this.name = name;\n        this.hq_location = hq_location;\n        this.home_page = home_page;\n        this.ratings = ratings;\n        this.applications = applications;\n    }\n}\n\nconst initialCompanyInstance = new Company({});\nconst CompanyRestApiRedux = RestApiReduxFactory<Company>(\n    \"companies\",\n    initialCompanyInstance\n);\nexport const CompanyActions = CompanyRestApiRedux.actions;\nexport const CompanyReducer = CompanyRestApiRedux.storeReducer;\nexport const CompanySagas = CompanyRestApiRedux.sagas;\n","import { RestApiReduxFactory } from \"../rest-api-redux-factory\";\nimport { BaseModel, IBaseModelProps, IRelationship } from \"./base-model\";\nimport { Link } from \"./link\";\n\ninterface IApplicationProps {\n    user?: IRelationship;\n    user_company?: IRelationship;\n    position_title?: string;\n    job_description_page?: Link;\n    job_source?: Link;\n    labels?: any;\n}\n\nexport class Application extends BaseModel {\n    public user: string;\n    public user_company: IRelationship;\n    public position_title: string;\n    public job_description_page: Link;\n    public job_source: Link;\n    public labels: any;\n\n    constructor({\n        user = \"\",\n        user_company = \"\",\n        position_title = \"\",\n        job_description_page = new Link({}),\n        job_source = new Link({}),\n        labels = {},\n        ...args\n    }: IApplicationProps & IBaseModelProps) {\n        super(args);\n        this.user = user;\n        this.user_company = user_company;\n        this.position_title = position_title;\n        this.job_description_page = job_description_page;\n        this.job_source = job_source;\n        this.labels = labels;\n    }\n}\n\nconst initialApplicationInstance = new Application({});\nconst ApplicationRestApiRedux = RestApiReduxFactory<Application>(\n    \"applications\",\n    initialApplicationInstance\n);\nexport const ApplicationActions = ApplicationRestApiRedux.actions;\nexport const ApplicationReducer = ApplicationRestApiRedux.storeReducer;\nexport const ApplicationSagas = ApplicationRestApiRedux.sagas;\n","import React, { Component } from \"react\";\n\n/** Components */\nimport { GoogleLogin } from \"react-google-login\";\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n\ninterface ISocialAuthLoginButtonProps {\n    clientID: string;\n    redirectUri?: string;\n    onSuccess(authResponse?: any): void;\n    onFailure?(error: any): void;\n    disabled?: boolean;\n}\n\nexport class SocialAuthLoginButton extends Component<\n    ISocialAuthLoginButtonProps\n> {\n    onLoginButtonClicked = (clickEvent: any, renderProps: any) => {\n        console.log(\"login button clicked\", clickEvent, renderProps);\n        renderProps.onClick(clickEvent);\n    };\n\n    onAuthSuccess = (authResponse?: any) => {\n        console.log(\"login button auth success\");\n        this.props.onSuccess(authResponse);\n    };\n\n    onAuthFailure = (error: any) => {\n        console.log(\"login button auth failed\");\n        if (this.props.onFailure) {\n            this.props.onFailure(error);\n        }\n    };\n\n    render() {\n        return (\n            <div className=\"UserAuthButton\">\n                <GoogleLogin\n                    render={(renderProps: any) => (\n                        <Button\n                            onClick={clickEvent =>\n                                this.onLoginButtonClicked(\n                                    clickEvent,\n                                    renderProps\n                                )\n                            }\n                            unelevated\n                            icon={\n                                <MaterialIcon hasRipple icon=\"account_circle\" />\n                            }\n                            disabled={this.props.disabled}\n                        >\n                            Google Login\n                        </Button>\n                    )}\n                    onSuccess={this.onAuthSuccess}\n                    onFailure={this.onAuthFailure}\n                    clientId={this.props.clientID}\n                    responseType=\"code\"\n                    redirectUri={this.props.redirectUri || \"postmessage\"}\n                />\n            </div>\n        );\n    }\n}\n","import React, { Component } from \"react\";\n\n/** Components */\nimport { GoogleLogout } from \"react-google-login\";\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n\ninterface ISocialAuthLogoutButtonProps {\n    isLocal: boolean\n    onClickWhenIsLocal?(): void\n    onSuccess(authResponse?: any): void;\n    disabled?: boolean\n}\n\nexport class SocialAuthLogoutButton extends Component<\n    ISocialAuthLogoutButtonProps\n> {\n    onAuthSuccess = (authResponse?: any) => {\n        this.props.onSuccess(authResponse);\n    };\n\n    render() {\n        return (\n            <div className=\"UserAuthButton\">\n                <GoogleLogout\n                    render={(renderProps: any) => (\n                        <Button\n                            onClick={(this.props.isLocal) ? this.props.onClickWhenIsLocal : renderProps.onClick}\n                            unelevated\n                            icon={<MaterialIcon hasRipple icon=\"eject\" />}\n                            disabled={this.props.disabled}\n                        >\n                            Logout\n                        </Button>\n                    )}\n                    onLogoutSuccess={this.onAuthSuccess}\n                />\n            </div>\n        );\n    }\n}\n","import React, { Component } from \"react\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\n\n/** Redux */\nimport { Dispatch } from \"redux\";\nimport { connect } from \"react-redux\";\nimport { IRootState } from \"../../store/types\";\nimport { IUpdateAuthAction, IRequestedLoginAuthAction, TAuthActions, IUpdateAuthState } from \"../../store/auth/types\";\nimport { UpdateAuth, RequestedLoginAuth, RequestedLogoutAuth } from \"../../store/auth/actions\";\n\n/** rest api */\nimport { RequestStatus } from \"../../utils/rest-api\";\n\n/** Components */\nimport { SocialAuthLoginButton } from \"./social-auth-login-button\";\nimport { SocialAuthLogoutButton } from \"./social-auth-logout-button\";\n\ninterface ISocialAuthButtonProps extends RouteComponentProps {\n    auth: IUpdateAuthState;\n    requestedLoginAuth: (socialAuthToken: string) => void;\n    requestedLogoutAuth: () => void;\n}\n\nclass SocialAuthButton extends Component<\n    ISocialAuthButtonProps\n> {\n    state = {\n        clientID: `732988498848-vuhd6g61bnlqe372i3l5pbpnerteu6na.apps.googleusercontent.com`,\n        code: ``,\n        redirectUri: `postmessage`,\n        apiBaseUrl: `http://localhost:8000/`,\n        apiLoginUrl: `login/social/`,\n        socialAuthProvider: `google-oauth2`,\n\n        userEmail: ``,\n        apiLoginToken: ``,\n        userFirstName: ``,\n        userLastName: ``,\n\n        objectID: ``\n    };\n\n    onSocialLoginSuccess = (googleOauthResponse: any) => {\n        console.log(\"Google Oauth2 res:\", googleOauthResponse);\n        this.setState(\n            {\n                code: googleOauthResponse.code\n            },\n            () => {\n                // this.apiLogin();\n                console.log(\"social button: request auth...\");\n                this.props.requestedLoginAuth(this.state.code);\n            }\n        );\n    };\n\n    onSocialLoginFailure = (error: any) => {\n        console.error(\"Social login failed:\", error);\n    };\n\n    onSocialLogoutSuccess = () => {\n        console.log(\"Social logout success, now our web app logout\");\n        this.props.requestedLogoutAuth();\n    };\n\n    render() {\n        return (\n            <div className=\"SocialAuth\">\n                auth requestStatus: {this.props.auth.requestStatus} <br></br>\n                {!this.props.auth.isLogin ? (\n                    <SocialAuthLoginButton\n                        clientID={this.state.clientID}\n                        onSuccess={this.onSocialLoginSuccess}\n                        onFailure={this.onSocialLoginFailure}\n                        disabled={this.props.auth.requestStatus === RequestStatus.REQUESTING}\n                    />\n                ) : (\n                    <SocialAuthLogoutButton\n                        isLocal={this.props.auth.isLocal}\n\n                        onClickWhenIsLocal={this.onSocialLogoutSuccess}\n                        onSuccess={this.onSocialLogoutSuccess}\n                        \n                        disabled={this.props.auth.requestStatus === RequestStatus.REQUESTING}\n                    />\n                )}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => {\n    return {\n        auth: store.auth\n    };\n};\n\nfunction mapDispatchToProps(dispatch: Dispatch<TAuthActions>) {\n    return {\n        requestedLoginAuth: (socialAuthToken: string) => {\n            dispatch(\n                RequestedLoginAuth(socialAuthToken)\n            );\n        },\n        requestedLogoutAuth: () => {\n            dispatch(\n                RequestedLogoutAuth()\n            );\n        }\n    };\n}\n\nexport const SocialAuthButtonContainer = withRouter(connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(SocialAuthButton));\n","import React from \"react\";\nimport { FormikValues } from \"formik\";\nimport { DataModelClass } from \"../../../store/data-model/base-model\";\nimport { FormInputField } from \"../form-input-field/form-input-field\";\n\nexport enum InputFieldType {\n    // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input\n    TEXT = \"text\",\n    PASSWORD = \"password\",\n    EMAIL = \"email\",\n    URL = \"url\",\n    DATE = \"date\"\n}\n\n// API for caller to new meta class\nexport interface IFieldBaseMetaProps {\n    fieldName: string\n    label: string;\n\n    isDynamic?: boolean;\n    dynamicLimit?: number;\n    getInstanceDataFromFormikValues?: (formikValues: FormikValues) => any // has to be optional since we want to let caller just use `fieldName` by default to access formik's values\n}\n\n// for form field props\nexport interface IFormBaseFieldProps extends IFieldBaseMetaProps {\n    model?: DataModelClass\n    formikValues?: FormikValues // for form field to load data (e.g. initial value) at a specific position in formik's `values`\n    // getInstanceDataFromFormikValues?: // when it's dynamic field, will use this to render dynamic fields\n}\n\n// for the base meta class\ninterface IFormBaseFieldMeta extends IFieldBaseMetaProps {\n    model?: DataModelClass\n    formField?: React.ComponentType<IFormBaseFieldProps>\n\n    getInstance: (values: FormikValues) => any // for form factory to loop over fieldmeta and obtain field's data instance\n    getInstanceDataFromFormikValues: (formikValues: FormikValues) => any // required because getInstance() depends on it\n}\n\nexport class FormBaseFieldMeta implements IFormBaseFieldMeta {\n    fieldName: string\n    label: string\n\n    model?: DataModelClass\n    formField: React.ComponentType<IFormBaseFieldProps>\n\n    isDynamic?: boolean;\n    dynamicLimit?: number;\n    getInstanceDataFromFormikValues: (formikValues: FormikValues) => any\n\n    constructor(props: IFieldBaseMetaProps) {\n        this.fieldName = props.fieldName;\n        this.label = props.label;\n\n        this.isDynamic = props.isDynamic;\n        this.dynamicLimit = props.dynamicLimit;\n\n        if (props.getInstanceDataFromFormikValues) {\n            this.getInstanceDataFromFormikValues = props.getInstanceDataFromFormikValues;\n        }\n        else {\n            this.getInstanceDataFromFormikValues = (values: FormikValues) => {\n                if (!(values && values[this.fieldName])) {\n                    alert(\"Oops! Something might go wrong. Info: at class FormBaseFieldMeta.\")\n                    console.error(\"values =\", values, \" this.fieldName =\", this.fieldName);\n                    return (this.isDynamic) ? [] : \"\";\n                }\n                else {\n                    if (this.isDynamic && !Array.isArray(values[this.fieldName])) {\n                        alert(\"Oops! Something might go wrong. Info: at class FormBaseFieldMeta.\")\n                        console.error(\"isDynamic=true, but the value is not an array:\");\n                        console.error(\"values =\", values, \" this.fieldName =\", this.fieldName);\n                    }\n                    return values[this.fieldName];\n                }\n            }\n        }\n\n        this.formField = FormInputField;\n    }\n\n    getInstance(values: FormikValues) {\n        const model = this.model;\n        if (model) {\n            if (this.isDynamic) {\n\n                return this.getInstanceDataFromFormikValues(values).map((instanceData: any) => new model(instanceData))\n            }\n            else {\n                return new model(values[this.fieldName]);\n            }\n        }\n\n        // assume field values are plain string/num or other basic types\n        return values[this.fieldName];\n    }\n}","import React, { Component } from \"react\";\n\n/** Components */\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\n// mdc-react input\nimport \"@material/react-text-field/dist/text-field.css\";\nimport TextField, { Input } from \"@material/react-text-field\";\n// formik\nimport {\n    Field, FieldProps,\n    ErrorMessage,\n} from \"formik\";\n// input field\nimport { IFormInputFieldProps } from \"./form-input-field-meta\";\nimport { InputFieldType } from \"../form-base-field/form-base-field-meta\";\n\nexport class FormInputField extends Component<IFormInputFieldProps> {\n    render() {\n        return (\n            <div className=\"FormInputField\">\n                <Field\n                    name={this.props.fieldName}\n                    render={({ field, form }: FieldProps<number | string>) => (\n                        <TextField\n                            label={this.props.label}\n                            onTrailingIconSelect={this.props.onTrailingIconSelect}\n                            trailingIcon={this.props.onTrailingIconSelect && <MaterialIcon role=\"button\" icon=\"clear\" />}\n                        >\n                            <Input\n                                type={this.props.type || InputFieldType.TEXT}\n                                inputType=\"input\"\n                                {...field}\n                            />\n                        </TextField>\n                    )}\n                />\n                <ErrorMessage name={this.props.fieldName} />\n            </div>\n        );\n    }\n}","import React, { Component } from \"react\";\n\n/** Components */\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n// data model\nimport { DataModelClass, DataModelInstance } from \"../../store/data-model/base-model\";\n// formik\nimport {\n    Formik,\n    Form,\n    FormikValues,\n    FormikErrors,\n    FormikTouched\n} from \"formik\";\n// base field\nimport { FormBaseFieldMeta } from \"./form-base-field/form-base-field-meta\";\n\nexport enum ActionButtonType {\n    SUBMIT = \"submit\",\n    BUTTON = \"button\"\n}\n\nexport class FormActionButtonProps {\n    constructor(\n        public text: string = \"\",\n        public onClick?: (event: any) => void,\n        public type?: ActionButtonType\n    ) { }\n}\n\nexport interface IFormFactoryProps<IDataModel> {\n    onSubmitSuccess?: () => void;\n\n    initialInstance?: DataModelInstance<IDataModel>;\n    enforcedInstanceData?: any;\n    model?: DataModelClass;\n    actionButtonPropsList: Array<FormActionButtonProps>;\n    formFieldPropsList: Array<FormBaseFieldMeta>\n\n    onSubmit?: (\n        values: FormikValues,\n        { setSubmitting }: { setSubmitting: Function }\n    ) => void;\n    validate?: (values: FormikValues) => FormikErrors<FormikValues>;\n\n    createInstanceTriggerAction?: (\n        instance: IDataModel,\n        successCallback?: Function,\n        finalCallback?: Function,\n    ) => void;\n    updateInstanceTriggerAction?: (\n        instance: IDataModel,\n        successCallback?: Function,\n        finalCallback?: Function,\n    ) => void;\n}\n\nexport class FormFactory<DataModel> extends Component<\n    IFormFactoryProps<DataModel>\n    > {\n\n    initialInstance: DataModelInstance<any>;\n\n    constructor(props: IFormFactoryProps<DataModel>) {\n        super(props);\n\n        // guarantee this.initialInstance\n        if (this.props.model && !this.props.initialInstance) {\n            const model = this.props.model;\n            this.initialInstance = new model({});\n        }\n        else {\n            this.initialInstance = this.props.initialInstance;\n        }\n    }\n\n    onSubmit = (\n        values: FormikValues,\n        { setSubmitting }: { setSubmitting: Function }\n    ) => {\n        console.log(\"submit values =\", values); setSubmitting(false);\n        // setSubmitting(true);\n        let instanceData: any = {};\n        for (let fieldProps of this.props.formFieldPropsList) {\n            const keyName = fieldProps.fieldName;\n            instanceData[keyName] = fieldProps.getInstance(values);\n        }\n\n        // packaging\n        const model = this.props.model;\n        if (model && this.props.createInstanceTriggerAction && this.props.updateInstanceTriggerAction) {\n            // a create / update form is assumed\n\n            const instance = new model({\n                uuid: this.initialInstance.uuid,\n                ...instanceData,\n                ...this.props.enforcedInstanceData\n            })\n            console.log(\"instanceData =\", instanceData);\n            console.log(\"instance =\", instance);\n\n            // dispatch API request\n            if (!instance.uuid) {\n                console.log(\"ready to send create data\", instance);\n                this.props.createInstanceTriggerAction(instance, this.props.onSubmitSuccess, () => setSubmitting(false));\n            } else {\n                console.log(\"ready to send update data\", instance);\n                this.props.updateInstanceTriggerAction(instance, this.props.onSubmitSuccess, () => setSubmitting(false));\n            }\n        }\n        else if (this.props.onSubmit) {\n            // if caller has customize onSubmit, then use it instead\n            this.props.onSubmit(values, { setSubmitting });\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"FormFactory\">\n                <Formik\n                    initialValues={this.initialInstance}\n                    validate={this.props.validate}\n                    onSubmit={this.onSubmit}\n                >\n                    {({\n                        values,\n                        isSubmitting\n                    }: {\n                        values: FormikValues,\n                        touched: FormikTouched<FormikValues>,\n                        [props: string]: any\n                    }) => (\n                            <Form>\n                                {this.props.formFieldPropsList.map((formFieldMeta: FormBaseFieldMeta, index: number) => (\n                                    <formFieldMeta.formField \n                                        key={index}\n                                        {...formFieldMeta}\n                                        formikValues={values}\n                                    />\n                                ) )}\n                                {this.props.actionButtonPropsList.map(\n                                    (actionButtonProps: FormActionButtonProps, index) => (\n                                        <Button\n                                            key={index}\n                                            type={actionButtonProps.type || ActionButtonType.BUTTON}\n                                            disabled={isSubmitting}\n                                            unelevated\n                                            onClick={actionButtonProps.onClick}\n                                            children={actionButtonProps.text}\n                                        />\n                                    )\n                                )}\n                            </Form>\n                        )}\n                </Formik>\n            </div>\n        );\n    }\n}\n","// base field\nimport { InputFieldType, FormBaseFieldMeta, IFormBaseFieldProps, IFieldBaseMetaProps } from \"../form-base-field/form-base-field-meta\";\n// input field\nimport { FormInputField } from \"./form-input-field\";\n\n\n// API for caller to new props for input field\nexport interface IFormInputFieldProps extends IFormBaseFieldProps {\n    type?: InputFieldType\n    onTrailingIconSelect?: () => void\n}\n\n// for defining meta\nexport interface IFormInputFieldMetaProps extends IFieldBaseMetaProps {\n    type?: InputFieldType\n    onTrailingIconSelect?: () => void\n}\n\nexport class FormInputFieldMeta extends FormBaseFieldMeta {\n    type?: InputFieldType\n    onTrailingIconSelect?: () => void\n\n    constructor({\n        type,\n        onTrailingIconSelect,\n        ...props\n    }: IFormInputFieldMetaProps) {\n        super(props)\n        this.type = type;\n        this.onTrailingIconSelect = onTrailingIconSelect;\n\n        this.formField = FormInputField;\n    }\n}","import React from \"react\";\n\nimport { FormikValues } from \"formik\";\nimport { RestApiService } from \"../../utils/rest-api\";\nimport { AuthenticationService } from \"../../utils/auth\";\nimport { FormBaseFieldMeta, InputFieldType } from \"../form-factory/form-base-field/form-base-field-meta\";\nimport { FormInputFieldMeta } from \"../form-factory/form-input-field/form-input-field-meta\";\nimport { FormActionButtonProps, ActionButtonType, FormFactory } from \"../form-factory/form-factory\";\n\ninterface ILoginFormProps {\n    registerLoginSuccess: (userName: string, apiToken: string, avatarUrl: string) => void;\n    onLoginSuccess: () => void\n}\n\nexport const LoginForm = (props: ILoginFormProps) => {\n\n    const formFieldPropsList: Array<FormBaseFieldMeta> = [\n        new FormInputFieldMeta({\n            fieldName: \"username\",\n            label: \"Username\"\n        }),\n        new FormInputFieldMeta({\n            fieldName: \"password\",\n            label: \"Password\",\n            type: InputFieldType.PASSWORD\n        }),\n    ];\n    const actionButtonPropsList: Array<FormActionButtonProps> = [\n        new FormActionButtonProps(\"Login\", undefined, ActionButtonType.SUBMIT)\n    ];\n\n    const onSubmitLoginForm = async (\n        values: FormikValues,\n        { setSubmitting }: { setSubmitting: Function }\n    ) => {\n        setSubmitting(false);\n        console.log(\"values =\", values);\n\n        try {\n            // post to get login token\n            const res = await fetch(`${RestApiService.state.apiBaseUrl}api-token-auth/`, {\n                method: \"POST\",\n                mode: \"cors\",\n                credentials: \"omit\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify(values)\n            });\n\n            if (!res.ok) {\n                console.log(\"INFO: server res =\", res);\n                throw Error(res.statusText)\n            }\n\n            const parsedJsonResponse = await res.json();\n            // set login token\n            AuthenticationService.state.apiLoginToken = parsedJsonResponse.token;\n            // set redux auth store isLogin state --- have to write action and reducer.\n            props.registerLoginSuccess(values.username, parsedJsonResponse.token, parsedJsonResponse.avatar_url);\n\n            props.onLoginSuccess();\n        }\n        catch (err) {\n            alert(\"Oops! Login failed.\");\n            console.error(\"ERROR: login failed. See error message:\");\n            console.error(err);\n        }\n    };\n\n    return (\n        <div className=\"loginForm\">\n            <FormFactory\n    \n                formFieldPropsList={formFieldPropsList}\n                actionButtonPropsList={actionButtonPropsList}\n    \n                onSubmit={onSubmitLoginForm}\n            />\n        </div>\n    )\n}","import React, { Component } from \"react\";\nimport { withRouter, RouteComponentProps, Redirect } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch, AnyAction } from \"redux\";\nimport { IRootState } from \"../../store/types\";\nimport { IUpdateAuthState } from \"../../store/auth/types\";\nimport { SuccessLoginAuth } from \"../../store/auth/actions\";\nimport { CompanyActions, Company } from \"../../store/data-model/company\";\nimport {\n    ApplicationActions,\n    Application\n} from \"../../store/data-model/application\";\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\n\n/** Components */\nimport { SocialAuthButtonContainer } from \"../../components/social-auth/social-auth-button\";\n// form\nimport {\n    FormFactory,\n    FormActionButtonProps,\n    IFormFactoryProps,\n    ActionButtonType\n} from \"../../components/form-factory/form-factory\";\nimport { FormInputFieldMeta } from \"../../components/form-factory/form-input-field/form-input-field-meta\";\nimport { InputFieldType } from \"../../components/form-factory/form-base-field/form-base-field-meta\";\nimport { ErrorMessage, FormikValues, FormikErrors } from \"formik\";\n    import { LoginForm } from \"../../components/social-auth/login-form\";\n// api\nimport { AuthenticationService } from \"../../utils/auth\";\nimport { RestApiService } from \"../../utils/rest-api\";\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n\n\nlet styles = {\n    backgroundColor: \"purple\",\n    color: \"white\"\n};\n\ninterface ILandingPageProps extends RouteComponentProps {\n    auth: IUpdateAuthState;\n    registerLocalLoginSuccess: (userName: string, apiToken: string, avatarUrl: string) => void;\n    listApplication: () => void\n    listCompany: () => void\n}\n\nclass LandingPage extends Component<ILandingPageProps> {\n    formFactoryProps: any;\n\n    constructor(props: ILandingPageProps) {\n        super(props);\n    }\n\n    onLoginSuccess = () => {\n        // request com & app list (dispatch)\n        this.props.listApplication();\n        this.props.listCompany();\n    }\n\n    render() {\n        return (\n            <div className=\"LandingPage\" style={styles}>\n                {/** redirect logged in user to private routes */\n                this.props.auth.isLogin && <Redirect to=\"/home/\" />}\n                \n                <h1>Appl Tracky</h1>\n\n                <SocialAuthButtonContainer />\n\n                <h2>Or login locally (admin only):</h2>\n                <LoginForm \n                    registerLoginSuccess={this.props.registerLocalLoginSuccess}\n                    onLoginSuccess={this.onLoginSuccess}\n                />\n\n                <hr />\n                \n                <Button\n                    href=\"https://github.com/rivernews/appl-tracky-spa\"\n                    target=\"_blank\"\n                    unelevated\n                    icon={\n                        <MaterialIcon hasRipple icon=\"code\" />\n                    }\n                >\n                    Github Repository\n                </Button>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: IRootState) => ({\n    auth: state.auth\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>) => {\n    // actionName = (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {\n        registerLocalLoginSuccess: (userName: string, apiToken: string, avatarUrl: string) =>\n            dispatch(SuccessLoginAuth(userName, \"\", apiToken, avatarUrl, true)),\n        listApplication: () =>\n            dispatch(\n                ApplicationActions[CrudType.LIST][\n                    RequestStatus.TRIGGERED\n                ].action(new Application({}))\n            ),\n        listCompany: () =>\n            dispatch(\n                CompanyActions[CrudType.LIST][\n                    RequestStatus.TRIGGERED\n                ].action(new Company({}))\n            )\n    };\n};\n\nexport const LandingPageContainer = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(LandingPage)\n);\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\n\n/** Redux */\nimport { Company } from \"../../store/data-model/company\";\n\n/** Components */\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc-react icon button\nimport '@material/react-icon-button/dist/icon-button.css';\nimport IconButton from '@material/react-icon-button';\n\ninterface ICompanyComponentProps {\n    company: Company;\n    onDeleteIconClicked?: (event: any) => void\n    onEditIconClicked?: (event: any) => void\n}\n\nexport class CompanyComponent extends Component<ICompanyComponentProps> {\n    render() {\n        const company = this.props.company;\n        return (\n            <div className=\"CompanyComponent\">\n                <p>\n                    <Link to={`/com-app/${company.uuid}/`}>\n                        {company.name}\n                    </Link>\n                    <IconButton onClick={this.props.onEditIconClicked}>\n                        <MaterialIcon hasRipple icon=\"edit\" />\n                    </IconButton>\n                    <IconButton onClick={this.props.onDeleteIconClicked}>\n                        <MaterialIcon hasRipple icon=\"delete\" />\n                    </IconButton>\n\n                    <br />\n\n                    {(company.hq_location.full_address) && <span>\n                        <strong>{company.hq_location.place_name || \"Location\"}:</strong> {company.hq_location.full_address}\n                    </span>}\n\n                    <br />\n                    \n                    {(company.home_page.url) && <span>\n                        <strong>Company Website: </strong>\n                        {(company.home_page.url) && <a target=\"_blank\" href={\n                            (company.home_page.url && company.home_page.url.includes(\"//\")) ?\n                                company.home_page.url :\n                                `//${company.home_page.url}`\n                        }>\n                            {company.home_page.text || \"Link\"}\n                        </a>}\n                    </span>}\n                    \n                    <br />\n                </p>\n            </div>\n        );\n    }\n}\n","import { RestApiReduxFactory } from \"../rest-api-redux-factory\";\nimport { BaseModel, IBaseModelProps, IRelationship } from \"./base-model\";\nimport { ApplicationStatusLink } from \"./application-status-link\";\n\ninterface IApplicationStatusProps {\n    text?: string;\n    application?: IRelationship;\n    applicationstatuslink_set?: Array<ApplicationStatusLink>\n    date?: string;\n    order?: number\n}\n\nexport class ApplicationStatus extends BaseModel {\n    public text: string;\n    public application: IRelationship;\n    // public applicationstatuslink_set: Array<ApplicationStatusLink>\n    public applicationstatuslink_set: Array<ApplicationStatusLink>\n    public date: string;\n    public order: number;\n\n    constructor({\n        text = \"\",\n        application = \"\",\n        // applicationstatuslink_set = [],\n        applicationstatuslink_set = [],\n        date = \"\",\n        order = 0,\n        ...args\n    }: IApplicationStatusProps & IBaseModelProps) {\n        super(args);\n        this.text = text;\n        this.application = application;\n        // this.applicationstatuslink_set = applicationstatuslink_set;\n        this.applicationstatuslink_set = applicationstatuslink_set;\n        this.date = date;\n        this.order = order;\n    }\n}\n\nconst initialApplicationStatusInstance = new ApplicationStatus({});\nconst ApplicationStatusRestApiRedux = RestApiReduxFactory<ApplicationStatus>(\n    \"application-statuses\",\n    initialApplicationStatusInstance\n);\nexport const ApplicationStatusActions = ApplicationStatusRestApiRedux.actions;\nexport const ApplicationStatusReducer = ApplicationStatusRestApiRedux.storeReducer;\nexport const ApplicationStatusSagas = ApplicationStatusRestApiRedux.sagas;\n","import { RestApiReduxFactory } from \"../rest-api-redux-factory\";\nimport { BaseModel, IBaseModelProps, IRelationship } from \"./base-model\";\nimport { Link } from \"./link\";\n\ninterface IApplicationStatusLinkProps {\n    application_status?: IRelationship;\n    link?: Link;\n}\n\nexport class ApplicationStatusLink extends BaseModel {\n    public application_status: IRelationship;\n    public link: Link;\n\n    constructor({\n        application_status = \"\",\n        link = new Link({}),\n        ...args\n    }: IApplicationStatusLinkProps & IBaseModelProps) {\n        super(args);\n        this.application_status = application_status;\n        this.link = link;\n    }\n}","import React from \"react\";\n\n/** Components */\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n// mdc-react icon button\nimport '@material/react-icon-button/dist/icon-button.css';\nimport IconButton from '@material/react-icon-button';\n// data model\nimport { DataModelClass } from \"../../../store/data-model/base-model\";\n// formik\nimport {\n    FieldArray,\n    ArrayHelpers,\n} from \"formik\";\n// base field\nimport { IFormBaseFieldProps } from \"./form-base-field-meta\";\n\ninterface IFormBaseDyanmicFieldControllsProps {\n    index: number\n    formikArrayHelpers: ArrayHelpers\n}\n\nconst FormBaseDynamicFieldControlls = (props: IFormBaseDyanmicFieldControllsProps) => {\n\n    const deleteField = () => {\n        props.formikArrayHelpers.remove(props.index);\n    }\n\n    return (\n        <div className=\"FormBaseDynamicFieldControlls\">\n            <IconButton onClick={deleteField}>\n                <MaterialIcon hasRipple icon=\"delete\" />\n            </IconButton>\n        </div>\n    )\n}\n\nconst BaseDynamicFieldAddButton = (props: {\n    formikArrayHelpers: ArrayHelpers\n    model?: DataModelClass\n    label: string\n}) => {\n\n    const onAddClick = () => {\n        if (props.model) {\n            const model = props.model;\n            props.formikArrayHelpers.push(new model({}));\n        } else {\n            props.formikArrayHelpers.push({});\n        }\n    }\n\n    return (\n        <Button type=\"button\" onClick={onAddClick} children={`New ${props.label}`} />\n    )\n}\n\nexport const withFormBaseField = (FormFieldComponent: React.ComponentType<IFormBaseFieldProps>) => (props: IFormBaseFieldProps) => {\n\n    if (props.isDynamic && !props.formikValues) {\n        alert(\"Oops! Something's wrong.\");\n        throw Error(\"When `isDynamic` is true, you need to pass over `formikValues`.\");\n    }\n\n    const formikValues = props.formikValues;\n    const getInstanceDataFromFormikValues = props.getInstanceDataFromFormikValues;\n\n    return (\n        (props.isDynamic && getInstanceDataFromFormikValues && formikValues) ?\n            (<FieldArray\n                name={props.fieldName}\n                render={formikArrayHelpers => (\n                    <div className=\"FormApplicationStatusLinkFieldsContainer\">\n                        {getInstanceDataFromFormikValues(formikValues).map((instanceData: any, index: number) => (\n                            <div key={index} className=\"FormBaseDynamicField\">\n                                <FormFieldComponent\n                                    fieldName={`${props.fieldName}[${index}]`}\n                                    label={`${props.label} ${index}`}\n                                    formikValues={props.formikValues}\n                                    getInstanceDataFromFormikValues={props.getInstanceDataFromFormikValues}\n                                />\n                                <FormBaseDynamicFieldControlls\n                                    index={index}\n                                    formikArrayHelpers={formikArrayHelpers}\n                                />\n                            </div>\n                        ))}\n\n                        <BaseDynamicFieldAddButton\n                            formikArrayHelpers={formikArrayHelpers}\n                            label={props.label}\n                            model={props.model}\n                        />\n                    </div>\n                )}\n            />)\n            :\n            (<FormFieldComponent\n                fieldName={props.fieldName}\n                label={props.label}\n                formikValues={props.formikValues}\n                getInstanceDataFromFormikValues={props.getInstanceDataFromFormikValues}\n            />)\n    )\n}","/** Components */\n// base field\nimport { withFormBaseField } from \"../form-base-field/form-base-field\";\n// link field\nimport { FormLinkFieldComponent } from \"./form-link-field-component\";\n\nexport const FormLinkField = withFormBaseField(FormLinkFieldComponent);\n","import React, { Component } from \"react\";\n\n/** Components */\n// mdc-react input\nimport \"@material/react-text-field/dist/text-field.css\";\n\nimport { FormInputFieldMeta } from \"../form-input-field/form-input-field-meta\";\nimport { FormInputField } from \"../form-input-field/form-input-field\";\nimport { IFormBaseFieldProps } from \"../form-base-field/form-base-field-meta\";\n\nexport interface IFormLinkFieldComponentProps extends IFormBaseFieldProps {\n}\n\nexport class FormLinkFieldComponent extends Component<IFormLinkFieldComponentProps> {\n\n    textInputFieldMeta: FormInputFieldMeta;\n    urlInputFieldMeta: FormInputFieldMeta;\n\n    constructor(props: IFormLinkFieldComponentProps) {\n        super(props)\n\n        this.textInputFieldMeta = new FormInputFieldMeta({\n            fieldName: `${this.props.fieldName}.text`,\n            label: \"Description\"\n        });\n        this.urlInputFieldMeta = new FormInputFieldMeta({\n            fieldName: `${this.props.fieldName}.url`,\n            label: \"Link url\"\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"FormLinkField\">\n                {this.props.label && <h4>{this.props.label}</h4>}\n                <FormInputField\n                    {...this.textInputFieldMeta}\n                />\n\n                <FormInputField\n                    {...this.urlInputFieldMeta}\n                />\n            </div>\n        );\n    }\n}","// data model\nimport { Link } from \"../../../store/data-model/link\";\n\n/** Components */\n// base field\nimport { IFieldBaseMetaProps, FormBaseFieldMeta } from \"../form-base-field/form-base-field-meta\";\nimport { FormLinkField } from \"./form-link-field\";\n\nexport class FormLinkFieldMeta extends FormBaseFieldMeta {\n\n    constructor(props: IFieldBaseMetaProps) {\n        super(props)\n        this.model = Link;\n        this.formField = FormLinkField;\n    }\n}\n","/** Components */\n// link field\nimport { FormApplicationStatusLinkFieldComponent } from \"./form-application-status-link-field-component\";\n// base dynamic field\nimport { withFormBaseField } from \"../form-base-field/form-base-field\";\n\nexport const FormApplicationStatusLinkField = withFormBaseField(FormApplicationStatusLinkFieldComponent);","import React, { Component } from \"react\";\n\n/** Components */\n// mdc-react input\nimport \"@material/react-text-field/dist/text-field.css\";\n// link form\nimport { FormLinkFieldMeta } from \"../form-link-field/form-link-field-meta\";\nimport { FormLinkField } from \"../form-link-field/form-link-field\";\nimport { IFormBaseFieldProps } from \"../form-base-field/form-base-field-meta\";\n\nexport interface IFormApplicationStatusLinkFieldComponentProps extends IFormBaseFieldProps {\n}\n\nexport class FormApplicationStatusLinkFieldComponent extends Component<IFormApplicationStatusLinkFieldComponentProps> {\n\n    linkFieldProps: FormLinkFieldMeta;\n\n    constructor(props: IFormApplicationStatusLinkFieldComponentProps) {\n        super(props)\n\n        this.linkFieldProps = new FormLinkFieldMeta({\n            fieldName: `${this.props.fieldName}.link`,\n            label: ``,\n            isDynamic: false, // Link is a one-to-one field in application status link model\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"FormApplicationStatusLinkField\">\n                {this.props.label && <h4>{this.props.label}</h4>}\n                <FormLinkField\n                    {...this.linkFieldProps}\n                    formikValues={this.props.formikValues}\n                    getInstanceDataFromFormikValues={this.props.getInstanceDataFromFormikValues}\n                />\n            </div>\n        );\n    }\n}","// data model\nimport { ApplicationStatusLink } from \"../../../store/data-model/application-status-link\";\n\n/** Components */\nimport { FormBaseFieldMeta, IFieldBaseMetaProps } from \"../form-base-field/form-base-field-meta\";\nimport { FormApplicationStatusLinkField } from \"./form-application-status-link-field\";\n\nexport class FormApplicationStatusLinkFieldMeta extends FormBaseFieldMeta {\n\n    constructor(props: IFieldBaseMetaProps) {\n        super(props)\n        this.model = ApplicationStatusLink;\n        this.formField = FormApplicationStatusLinkField;\n    }\n}\n","import React, { Component } from \"react\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\nimport { IObjectStore, IObjectAction } from \"../../store/rest-api-redux-factory\";\n// data models\nimport {\n    ApplicationStatus,\n    ApplicationStatusActions\n} from \"../../store/data-model/application-status\";\nimport {\n    ApplicationStatusLink,\n} from \"../../store/data-model/application-status-link\";\nimport { Application } from \"../../store/data-model/application\";\n\n/** Rest API */\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\n\n/** Components */\nimport {\n    FormFactory,\n    FormActionButtonProps,\n    IFormFactoryProps,\n    ActionButtonType\n} from \"../form-factory/form-factory\";\nimport {FormInputFieldMeta } from \"../form-factory/form-input-field/form-input-field-meta\";\nimport { InputFieldType, FormBaseFieldMeta } from \"../form-factory/form-base-field/form-base-field-meta\";\n// form fields\nimport { FormLinkFieldMeta } from \"../form-factory/form-link-field/form-link-field-meta\";\nimport { FormApplicationStatusLinkFieldMeta } from \"../form-factory/form-application-status-link-field/form-application-status-link-field-meta\";\nimport { ErrorMessage, FormikValues, FormikErrors } from \"formik\";\n\ninterface IApplicationStatusFormComponentProps extends RouteComponentProps {\n    applicationStatus?: ApplicationStatus; // for update form\n    onSubmitSuccess?: () => void;\n    onCancel: () => void;\n\n    /** redux */\n    application: Application;\n    applicationStatusStore: IObjectStore<ApplicationStatus>\n    createApplicationStatus: (\n        applicationStatusFormData: ApplicationStatus,\n        successCallback?: Function,\n        finalCallback?: Function,\n    ) => void;\n    updateApplicationStatus: (\n        applicationStatusFormData: ApplicationStatus,\n        successCallback?: Function,\n        finalCallback?: Function,\n    ) => void;\n}\n\nclass ApplicationStatusFormComponent extends Component<\n    IApplicationStatusFormComponentProps\n> {\n    formFieldPropsList: Array<FormBaseFieldMeta>;\n    actionButtonPropsList: Array<FormActionButtonProps>;\n\n    constructor(props: IApplicationStatusFormComponentProps) {\n        super(props);\n\n        this.formFieldPropsList = [\n            new FormInputFieldMeta({\n                fieldName: \"text\",\n                label: \"Status*\",\n            }),\n            new FormInputFieldMeta({\n                fieldName: \"date\",\n                label: \"Date\",\n                type: InputFieldType.DATE\n            }),\n            new FormApplicationStatusLinkFieldMeta({\n                fieldName: `applicationstatuslink_set`,\n                label: `Status Link`,\n                isDynamic: true,\n            }),\n        ];\n\n        this.actionButtonPropsList = [\n            new FormActionButtonProps(\n                this.props.applicationStatus ?\n                \"Save Status\":\n                \"Create Status\",\n                undefined,\n                ActionButtonType.SUBMIT\n            ),\n            new FormActionButtonProps(\"Cancel\", this.props.onCancel)\n        ];\n    }\n\n    validate = (values: FormikValues) => {\n        let errors: FormikErrors<any> = {};\n        if (!values.text) {\n            errors.text = \"Required\";\n        }\n        if (!values.date) {\n            errors.date = \"Please give a valid date\";\n        }\n        return errors;\n    };\n\n    render() {\n        return (\n            <div className=\"ApplicationStatusFormComponent\">\n                <FormFactory\n                    model={ApplicationStatus}\n                    initialInstance={new ApplicationStatus({\n                        ...this.props.applicationStatus,\n                    })}\n                    enforcedInstanceData={{\n                        application: this.props.application.uuid\n                    }}\n        \n                    validate={this.validate}\n                    \n                    formFieldPropsList={this.formFieldPropsList}\n                    actionButtonPropsList={this.actionButtonPropsList}\n        \n                    createInstanceTriggerAction={this.props.createApplicationStatus}\n                    updateInstanceTriggerAction={this.props.updateApplicationStatus}\n\n                    onSubmitSuccess={this.props.onSubmitSuccess}\n                />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    // prop: store.prop\n    applicationStatusStore: store.applicationStatus\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<ApplicationStatus> | IObjectAction<ApplicationStatusLink>>) => {\n    // actionName: (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {\n        createApplicationStatus: (\n            applicationStatusFormData: ApplicationStatus,\n            successCallback?: Function,\n            failureCallback?: Function,\n        ) =>\n            dispatch(\n                ApplicationStatusActions[CrudType.CREATE][\n                    RequestStatus.TRIGGERED\n                ].action(applicationStatusFormData, successCallback, undefined, failureCallback)\n            )\n        ,\n        updateApplicationStatus: (\n            applicationStatusFormData: ApplicationStatus,\n            successCallback?: Function,\n            failureCallback?: Function,\n        ) =>\n            dispatch(\n                ApplicationStatusActions[CrudType.UPDATE][\n                    RequestStatus.TRIGGERED\n                ].action(applicationStatusFormData, successCallback, undefined, failureCallback)\n            )\n        ,\n    };\n};\n\nexport const ApplicationStatusFormComponentContainer = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(ApplicationStatusFormComponent)\n);\n","import React, { Component } from \"react\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\nimport {\n    IObjectAction,\n} from \"../../store/rest-api-redux-factory\";\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\n\n/** data model */\nimport {\n    ApplicationStatus,\n    ApplicationStatusActions\n} from \"../../store/data-model/application-status\";\nimport { Application } from \"../../store/data-model/application\";\n\n/** Components */\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc-react icon button\nimport \"@material/react-icon-button/dist/icon-button.css\";\nimport IconButton from \"@material/react-icon-button\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\nimport { ApplicationStatusFormComponentContainer } from \"./application-status-form-component\";\n\ninterface IApplicationStatusComponentProps extends RouteComponentProps {\n    applicationStatus?: ApplicationStatus;\n    application?: Application; // needed by form\n    isOnlyForm?: boolean; // needed by add-button\n    deleteApplicationStatus: (\n        applicationStatusToDelete: ApplicationStatus,\n        callback?: Function\n    ) => void;\n}\n\ninterface IApplicationStatusComponentState {\n    isFormOpened: boolean;\n}\n\nclass ApplicationStatusComponent extends Component<\n    IApplicationStatusComponentProps,\n    IApplicationStatusComponentState\n> {\n    state = {\n        isFormOpened: false\n    };\n\n    render() {\n        return (\n            <div className=\"ApplicationStatusComponent\">\n                {(this.state.isFormOpened || this.props.isOnlyForm) && this.props.application ? (\n                    this.renderFormController(\n                        this.props.application,\n                        this.props.applicationStatus\n                    )\n                ) : this.props.applicationStatus ? (\n                    this.renderDisplay(this.props.applicationStatus)\n                ) : (\n                    <span>\n                        Nothing to render: no application status provided so\n                        cannot display; no application provided so form for\n                        create/update are not allowed.\n                    </span>\n                )}\n            </div>\n        );\n    }\n\n    renderDisplay = (applicationStatus: ApplicationStatus) => {\n        return (\n            <div className=\"ApplicationStatusComponent\">\n                <p>\n                    <span>Status: {applicationStatus.text}</span>\n                    <IconButton\n                        onClick={() => {\n                            console.log(\"application status component: edit button clicked.\")\n                            this.setState({isFormOpened: true});\n                        }}\n                    >\n                        <MaterialIcon hasRipple icon=\"edit\" />\n                    </IconButton>\n                    <IconButton\n                        onClick={() =>\n                            this.props.deleteApplicationStatus(\n                                applicationStatus\n                            )\n                        }\n                    >\n                        <MaterialIcon hasRipple icon=\"delete\" />\n                    </IconButton>\n                    <br />\n                    <span>{applicationStatus.date}</span>\n                    <br />\n                    {applicationStatus.applicationstatuslink_set.map(\n                        applicationStatusLink => {\n                            return (\n                                applicationStatusLink &&\n                                applicationStatusLink.link && (\n                                    <span key={applicationStatusLink.uuid}>\n                                        <a\n                                            href={\n                                                (\n                                                    applicationStatusLink.link.url && \n                                                    applicationStatusLink.link.url.includes(\"//\")\n                                                ) ?\n                                                applicationStatusLink.link.url :\n                                                `//${applicationStatusLink.link.url}`\n                                            }\n                                            target=\"_blank\"\n                                        >\n                                            {applicationStatusLink.link.text}\n                                        </a>{\" \"}\n                                        |{\" \"}\n                                    </span>\n                                )\n                            );\n                        }\n                    )}\n                </p>\n            </div>\n        );\n    };\n\n    renderFormController = (\n        application: Application,\n        applicationStatus?: ApplicationStatus\n    ) => {\n        return (\n            <div className=\"application-status-form-controller\">\n                {/* new application status form */}\n                {!this.state.isFormOpened ? (\n                    <Button\n                        onClick={clickEvent => {\n                            this.setState({\n                                isFormOpened: true\n                            });\n                        }}\n                        unelevated\n                        icon={<MaterialIcon hasRipple icon=\"add\" />}\n                    >\n                        Add New Status\n                    </Button>\n                ) : (\n                    <div className=\"application-component__status-form\">\n                        <h3>\n                            Add new status to application for{\" \"}\n                            {application.position_title}{\" \"}\n                        </h3>\n                        <ApplicationStatusFormComponentContainer\n                            application={application}\n                            applicationStatus={applicationStatus}\n                            onCancel={() => {\n                                this.setState({\n                                    isFormOpened: false\n                                });\n                            }}\n                            onSubmitSuccess={() => {\n                                this.setState({\n                                    isFormOpened: false\n                                });\n                            }}\n                        />\n                    </div>\n                )}\n            </div>\n        );\n    };\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    // prop: store.prop\n});\n\nconst mapDispatchToProps = (\n    dispatch: Dispatch<IObjectAction<ApplicationStatus>>\n) => {\n    // actionName: (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {\n        deleteApplicationStatus: (\n            applicationStatusToDelete: ApplicationStatus,\n            callback?: Function\n        ) =>\n            dispatch(\n                ApplicationStatusActions[CrudType.DELETE][\n                    RequestStatus.TRIGGERED\n                ].action(applicationStatusToDelete, callback)\n            )\n    };\n};\n\nexport const ApplicationStatusComponentContainer = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(ApplicationStatusComponent)\n);\n","import React, { Component } from \"react\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\nimport {\n    IObjectStore,\n    IObjectAction\n} from \"../../store/rest-api-redux-factory\";\n// data models\nimport { Company } from \"../../store/data-model/company\";\nimport {\n    Application,\n    ApplicationActions\n} from \"../../store/data-model/application\";\n\n/** Components */\nimport {\n    FormFactory,\n    FormActionButtonProps,\n    ActionButtonType\n} from \"../form-factory/form-factory\";\n// form field\nimport { FormBaseFieldMeta } from \"../form-factory/form-base-field/form-base-field-meta\";\nimport { FormInputFieldMeta } from \"../form-factory/form-input-field/form-input-field-meta\";\nimport { FormLinkFieldMeta } from \"../form-factory/form-link-field/form-link-field-meta\";\n// formik\nimport { FormikValues, FormikErrors } from \"formik\";\n\ninterface IApplicationFormComponentProps {\n    application?: Application;\n    onCancel: (event: any) => void;\n    onSubmitSuccess?: () => void;\n\n    company: Company;\n    /** redux */\n    applicationStore: IObjectStore<Application>;\n    createApplication: (\n        applicationFormData: Application,\n        successCallback?: Function,\n        finalCallback?: Function,\n    ) => void;\n    updateApplication: (\n        applicationFormData: Application,\n        successCallback?: Function,\n        finalCallback?: Function,\n    ) => void;\n}\n\nclass ApplicationFormComponent extends Component<\n    IApplicationFormComponentProps\n> {\n\n    formFieldPropsList: Array<FormBaseFieldMeta>;\n    actionButtonPropsList: Array<FormActionButtonProps>;\n\n    constructor(props: IApplicationFormComponentProps) {\n        super(props);\n\n        this.formFieldPropsList = [\n            new FormInputFieldMeta({\n                fieldName: \"position_title\",\n                label: \"Position Title*\"\n            }),\n            new FormLinkFieldMeta({\n                fieldName: \"job_description_page\",\n                label: \"Job Description Link\",\n            }),\n            new FormLinkFieldMeta({\n                fieldName: \"job_source\",\n                label: \"Job Source Link\",\n            }),\n        ];\n        this.actionButtonPropsList = [\n            new FormActionButtonProps(\n                this.props.company ? \"Save Application\" : \"Create Application\",\n                undefined,\n                ActionButtonType.SUBMIT\n            ),\n            new FormActionButtonProps(\"Cancel\", this.props.onCancel)\n        ]\n    }\n\n    validateAppForm = (values: FormikValues) => {\n        let errors: FormikErrors<any> = {};\n        if (!values.position_title) {\n            errors.position_title = \"Required\";\n        }\n\n        // if (\n        //     !/^https*\\:\\/\\/.+$/i.test(\n        //         values.application__job_description_page__url\n        //     )\n        // ) {\n        //     errors.application__job_description_page__url =\n        //         \"Please start by http:// or https://\";\n        // }\n        // if (!/^https*\\:\\/\\/.+$/i.test(values.application__job_source__url)) {\n        //     errors.application__job_source__url =\n        //         \"Please start by http:// or https://\";\n        // }\n        return errors;\n    };\n\n    render() {\n        return (\n            <div className=\"ApplicationFormComponent\">\n                {/* <FormFactory {...this.formFactoryProps} /> */}\n                <FormFactory\n                    model={Application}\n                    initialInstance={new Application({\n                        ...this.props.application,\n                    })}\n                    enforcedInstanceData={{\n                        user_company: this.props.company.uuid\n                    }}\n        \n                    validate={this.validateAppForm}\n                    \n                    formFieldPropsList={this.formFieldPropsList}\n                    actionButtonPropsList={this.actionButtonPropsList}\n        \n                    createInstanceTriggerAction={this.props.createApplication}\n                    updateInstanceTriggerAction={this.props.updateApplication}\n\n                    onSubmitSuccess={this.props.onSubmitSuccess}\n                />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    applicationStore: store.application\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<Application>>) => {\n    return {\n        createApplication: (\n            applicationFormData: Application,\n            successCallback?: Function,\n            finalCallback?: Function,\n        ) =>\n            dispatch(\n                ApplicationActions[CrudType.CREATE][\n                    RequestStatus.TRIGGERED\n                ].action(applicationFormData, successCallback, undefined, finalCallback)\n            )\n        ,\n        updateApplication: (\n            applicationFormData: Application,\n            successCallback?: Function,\n            finalCallback?: Function,\n        ) =>\n            dispatch(\n                ApplicationActions[CrudType.UPDATE][\n                    RequestStatus.TRIGGERED\n                ].action(applicationFormData, successCallback, undefined, finalCallback)\n            )\n        ,\n    };\n};\n\nexport const ApplicationFormComponentContainer = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ApplicationFormComponent);\n","import React, { Component } from \"react\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport {\n    Application,\n    ApplicationActions\n} from \"../../store/data-model/application\";\nimport { IRootState } from \"../../store/types\";\nimport { IObjectAction } from \"../../store/rest-api-redux-factory\";\nimport { Dispatch } from \"redux\";\n\n/** data model */\nimport { ApplicationStatus } from \"../../store/data-model/application-status\";\nimport { Company } from \"../../store/data-model/company\";\n\n/** rest api */\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\n\n/** Components */\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\nimport IconButton from \"@material/react-icon-button\";\nimport { ApplicationStatusComponentContainer } from \"../application-status/application-status-component\";\nimport { ApplicationFormComponentContainer } from \"./application-form-component\";\n\n/** Types */\ninterface IApplicationComponentProps {\n    application?: Application;\n\n    /** application form */\n    company?: Company;\n\n    isOnlyForm?: boolean;\n\n    applicationStatusList?: Array<ApplicationStatus>;\n    isShowApplicationStatuses?: boolean;\n\n    /** redux */\n    deleteApplication: (\n        applicationToDelete: Application,\n        callback?: Function\n    ) => void;\n}\n\ninterface IApplicationComponentState {\n    isFormOpened: boolean;\n}\n\n/** Main Class */\nexport class ApplicationComponent extends Component<\n    IApplicationComponentProps,\n    IApplicationComponentState\n> {\n    state = {\n        isFormOpened: false\n    };\n\n    render() {\n        return (\n            <div className=\"application-component\">\n                {this.state.isFormOpened || this.props.isOnlyForm\n                    ? this.renderApplicationFormController()\n                    : this.props.application &&\n                      Array.isArray(this.props.applicationStatusList) &&\n                      this.renderApplicationDisplay(\n                          this.props.application,\n                          this.props.applicationStatusList\n                      )}\n            </div>\n        );\n    }\n\n    renderApplicationFormController = () => {\n        return (\n            this.props.company && ( // application create or udpate must have company associate with it.\n                <div className=\"application-form-controller\">\n                    {!this.state.isFormOpened ? (\n                        <Button\n                            onClick={clickEvent => {\n                                this.setState({\n                                    isFormOpened: true\n                                });\n                            }}\n                            unelevated\n                            icon={<MaterialIcon hasRipple icon=\"add\" />}\n                        >\n                            Add Application\n                        </Button>\n                    ) : (\n                        <ApplicationFormComponentContainer\n                            onCancel={event => {\n                                console.log(\"onCancel clicked\");\n                                this.setState({\n                                    isFormOpened: false\n                                });\n                            }}\n                            onSubmitSuccess={() =>\n                                this.setState({\n                                    isFormOpened: false\n                                })\n                            }\n                            company={this.props.company}\n                            application={this.props.application}\n                        />\n                    )}\n                </div>\n            )\n        );\n    };\n\n    renderApplicationDisplay = (\n        application: Application,\n        applicationStatusList: Array<ApplicationStatus>\n    ) => {\n        return (\n            <div className=\"application-component-display\">\n                {/* application display view */}\n                <h3>Application</h3>\n                <p>\n                    <span>\n                        <strong>Position:</strong> {application.position_title}\n                    </span>\n\n                    <IconButton\n                        onClick={() => {\n                            this.setState({\n                                isFormOpened: true // open form and close display\n                            });\n                        }}\n                    >\n                        <MaterialIcon hasRipple icon=\"edit\" />\n                    </IconButton>\n                    <IconButton\n                        onClick={() =>\n                            this.props.deleteApplication(application)\n                        }\n                    >\n                        <MaterialIcon hasRipple icon=\"delete\" />\n                    </IconButton>\n                    <br />\n                    <span>Application UUID: {application.uuid}</span>\n                    <br />\n                    {application.job_description_page.url && (\n                        <span>\n                            <strong>JD Page: </strong>\n                            <a\n                                target=\"_blank\"\n                                href={\n                                    application.job_description_page.url && application.job_description_page.url.includes(\"//\") ?\n                                    application.job_description_page.url :\n                                    `//${application.job_description_page.url}`\n                                }\n                            >\n                                {application.job_description_page.text || \"Link\"}\n                            </a>\n                        </span> \n                    )}\n\n                    <br />\n                    {application.job_source.url && (\n                        <span>\n                            <strong>Job Source: </strong>\n                            <a target=\"_blank\" href={\n                                (application.job_source.url && application.job_source.url.includes(\"//\")) ?\n                                application.job_source.url :\n                                `//${application.job_source.url}`\n                            }>\n                                {application.job_source.text || \"Link\"}\n                            </a>\n                        </span>\n                    )}\n                </p>\n\n                {/* application statuses list */}\n                {this.props.isShowApplicationStatuses &&\n                    applicationStatusList.map(status => {\n                        return (\n                            <ApplicationStatusComponentContainer\n                                key={status.uuid}\n                                applicationStatus={status}\n                                application={application}\n                            />\n                        );\n                    })}\n\n                {/* application status form controller */}\n                <ApplicationStatusComponentContainer\n                    application={application}\n                    isOnlyForm\n                />\n            </div>\n        );\n    };\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<Application>>) => {\n    // actionName: (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {\n        deleteApplication: (\n            applicationToDelete: Application,\n            callback?: Function\n        ) =>\n            dispatch(\n                ApplicationActions[CrudType.DELETE][\n                    RequestStatus.TRIGGERED\n                ].action(applicationToDelete, callback)\n            )\n    };\n};\n\nexport const ApplicationComponentController = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ApplicationComponent);\n","import React, { Component } from \"react\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\nimport {\n    IObjectAction,\n    IObjectStore\n} from \"../../store/rest-api-redux-factory\";\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\n// data models\nimport { CompanyActions, Company } from \"../../store/data-model/company\";\nimport {\n    ApplicationActions,\n    Application\n} from \"../../store/data-model/application\";\nimport { ApplicationStatus } from \"../../store/data-model/application-status\";\n\n/** Components */\n// objects\nimport { CompanyComponent } from \"../company/company-component\";\nimport { ApplicationComponentController } from \"../application/application-component\";\n\ninterface ICompanyApplicationComponentProps extends RouteComponentProps {\n    company: Company;\n    applicationStore: IObjectStore<Application>;\n    applicationStatusStore: IObjectStore<ApplicationStatus>;\n    isShowApplicationStatuses?: boolean;\n    deleteCompany: (companyToDelete: Company, callback?: Function) => void;\n    updateCompany: (companyToUpdate: Company, callback?: Function) => void;\n}\n\nclass CompanyApplicationComponent extends Component<\n    ICompanyApplicationComponentProps\n> {\n    onDeleteClick = (event: any) => {\n        if (this.props.company.uuid) {\n            this.props.deleteCompany(this.props.company);\n        } else {\n            console.error(\"Attempted to delete but company obj has no uuid\");\n        }\n    };\n\n    render() {\n        return (\n            <div className=\"CompanyApplicationContainer\">\n                <CompanyComponent\n                    company={this.props.company}\n                    onDeleteIconClicked={this.onDeleteClick}\n                    onEditIconClicked={() => {\n                        this.props.history.push(`/com-form/${this.props.company.uuid}/`);\n                    }}\n                />\n                {Object.values(this.props.applicationStore.collection)\n                    .filter(\n                        application =>\n                            application.user_company === this.props.company.uuid\n                    )\n                    .map(application => {\n                        const applicationStatusList =\n                            this.props.isShowApplicationStatuses || false\n                                ? Object.values(\n                                      this.props.applicationStatusStore\n                                          .collection\n                                  ).filter(\n                                      applicationStatus =>\n                                          applicationStatus.application ===\n                                          application.uuid\n                                  )\n                                : [];\n                        return (\n                            <ApplicationComponentController\n                                key={application.uuid}\n                                application={application}\n                                company={this.props.company}\n                                applicationStatusList={applicationStatusList}\n                                isShowApplicationStatuses={\n                                    this.props.isShowApplicationStatuses\n                                }\n                            />\n                        );\n                    })}\n                {!this.props.isShowApplicationStatuses && <hr />}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    // prop: store.prop\n    applicationStore: store.application,\n    applicationStatusStore: store.applicationStatus\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<Application>>) => {\n    // actionName: (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {\n        deleteCompany: (companyToDelete: Company, callback?: Function) =>\n            dispatch(\n                CompanyActions[CrudType.DELETE][RequestStatus.TRIGGERED].action(\n                    companyToDelete,\n                    callback\n                )\n            ),\n        updateCompany: (companyToUpdate: Company, callback?: Function) =>\n            dispatch(\n                CompanyActions[CrudType.UPDATE][RequestStatus.TRIGGERED].action(\n                    companyToUpdate,\n                    callback\n                )\n            )\n    };\n};\n\nexport const CompanyApplicationComponentContainer = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(CompanyApplicationComponent)\n);\n","import React, { Component } from \"react\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\nimport { IObjectAction, IObjectStore } from \"../../store/rest-api-redux-factory\";\n// data models\nimport { Company } from \"../../store/data-model/company\";\nimport { Application } from \"../../store/data-model/application\";\n\n/** Components */\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n// objects\nimport { CompanyApplicationComponentContainer } from \"../../components/company-application/company-application-component\";\n\ninterface IUserAppPageProps extends RouteComponentProps {\n    company: IObjectStore<Company>\n    application: IObjectStore<Application>\n}\n\nclass UserAppPage extends Component<IUserAppPageProps> {\n\n    componentDidMount() {\n    }\n\n    render() {\n        return (\n            <div className=\"UserAppPage\">\n                <h1>Your Applications</h1>\n                <Button\n                    onClick={()=>{ this.props.history.push(\"/com-form/\") }}\n                    unelevated\n                    icon={<MaterialIcon hasRipple icon=\"add\" />}\n                    children=\"Add Company\"\n                />\n                <br></br>\n                {\n                    (this.props.company.collection !== {}) && Object.values(this.props.company.collection).map((company) => {\n                        return (\n                            <CompanyApplicationComponentContainer key={company.uuid} company={company} />\n                        )\n                    })\n                }\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    // prop: store.prop\n    company: store.company,\n    application: store.application,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<{}>>) => {\n    // actionName = (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n\n    return {\n        // listObject: (callback?: Function) =>\n        //     dispatch(\n        //         ObjectActions[CrudType.LIST][RequestStatus.TRIGGERED].action(\n        //             new Object({}),\n        //             callback\n        //         )\n        //     ),\n    }\n};\n\nexport const UserAppPageContainer = withRouter(connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(UserAppPage));\n","/** Components */\n// base field\nimport { withFormBaseField } from \"../form-base-field/form-base-field\";\n// link field\nimport { FormAddressFieldComponent } from \"./form-address-field-component\";\n\nexport const FormAddressField = withFormBaseField(FormAddressFieldComponent);\n","import React, { Component } from \"react\";\n\n/** Components */\n// mdc-react input\nimport \"@material/react-text-field/dist/text-field.css\";\n\nimport { FormInputFieldMeta } from \"../form-input-field/form-input-field-meta\";\nimport { FormInputField } from \"../form-input-field/form-input-field\";\nimport { IFormBaseFieldProps } from \"../form-base-field/form-base-field-meta\";\n\nexport interface IFormAddressFieldComponentProps extends IFormBaseFieldProps {\n}\n\nexport class FormAddressFieldComponent extends Component<IFormAddressFieldComponentProps> {\n\n    fullAddressInputFieldMeta: FormInputFieldMeta;\n    placeNameInputFieldMeta: FormInputFieldMeta;\n\n    constructor(props: IFormAddressFieldComponentProps) {\n        super(props)\n\n        this.fullAddressInputFieldMeta = new FormInputFieldMeta({\n            fieldName: `${this.props.fieldName}.full_address`,\n            label: `Full Address`\n        });\n        this.placeNameInputFieldMeta = new FormInputFieldMeta({\n            fieldName: `${this.props.fieldName}.place_name`,\n            label: `Place Name`\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"FormAddressField\">\n                {this.props.label && <h4>{this.props.label}</h4>}\n                \n                <FormInputField\n                    {...this.placeNameInputFieldMeta}\n                />\n\n                <FormInputField\n                    {...this.fullAddressInputFieldMeta}\n                />\n                \n            </div>\n        );\n    }\n}","// data model\nimport { Address } from \"../../../store/data-model/address\";\n\n/** Components */\n// base field\nimport { IFieldBaseMetaProps, FormBaseFieldMeta } from \"../form-base-field/form-base-field-meta\";\nimport { FormAddressField } from \"./form-address-field\";\n\nexport class FormAddressFieldMeta extends FormBaseFieldMeta {\n\n    constructor(props: IFieldBaseMetaProps) {\n        super(props)\n        this.model = Address;\n        this.formField = FormAddressField;\n    }\n}\n","import React, { Component } from \"react\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\nimport {\n    IObjectAction\n} from \"../../store/rest-api-redux-factory\";\n// data models\nimport { Company, CompanyActions } from \"../../store/data-model/company\";\n\n/** Components */\nimport {\n    FormFactory,\n    FormActionButtonProps,\n    ActionButtonType\n} from \"../form-factory/form-factory\";\n// form field\nimport { FormBaseFieldMeta } from \"../form-factory/form-base-field/form-base-field-meta\";\nimport { FormInputFieldMeta } from \"../form-factory/form-input-field/form-input-field-meta\";\nimport { FormLinkFieldMeta } from \"../form-factory/form-link-field/form-link-field-meta\";\nimport { FormAddressFieldMeta } from \"../form-factory/form-address-field/form-address-field-meta\";\n// formik\nimport { FormikValues, FormikErrors } from \"formik\";\n\ninterface ICompanyFormComponentProps {\n    company?: Company;\n    onCancel: (event: any) => void;\n    onSubmitSuccess?: () => void;\n\n    /** redux */\n    createCompany: (companyFormData: Company, successCallback?: Function, finalCallback?: Function) => void;\n    updateCompany: (companyFormData: Company, successCallback?: Function, finalCallback?: Function) => void;\n}\n\nclass CompanyFormComponent extends Component<ICompanyFormComponentProps> {\n\n    formFieldPropsList: Array<FormBaseFieldMeta>;\n    actionButtonPropsList: Array<FormActionButtonProps>;\n\n    constructor(props: ICompanyFormComponentProps) {\n        super(props);\n\n        this.formFieldPropsList = [\n            new FormInputFieldMeta({\n                fieldName: \"name\",\n                label: \"Company Name*\"\n            }),\n\n            new FormAddressFieldMeta({\n                fieldName: \"hq_location\",\n                label: \"Headquarter Location\"\n            }),\n\n            new FormLinkFieldMeta({\n                fieldName: \"home_page\",\n                label: \"Company Website\"\n            }),\n        ];\n\n        this.actionButtonPropsList = [\n            new FormActionButtonProps(\n                !this.props.company ? \"Create Company\" : \"Save Company\",\n                undefined,\n                ActionButtonType.SUBMIT\n            ),\n            new FormActionButtonProps(\"Cancel\", this.props.onCancel)\n        ]\n    }\n\n    validateAppForm = (values: FormikValues) => {\n        let errors: FormikErrors<any> = {};\n        if (!values.name) {\n            errors.name = \"Required\";\n        }\n        // if (!/^https*\\:\\/\\/.+$/i.test(values.company__home_page__url)) {\n        //     errors.company__home_page__url =\n        //         \"Please start by http:// or https://\";\n        // }\n        return errors;\n    };\n\n    render() {\n        return (\n            <div className=\"CompanyFormComponent\">\n                <FormFactory\n                    model={Company}\n                    initialInstance={new Company({\n                        ...this.props.company\n                    })}\n        \n                    validate={this.validateAppForm}\n                    \n                    formFieldPropsList={this.formFieldPropsList}\n                    actionButtonPropsList={this.actionButtonPropsList}\n        \n                    createInstanceTriggerAction={this.props.createCompany}\n                    updateInstanceTriggerAction={this.props.updateCompany}\n\n                    onSubmitSuccess={this.props.onSubmitSuccess}\n                />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => ({});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<Company>>) => {\n    return {\n        createCompany: (companyFormData: Company, successCallback?: Function, finalCallback?: Function) =>\n            dispatch(\n                CompanyActions[CrudType.CREATE][RequestStatus.TRIGGERED].action(\n                    companyFormData,\n                    successCallback,\n                    undefined,\n                    finalCallback,\n                )\n            ),\n        updateCompany: (companyFormData: Company, successCallback?: Function, finalCallback?: Function) =>\n            dispatch(\n                CompanyActions[CrudType.UPDATE][RequestStatus.TRIGGERED].action(\n                    companyFormData,\n                    successCallback,\n                    undefined,\n                    finalCallback,\n                )\n            )\n    };\n};\n\nexport const CompanyFormComponentContainer = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(CompanyFormComponent);\n","import React, { Component } from \"react\";\n\n/** route */\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\n// REST API\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\nimport {\n    IObjectAction,\n    IObjectStore\n} from \"../../store/rest-api-redux-factory\";\nimport { CompanyActions, Company } from \"../../store/data-model/company\";\nimport { Address } from \"../../store/data-model/address\";\nimport { Link } from \"../../store/data-model/link\";\n\n/** Components */\n//mdc-react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc-react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n// mdc-react input\nimport \"@material/react-text-field/dist/text-field.css\";\nimport TextField, { HelperText, Input } from \"@material/react-text-field\";\nimport { CompanyFormComponentContainer } from \"../../components/company/company-form-component\";\n\ninterface IAddComPageParams {\n    uuid?: string;\n}\n\ninterface IAddComPageProps extends RouteComponentProps<IAddComPageParams> {\n    company: IObjectStore<Company>;\n}\n\nclass AddComPage extends Component<IAddComPageProps> {\n    render() {\n        const company: Company | undefined = (this.props.match.params.uuid && this.props.company.collection[this.props.match.params.uuid])\n            ? this.props.company.collection[this.props.match.params.uuid]\n            : undefined;\n        console.log(\n            \"com form page: params is\",\n            this.props.match.params.uuid,\n            \"company is\",\n            company\n        );\n        return (\n            <div className=\"AddComPage\">\n                <h1>{!company ? \"Add a Company\" : `Update Company`}</h1>\n                <CompanyFormComponentContainer\n                    company={company}\n                    onSubmitSuccess={() => {\n                        console.log(\"com form page: onSubmitSuccess\");\n                        if (this.props.company.lastChangedObjectID) {\n                            let newCompany = this.props.company.collection[\n                                this.props.company.lastChangedObjectID\n                            ];\n                            console.log(\"new company:\", newCompany);\n                            this.props.history.push(\n                                `/com-app/${newCompany.uuid}/`\n                            );\n                        } else {\n                            console.error(\"store has no lastChangedObjectID\");\n                        }\n                    }}\n                    onCancel={event => {\n                        this.props.history.goBack()\n                    }}\n                />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: IRootState) => ({\n    // prop: state.prop\n    company: state.company\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<Company>>) => {\n    // actionName = (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {};\n};\n\nexport const AddComPageContainer = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(AddComPage)\n);\n","import React, { Component } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { RouteComponentProps } from \"react-router\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\n// rest api\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\nimport {\n    IObjectStore,\n    IObjectAction\n} from \"../../store/rest-api-redux-factory\";\nimport { Company } from \"../../store/data-model/company\";\nimport { Link } from \"../../store/data-model/link\";\nimport {\n    Application,\n    ApplicationActions\n} from \"../../store/data-model/application\";\n\n/** Components */\nimport { CompanyApplicationComponentContainer } from \"../../components/company-application/company-application-component\";\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n// mdc-react input\nimport \"@material/react-text-field/dist/text-field.css\";\nimport { ApplicationComponentController } from \"../../components/application/application-component\";\n\ninterface IUserComAppPageParams {\n    uuid: string;\n}\n\ninterface IUserComAppPageProps\n    extends RouteComponentProps<IUserComAppPageParams> {\n    company: IObjectStore<Company>;\n    createApplication: (\n        applicationFormData: Application,\n        callback?: Function\n    ) => void;\n}\n\ninterface IUserComAppPageState {\n    companyUuid: string;\n    company: Company;\n}\n\nclass UserComAppPage extends Component<\n    IUserComAppPageProps,\n    IUserComAppPageState\n> {\n    readonly state: IUserComAppPageState = {\n        companyUuid: \"\",\n        company: new Company({})\n    };\n\n    componentDidMount() {\n        let companyUuid = this.props.match.params.uuid;\n        console.log(\"mount, got uuid from route?\", companyUuid);\n        if (\n            this.props.company.collection &&\n            companyUuid in this.props.company.collection\n        ) {\n            this.setState({\n                companyUuid,\n                company: new Company(this.props.company.collection[companyUuid])\n            });\n        }\n    }\n\n    renderAll() {\n        if (!this.state.company.uuid) {\n            return;\n        }\n\n        return (\n            <div className=\"user-com-app-page-content\">\n                <Button\n                    onClick={clickEvent => {\n                        this.props.history.push(\"/\");\n                    }}\n                >\n                    Back\n                </Button>\n                <h1>{this.state.company.name}</h1>\n                \n                {/* application form controller - always create form */}\n                <ApplicationComponentController \n                    company={this.state.company}\n                    isOnlyForm\n                />\n\n                <br />\n\n                {/* application list */}\n                {this.state.company.uuid && (\n                    <CompanyApplicationComponentContainer\n                        company={this.state.company}\n                        isShowApplicationStatuses\n                    />\n                )}\n            </div>\n        );\n    }\n\n    render() {\n        return (\n            <div className=\"UserComAppPage\">\n                {this.state.companyUuid &&\n                this.props.company.collection &&\n                this.state.companyUuid in this.props.company.collection ? (\n                    this.renderAll()\n                ) : this.state.companyUuid ? (\n                    <h1>No company found. Uuid={this.state.companyUuid}</h1>\n                ) : (\n                    <h1>Company uuid not specified</h1>\n                )}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => {\n    return {\n        // prop: store.prop\n        company: store.company,\n    };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<Application>>) => {\n    // actionName = (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {\n        createApplication: (\n            applicationFormData: Application,\n            callback?: Function\n        ) =>\n            dispatch(\n                ApplicationActions[CrudType.CREATE][\n                    RequestStatus.TRIGGERED\n                ].action(applicationFormData, callback)\n            )\n    };\n};\n\nexport const UserComAppPageContainer = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(UserComAppPage)\n);\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { IUpdateAuthState } from \"../../store/auth/types\";\n\ninterface UserInfoProps {\n    auth: IUpdateAuthState;\n}\n\nexport class UserInfo extends Component<UserInfoProps, any> {\n    render() {\n        return (\n            <div>\n                <div>\n                    Logged in:{\" \"}\n                    {(this.props.auth.isLogin &&\n                        this.props.auth.isLogin.toString()) ||\n                        \"undefine\"}\n                </div>\n                <div>User Name: {this.props.auth.userName || \"(empty)\"}</div>\n                <div>\n                    Token (for API): {this.props.auth.apiToken || \"(empty)\"}\n                </div>\n            </div>\n        );\n    }\n}\n","import React, { Component } from \"react\";\n\n/** redux */\nimport { connect } from \"react-redux\";\nimport { IRootState } from \"../../store/types\";\nimport { IUpdateAuthState } from \"../../store/auth/types\";\n\n/** Routes & pages */\nimport { UserInfo } from \"../../components/user-info/user-info\";\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\n\n/** Components */\nimport { SocialAuthButtonContainer } from \"../../components/social-auth/social-auth-button\";\n\ninterface IUserProfilePageProps extends RouteComponentProps {\n    auth: IUpdateAuthState;\n}\n\nclass UserProfilePage extends Component<IUserProfilePageProps, any> {\n    render() {\n        return (\n            <div>\n                <h1>My Profile</h1>\n                <UserInfo auth={this.props.auth} />\n                <SocialAuthButtonContainer />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => {\n    return {\n        auth: store.auth\n    };\n};\n\nexport const UserProfilePageContainer = withRouter(connect(mapStateToProps)(UserProfilePage));\n","import React, { Component } from \"react\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { IRootState } from \"../../store/types\";\nimport { IUpdateAuthState } from \"../../store/auth/types\";\n\n/** Routing & Pages */\nimport {\n    Route,\n    Redirect,\n    Switch,\n    Link,\n    withRouter,\n    RouteComponentProps\n} from \"react-router-dom\";\n// pages\nimport { LandingPageContainer } from \"../landing-page/landing-page\";\nimport { UserAppPageContainer } from \"../user-app-page/user-app-page\";\nimport { AddComPageContainer } from \"../add-com-page/add-com-page\";\nimport { UserComAppPageContainer } from \"../user-com-app-page/user-com-app-page\";\nimport { UserProfilePageContainer } from \"../user-profile-page/user-profile-page\";\n\n/** MDC React */\nimport TopAppBar, { TopAppBarFixedAdjust } from \"@material/react-top-app-bar\";\nimport \"@material/react-top-app-bar/dist/top-app-bar.css\";\n// import '@material/react-material-icon/dist/material-icon.css';\nimport MaterialIcon from \"@material/react-material-icon\";\n// style\nimport \"@material/react-ripple/dist/ripple.css\";\n\n// import {withRipple} from '@material/react-ripple';\n\ninterface IPageRoutesProps extends RouteComponentProps {\n    auth: IUpdateAuthState;\n}\n\nclass PageRoutes extends Component<IPageRoutesProps> {\n    render() {\n        return (\n            <div className=\"PageRoutesContainer\">\n                {this.props.location.pathname === \"/\" ? (\n                    <Route path=\"/\" exact component={LandingPageContainer} />\n                ) : (\n                    <div className=\"PrivateRoutesContainer\">\n                        {/** protect private routes */\n                        !this.props.auth.isLogin && <Redirect to=\"/\" />}\n\n                        <TopAppBar\n                            title=\"Appl Tracky\"\n                            actionItems={[\n                                <Link to=\"/home/\">\n                                    <MaterialIcon\n                                        hasRipple\n                                        key=\"itemHome\"\n                                        icon=\"home\"\n                                    />\n                                </Link>,\n\n                                <Link to=\"/profile/\">\n                                    {this.props.auth.avatarUrl === \"\" ? (\n                                        <MaterialIcon\n                                            hasRipple\n                                            key=\"itemProfile\"\n                                            icon=\"account_circle\"\n                                        />\n                                    ) : (\n                                        <img style={{\n                                            \"height\": \"100%\",\n                                            \"borderRadius\": \"50%\",\n                                        }} src={this.props.auth.avatarUrl} />\n                                    )}\n                                </Link>\n                            ]}\n                        />\n                        <TopAppBarFixedAdjust>\n                            <Switch>\n                                <Route\n                                    path=\"/home/\"\n                                    component={UserAppPageContainer}\n                                />\n                                <Route\n                                    path=\"/com-form/:uuid?/\"\n                                    component={AddComPageContainer}\n                                />\n                                <Route\n                                    path=\"/com-app/:uuid/\"\n                                    component={UserComAppPageContainer}\n                                />\n                                <Route\n                                    path=\"/com-app/\"\n                                    component={UserComAppPageContainer}\n                                />\n                                <Route\n                                    path=\"/profile/\"\n                                    component={UserProfilePageContainer}\n                                />\n                                {/** add more page routes here */}\n                            </Switch>\n                        </TopAppBarFixedAdjust>\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    auth: store.auth\n});\n\nconst mapDispatchToProps = {};\n\nexport const PageRoutesContainer = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(PageRoutes)\n);\n","/** React core */\nimport React, { Component } from \"react\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { IRootState } from \"./store/types\";\n\n/** Routes & pages */\nimport { PageRoutesContainer } from \"./pages/page-routes/page-routes\";\n\n/** Locals */\nimport \"./App.css\";\n\ninterface IAppProps {}\n\nclass App extends Component<IAppProps> {\n    componentDidMount() {}\n\n    render() {\n        return (\n            <div className=\"App\">\n                <PageRoutesContainer />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => {\n    return {};\n};\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export enum RootActionNames {\n    ResetAllStore = \"RESET_ALL_STORE\"\n}\n\nexport const resetAllStoreAction = () => {\n    return {\n        type: RootActionNames.ResetAllStore,\n    }\n}","import { Reducer, Action } from 'redux';\n\nimport { \n    /** store */\n    IUpdateAuthState, \n    /** action */\n    AuthActionNames, TAuthActions \n} from \"./types\";\n\nimport { RequestStatus } from \"../../utils/rest-api\";\n\nconst initialAuthState: IUpdateAuthState = {\n    requestStatus: RequestStatus.SUCCESS,\n    isLogin: false,\n    isLocal: false,\n    socialAuthToken: \"\",\n    apiToken: \"\",\n    userName: \"\",\n    expireDateTime: \"\",\n    avatarUrl: \"\",\n}\n\n// authStore will be stored as a sub-entry in global store; this is defined in ./store/types.ts\nexport const authReducer: Reducer<IUpdateAuthState> = (authStore = initialAuthState, action: Action)  => {\n    // add reducer for new actions here\n    // ...\n\n    const authAction = action as TAuthActions;\n\n    return {\n        ...authStore,\n        ...authAction.payload\n    }\n}","/** redux */\nimport {\n    AuthActionNames,\n    IRequestedLoginAuthAction,\n    IRequestedLogoutAuthAction\n} from \"../../store/auth/types\";\nimport {\n    SuccessLoginAuth,\n    SuccessLogoutAuth,\n    FailureAuth\n} from \"../../store/auth/actions\";\nimport { resetAllStoreAction } from \"../../store/actions\";\nimport { CompanyActions, Company } from \"../../store/data-model/company\";\nimport { ApplicationActions, Application } from \"../../store/data-model/application\";\nimport { ApplicationStatusActions, ApplicationStatus } from \"../../store/data-model/application-status\";\n// redux-saga\nimport { takeEvery, call, put } from \"redux-saga/effects\";\n\n/** router */\nimport { push } from \"connected-react-router\";\n\n/** api */\nimport { AuthenticationService } from \"../../utils/auth\";\nimport { RestApiService, CrudType, RequestStatus } from \"../../utils/rest-api\";\n\nfunction* authLoginSagaHandler(\n    requestedLoginAuthAction: IRequestedLoginAuthAction\n) {\n    // RequestAuth action triggered & injecting side effects here...\n    console.log(\"auth saga: initialize\");\n    const { socialAuthToken } = requestedLoginAuthAction.payload;\n    console.log(\"auth saga: request fired\");\n    try {\n        // TODO: define interface typing for api response\n        const jsonResponse = yield call(AuthenticationService.serverLogin, socialAuthToken);\n        console.log(\"auth saga: server login using code from social button. server jsonRes=\", jsonResponse);\n        AuthenticationService.state.apiLoginToken = jsonResponse.token;\n        yield put(SuccessLoginAuth(\n            jsonResponse.email, \"\", \n            jsonResponse.token, \n            jsonResponse.avatar_url,\n            false // is not local login, is social login\n        ));\n        // yield put(push(\"/home/\"));\n\n        // initial fetch user data\n        yield put(ApplicationActions[CrudType.LIST][RequestStatus.TRIGGERED].action(new Application({})))\n        yield put(CompanyActions[CrudType.LIST][RequestStatus.TRIGGERED].action(new Company({})))\n        yield put(ApplicationStatusActions[CrudType.LIST][RequestStatus.TRIGGERED].action(new ApplicationStatus({})))\n    } catch (error) {\n        console.warn(\"auth saga: error\")\n        yield put(FailureAuth(error));\n        return;\n    }\n}\n\nexport function* authLoginSaga() {\n    yield takeEvery(AuthActionNames.REQUESTED_LOGIN_AUTH, authLoginSagaHandler);\n}\n\nfunction* authLogoutSagaHandler(\n    requestedLogoutAuthAction: IRequestedLogoutAuthAction\n) {\n    // RequestAuth action triggered & injecting side effects here...\n    console.log(\"auth logout saga: fired\");\n    try {\n        yield call(AuthenticationService.serverLogout);\n\n        // clear all store\n    } catch (error) {\n        yield put(FailureAuth(error));\n        return;\n    }\n\n    console.log(\"auth logout saga: navigating\");\n    yield put(SuccessLogoutAuth());\n    // yield put(push(\"/\"));\n\n    // clear all redux store\n    yield put(resetAllStoreAction());\n}\n\nexport function* authLogoutSaga() {\n    yield takeEvery(\n        AuthActionNames.REQUESTED_LOGOUT_AUTH,\n        authLogoutSagaHandler\n    );\n}\n\n// add new saga handler here && a `takeEvery` saga.\n// ...","import createSagaMiddleware from 'redux-saga';\nimport { all } from \"redux-saga/effects\";\nimport { authLoginSaga, authLogoutSaga } from \"./auth/sagas\";\n// rest api\nimport { CompanySagas } from \"../store/data-model/company\";\nimport { ApplicationSagas } from \"../store/data-model/application\";\nimport { ApplicationStatusSagas } from \"../store/data-model/application-status\";\n\n/** setup saga */\nconst sagaMiddleware = createSagaMiddleware();\n\nexport {\n    sagaMiddleware\n};\n\nconst rootSaga = function*() {\n    yield all([\n        authLoginSaga(),\n        authLogoutSaga(),\n        ...CompanySagas.map((saga) => saga()),\n        ...ApplicationSagas.map((saga) => saga()),\n        ...ApplicationStatusSagas.map((saga) => saga()),\n        // add new saga here\n        // ...\n    ]);\n};\n\nexport const runSagaMiddleaware = () => {\n    sagaMiddleware.run(rootSaga)\n}\n\n","/** redux */\nimport { combineReducers, Reducer, AnyAction, Action } from \"redux\";\nimport { connectRouter, LocationChangeAction } from 'connected-react-router';\nimport { authReducer } from \"./auth/reducers\";\nimport { TAuthActions } from \"./auth/types\";\nimport { IRootState } from \"./types\";\nimport { RootActionNames } from \"./actions\";\n// rest api\nimport { CompanyReducer } from \"./data-model/company\";\nimport { ApplicationReducer } from \"./data-model/application\";\nimport { ApplicationStatusReducer } from \"./data-model/application-status\";\n\n/** router */\nimport { History } from \"history\";\n\n// root reducer with router state\nexport const createRootReducer = (history: History<any>): Reducer<IRootState> => {\n    // return combineReducers<IRootState>({\n    //     router: connectRouter(history),\n    \n    //     // add more reducers here\n    //     auth: authReducer,\n    //     company: CompanyReducer,\n    //     address: AddressReducer,\n    //     application: ApplicationReducer,\n    //     // ...\n    // })\n\n    const rootReducer: Reducer<IRootState> = (rootState: IRootState | undefined, action: Action): IRootState  => {\n\n        let rootStateChecked: any = {}\n        if (!rootState) {\n            rootStateChecked.router = undefined;\n            rootStateChecked.auth = undefined;\n            rootStateChecked.company = undefined;\n            rootStateChecked.application = undefined;\n            rootStateChecked.applicationStatus = undefined;\n            // add initial state for new sub-store here\n            // ...\n        } else if (action.type === RootActionNames.ResetAllStore) {\n            rootStateChecked = {\n                router: rootState.router\n            }\n        } else {\n            rootStateChecked = rootState;\n        }\n\n        console.log(\"beforeRootStore\", rootState);\n\n        const afterStore  = { \n            ...rootState,\n            router: connectRouter(history)(rootStateChecked.router, action as LocationChangeAction),\n            auth: authReducer(rootStateChecked.auth, action),\n            company: CompanyReducer(rootStateChecked.company, action),\n            application: ApplicationReducer(rootStateChecked.application, action),\n            applicationStatus: ApplicationStatusReducer(rootStateChecked.applicationStatus, action),\n            // add new reducer here\n            // ...\n        }\n        console.log(\"afterRootStore\", afterStore);\n\n        return afterStore;\n    }\n\n    return rootReducer;\n}","/** redux */\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport { IRootState } from \"../store/types\";\nimport { createRootReducer } from \"../store/reducers\";\n\n/** router */\nimport { createBrowserHistory } from 'history';\nimport { routerMiddleware } from 'connected-react-router';\n\n/** middleware */\n// saga\nimport { sagaMiddleware, runSagaMiddleaware } from \"../sagas/saga-config\";\n\n\n\nconst history = createBrowserHistory({\n    basename: (process.env.NODE_ENV === 'development') ?  \n    ``\n    :\n    `/appl-tracky-spa`\n});\n\nconst preloadedState = {\n\n};\n\n// generate the singleton store from redux\nexport const store = createStore<IRootState, any, any, any>(\n    createRootReducer(history),\n    preloadedState,\n    compose(\n        applyMiddleware(\n            routerMiddleware(history),\n            sagaMiddleware,\n            // ... add other middlewares ...\n        )\n    )\n);\n\n/** after mount saga middlewares to store, run them */\nrunSagaMiddleaware();\n\nexport {\n    history\n};","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n/** redux */\nimport { Provider } from \"react-redux\";\nimport { Store } from \"redux\";\n/** root store */\nimport { IRootState } from \"./store/types\";\nimport { store } from \"./store/store-config\";\n\n/** router */\nimport { ConnectedRouter } from \"connected-react-router\";\nimport { history } from \"./store/store-config\";\n\n/** types */\ninterface IRootProps {\n    store: Store<IRootState>;\n}\n\n/** root component - just to wrap the App into redux store */\nconst Root: React.SFC<IRootProps> = props => {\n    return (\n        <Provider store={props.store}>\n            <ConnectedRouter history={history} >\n                <App />\n            </ConnectedRouter>\n        </Provider>\n    );\n};\n\nReactDOM.render(<Root store={store} />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}