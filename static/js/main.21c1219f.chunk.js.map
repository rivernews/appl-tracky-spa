{"version":3,"sources":["store/auth/types.ts","utils/rest-api.ts","store/data-model/base-model.ts","utils/authentication.ts","store/auth/actions.ts","components/login/social-auth-login-button.tsx","components/login/social-auth-logout-button.tsx","components/login/social-auth-button.tsx","components/form-factory/form-base-field/form-base-field-meta.tsx","pages/landing-page/landing-page.tsx","components/form-factory/form-input-field/form-input-field.tsx","components/form-factory/form-factory.tsx","components/form-factory/form-input-field/form-input-field-meta.tsx","components/login/local-login-form.tsx","pages/login-page/local-login-page.tsx","store/rest-api-redux-factory.ts","store/data-model/address.ts","store/data-model/link.ts","store/data-model/company.ts","components/company/company-component.tsx","store/data-model/application.ts","store/data-model/application-status.ts","store/data-model/application-status-link.ts","components/form-factory/form-base-field/form-base-field.tsx","components/form-factory/form-link-field/form-link-field.tsx","components/form-factory/form-link-field/form-link-field-component.tsx","components/form-factory/form-link-field/form-link-field-meta.tsx","components/form-factory/form-application-status-link-field/form-application-status-link-field.tsx","components/form-factory/form-application-status-link-field/form-application-status-link-field-component.tsx","components/form-factory/form-application-status-link-field/form-application-status-link-field-meta.tsx","components/application-status/application-status-form-component.tsx","components/application-status/application-status-component.tsx","components/form-factory/form-rich-text-field/form-rich-text-field.tsx","components/form-factory/form-rich-text-field/form-rich-text-field-meta.tsx","components/application/application-form-component.tsx","components/application/application-component.tsx","components/company-application/company-application-component.tsx","pages/user-app-page/user-app-page.tsx","components/form-factory/form-address-field/form-address-field.tsx","components/form-factory/form-address-field/form-address-field-component.tsx","components/form-factory/form-address-field/form-address-field-meta.tsx","components/company/company-form-component.tsx","pages/add-com-page/add-com-page.tsx","pages/user-com-app-page/user-com-app-page.tsx","components/user-info/user-info.tsx","components/login/local-logout-button.tsx","pages/user-profile-page/user-profile-page.tsx","pages/page-routes/page-routes.tsx","App.tsx","serviceWorker.ts","store/actions.ts","store/auth/reducers.ts","sagas/auth/sagas.ts","sagas/saga-config.ts","store/reducers.ts","store/store-config.ts","index.tsx"],"names":["RequestedLoginMode","AuthActionNames","RequestStatus","CrudType","RestMethod","BaseModel","_ref","_ref$uuid","uuid","_ref$created_at","created_at","_ref$modified_at","modified_at","Object","classCallCheck","this","createClass","key","value","Yup","shape","RefreshObject","_this","_ref$token","token","args","objectWithoutProperties","possibleConstructorReturn","getPrototypeOf","call","LoginObject","_ref2","_this2","_ref2$code","code","_ref2$provider","provider","_ref2$redirect_uri","redirect_uri","AuthenticationService","state","clientID","redirectUri","apiSocialLoginUrl","apiLocalLoginUrl","apiLoginRefreshUrl","socialAuthProvider","apiLoginToken","serverLogin","_callee","loginMode","params","sessionAuthState","refreshTokenReponse","loginObject","resp","res","parsedJsonResponse","regenerator_default","a","wrap","_context","prev","next","PREFILL","sessionStorage","getItem","JSON","parse","isLogin","_this3","apiCallToken","apiToken","refreshToken","sent","abrupt","email","userName","avatar_url","avatarUrl","isLocal","t0","SOCIAL_AUTH","socialAuthToken","RestApiService","post","data","endpointUrl","objectSpread","t1","Error","LOCAL","fetch","concat","apiBaseUrl","method","mode","credentials","headers","Content-Type","body","stringify","username","password","ok","statusText","json","t2","stop","_callee2","refreshObject","_context2","serverLogout","_callee3","_context3","CrudMapToRest","crudType","CREATE","POST","READ","LIST","GET","UPDATE","PATCH","DELETE","RestApi","userEmail","userFirstName","userLastName","objectID","get","absoluteUrl","objectName","getRelativeUrl","setApiAuthHeaders","then","patch","_ref3","delete","_ref4","_ref5","undefined","Authorization","RequestedLoginAuth","type","REQUESTED_LOGIN_AUTH","payload","requestStatus","REQUESTING","RequestedLogoutAuth","REQUESTED_LOGOUT_AUTH","SuccessLoginAuth","expireDateTime","SUCCESS_AUTH","SUCCESS","SuccessLogoutAuth","FailureAuth","error","FAILURE_AUTH","FAILURE","SocialAuthLoginButton","_Component","_getPrototypeOf2","_len","arguments","length","Array","_key","apply","onLoginButtonClicked","clickEvent","renderProps","onClick","onAuthSuccess","authResponse","props","onSuccess","onAuthFailure","onFailure","inherits","react_default","createElement","className","google_login","render","react_button_dist_default","unelevated","icon","dist_default","hasRipple","disabled","clientId","responseType","Component","SocialAuthLogoutButton","onClickWhenIsLocal","onLogoutSuccess","SocialAuthButton","onSocialLoginSuccess","googleOauthResponse","setState","requestedLoginAuth","onSocialLoginFailure","console","onSocialLogoutSuccess","requestedLogoutAuth","auth","social_auth_logout_button_SocialAuthLogoutButton","social_auth_login_button_SocialAuthLoginButton","InputFieldType","SocialAuthButtonContainer","withRouter","connect","store","dispatch","styles","backgroundColor","color","LandingPage","formFactoryProps","onStaffLoginClick","history","push","style","href","target","LandingPageContainer","FormInputField","formik_esm","name","fieldName","field","form","react_text_field_dist_default","label","onTrailingIconSelect","trailingIcon","role","react_text_field_dist","assign","TEXT","inputType","ActionButtonType","FormBaseFieldMeta","model","formField","isDynamic","dynamicLimit","getInstanceDataFromFormikValues","values","isArray","alert","map","instanceData","FormInputFieldMeta","_FormBaseFieldMeta","FormActionButtonProps","text","FormFactory","initialInstance","validationSchema","onSubmit","setSubmitting","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","formFieldPropsList","Symbol","iterator","done","fieldProps","getInstance","err","return","createInstanceTriggerAction","updateInstanceTriggerAction","instance","enforcedInstanceData","onSubmitSuccess","initialValues","schema","isSubmitting","formFieldMeta","index","formikValues","actionButtonPropsList","actionButtonProps","BUTTON","children","LoginForm","PASSWORD","SUBMIT","onCancel","onSubmitLoginForm","asyncToGenerator","mark","_x","_x2","required","form_factory_FormFactory","LocalLoginPage","onLoginFormCancel","onLoginFormSubmit","local_login_form_LoginForm","LocalLoginPageContainer","RestApiReduxFactory","initialObjectInstance","crudKeywords","ObjectRestApiRedux","_loop","crudKeyword","_i","_arr","_i2","actionTypeName","action","toUpperCase","TRIGGERED","objectClassInstance","successCallback","failureCallback","finalCallback","formData","jsonResponse","triggerFormData","newState","lastChangedObjectID","results","sagaHandler","triggerAction","put","status","saga","objectTriggerActionChannel","objectTriggerAction","actionChannel","take","initialState","collection","sagas","actions","storeReducer","objectStore","objectAction","split","newObject","defineProperty","resObjectList","newObjects","object","targetDeleteObject","omit","Address","_BaseModel","_ref$place_name","place_name","_ref$country","country","_ref$state","_ref$city","city","_ref$street","street","_ref$full_address","full_address","_ref$zipcode","zipcode","max","Link","_ref$text","_ref$user","user","_ref$url","url","_ref$order","order","default","when","is","Company","_ref$labels","labels","_ref$name","_ref$hq_location","hq_location","_ref$home_page","home_page","_ref$ratings","ratings","_ref$applications","applications","CompanyRestApiRedux","CompanyActions","CompanyReducer","CompanySagas","CompanyComponent","company","react_router_dom","to","react_icon_button_dist_default","onEditIconClicked","onDeleteIconClicked","includes","Application","_ref$user_company","user_company","_ref$position_title","position_title","_ref$job_description_","job_description_page","_ref$job_source","job_source","_ref$notes","notes","ApplicationRestApiRedux","ApplicationActions","ApplicationReducer","ApplicationSagas","ApplicationStatus","_ref$application","application","_ref$applicationstatu","applicationstatuslink_set","_ref$date","date","localeNowDateString","now","Date","UTC","getUTCFullYear","getUTCMonth","getDate","toISOString","ApplicationStatusRestApiRedux","ApplicationStatusActions","ApplicationStatusReducer","ApplicationStatusSagas","ApplicationStatusLink","_ref$application_stat","application_status","_ref$link","link","FormBaseDynamicFieldControlls","formikArrayHelpers","remove","BaseDynamicFieldAddButton","withFormBaseField","FormFieldComponent","form_base_field_FormBaseDynamicFieldControlls","form_base_field_BaseDynamicFieldAddButton","FormLinkField","FormLinkFieldComponent","textInputFieldMeta","urlInputFieldMeta","form_input_field_FormInputField","FormLinkFieldMeta","FormApplicationStatusLinkField","FormApplicationStatusLinkFieldComponent","linkFieldProps","FormApplicationStatusLinkFieldMeta","ApplicationStatusFormComponent","DATE","applicationStatus","createApplicationStatus","updateApplicationStatus","ApplicationStatusFormComponentContainer","applicationStatusStore","applicationStatusFormData","ApplicationStatusComponent","isFormOpened","renderDisplay","deleteApplicationStatus","applicationStatusLink","renderFormController","isOnlyForm","ApplicationStatusComponentContainer","applicationStatusToDelete","callback","FormRichTextField","ckeditor_default","editor","BalloonEditor","onChange","event","setFieldValue","getData","FormRichTextFieldMeta","ApplicationFormComponent","createApplication","updateApplication","ApplicationFormComponentContainer","applicationStore","applicationFormData","ApplicationComponent","renderApplicationFormController","renderApplicationDisplay","applicationStatusList","deleteApplication","isShowApplicationStatuses","ApplicationComponentController","applicationToDelete","CompanyApplicationComponent","onDeleteClick","deleteCompany","company_component_CompanyComponent","filter","CompanyApplicationComponentContainer","companyToDelete","updateCompany","companyToUpdate","UserAppPage","UserAppPageContainer","FormAddressField","FormAddressFieldComponent","fullAddressInputFieldMeta","placeNameInputFieldMeta","FormAddressFieldMeta","CompanyFormComponent","createCompany","CompanyFormComponentContainer","companyFormData","AddComPage","match","newCompany","goBack","AddComPageContainer","UserComAppPage","companyUuid","renderAll","UserComAppPageContainer","UserInfo","toString","LocalLogoutButton","UserProfilePage","localLogoutButton","user_info_UserInfo","local_logout_button_LocalLogoutButton","UserProfilePageContainer","PageRoutes","location","pathname","react_router","path","exact","component","react_top_app_bar_dist_default","title","actionItems","height","borderRadius","src","react_top_app_bar_dist","react_linear_progress_dist_default","indeterminate","buffer","bufferingDots","PageRoutesContainer","App","retrieveLoginAuth","Boolean","window","hostname","RootActionNames","initialAuthState","authReducer","authStore","authAction","setItem","resetAllStoreAction","ResetAllStore","authLoginSagaHandler","authLoginSaga","authLogoutSagaHandler","authLogoutSaga","requestedLoginAuthAction","_requestedLoginAuthAc","warn","_marked","takeEvery","_marked2","requestedLogoutAuthAction","_marked3","_context4","_marked4","sagaMiddleware","createSagaMiddleware","rootSaga","all","toConsumableArray","createBrowserHistory","basename","createStore","rootState","rootStateChecked","router","connectRouter","compose","applyMiddleware","routerMiddleware","run","ReactDOM","es","esm","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.21c1219f.chunk.js","sourcesContent":["import { Action } from \"redux\";\n\nimport { RequestStatus } from \"../../utils/rest-api\";\n\n/**\n * Store Types\n */\n\n// complete store type\nexport interface IUpdateAuthState {\n    requestStatus: RequestStatus\n    isLogin: boolean\n    isLocal: boolean\n    userName: string\n    socialAuthToken: string\n    apiToken: string\n    expireDateTime: string\n    avatarUrl: string\n}\n\nexport enum RequestedLoginMode {\n    PREFILL = \"prefill\",\n    SOCIAL_AUTH = \"social_auth\",\n    LOCAL = \"local\"\n}\n\n// async partial store types\nexport interface IRequestedLoginAuthState {\n    requestStatus: RequestStatus\n}\n\nexport interface IRequestedLogoutAuthState {\n    requestStatus: RequestStatus\n}\n\nexport interface ISuccessAuthState {\n    requestStatus: RequestStatus\n    isLogin: boolean\n    isLocal: boolean\n    userName: string\n    expireDateTime: string\n    apiToken: string\n    avatarUrl: string\n}\n\nexport interface IFailureAuthState {\n    requestStatus: RequestStatus,\n    error: any\n}\n\n// add more state types for this reducer - auth reducer\n// ...\n\n\n\n\n\n/**\n * Action Types\n */\n\nexport enum AuthActionNames {\n    UPDATE_AUTH = \"Update auth\",\n    REQUESTED_LOGIN_AUTH = \"Requested login auth\",\n    REQUESTED_LOGOUT_AUTH = \"Requested logout auth\",\n    SUCCESS_AUTH = \"Success auth\",\n    FAILURE_AUTH = \"Failure auth\",\n\n    // 1. add more action for this reducer - auth reducer\n    // 2. write the type interface for the action below\n    // ...\n}\n\nexport interface IUpdateAuthAction extends Action<AuthActionNames.UPDATE_AUTH> {\n    type: typeof AuthActionNames.UPDATE_AUTH;\n    payload: IUpdateAuthState;\n}\n\nexport interface RequestedLoginAuthActionParams {\n    username?: string,\n    password?: string,\n    socialAuthToken?: string\n}\n\nexport interface IRequestedLoginAuthAction extends Action<AuthActionNames.REQUESTED_LOGIN_AUTH> {\n    type: typeof AuthActionNames.REQUESTED_LOGIN_AUTH;\n    loginMode: RequestedLoginMode;\n    params?: RequestedLoginAuthActionParams;\n    payload: IRequestedLoginAuthState;\n}\n\nexport interface IRequestedLogoutAuthAction extends Action<AuthActionNames.REQUESTED_LOGOUT_AUTH> {\n    type: typeof AuthActionNames.REQUESTED_LOGOUT_AUTH;\n    payload: IRequestedLogoutAuthState;\n}\n\nexport interface ISuccessAuthAction extends Action<AuthActionNames.SUCCESS_AUTH> {\n    type: typeof AuthActionNames.SUCCESS_AUTH;\n    payload: ISuccessAuthState;\n}\n\nexport interface IFailureAuthAction extends Action<AuthActionNames.FAILURE_AUTH> {\n    type: typeof AuthActionNames.FAILURE_AUTH;\n    payload: IFailureAuthState;\n}\n\n// use union | ... | ... to add more action types\nexport type TAuthActions = IUpdateAuthAction | IRequestedLoginAuthAction | IRequestedLogoutAuthAction | ISuccessAuthAction | IFailureAuthAction","import React from \"react\";\nimport { TObject, IObjectBase } from \"../store/rest-api-redux-factory\";\nimport { BaseModel } from \"../store/data-model/base-model\";\nimport { AuthenticationService } from \"./authentication\";\n\nexport enum RequestStatus {\n    TRIGGERED = \"triggered\",\n    REQUESTING = \"requesting\",\n    SUCCESS = \"success\",\n    FAILURE = \"failre\"\n}\n\nexport enum CrudType {\n    CREATE = \"create\",\n    READ = \"read\",\n    LIST = \"list\",\n    UPDATE = \"update\",\n    DELETE = \"delete\"\n}\n\nexport enum RestMethod {\n    POST = \"post\",\n    GET = \"get\",\n    PATCH = \"patch\",\n    DELETE = \"delete\"\n}\n\nexport const CrudMapToRest = (crudType: CrudType): RestMethod => {\n    switch (crudType) {\n        case CrudType.CREATE:\n            return RestMethod.POST;\n        case CrudType.READ:\n            return RestMethod.GET;\n        case CrudType.LIST:\n            return RestMethod.GET;\n        case CrudType.UPDATE:\n            return RestMethod.PATCH;\n        case CrudType.DELETE:\n            return RestMethod.DELETE;\n\n        default:\n            return RestMethod.GET;\n    }\n};\n\nexport interface IRequestParams<Schema> {\n    endpointUrl?: string;\n    absoluteUrl?: string;\n    objectName?: string;\n    data?: TObject<Schema> | Array<TObject<Schema>>;\n}\n\nexport interface IListRestApiResponse<Schema> {\n    count: number;\n    next: any;\n    previous: any;\n    results: Array<TObject<Schema>>;\n}\n\nexport type ISingleRestApiResponse<Schema> = TObject<Schema>;\n\nexport function IsSingleRestApiResponseTypeGuard<Schema>(\n    response: ISingleRestApiResponse<Schema> | IListRestApiResponse<Schema>\n): response is ISingleRestApiResponse<Schema> {\n    return (<ISingleRestApiResponse<Schema>>response).uuid !== undefined;\n}\n\nfunction IsSingleFormDataTypeGuard<Schema>(\n    formData: TObject<Schema> | Array<TObject<Schema>>\n): formData is TObject<Schema> {\n    return (<TObject<Schema>>formData).uuid !== undefined;\n}\n\nexport class RestApi {\n    state = {\n        clientID: `732988498848-vuhd6g61bnlqe372i3l5pbpnerteu6na.apps.googleusercontent.com`,\n        code: ``,\n        redirectUri: `postmessage`,\n        apiBaseUrl: (process.env.NODE_ENV === 'development') ? \n        `http://localhost:8000/api/`\n        :\n        `https://appl-tracky.api.shaungc.com/api/`\n        ,\n        socialAuthProvider: `google-oauth2`,\n\n        userEmail: ``,\n        userFirstName: ``,\n        userLastName: ``,\n\n        objectID: ``\n    };\n\n    get = <Schema>({ endpointUrl, absoluteUrl, objectName, data }: IRequestParams<Schema>) => {\n        return fetch(\n            this.getRelativeUrl({\n                endpointUrl,\n                absoluteUrl,\n                objectName,\n                data\n            }),\n            {\n                method: \"GET\",\n                ...this.setApiAuthHeaders()\n            }\n        ).then(res => res.json());\n    };\n\n    post = <Schema>({ data, objectName, endpointUrl }: IRequestParams<Schema>) => {\n        process.env.NODE_ENV === 'development' && console.log(`restapi:post fired`);\n        return fetch(\n            this.getRelativeUrl({\n                endpointUrl,\n                objectName,\n                data\n            }),\n            {\n                method: \"POST\",\n                ...this.setApiAuthHeaders(),\n                body: JSON.stringify(data)\n            }\n        ).then(res => res.json());\n        // let caller handle error in their own .catch()\n    };\n\n    patch = <Schema>({ data, objectName, endpointUrl }: IRequestParams<Schema>) => {\n        return fetch(\n            this.getRelativeUrl({\n                endpointUrl,\n                objectName,\n                data\n            }),\n            {\n                method: \"PATCH\",\n                ...this.setApiAuthHeaders(),\n                body: JSON.stringify(data)\n            }\n        ).then(res => res.json());\n    };\n\n    delete = <Schema>({ data, objectName, endpointUrl }: IRequestParams<Schema>) => {\n        return fetch(\n            this.getRelativeUrl({\n                endpointUrl,\n                objectName,\n                data\n            }),\n            {\n                method: \"DELETE\",\n                ...this.setApiAuthHeaders(),\n                body: JSON.stringify(data)\n            }\n        );\n    };\n\n    /** helper */\n    private getRelativeUrl = <Schema>({\n        objectName,\n        data,\n        endpointUrl,\n        absoluteUrl,\n    }: IRequestParams<Schema>) => {\n        let url = \"\";\n        if (absoluteUrl) {\n            url = absoluteUrl;\n        }\n        else if (endpointUrl) {\n            url = `${this.state.apiBaseUrl}${endpointUrl}`;\n        } else {\n            if (data && IsSingleFormDataTypeGuard(data) && data.uuid) {\n                url = `${this.state.apiBaseUrl}${objectName}/${data.uuid}/`;\n            } else {\n                url = `${this.state.apiBaseUrl}${objectName}/`;\n            }\n        }\n        process.env.NODE_ENV === 'development' && console.log(`restapi: url: ${url}, objname=${objectName}`);\n        return url;\n    };\n\n    private setApiAuthHeaders = (): RequestInit => {\n\n        process.env.NODE_ENV === 'development' && console.log(\"api: set header: got credentials?\", AuthenticationService.apiCallToken);\n        return {\n            mode: \"cors\",\n            credentials: AuthenticationService.apiCallToken ? \"include\" : \"omit\",\n            headers: {\n                Authorization: AuthenticationService.apiCallToken\n                    ? `JWT ${AuthenticationService.apiCallToken}`\n                    : ``,\n                \"Content-Type\": \"application/json\"\n            }\n        };\n    };\n}\n\n/** create restapi singleton */\nexport const RestApiService = new RestApi();\n","import * as Yup from \"yup\";\n\nexport type IRelationship = string;\n\nexport interface IBaseModelProps {\n    uuid?: IRelationship\n    created_at?: string\n    modified_at?: string\n}\n\nexport class BaseModel {\n    uuid: string\n    created_at: string\n    modified_at: string\n    \n    constructor({\n        uuid = \"\",\n        created_at = \"\",\n        modified_at = \"\",\n    }: IBaseModelProps) {\n        this.uuid = uuid;\n        this.created_at = created_at;\n        this.modified_at = modified_at;\n    }\n\n    static schema() {\n        return Yup.object<BaseModel>().shape({});\n    }\n}\n\n// for newing model class instance and access base class's assets\nexport type DataModelInstance<Model = BaseModel> = Model & BaseModel\n\nexport type DataModelClass<DataModel = any> = DataModelInstance<DataModel> & (new (props: any) => DataModel)","import { RestApiService } from \"./rest-api\";\nimport { BaseModel, IBaseModelProps } from \"../store/data-model/base-model\";\n\nimport { RequestedLoginMode, RequestedLoginAuthActionParams } from \"../store/auth/types\";\n\nexport interface ILoginObjectProps {\n    code?: string;\n    provider?: string;\n    redirect_uri?: string;\n}\n\nexport interface IRefreshObjectProps {\n    token: string;\n}\n\nclass RefreshObject extends BaseModel {\n    token: string;\n\n    constructor({\n        token = \"\",\n        ...args\n    }: IRefreshObjectProps & IBaseModelProps) {\n        super(args);\n        this.token = token;\n    }\n}\n\nclass LoginObject extends BaseModel {\n    code: string;\n    provider: string;\n    redirect_uri: string;\n\n    constructor({\n        code = \"\",\n        provider = \"\",\n        redirect_uri = \"\",\n        ...args\n    }: ILoginObjectProps & IBaseModelProps) {\n        super(args);\n        this.code = code;\n        this.provider = provider;\n        this.redirect_uri = redirect_uri;\n    }\n}\n\nclass Authentication {\n    state = {\n        clientID: `732988498848-vuhd6g61bnlqe372i3l5pbpnerteu6na.apps.googleusercontent.com`,\n        redirectUri: `postmessage`,\n        apiSocialLoginUrl: `login/social/`,\n        apiLocalLoginUrl: `api-token-auth/`,\n        apiLoginRefreshUrl: `api-token-refresh/`,\n        socialAuthProvider: `google-oauth2`,\n\n        apiLoginToken: ``,\n    };\n\n    serverLogin = async (loginMode: RequestedLoginMode, params: RequestedLoginAuthActionParams) => {\n        // prefill login\n        if (loginMode === RequestedLoginMode.PREFILL) {\n            // restore session login data\n            const sessionAuthState = sessionStorage.getItem(\"authState\")\n                ? JSON.parse(sessionStorage.getItem(\"authState\") || \"{}\")\n                : {};\n\n            if (sessionAuthState.isLogin) {\n                this.apiCallToken = sessionAuthState.apiToken;\n\n                try {\n                    const refreshTokenReponse = await this.refreshToken();\n\n                    return {\n                        email: sessionAuthState.userName,\n                        token: refreshTokenReponse.token,\n                        avatar_url: sessionAuthState.avatarUrl,\n                        isLocal: sessionAuthState.isLocal\n                    };\n                } catch (error) {\n                    // catch: refresh failed or data-fetching failed\n                    process.env.NODE_ENV === \"development\" &&\n                        console.error(\n                            `Error after refreshing token in Authentication service: ${error}`\n                        );\n                }\n            }\n            \n            // in case cannot restore login session,\n            // will let saga dispatch logout to reset authState in session storage\n            return {};\n        }\n\n        // social auth login\n        else if (loginMode === RequestedLoginMode.SOCIAL_AUTH) {\n            const loginObject = new LoginObject({\n                code: params.socialAuthToken,\n                provider: this.state.socialAuthProvider,\n                redirect_uri: this.state.redirectUri\n            });\n    \n            try {\n                const resp = await RestApiService.post<LoginObject>({\n                    data: loginObject,\n                    endpointUrl: this.state.apiSocialLoginUrl\n                });\n    \n                this.apiCallToken = resp.token;\n                return {\n                    ...resp,\n                    isLocal: false\n                };\n            }\n            catch (error) {\n                throw Error(error);\n            }\n        }\n\n        // local login\n        else if (loginMode === RequestedLoginMode.LOCAL) {\n            // post login form data to get login token\n            try {\n                const res = await fetch(`${RestApiService.state.apiBaseUrl}${this.state.apiLocalLoginUrl}`, {\n                    method: \"POST\",\n                    mode: \"cors\",\n                    credentials: \"omit\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    },\n                    body: JSON.stringify({\n                        username: params.username, password: params.password\n                    })\n                });\n    \n                if (!res.ok) {\n                    process.env.NODE_ENV === 'development' && console.log(\"INFO: server res =\", res);\n                    throw Error(res.statusText)\n                }\n    \n                const parsedJsonResponse = await res.json();\n                \n                this.apiCallToken = parsedJsonResponse.token;\n    \n                return {\n                    email: params.username,\n                    token: parsedJsonResponse.token,\n                    avatar_url: parsedJsonResponse.avatar_url,\n                    isLocal: true\n                }\n            }\n            catch (error) {\n                throw Error(error)\n            }\n        }\n    };\n\n    get apiCallToken() {\n        return this.state.apiLoginToken;\n    }\n\n    set apiCallToken(token) {\n        this.state.apiLoginToken = token;\n    }\n\n    refreshToken = async () => {\n        const refreshObject = new RefreshObject({\n            token: this.apiCallToken\n        });\n        try {\n            const resp = await RestApiService.post<RefreshObject>({\n                data: refreshObject,\n                endpointUrl: this.state.apiLoginRefreshUrl\n            });\n\n            this.apiCallToken = resp.token;\n\n            return resp;\n        } catch (error) {\n            throw Error(error);\n        }\n    };\n\n    serverLogout = async () => {\n        process.env.NODE_ENV === \"development\" &&\n            console.log(\"server logout...\");\n        \n        // no server-side invalidate implement at this point (a common case for JWT, however)\n\n        this.apiCallToken = \"\";\n        \n        // will let saga dispatch logout to reset authState in session storage\n        \n        return;\n    };\n}\n\nexport const AuthenticationService = new Authentication();\n","import {\n    /** state types */\n    IUpdateAuthState,\n    RequestedLoginMode,\n    /** action types */\n    IUpdateAuthAction,\n    IRequestedLoginAuthAction,\n    RequestedLoginAuthActionParams,\n    IRequestedLogoutAuthAction,\n    ISuccessAuthAction,\n    IFailureAuthAction,\n    /** action names */\n    AuthActionNames,\n} from \"./types\";\n\nimport { RequestStatus } from \"../../utils/rest-api\";\n\nexport const UpdateAuth = (newAuthState: IUpdateAuthState): IUpdateAuthAction => {\n    return {\n        type: AuthActionNames.UPDATE_AUTH,\n        payload: newAuthState\n    };\n};\n\nexport const RequestedLoginAuth = (loginMode: RequestedLoginMode, params?: RequestedLoginAuthActionParams): IRequestedLoginAuthAction => {\n    return {\n        type: AuthActionNames.REQUESTED_LOGIN_AUTH,\n        loginMode,\n        params,\n        payload: {\n            requestStatus: RequestStatus.REQUESTING,\n        }\n    };\n};\n\nexport const RequestedLogoutAuth = (): IRequestedLogoutAuthAction => {\n    return {\n        type: AuthActionNames.REQUESTED_LOGOUT_AUTH,\n        payload: {\n            requestStatus: RequestStatus.REQUESTING,\n        }\n    };\n};\n\nexport const SuccessLoginAuth = (userName: string, expireDateTime: string, apiToken: string, avatarUrl: string, isLocal: boolean): ISuccessAuthAction => {\n    process.env.NODE_ENV === 'development' && console.log(\"action username:\", userName);\n\n    return {\n        type: AuthActionNames.SUCCESS_AUTH,\n        payload: {\n            requestStatus: RequestStatus.SUCCESS,\n            isLogin: true,\n            isLocal: isLocal ? true : false,\n            userName,\n            expireDateTime,\n            apiToken,\n            avatarUrl\n        }\n    };\n};\n\nexport const SuccessLogoutAuth = (): ISuccessAuthAction => {\n    return {\n        type: AuthActionNames.SUCCESS_AUTH,\n        payload: {\n            requestStatus: RequestStatus.SUCCESS,\n            isLogin: false,\n            isLocal: false,\n            userName: \"\",\n            expireDateTime: \"\",\n            apiToken: \"\",\n            avatarUrl: \"\",\n        }\n    };\n};\n\nexport const FailureAuth = (error: any): IFailureAuthAction => {\n    return {\n        type: AuthActionNames.FAILURE_AUTH,\n        payload: {\n            requestStatus: RequestStatus.FAILURE,\n            error\n        }\n    };\n};\n\n// write new actions here for this reducer - auth reducer\n// ...\n","import React, { Component } from \"react\";\n\n/** Components */\nimport { GoogleLogin } from \"react-google-login\";\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n\ninterface ISocialAuthLoginButtonProps {\n    clientID: string;\n    redirectUri?: string;\n    onSuccess(authResponse?: any): void;\n    onFailure?(error: any): void;\n    disabled?: boolean;\n}\n\nexport class SocialAuthLoginButton extends Component<\n    ISocialAuthLoginButtonProps\n> {\n    onLoginButtonClicked = (clickEvent: any, renderProps: any) => {\n        process.env.NODE_ENV === 'development' && console.log(\"login button clicked\", clickEvent, renderProps);\n        renderProps.onClick(clickEvent);\n    };\n\n    onAuthSuccess = (authResponse?: any) => {\n        process.env.NODE_ENV === 'development' && console.log(\"login button auth success\");\n        this.props.onSuccess(authResponse);\n    };\n\n    onAuthFailure = (error: any) => {\n        process.env.NODE_ENV === 'development' && console.log(\"login button auth failed\");\n        if (this.props.onFailure) {\n            this.props.onFailure(error);\n        }\n    };\n\n    render() {\n        return (\n            <div className=\"UserAuthButton\">\n                <GoogleLogin\n                    render={(renderProps: any) => (\n                        <Button\n                            onClick={clickEvent =>\n                                this.onLoginButtonClicked(\n                                    clickEvent,\n                                    renderProps\n                                )\n                            }\n                            unelevated\n                            icon={\n                                <MaterialIcon hasRipple icon=\"account_circle\" />\n                            }\n                            disabled={this.props.disabled}\n                        >\n                            Google Login\n                        </Button>\n                    )}\n                    onSuccess={this.onAuthSuccess}\n                    onFailure={this.onAuthFailure}\n                    clientId={this.props.clientID}\n                    responseType=\"code\"\n                    redirectUri={this.props.redirectUri || \"postmessage\"}\n                />\n            </div>\n        );\n    }\n}\n","import React, { Component } from \"react\";\n\n/** Components */\nimport { GoogleLogout } from \"react-google-login\";\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n\ninterface ISocialAuthLogoutButtonProps {\n    isLocal: boolean\n    onClickWhenIsLocal?(): void\n    onSuccess(authResponse?: any): void;\n    disabled?: boolean\n}\n\nexport class SocialAuthLogoutButton extends Component<\n    ISocialAuthLogoutButtonProps\n> {\n    onAuthSuccess = (authResponse?: any) => {\n        this.props.onSuccess(authResponse);\n    };\n\n    render() {\n        return (\n            <div className=\"UserAuthButton\">\n                <GoogleLogout\n                    render={(renderProps: any) => (\n                        <Button\n                            onClick={(this.props.isLocal) ? this.props.onClickWhenIsLocal : renderProps.onClick}\n                            unelevated\n                            icon={<MaterialIcon hasRipple icon=\"eject\" />}\n                            disabled={this.props.disabled}\n                        >\n                            Logout\n                        </Button>\n                    )}\n                    onLogoutSuccess={this.onAuthSuccess}\n                />\n            </div>\n        );\n    }\n}\n","import React, { Component } from \"react\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\n\n/** Redux */\nimport { Dispatch } from \"redux\";\nimport { connect } from \"react-redux\";\nimport { IRootState } from \"../../store/types\";\nimport { IUpdateAuthAction, IRequestedLoginAuthAction, TAuthActions, IUpdateAuthState, RequestedLoginMode } from \"../../store/auth/types\";\nimport { UpdateAuth, RequestedLoginAuth, RequestedLogoutAuth } from \"../../store/auth/actions\";\n\n/** rest api */\nimport { RequestStatus } from \"../../utils/rest-api\";\n\n/** Components */\nimport { SocialAuthLoginButton } from \"./social-auth-login-button\";\nimport { SocialAuthLogoutButton } from \"./social-auth-logout-button\";\n\ninterface ISocialAuthButtonProps extends RouteComponentProps {\n    auth: IUpdateAuthState;\n    requestedLoginAuth: (socialAuthToken: string) => void;\n    requestedLogoutAuth: () => void;\n}\n\nclass SocialAuthButton extends Component<\n    ISocialAuthButtonProps\n> {\n    state = {\n        clientID: `732988498848-vuhd6g61bnlqe372i3l5pbpnerteu6na.apps.googleusercontent.com`,\n        \n        code: ``, // get `code` from social login button, then obtain token from django server\n        apiLoginToken: ``,\n\n        userEmail: ``,\n        userFirstName: ``,\n        userLastName: ``,\n\n        objectID: ``\n    };\n\n    onSocialLoginSuccess = (googleOauthResponse: any) => {\n        process.env.NODE_ENV === 'development' && console.log(\"Google Oauth2 res:\", googleOauthResponse);\n        this.setState(\n            {\n                code: googleOauthResponse.code\n            },\n            () => {\n                // this.apiLogin();\n                process.env.NODE_ENV === 'development' && console.log(\"social button: request auth...\");\n                this.props.requestedLoginAuth(this.state.code);\n            }\n        );\n    };\n\n    onSocialLoginFailure = (error: any) => {\n        console.error(\"Social login failed:\", error);\n    };\n\n    onSocialLogoutSuccess = () => {\n        process.env.NODE_ENV === 'development' && console.log(\"Social logout success, now our web app logout\");\n        this.props.requestedLogoutAuth();\n    };\n\n    render() {\n        return (\n            <div className=\"SocialAuth\">\n                auth requestStatus: {this.props.auth.requestStatus} <br></br>\n                {!this.props.auth.isLogin ? (\n                    <SocialAuthLoginButton\n                        clientID={this.state.clientID}\n                        onSuccess={this.onSocialLoginSuccess}\n                        onFailure={this.onSocialLoginFailure}\n                        disabled={this.props.auth.requestStatus === RequestStatus.REQUESTING}\n                    />\n                ) : (\n                    <SocialAuthLogoutButton\n                        isLocal={this.props.auth.isLocal}\n\n                        onClickWhenIsLocal={this.onSocialLogoutSuccess}\n                        onSuccess={this.onSocialLogoutSuccess}\n                        \n                        // TODO: logout - ideally no need to wait for request status, just interrupt existing requests\n                        // However, we'll have to cancel those ongoing sagas for data fetching\n                        disabled={this.props.auth.requestStatus === RequestStatus.REQUESTING}\n                    />\n                )}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => {\n    return {\n        auth: store.auth\n    };\n};\n\nfunction mapDispatchToProps(dispatch: Dispatch<TAuthActions>) {\n    return {\n        requestedLoginAuth: (socialAuthToken: string) => {\n            dispatch(\n                RequestedLoginAuth(RequestedLoginMode.SOCIAL_AUTH, {\n                    socialAuthToken\n                })\n            );\n        },\n        requestedLogoutAuth: () => {\n            dispatch(\n                RequestedLogoutAuth()\n            );\n        }\n    };\n}\n\nexport const SocialAuthButtonContainer = withRouter(connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(SocialAuthButton));\n","import React from \"react\";\nimport { FormikValues } from \"formik\";\nimport { DataModelClass } from \"../../../store/data-model/base-model\";\nimport { FormInputField } from \"../form-input-field/form-input-field\";\n\nexport enum InputFieldType {\n    // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input\n    TEXT = \"text\",\n    PASSWORD = \"password\",\n    EMAIL = \"email\",\n    URL = \"url\",\n    DATE = \"date\"\n}\n\n// API for caller to new meta class\nexport interface IFieldBaseMetaProps {\n    fieldName: string\n    label: string;\n\n    isDynamic?: boolean;\n    dynamicLimit?: number;\n    getInstanceDataFromFormikValues?: (formikValues: FormikValues) => any // has to be optional since we want to let caller just use `fieldName` by default to access formik's values\n}\n\n// for form field props\nexport interface IFormBaseFieldProps extends IFieldBaseMetaProps {\n    model?: DataModelClass\n    formikValues?: FormikValues // for form field to load data (e.g. initial value) at a specific position in formik's `values`\n    // getInstanceDataFromFormikValues?: // when it's dynamic field, will use this to render dynamic fields\n}\n\n// for the base meta class\ninterface IFormBaseFieldMeta extends IFieldBaseMetaProps {\n    model?: DataModelClass\n    formField?: React.ComponentType<IFormBaseFieldProps>\n\n    getInstance: (values: FormikValues) => any // for form factory to loop over fieldmeta and obtain field's data instance\n    getInstanceDataFromFormikValues: (formikValues: FormikValues) => any // required because getInstance() depends on it\n}\n\nexport class FormBaseFieldMeta implements IFormBaseFieldMeta {\n    fieldName: string\n    label: string\n\n    model?: DataModelClass\n    formField: React.ComponentType<IFormBaseFieldProps>\n\n    isDynamic?: boolean;\n    dynamicLimit?: number;\n    getInstanceDataFromFormikValues: (formikValues: FormikValues) => any\n\n    constructor(props: IFieldBaseMetaProps) {\n        this.fieldName = props.fieldName;\n        this.label = props.label;\n\n        this.isDynamic = props.isDynamic;\n        this.dynamicLimit = props.dynamicLimit;\n\n        if (props.getInstanceDataFromFormikValues) {\n            this.getInstanceDataFromFormikValues = props.getInstanceDataFromFormikValues;\n        }\n        else {\n            this.getInstanceDataFromFormikValues = (values: FormikValues) => {\n                if (!(values && values[this.fieldName])) {\n                    alert(\"Oops! Something might go wrong. Info: at class FormBaseFieldMeta.\")\n                    console.error(\"values =\", values, \" this.fieldName =\", this.fieldName);\n                    return (this.isDynamic) ? [] : \"\";\n                }\n                else {\n                    if (this.isDynamic && !Array.isArray(values[this.fieldName])) {\n                        alert(\"Oops! Something might go wrong. Info: at class FormBaseFieldMeta.\")\n                        console.error(\"isDynamic=true, but the value is not an array:\");\n                        console.error(\"values =\", values, \" this.fieldName =\", this.fieldName);\n                    }\n                    return values[this.fieldName];\n                }\n            }\n        }\n\n        this.formField = FormInputField;\n    }\n\n    getInstance(values: FormikValues) {\n        const model = this.model;\n        if (model) {\n            if (this.isDynamic) {\n\n                return this.getInstanceDataFromFormikValues(values).map((instanceData: any) => new model(instanceData))\n            }\n            else {\n                return new model(values[this.fieldName]);\n            }\n        }\n\n        // assume field values are plain string/num or other basic types\n        return values[this.fieldName];\n    }\n}","import React, { Component } from \"react\";\nimport { withRouter, RouteComponentProps, Redirect } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch, AnyAction } from \"redux\";\nimport { IRootState } from \"../../store/types\";\nimport { IUpdateAuthState } from \"../../store/auth/types\";\n\n/** Components */\nimport { SocialAuthButtonContainer } from \"../../components/login/social-auth-button\";\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n\n\nconst styles = {\n    backgroundColor: \"purple\",\n    color: \"white\"\n};\n\ninterface ILandingPageProps extends RouteComponentProps {\n    auth: IUpdateAuthState;\n}\n\nclass LandingPage extends Component<ILandingPageProps> {\n    formFactoryProps: any;\n\n    constructor(props: ILandingPageProps) {\n        super(props);\n    }\n\n    onStaffLoginClick = () => {\n        this.props.history.push(\"/local-login/\");\n    }\n\n    render() {\n        return (\n            <div className=\"LandingPage\" style={styles}>\n                <h1>Appl Tracky</h1>\n\n                <SocialAuthButtonContainer />\n\n                <Button\n                    onClick={this.onStaffLoginClick}\n                    unelevated\n                    icon={\n                        <MaterialIcon hasRipple icon=\"warning\" />\n                    }\n                >\n                    Staff Only\n                </Button>\n\n                <hr />\n                \n                <Button\n                    href=\"https://github.com/rivernews/appl-tracky-spa\"\n                    target=\"_blank\"\n                    unelevated\n                    icon={\n                        <MaterialIcon hasRipple icon=\"code\" />\n                    }\n                >\n                    Github Repository\n                </Button>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: IRootState) => ({\n    auth: state.auth\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>) => {\n    // actionName = (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {\n    };\n};\n\nexport const LandingPageContainer = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(LandingPage)\n);\n","import React, { Component } from \"react\";\n\n/** Components */\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\n// mdc-react input\nimport \"@material/react-text-field/dist/text-field.css\";\nimport TextField, { Input } from \"@material/react-text-field\";\n// formik\nimport {\n    Field, FieldProps,\n    ErrorMessage,\n} from \"formik\";\n// input field\nimport { IFormInputFieldProps } from \"./form-input-field-meta\";\nimport { InputFieldType } from \"../form-base-field/form-base-field-meta\";\n\nexport class FormInputField extends Component<IFormInputFieldProps> {\n    render() {\n        return (\n            <div className=\"FormInputField\">\n                <Field\n                    name={this.props.fieldName}\n                    render={({ field, form }: FieldProps<number | string>) => (\n                        <TextField\n                            label={this.props.label}\n                            onTrailingIconSelect={this.props.onTrailingIconSelect}\n                            trailingIcon={this.props.onTrailingIconSelect && <MaterialIcon role=\"button\" icon=\"clear\" />}\n                        >\n                            <Input\n                                type={this.props.type || InputFieldType.TEXT}\n                                inputType=\"input\"\n                                {...field}\n                            />\n                        </TextField>\n                    )}\n                />\n                <ErrorMessage name={this.props.fieldName} />\n            </div>\n        );\n    }\n}","import React, { Component } from \"react\";\n\n/** Components */\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n// data model\nimport { DataModelClass, DataModelInstance, BaseModel } from \"../../store/data-model/base-model\";\n// formik\nimport {\n    Formik,\n    Form,\n    FormikValues,\n    FormikErrors,\n    FormikTouched\n} from \"formik\";\n// yup\nimport * as Yup from 'yup';\n// base field\nimport { FormBaseFieldMeta } from \"./form-base-field/form-base-field-meta\";\n\nexport enum ActionButtonType {\n    SUBMIT = \"submit\",\n    BUTTON = \"button\"\n}\n\nexport class FormActionButtonProps {\n    constructor(\n        public text: string = \"\",\n        public onClick?: (event: any) => void,\n        public type?: ActionButtonType\n    ) { }\n}\n\nexport interface IFormFactoryProps<IDataModel> {\n    onSubmitSuccess?: () => void;\n\n    // pass in either `initialValues` or `initialInstance`, this is important for yup to render error message. If no initial info at all, yup will not display errors properly.\n    // `initialValues` should be used only for customize form; for data model forms please use `initialInstance` so update & create form can be handled together\n    initialValues?: any\n    initialInstance?: DataModelInstance<IDataModel>;\n    enforcedInstanceData?: any;\n\n    model?: DataModelClass;\n    actionButtonPropsList: Array<FormActionButtonProps>;\n    formFieldPropsList: Array<FormBaseFieldMeta>\n    \n    validationSchema?: Yup.Schema<IDataModel>\n\n    onSubmit?: (\n        values: FormikValues,\n        { setSubmitting }: { setSubmitting: Function }\n    ) => void;\n    \n    createInstanceTriggerAction?: (\n        instance: IDataModel,\n        successCallback?: Function,\n        finalCallback?: Function,\n    ) => void;\n    updateInstanceTriggerAction?: (\n        instance: IDataModel,\n        successCallback?: Function,\n        finalCallback?: Function,\n    ) => void;\n}\n\nexport class FormFactory<DataModel> extends Component<\n    IFormFactoryProps<DataModel>\n    > {\n\n    initialInstance?: DataModelInstance<any>;\n    validationSchema?: Yup.Schema<DataModel>;\n\n    constructor(props: IFormFactoryProps<DataModel>) {\n        super(props);\n\n        // guarantee this.initialInstance\n        if (this.props.model && !this.props.initialInstance) {\n            // for create form\n            const model = this.props.model;\n            this.initialInstance = new model({});\n        }\n        else {\n            // for update form\n            this.initialInstance = this.props.initialInstance;\n        }\n\n        // form behavior integrity check\n        if (!this.initialInstance) {\n            if (!this.props.initialValues || !this.props.onSubmit) {\n                throw Error(\"ERROR: form factory has no initialInstance - seems like you're building a custom form that does not use data model. Please pass in initialValues and onSubmit in props to handle the behavior manually.\");\n            }\n        }\n\n        this.validationSchema = this.props.validationSchema || this.props.model.schema;\n        process.env.NODE_ENV === 'development' && console.log(\"this.validationSchema =\", this.validationSchema);\n    }\n\n    onSubmit = (\n        values: FormikValues,\n        { setSubmitting }: { setSubmitting: Function }\n    ) => {\n        process.env.NODE_ENV === 'development' && console.log(\"submit values =\", values); setSubmitting(false);\n\n        setSubmitting(true);\n        let instanceData: any = {};\n        for (let fieldProps of this.props.formFieldPropsList) {\n            const keyName = fieldProps.fieldName;\n            instanceData[keyName] = fieldProps.getInstance(values);\n        }\n\n        // packaging\n        const model = this.props.model;\n        if (\n            model && this.props.createInstanceTriggerAction && this.props.updateInstanceTriggerAction &&\n            this.initialInstance\n        ) {\n            // a create / update form is assumed\n\n            const instance = new model({\n                uuid: this.initialInstance.uuid,\n                ...instanceData,\n                ...this.props.enforcedInstanceData\n            })\n            process.env.NODE_ENV === 'development' && console.log(\"instanceData =\", instanceData);\n            process.env.NODE_ENV === 'development' && console.log(\"instance =\", instance);\n\n            // dispatch API request\n            if (!instance.uuid) {\n                process.env.NODE_ENV === 'development' && console.log(\"ready to send create instance\");\n                this.props.createInstanceTriggerAction(instance, this.props.onSubmitSuccess, () => setSubmitting(false));\n            } else {\n                process.env.NODE_ENV === 'development' && console.log(\"ready to send update instance\");\n                this.props.updateInstanceTriggerAction(instance, this.props.onSubmitSuccess, () => setSubmitting(false));\n            }\n        }\n        else if (this.props.onSubmit) {\n            // if caller has customize onSubmit, then use it instead\n            this.props.onSubmit(values, { setSubmitting });\n        }\n        else {\n            process.env.NODE_ENV === 'development' && console.log(\"this.props.initialInstance =\", this.props.initialInstance);\n            process.env.NODE_ENV === 'development' && console.log(\"this.props.onSubmit =\", this.props.onSubmit);\n            process.env.NODE_ENV === 'development' && console.log(\"this.props.model =\", this.props.model);\n            alert(\"Something is wrong with the form...!\")\n            throw Error(\"ERROR: form factory props not properly configured. See above props.\")\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"FormFactory\">\n                <Formik\n                    initialValues={this.initialInstance || this.props.initialValues}\n                    validationSchema={this.validationSchema}\n                    onSubmit={this.onSubmit}\n                >\n                    {({\n                        values,\n                        isSubmitting\n                    }: {\n                        values: FormikValues,\n                        touched: FormikTouched<FormikValues>,\n                        [props: string]: any\n                    }) => (\n                            <Form>\n                                {this.props.formFieldPropsList.map((formFieldMeta: FormBaseFieldMeta, index: number) => (\n                                    <formFieldMeta.formField \n                                        key={index}\n                                        {...formFieldMeta}\n                                        formikValues={values}\n                                    />\n                                ) )}\n                                {this.props.actionButtonPropsList.map(\n                                    (actionButtonProps: FormActionButtonProps, index) => (\n                                        <Button\n                                            key={index}\n                                            type={actionButtonProps.type || ActionButtonType.BUTTON}\n                                            disabled={isSubmitting}\n                                            unelevated\n                                            onClick={actionButtonProps.onClick}\n                                            children={actionButtonProps.text}\n                                        />\n                                    )\n                                )}\n                            </Form>\n                        )}\n                </Formik>\n            </div>\n        );\n    }\n}\n","// base field\nimport { InputFieldType, FormBaseFieldMeta, IFormBaseFieldProps, IFieldBaseMetaProps } from \"../form-base-field/form-base-field-meta\";\n// input field\nimport { FormInputField } from \"./form-input-field\";\n\n\n// API for caller to new props for input field\nexport interface IFormInputFieldProps extends IFormBaseFieldProps {\n    type?: InputFieldType\n    onTrailingIconSelect?: () => void\n}\n\n// for defining meta\nexport interface IFormInputFieldMetaProps extends IFieldBaseMetaProps {\n    type?: InputFieldType\n    onTrailingIconSelect?: () => void\n}\n\nexport class FormInputFieldMeta extends FormBaseFieldMeta {\n    type?: InputFieldType\n    onTrailingIconSelect?: () => void\n\n    constructor({\n        type,\n        onTrailingIconSelect,\n        ...props\n    }: IFormInputFieldMetaProps) {\n        super(props)\n        this.type = type;\n        this.onTrailingIconSelect = onTrailingIconSelect;\n\n        this.formField = FormInputField;\n    }\n}","import React from \"react\";\n\nimport { FormikValues } from \"formik\";\nimport { RestApiService } from \"../../utils/rest-api\";\nimport { AuthenticationService } from \"../../utils/authentication\";\nimport { FormBaseFieldMeta, InputFieldType } from \"../form-factory/form-base-field/form-base-field-meta\";\nimport { FormInputFieldMeta } from \"../form-factory/form-input-field/form-input-field-meta\";\nimport { FormActionButtonProps, ActionButtonType, FormFactory } from \"../form-factory/form-factory\";\n// yup\nimport * as Yup from 'yup';\n\ninterface ILoginFormProps {\n    // registerLoginSuccess: (userName: string, apiToken: string, avatarUrl: string) => void;\n    // onLoginSuccess: () => void\n    onCancel: () => void\n    onSubmit: (values: FormikValues) => void\n}\n\nexport const LoginForm = (props: ILoginFormProps) => {\n\n    const formFieldPropsList: Array<FormBaseFieldMeta> = [\n        new FormInputFieldMeta({\n            fieldName: \"username\",\n            label: \"Username\"\n        }),\n        new FormInputFieldMeta({\n            fieldName: \"password\",\n            label: \"Password\",\n            type: InputFieldType.PASSWORD\n        }),\n    ];\n    const actionButtonPropsList: Array<FormActionButtonProps> = [\n        new FormActionButtonProps(\"Login\", undefined, ActionButtonType.SUBMIT),\n        new FormActionButtonProps(\"Cancel\", props.onCancel)\n    ];\n\n    const onSubmitLoginForm = async (\n        values: FormikValues,\n        { setSubmitting }: { setSubmitting: Function }\n    ) => {\n        setSubmitting(false);\n        process.env.NODE_ENV === 'development' && console.log(\"values =\", values);\n\n        props.onSubmit(values);\n\n        // try {\n        //     // // post to get login token\n        //     // const res = await fetch(`${RestApiService.state.apiBaseUrl}${AuthenticationService.state.apiLocalLoginUrl}`, {\n        //     //     method: \"POST\",\n        //     //     mode: \"cors\",\n        //     //     credentials: \"omit\",\n        //     //     headers: {\n        //     //         \"Content-Type\": \"application/json\"\n        //     //     },\n        //     //     body: JSON.stringify(values)\n        //     // });\n\n        //     // if (!res.ok) {\n        //     //     process.env.NODE_ENV === 'development' && console.log(\"INFO: server res =\", res);\n        //     //     throw Error(res.statusText)\n        //     // }\n\n        //     // const parsedJsonResponse = await res.json();\n        //     // // set login token\n        //     // AuthenticationService.apiCallToken = parsedJsonResponse.token;\n        //     // // set redux auth store isLogin state --- have to write action and reducer.\n        //     // props.registerLoginSuccess(values.username, parsedJsonResponse.token, parsedJsonResponse.avatar_url);\n        //     // props.onLoginSuccess();\n        // }\n        // catch (err) {\n        //     alert(\"Oops! Wrong username or password.\");\n        //     console.error(\"ERROR: login failed. See error message:\");\n        //     console.error(err);\n        // }\n    };\n\n    // validation\n    const loginFormInitialValues = {\n        username: \"\",\n        password: \"\"\n    }\n    type ILoginFormShape = typeof loginFormInitialValues;\n    const validationSchema: Yup.Schema<ILoginFormShape> = Yup.object<ILoginFormShape>().shape({\n        username: Yup.string().required(\"Forgot to type username...?\"),\n        password: Yup.string().required(\"Password please...!\")\n    })\n\n\n    return (\n        <div className=\"loginForm\">\n            <FormFactory\n                initialValues={loginFormInitialValues}\n    \n                formFieldPropsList={formFieldPropsList}\n                actionButtonPropsList={actionButtonPropsList}\n\n                validationSchema={validationSchema}\n    \n                onSubmit={onSubmitLoginForm}\n            />\n        </div>\n    )\n}","import React, { Component } from \"react\";\nimport { withRouter, RouteComponentProps, Redirect } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch, AnyAction } from \"redux\";\nimport { IRootState } from \"../../store/types\";\nimport { IUpdateAuthState, RequestedLoginMode } from \"../../store/auth/types\";\nimport { RequestedLoginAuth } from \"../../store/auth/actions\";\nimport { FormikValues } from \"formik\";\n\n/** Components */\nimport { LoginForm } from \"../../components/login/local-login-form\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\n\n\ninterface ILocalLoginPageProps extends RouteComponentProps {\n    /** redux state */\n    auth: IUpdateAuthState;\n\n    /** dispatch action */\n    requestedLoginAuth: (username: string, password: string) => void;\n}\n\nclass LocalLoginPage extends Component<ILocalLoginPageProps> {\n    onLoginFormCancel = () => {\n        this.props.history.push(\"/\");\n    }\n\n    onLoginFormSubmit = (values: FormikValues) => {\n        this.props.requestedLoginAuth(values.username, values.password);\n    }\n\n    render() {\n        return (\n            <div className=\"LocalLoginPage\">\n                <h1>Login Portal for Staff</h1>\n                <LoginForm \n                    onSubmit={this.onLoginFormSubmit}\n                    onCancel={this.onLoginFormCancel}\n                />\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    auth: store.auth\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>) => {\n    // actionName: (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {\n        requestedLoginAuth: (username: string, password: string) => {\n            dispatch(\n                RequestedLoginAuth(RequestedLoginMode.LOCAL, {\n                    username, password\n                })\n            );\n        },\n    }\n};\n\nexport const LocalLoginPageContainer = withRouter(connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(LocalLoginPage));\n","import { Action, Reducer } from \"redux\";\nimport { takeEvery, take, call, put, actionChannel } from \"redux-saga/effects\";\nimport { SagaIterator } from \"redux-saga\";\nimport {\n    RequestStatus,\n    CrudType,\n    CrudMapToRest,\n    RestApiService,\n    IRequestParams,\n    ISingleRestApiResponse,\n    IListRestApiResponse,\n    IsSingleRestApiResponseTypeGuard\n} from \"../utils/rest-api\";\nimport omit from \"lodash/omit\";\n\n/** state & store */\n\nexport interface IObjectBase {\n    uuid: string;\n}\n\nexport type TObject<Schema> = IObjectBase & { [Property in keyof Schema]: Schema[Property] };\n\ninterface IObjectList<Schema> {\n    [uuid: string]: TObject<Schema>;\n}\n\nexport interface IObjectStore<Schema> {\n    lastChangedObjectID?: string;\n    requestStatus: RequestStatus;\n    error?: any;\n    collection: IObjectList<Schema>;\n}\n\n/** action */\n\ntype IObjectRestApiReduxFactoryActions = {\n    [restfulKeyword: string]: {\n        [asyncKeyword: string]: {\n            actionTypeName: string;\n            action: Function;\n            saga?: () => SagaIterator;\n        };\n    };\n};\n\nexport interface IObjectAction<Schema> extends Action {\n    type: string;\n    crudType: CrudType;\n\n    // for deleteAction or other actions to obtain the original instance obj passed into trigger action\n    triggerFormData?: TObject<Schema> | Array<TObject<Schema>>;\n\n    // for saga to perform additional side effect e.g. navigation\n    // only for triggerActions\n    successCallback?: Function;\n    failureCallback?: (error: any) => void;\n    finalCallback?: Function;\n\n    // for custumized api call\n    absoluteUrl?: string\n    \n    payload: {\n        formData?: TObject<Schema> | Array<TObject<Schema>>;\n        lastChangedObjectID?: string;\n        requestStatus: RequestStatus;\n        error?: any;\n    };\n}\n\n/** factory API */\n\ninterface IRestApiReduxFactory<Schema> {\n    actions: IObjectRestApiReduxFactoryActions;\n    storeReducer: Reducer<IObjectStore<Schema>>\n    sagas: Array<() => SagaIterator>;\n}\n\nexport const RestApiReduxFactory = <Schema extends IObjectBase>(\n    /** should have uuid */ objectName: string,\n    initialObjectInstance: TObject<Schema>\n): IRestApiReduxFactory<Schema> => {\n    type TObjectSchema = typeof initialObjectInstance;\n    const crudKeywords = Object.values(CrudType);\n\n    let ObjectRestApiRedux: IObjectRestApiReduxFactoryActions = {};\n    for (let crudKeyword of crudKeywords) {\n        ObjectRestApiRedux[crudKeyword] = {};\n        /** store */\n        // TODO?: action state\n\n        /** action */\n        // action type names\n        for (let requestStatus of Object.values(RequestStatus)) {\n            ObjectRestApiRedux[crudKeyword][requestStatus] = {\n                actionTypeName: \"\",\n                action: () => {}\n            };\n            ObjectRestApiRedux[crudKeyword][\n                requestStatus\n            ].actionTypeName = `${requestStatus.toUpperCase()}_${crudKeyword.toUpperCase()}_${objectName.toUpperCase()}`;\n        }\n\n        // async actions ( & state...)\n        ObjectRestApiRedux[crudKeyword][RequestStatus.TRIGGERED].action = (\n            objectClassInstance?: TObjectSchema,\n            successCallback?: Function,\n            failureCallback?: (error: any) => void,\n            finalCallback?: Function,\n            absoluteUrl?: string,\n        ): IObjectAction<TObjectSchema> => {\n            process.env.NODE_ENV === 'development' && console.log(`action:fired, trigger, ${crudKeyword}`);\n            return {\n                type:\n                    ObjectRestApiRedux[crudKeyword][RequestStatus.TRIGGERED]\n                        .actionTypeName,\n                crudType: crudKeyword,\n                finalCallback,\n                successCallback,\n                failureCallback,\n                absoluteUrl,\n                payload: {\n                    requestStatus: RequestStatus.TRIGGERED,\n                    formData: objectClassInstance\n                }\n            };\n        };\n        ObjectRestApiRedux[crudKeyword][\n            RequestStatus.REQUESTING\n        ].action = (): IObjectAction<TObjectSchema> => {\n            return {\n                type:\n                    ObjectRestApiRedux[crudKeyword][RequestStatus.REQUESTING]\n                        .actionTypeName,\n                crudType: crudKeyword,\n                payload: {\n                    requestStatus: RequestStatus.REQUESTING\n                }\n            };\n        };\n        ObjectRestApiRedux[crudKeyword][RequestStatus.SUCCESS].action = (\n            /** api response */\n            jsonResponse:\n            | IListRestApiResponse<TObjectSchema>\n            | ISingleRestApiResponse<TObjectSchema>,\n            triggerFormData?: TObject<Schema> | Array<TObject<Schema>>\n        ): IObjectAction<TObjectSchema> => {\n            let newState = {\n                type:\n                    ObjectRestApiRedux[crudKeyword][RequestStatus.SUCCESS]\n                        .actionTypeName,\n                crudType: crudKeyword\n            };\n            // if is delete success, we don't need formData (& the server responds nothing for DELETE as well)\n            if (crudKeyword === CrudType.DELETE) {\n                return {\n                    ...newState,\n                    triggerFormData,\n                    payload: {\n                        requestStatus: RequestStatus.SUCCESS,\n                    }\n                }\n            }\n            else if (IsSingleRestApiResponseTypeGuard(jsonResponse)) {\n                return {\n                    ...newState,\n                    payload: {\n                        requestStatus: RequestStatus.SUCCESS,\n                        formData: <ISingleRestApiResponse<TObjectSchema>>(\n                            jsonResponse\n                        ),\n                        lastChangedObjectID: jsonResponse.uuid\n                    }\n                };\n            } else {\n                return {\n                    ...newState,\n                    payload: {\n                        requestStatus: RequestStatus.SUCCESS,\n                        formData: (<IListRestApiResponse<TObjectSchema>>(\n                            jsonResponse\n                        )).results\n                    }\n                };\n            }\n        };\n        ObjectRestApiRedux[crudKeyword][RequestStatus.FAILURE].action = (\n            error: any\n        ): IObjectAction<TObjectSchema> => {\n            return {\n                type:\n                    ObjectRestApiRedux[crudKeyword][RequestStatus.FAILURE]\n                        .actionTypeName,\n                crudType: crudKeyword,\n                payload: {\n                    requestStatus: RequestStatus.FAILURE,\n                    error\n                }\n            };\n        };\n\n        /** saga */\n        const sagaHandler = function*(\n            triggerAction: IObjectAction<TObjectSchema>\n        ) {\n            process.env.NODE_ENV === 'development' && console.log(`Saga: action intercepted; aync=trigger, crud=${crudKeyword}, obj=${objectName}; ready to call api`);\n            const formData = triggerAction.payload.formData;\n            const absoluteUrl = triggerAction.absoluteUrl;\n\n            yield put(\n                ObjectRestApiRedux[crudKeyword][\n                    RequestStatus.REQUESTING\n                ].action()\n            );\n\n            try {\n                // api call\n                const jsonResponse:\n                    | IListRestApiResponse<TObjectSchema>\n                    | ISingleRestApiResponse<TObjectSchema> \n                    | any = yield call(\n                    (<(params: IRequestParams<TObjectSchema>) => void>RestApiService[CrudMapToRest(crudKeyword)]),\n                    {\n                        data: formData,\n                        objectName,\n                        absoluteUrl,\n                    }\n                );\n\n                process.env.NODE_ENV === 'development' && console.log(\"Saga: res from server\", jsonResponse);\n\n                if (jsonResponse.status && jsonResponse.status >= 400) {\n                    console.error(\"Server error, see message in res.\");\n                    throw new Error(\"Server error, see message in res.\");\n                } \n\n                // if there is .next in res, then it's paginated data and we should perform a next request to next page data\n                if(jsonResponse.next) {\n                    process.env.NODE_ENV === 'development' && console.log(\"Saga: res contains next url, so we will also trigger list request for next=\", jsonResponse.next);\n                    yield put(ObjectRestApiRedux[CrudType.LIST][RequestStatus.TRIGGERED].action(\n                        undefined, undefined, undefined, undefined, jsonResponse.next\n                    ));\n                }\n\n                // success state\n                if (crudKeyword === CrudType.DELETE) {\n                    yield put(\n                        ObjectRestApiRedux[CrudType.DELETE][\n                            RequestStatus.SUCCESS\n                        ].action(jsonResponse, formData)\n                    );\n                } else {\n                    process.env.NODE_ENV === 'development' && console.log(\"Saga: ready to dispatch success action\")\n                    yield put(\n                        ObjectRestApiRedux[crudKeyword][\n                            RequestStatus.SUCCESS\n                        ].action(jsonResponse)\n                    );\n                }\n\n                if (triggerAction.successCallback) {\n                    triggerAction.successCallback();\n                }\n            } catch (error) {\n                // error state\n                yield put(\n                    ObjectRestApiRedux[crudKeyword][\n                        RequestStatus.FAILURE\n                    ].action(error)\n                );\n\n                if (triggerAction.failureCallback) {\n                    triggerAction.failureCallback(error);\n                }\n                return;\n            }\n\n            if (triggerAction.finalCallback) {\n                triggerAction.finalCallback();\n            }\n        };\n\n        ObjectRestApiRedux[crudKeyword][\n            RequestStatus.TRIGGERED\n        ].saga = function*() {\n            process.env.NODE_ENV === 'development' && console.log(`Saga: action intercepted; async=trigger, crud=${crudKeyword}, obj=${objectName}`);\n            \n            // queue style \n            const objectTriggerActionChannel = yield actionChannel(\n                ObjectRestApiRedux[crudKeyword][RequestStatus.TRIGGERED]\n                    .actionTypeName\n            )\n\n            while (true) {\n                const objectTriggerAction = yield take(objectTriggerActionChannel);\n                yield call(sagaHandler, objectTriggerAction);\n            }\n        };\n    }\n\n    const initialState: IObjectStore<TObjectSchema> = {\n        collection: {},\n        requestStatus: RequestStatus.SUCCESS\n    };\n\n    const storeReducer: Reducer<IObjectStore<Schema>> = (\n        objectStore: IObjectStore<TObjectSchema> = initialState,\n        action: Action\n    ): IObjectStore<TObjectSchema> => {\n        \n        const objectAction = action as IObjectAction<TObjectSchema>;\n\n        if (\n            !(objectAction && objectAction.payload && objectAction.payload.requestStatus) ||\n            !(action.type.split(\"_\")[2] === objectName.toUpperCase())\n        ) {\n            return {\n                ...objectStore\n            };\n        }\n\n        // async success\n        if (objectAction.payload.requestStatus === RequestStatus.SUCCESS) {\n            // CREATE\n            if (objectAction.crudType === CrudType.CREATE) {\n                let newObject = <TObject<TObjectSchema>>objectAction.payload.formData;\n                return {\n                    collection: {\n                        ...objectStore.collection,\n                        [newObject.uuid]: newObject\n                    },\n                    requestStatus: objectAction.payload.requestStatus,\n                    lastChangedObjectID: objectAction.payload.lastChangedObjectID\n                };\n            }\n\n            // LIST\n            else if (objectAction.crudType === CrudType.LIST) {\n                const resObjectList = <Array<TObject<TObjectSchema>>>(\n                    objectAction.payload.formData\n                );\n                let newObjects: IObjectList<TObjectSchema> = {};\n                for (let object of resObjectList) {\n                    newObjects[object.uuid] = object;\n                }\n                process.env.NODE_ENV === 'development' && console.log(\"Reducer: crud=list, action=\", objectAction)\n                process.env.NODE_ENV === 'development' && console.log(\"initialState=\", initialState)\n                process.env.NODE_ENV === 'development' && console.log(\"beforestore=\", objectStore)\n                process.env.NODE_ENV === 'development' && console.log(\"newlistobjects=\", newObjects)\n\n                const afterStore: IObjectStore<TObjectSchema> = {\n                    collection: {\n                        ...objectStore.collection,\n                        ...newObjects\n                    },\n                    requestStatus: objectAction.payload.requestStatus\n                };\n                process.env.NODE_ENV === 'development' && console.log(\"afterstore=\", afterStore)\n\n                return afterStore;\n            }\n\n            // UPDATE\n            else if (objectAction.crudType === CrudType.UPDATE) {\n                let newObject = <TObject<TObjectSchema>>objectAction.payload.formData;\n                return {\n                    collection: {\n                        ...objectStore.collection,\n                        [newObject.uuid]: newObject\n                    },\n                    requestStatus: objectAction.payload.requestStatus,\n                    lastChangedObjectID: objectAction.payload.lastChangedObjectID\n                };\n            }\n\n            // DELETE\n            else if (objectAction.crudType === CrudType.DELETE) {\n                let targetDeleteObject = <TObject<TObjectSchema>>objectAction.triggerFormData;\n                process.env.NODE_ENV === 'development' && console.log(\"Reducer: delete, targetobj=\", targetDeleteObject)\n\n                process.env.NODE_ENV === 'development' && console.log(\"Reducer: delete, beforestore=\", objectStore)\n                \n                const afterStore = {\n                    collection: omit(objectStore.collection, [targetDeleteObject.uuid]),\n                    requestStatus: objectAction.payload.requestStatus\n                }\n                process.env.NODE_ENV === 'development' && console.log(\"Reducer: delete, afterstore\", afterStore)\n\n                return afterStore;\n            }\n        }\n\n        // async trigger\n        else if (objectAction.payload.requestStatus === RequestStatus.TRIGGERED) {\n            return {\n                ...objectStore,\n                requestStatus: objectAction.payload.requestStatus\n            };\n        }\n\n        // async requesting & failure\n        else {\n            return {\n                ...objectStore,\n                ...objectAction.payload\n            };\n        }\n\n        // no effect\n        return {\n            ...objectStore\n        };\n    };\n\n    const sagas = crudKeywords.map((crudKeyword) => \n        (<() => SagaIterator>ObjectRestApiRedux[crudKeyword][RequestStatus.TRIGGERED].saga)\n    );\n\n    return {\n        actions: ObjectRestApiRedux,\n        storeReducer,\n        sagas\n    };\n};\n","import { RestApiReduxFactory } from \"../rest-api-redux-factory\";\nimport { BaseModel, IBaseModelProps } from \"./base-model\";\nimport * as Yup from \"yup\";\n\nexport interface IAddressProps {\n    place_name?: string;\n    country?: string;\n    state?: string;\n    city?: string;\n    street?: string;\n    full_address?: string;\n    zipcode?: string;\n}\n\nexport class Address extends BaseModel {\n    place_name: string;\n    country: string;\n    state: string;\n    city: string;\n    street: string;\n    full_address: string;\n    zipcode: string;\n\n    constructor({\n        place_name = \"\",\n        country = \"\",\n        state = \"\",\n        city = \"\",\n        street = \"\",\n        full_address = \"\",\n        zipcode = \"\",\n        ...args\n    }: IAddressProps & IBaseModelProps) {\n        super(args);\n        this.place_name = place_name;\n        this.country = country;\n        this.state = state;\n        this.place_name = place_name;\n        this.city = city;\n        this.street = street;\n        this.full_address = full_address;\n        this.zipcode = zipcode;\n    }\n\n    static schema(){\n        return Yup.object<Address>().shape({\n            full_address: Yup.string().max(200),\n            street: Yup.string().max(150),\n            city: Yup.string().max(50),\n            state: Yup.string().max(50),\n            country: Yup.string().max(50),\n            place_name: Yup.string().max(50),\n            zipcode: Yup.string().max(20),\n        });\n    }\n\n}\n\nconst initialAddressInstance = new Address({});\nconst AddressRestApiRedux = RestApiReduxFactory<Address>(\n    \"addresses\",\n    initialAddressInstance\n);","import { BaseModel, IBaseModelProps } from \"./base-model\";\nimport * as Yup from \"yup\";\n\ninterface ILinkProps {\n    text?: string;\n    user?: any;\n    url?: string;\n    order?: number;\n}\n\nexport class Link extends BaseModel {\n    public text: string;\n    public user: any;\n    public url: string;\n    public order: number;\n\n    constructor({\n        text = \"\",\n        user = {},\n        url = \"\",\n        order = 0,\n        ...args\n    }: ILinkProps & IBaseModelProps) {\n        super(args);\n        this.text = text;\n        this.user = user;\n        this.url = url;\n        this.order = order;\n    }\n\n    static schema(){\n        return Yup.object<Link>().shape({\n            text:  Yup.string().max(200),\n            url: Yup.string().default(\"#\").when(\n                \"text\", {\n                    is: (text) => text,\n                    then: Yup.string().required(\"Since you gave the link some text, let's provide an url as well...!\").max(500, \"URL is too long, only less than 500 characters please\")\n                }\n            ),\n        });\n    }\n}\n","import { RestApiReduxFactory } from \"../rest-api-redux-factory\";\nimport { BaseModel, IBaseModelProps } from \"./base-model\";\nimport { Address } from \"./address\";\nimport { Link } from \"./link\";\nimport * as Yup from \"yup\";\n\ninterface ICompanyProps {\n    user?: string;\n    labels?: any;\n    name?: string;\n    hq_location?: Address;\n    home_page?: Link;\n    ratings?: any;\n    applications?: any;\n}\n\nexport class Company extends BaseModel {\n    public user: string;\n    public labels: any;\n    public name: string;\n    public hq_location: Address;\n    public home_page: Link;\n    public ratings: any;\n    public applications: any;\n\n    constructor({\n        user = \"\",\n        labels = [],\n        name = \"\",\n        hq_location = new Address({}),\n        home_page = new Link({}),\n        ratings = {},\n        applications = {},\n        ...args\n    }: ICompanyProps & IBaseModelProps) {\n        super(args);\n        this.user = user;\n        this.labels = labels;\n        this.name = name;\n        this.hq_location = hq_location;\n        this.home_page = home_page;\n        this.ratings = ratings;\n        this.applications = applications;\n    }\n\n    static schema(){\n        return Yup.object<Company>().shape({\n            name: Yup.string().required(\"Every company needs a name...!\").max(100),\n            home_page: Link.schema(),\n            hq_location: Address.schema()\n        });\n    }\n}\n\nconst initialCompanyInstance = new Company({});\nconst CompanyRestApiRedux = RestApiReduxFactory<Company>(\n    \"companies\",\n    initialCompanyInstance\n);\nexport const CompanyActions = CompanyRestApiRedux.actions;\nexport const CompanyReducer = CompanyRestApiRedux.storeReducer;\nexport const CompanySagas = CompanyRestApiRedux.sagas;\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\n\n/** Redux */\nimport { Company } from \"../../store/data-model/company\";\n\n/** Components */\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc-react icon button\nimport '@material/react-icon-button/dist/icon-button.css';\nimport IconButton from '@material/react-icon-button';\n\ninterface ICompanyComponentProps {\n    company: Company;\n    onDeleteIconClicked?: (event: any) => void\n    onEditIconClicked?: (event: any) => void\n}\n\nexport class CompanyComponent extends Component<ICompanyComponentProps> {\n    render() {\n        const company = this.props.company;\n        return (\n            <div className=\"CompanyComponent\">\n                <p>\n                    <Link to={`/com-app/${company.uuid}/`}>\n                        {company.name}\n                    </Link>\n                    <IconButton onClick={this.props.onEditIconClicked}>\n                        <MaterialIcon hasRipple icon=\"edit\" />\n                    </IconButton>\n                    <IconButton onClick={this.props.onDeleteIconClicked}>\n                        <MaterialIcon hasRipple icon=\"delete\" />\n                    </IconButton>\n\n                    <br />\n\n                    {(company.hq_location.full_address) && <span>\n                        <strong>{company.hq_location.place_name || \"Location\"}:</strong> {company.hq_location.full_address}\n                    </span>}\n\n                    <br />\n                    \n                    {(company.home_page.url) && <span>\n                        <strong>Company Website: </strong>\n                        {(company.home_page.url) && <a target=\"_blank\" href={\n                            (company.home_page.url && company.home_page.url.includes(\"//\")) ?\n                                company.home_page.url :\n                                `//${company.home_page.url}`\n                        }>\n                            {company.home_page.text || \"Link\"}\n                        </a>}\n                    </span>}\n                    \n                    <br />\n                </p>\n            </div>\n        );\n    }\n}\n","import { RestApiReduxFactory } from \"../rest-api-redux-factory\";\nimport { BaseModel, IBaseModelProps, IRelationship } from \"./base-model\";\nimport { Link } from \"./link\";\nimport * as Yup from \"yup\";\n\ninterface IApplicationProps {\n    user?: IRelationship;\n    user_company?: IRelationship;\n    position_title?: string;\n    job_description_page?: Link;\n    job_source?: Link;\n    labels?: any;\n    notes?: string;\n}\n\nexport class Application extends BaseModel {\n    public user: string;\n    public user_company: IRelationship;\n    public position_title: string;\n    public job_description_page: Link;\n    public job_source: Link;\n    public labels: any;\n    public notes: string;\n\n    constructor({\n        user = \"\",\n        user_company = \"\",\n        position_title = \"\",\n        job_description_page = new Link({}),\n        job_source = new Link({}),\n        labels = {},\n        notes = \"\",\n        ...args\n    }: IApplicationProps & IBaseModelProps) {\n        super(args);\n        this.user = user;\n        this.user_company = user_company;\n        this.position_title = position_title;\n        this.job_description_page = job_description_page;\n        this.job_source = job_source;\n        this.labels = labels;\n        this.notes = notes;\n    }\n\n    static schema(){\n        return Yup.object<Application>().shape({\n            position_title: Yup.string().required(\"We need a title...!\").max(150, \"No more than 150 characters\"),\n            job_description_page: Link.schema(),\n            job_source: Link.schema(),\n            notes: Yup.string(),\n        });\n    }\n}\n\nconst initialApplicationInstance = new Application({});\nconst ApplicationRestApiRedux = RestApiReduxFactory<Application>(\n    \"applications\",\n    initialApplicationInstance\n);\nexport const ApplicationActions = ApplicationRestApiRedux.actions;\nexport const ApplicationReducer = ApplicationRestApiRedux.storeReducer;\nexport const ApplicationSagas = ApplicationRestApiRedux.sagas;\n","import { RestApiReduxFactory } from \"../rest-api-redux-factory\";\nimport { BaseModel, IBaseModelProps, IRelationship } from \"./base-model\";\nimport { ApplicationStatusLink } from \"./application-status-link\";\nimport * as Yup from \"yup\";\n\ninterface IApplicationStatusProps {\n    text?: string;\n    application?: IRelationship;\n    applicationstatuslink_set?: Array<ApplicationStatusLink>\n    date?: string;\n    order?: number\n}\n\nexport class ApplicationStatus extends BaseModel {\n    public text: string;\n    public application: IRelationship;\n    // public applicationstatuslink_set: Array<ApplicationStatusLink>\n    public applicationstatuslink_set: Array<ApplicationStatusLink>\n    public date: string;\n    public order: number;\n\n    constructor({\n        text = \"\",\n        application = \"\",\n        // applicationstatuslink_set = [],\n        applicationstatuslink_set = [],\n        date = ApplicationStatus.localeNowDateString(),\n        order = 0,\n        ...args\n    }: IApplicationStatusProps & IBaseModelProps) {\n        super(args);\n        this.text = text;\n        this.application = application;\n        this.applicationstatuslink_set = applicationstatuslink_set;\n        this.date = date;\n        this.order = order;\n    }\n\n    static schema(){\n        return Yup.object<ApplicationStatus>().shape({\n            text: Yup.string().required(\"Give a quick one or two words for the status\").max(50, \"No more than 50 characters\"),\n\n            // date: Yup.string().matches(/[01]\\d{1}[-/][0123]\\d{1}[-/]\\d{4}/), // TODO: not working, always invalid, figure out why\n            date: Yup.string().length(10), // workaround\n            \n            order: Yup.number()\n        });\n    }\n\n    static localeNowDateString() {\n        const now = new Date();\n        const localeNow = new Date(Date.UTC(now.getUTCFullYear(), now.getUTCMonth(), now.getDate() ));\n        const localeNowTimeString = localeNow.toISOString().split(\"T\")[0]\n        return localeNowTimeString;\n    }\n}\n\nconst initialApplicationStatusInstance = new ApplicationStatus({});\nconst ApplicationStatusRestApiRedux = RestApiReduxFactory<ApplicationStatus>(\n    \"application-statuses\",\n    initialApplicationStatusInstance\n);\nexport const ApplicationStatusActions = ApplicationStatusRestApiRedux.actions;\nexport const ApplicationStatusReducer = ApplicationStatusRestApiRedux.storeReducer;\nexport const ApplicationStatusSagas = ApplicationStatusRestApiRedux.sagas;\n","import { RestApiReduxFactory } from \"../rest-api-redux-factory\";\nimport { BaseModel, IBaseModelProps, IRelationship } from \"./base-model\";\nimport { Link } from \"./link\";\n\ninterface IApplicationStatusLinkProps {\n    application_status?: IRelationship;\n    link?: Link;\n}\n\nexport class ApplicationStatusLink extends BaseModel {\n    public application_status: IRelationship;\n    public link: Link;\n\n    constructor({\n        application_status = \"\",\n        link = new Link({}),\n        ...args\n    }: IApplicationStatusLinkProps & IBaseModelProps) {\n        super(args);\n        this.application_status = application_status;\n        this.link = link;\n    }\n}","import React from \"react\";\n\n/** Components */\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n// mdc-react icon button\nimport '@material/react-icon-button/dist/icon-button.css';\nimport IconButton from '@material/react-icon-button';\n// data model\nimport { DataModelClass } from \"../../../store/data-model/base-model\";\n// formik\nimport {\n    FieldArray,\n    ArrayHelpers,\n} from \"formik\";\n// base field\nimport { IFormBaseFieldProps } from \"./form-base-field-meta\";\n\ninterface IFormBaseDyanmicFieldControllsProps {\n    index: number\n    formikArrayHelpers: ArrayHelpers\n}\n\nconst FormBaseDynamicFieldControlls = (props: IFormBaseDyanmicFieldControllsProps) => {\n\n    const deleteField = () => {\n        props.formikArrayHelpers.remove(props.index);\n    }\n\n    return (\n        <div className=\"FormBaseDynamicFieldControlls\">\n            <IconButton onClick={deleteField}>\n                <MaterialIcon hasRipple icon=\"delete\" />\n            </IconButton>\n        </div>\n    )\n}\n\nconst BaseDynamicFieldAddButton = (props: {\n    formikArrayHelpers: ArrayHelpers\n    model?: DataModelClass\n    label: string\n}) => {\n\n    const onAddClick = () => {\n        if (props.model) {\n            const model = props.model;\n            props.formikArrayHelpers.push(new model({}));\n        } else {\n            props.formikArrayHelpers.push({});\n        }\n    }\n\n    return (\n        <Button type=\"button\" onClick={onAddClick} children={`New ${props.label}`} />\n    )\n}\n\nexport const withFormBaseField = (FormFieldComponent: React.ComponentType<IFormBaseFieldProps>) => (props: IFormBaseFieldProps) => {\n\n    if (props.isDynamic && !props.formikValues) {\n        alert(\"Oops! Something's wrong.\");\n        throw Error(\"When `isDynamic` is true, you need to pass over `formikValues`.\");\n    }\n\n    const formikValues = props.formikValues;\n    const getInstanceDataFromFormikValues = props.getInstanceDataFromFormikValues;\n\n    return (\n        (props.isDynamic && getInstanceDataFromFormikValues && formikValues) ?\n            (<FieldArray\n                name={props.fieldName}\n                render={formikArrayHelpers => (\n                    <div className=\"FormApplicationStatusLinkFieldsContainer\">\n                        {getInstanceDataFromFormikValues(formikValues).map((instanceData: any, index: number) => (\n                            <div key={index} className=\"FormBaseDynamicField\">\n                                <FormFieldComponent\n                                    fieldName={`${props.fieldName}[${index}]`}\n                                    label={`${props.label} ${index}`}\n                                    formikValues={props.formikValues}\n                                    getInstanceDataFromFormikValues={props.getInstanceDataFromFormikValues}\n                                />\n                                <FormBaseDynamicFieldControlls\n                                    index={index}\n                                    formikArrayHelpers={formikArrayHelpers}\n                                />\n                            </div>\n                        ))}\n\n                        <BaseDynamicFieldAddButton\n                            formikArrayHelpers={formikArrayHelpers}\n                            label={props.label}\n                            model={props.model}\n                        />\n                    </div>\n                )}\n            />)\n            :\n            (<FormFieldComponent\n                fieldName={props.fieldName}\n                label={props.label}\n                formikValues={props.formikValues}\n                getInstanceDataFromFormikValues={props.getInstanceDataFromFormikValues}\n            />)\n    )\n}","/** Components */\n// base field\nimport { withFormBaseField } from \"../form-base-field/form-base-field\";\n// link field\nimport { FormLinkFieldComponent } from \"./form-link-field-component\";\n\nexport const FormLinkField = withFormBaseField(FormLinkFieldComponent);\n","import React, { Component } from \"react\";\n\n/** Components */\n// mdc-react input\nimport \"@material/react-text-field/dist/text-field.css\";\n\nimport { FormInputFieldMeta } from \"../form-input-field/form-input-field-meta\";\nimport { FormInputField } from \"../form-input-field/form-input-field\";\nimport { IFormBaseFieldProps } from \"../form-base-field/form-base-field-meta\";\n\nexport interface IFormLinkFieldComponentProps extends IFormBaseFieldProps {\n}\n\nexport class FormLinkFieldComponent extends Component<IFormLinkFieldComponentProps> {\n\n    textInputFieldMeta: FormInputFieldMeta;\n    urlInputFieldMeta: FormInputFieldMeta;\n\n    constructor(props: IFormLinkFieldComponentProps) {\n        super(props)\n\n        this.textInputFieldMeta = new FormInputFieldMeta({\n            fieldName: `${this.props.fieldName}.text`,\n            label: \"Description\"\n        });\n        this.urlInputFieldMeta = new FormInputFieldMeta({\n            fieldName: `${this.props.fieldName}.url`,\n            label: \"Link url\"\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"FormLinkField\">\n                {this.props.label && <h4>{this.props.label}</h4>}\n                <FormInputField\n                    {...this.textInputFieldMeta}\n                />\n\n                <FormInputField\n                    {...this.urlInputFieldMeta}\n                />\n            </div>\n        );\n    }\n}","// data model\nimport { Link } from \"../../../store/data-model/link\";\n\n/** Components */\n// base field\nimport { IFieldBaseMetaProps, FormBaseFieldMeta } from \"../form-base-field/form-base-field-meta\";\nimport { FormLinkField } from \"./form-link-field\";\n\nexport class FormLinkFieldMeta extends FormBaseFieldMeta {\n\n    constructor(props: IFieldBaseMetaProps) {\n        super(props)\n        this.model = Link;\n        this.formField = FormLinkField;\n    }\n}\n","/** Components */\n// link field\nimport { FormApplicationStatusLinkFieldComponent } from \"./form-application-status-link-field-component\";\n// base dynamic field\nimport { withFormBaseField } from \"../form-base-field/form-base-field\";\n\nexport const FormApplicationStatusLinkField = withFormBaseField(FormApplicationStatusLinkFieldComponent);","import React, { Component } from \"react\";\n\n/** Components */\n// mdc-react input\nimport \"@material/react-text-field/dist/text-field.css\";\n// link form\nimport { FormLinkFieldMeta } from \"../form-link-field/form-link-field-meta\";\nimport { FormLinkField } from \"../form-link-field/form-link-field\";\nimport { IFormBaseFieldProps } from \"../form-base-field/form-base-field-meta\";\n\nexport interface IFormApplicationStatusLinkFieldComponentProps extends IFormBaseFieldProps {\n}\n\nexport class FormApplicationStatusLinkFieldComponent extends Component<IFormApplicationStatusLinkFieldComponentProps> {\n\n    linkFieldProps: FormLinkFieldMeta;\n\n    constructor(props: IFormApplicationStatusLinkFieldComponentProps) {\n        super(props)\n\n        this.linkFieldProps = new FormLinkFieldMeta({\n            fieldName: `${this.props.fieldName}.link`,\n            label: ``,\n            isDynamic: false, // Link is a one-to-one field in application status link model\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"FormApplicationStatusLinkField\">\n                {this.props.label && <h4>{this.props.label}</h4>}\n                <FormLinkField\n                    {...this.linkFieldProps}\n                    formikValues={this.props.formikValues}\n                    getInstanceDataFromFormikValues={this.props.getInstanceDataFromFormikValues}\n                />\n            </div>\n        );\n    }\n}","// data model\nimport { ApplicationStatusLink } from \"../../../store/data-model/application-status-link\";\n\n/** Components */\nimport { FormBaseFieldMeta, IFieldBaseMetaProps } from \"../form-base-field/form-base-field-meta\";\nimport { FormApplicationStatusLinkField } from \"./form-application-status-link-field\";\n\nexport class FormApplicationStatusLinkFieldMeta extends FormBaseFieldMeta {\n\n    constructor(props: IFieldBaseMetaProps) {\n        super(props)\n        this.model = ApplicationStatusLink;\n        this.formField = FormApplicationStatusLinkField;\n    }\n}\n","import React, { Component } from \"react\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\nimport { IObjectStore, IObjectAction } from \"../../store/rest-api-redux-factory\";\n// data models\nimport {\n    ApplicationStatus,\n    ApplicationStatusActions\n} from \"../../store/data-model/application-status\";\nimport {\n    ApplicationStatusLink,\n} from \"../../store/data-model/application-status-link\";\nimport { Application } from \"../../store/data-model/application\";\n\n/** Rest API */\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\n\n/** Components */\nimport {\n    FormFactory,\n    FormActionButtonProps,\n    IFormFactoryProps,\n    ActionButtonType\n} from \"../form-factory/form-factory\";\nimport {FormInputFieldMeta } from \"../form-factory/form-input-field/form-input-field-meta\";\nimport { InputFieldType, FormBaseFieldMeta } from \"../form-factory/form-base-field/form-base-field-meta\";\n// form fields\nimport { FormApplicationStatusLinkFieldMeta } from \"../form-factory/form-application-status-link-field/form-application-status-link-field-meta\";\n\ninterface IApplicationStatusFormComponentProps extends RouteComponentProps {\n    applicationStatus?: ApplicationStatus; // for update form\n    onSubmitSuccess?: () => void;\n    onCancel: () => void;\n\n    /** redux */\n    application: Application;\n    applicationStatusStore: IObjectStore<ApplicationStatus>\n    createApplicationStatus: (\n        applicationStatusFormData: ApplicationStatus,\n        successCallback?: Function,\n        finalCallback?: Function,\n    ) => void;\n    updateApplicationStatus: (\n        applicationStatusFormData: ApplicationStatus,\n        successCallback?: Function,\n        finalCallback?: Function,\n    ) => void;\n}\n\nclass ApplicationStatusFormComponent extends Component<\n    IApplicationStatusFormComponentProps\n> {\n    formFieldPropsList: Array<FormBaseFieldMeta>;\n    actionButtonPropsList: Array<FormActionButtonProps>;\n\n    constructor(props: IApplicationStatusFormComponentProps) {\n        super(props);\n\n        this.formFieldPropsList = [\n            new FormInputFieldMeta({\n                fieldName: \"text\",\n                label: \"Status*\",\n            }),\n            new FormInputFieldMeta({\n                fieldName: \"date\",\n                label: \"Date\",\n                type: InputFieldType.DATE\n            }),\n            new FormApplicationStatusLinkFieldMeta({\n                fieldName: `applicationstatuslink_set`,\n                label: `Status Link`,\n                isDynamic: true,\n            }),\n        ];\n\n        this.actionButtonPropsList = [\n            new FormActionButtonProps(\n                this.props.applicationStatus ?\n                \"Save Status\":\n                \"Create Status\",\n                undefined,\n                ActionButtonType.SUBMIT\n            ),\n            new FormActionButtonProps(\"Cancel\", this.props.onCancel)\n        ];\n    }\n\n    render() {\n        return (\n            <div className=\"ApplicationStatusFormComponent\">\n                <FormFactory\n                    model={ApplicationStatus}\n                    initialInstance={new ApplicationStatus({\n                        ...this.props.applicationStatus,\n                    })}\n                    enforcedInstanceData={{\n                        application: this.props.application.uuid\n                    }}\n        \n                    formFieldPropsList={this.formFieldPropsList}\n                    actionButtonPropsList={this.actionButtonPropsList}\n        \n                    createInstanceTriggerAction={this.props.createApplicationStatus}\n                    updateInstanceTriggerAction={this.props.updateApplicationStatus}\n\n                    onSubmitSuccess={this.props.onSubmitSuccess}\n                />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    // prop: store.prop\n    applicationStatusStore: store.applicationStatus\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<ApplicationStatus> | IObjectAction<ApplicationStatusLink>>) => {\n    // actionName: (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {\n        createApplicationStatus: (\n            applicationStatusFormData: ApplicationStatus,\n            successCallback?: Function,\n            failureCallback?: Function,\n        ) =>\n            dispatch(\n                ApplicationStatusActions[CrudType.CREATE][\n                    RequestStatus.TRIGGERED\n                ].action(applicationStatusFormData, successCallback, undefined, failureCallback)\n            )\n        ,\n        updateApplicationStatus: (\n            applicationStatusFormData: ApplicationStatus,\n            successCallback?: Function,\n            failureCallback?: Function,\n        ) =>\n            dispatch(\n                ApplicationStatusActions[CrudType.UPDATE][\n                    RequestStatus.TRIGGERED\n                ].action(applicationStatusFormData, successCallback, undefined, failureCallback)\n            )\n        ,\n    };\n};\n\nexport const ApplicationStatusFormComponentContainer = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(ApplicationStatusFormComponent)\n);\n","import React, { Component } from \"react\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\nimport {\n    IObjectAction,\n} from \"../../store/rest-api-redux-factory\";\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\n\n/** data model */\nimport {\n    ApplicationStatus,\n    ApplicationStatusActions\n} from \"../../store/data-model/application-status\";\nimport { Application } from \"../../store/data-model/application\";\n\n/** Components */\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc-react icon button\nimport \"@material/react-icon-button/dist/icon-button.css\";\nimport IconButton from \"@material/react-icon-button\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\nimport { ApplicationStatusFormComponentContainer } from \"./application-status-form-component\";\n\ninterface IApplicationStatusComponentProps extends RouteComponentProps {\n    applicationStatus?: ApplicationStatus;\n    application?: Application; // needed by form\n    isOnlyForm?: boolean; // needed by add-button\n    deleteApplicationStatus: (\n        applicationStatusToDelete: ApplicationStatus,\n        callback?: Function\n    ) => void;\n}\n\ninterface IApplicationStatusComponentState {\n    isFormOpened: boolean;\n}\n\nclass ApplicationStatusComponent extends Component<\n    IApplicationStatusComponentProps,\n    IApplicationStatusComponentState\n> {\n    state = {\n        isFormOpened: false\n    };\n\n    render() {\n        return (\n            <div className=\"ApplicationStatusComponent\">\n                {(this.state.isFormOpened || this.props.isOnlyForm) && this.props.application ? (\n                    this.renderFormController(\n                        this.props.application,\n                        this.props.applicationStatus\n                    )\n                ) : this.props.applicationStatus ? (\n                    this.renderDisplay(this.props.applicationStatus)\n                ) : (\n                    <span>\n                        Nothing to render: no application status provided so\n                        cannot display; no application provided so form for\n                        create/update are not allowed.\n                    </span>\n                )}\n            </div>\n        );\n    }\n\n    renderDisplay = (applicationStatus: ApplicationStatus) => {\n        return (\n            <div className=\"ApplicationStatusComponent\">\n                <p>\n                    <span>Status: {applicationStatus.text}</span>\n                    <IconButton\n                        onClick={() => {\n                            process.env.NODE_ENV === 'development' && console.log(\"application status component: edit button clicked.\")\n                            this.setState({isFormOpened: true});\n                        }}\n                    >\n                        <MaterialIcon hasRipple icon=\"edit\" />\n                    </IconButton>\n                    <IconButton\n                        onClick={() =>\n                            this.props.deleteApplicationStatus(\n                                applicationStatus\n                            )\n                        }\n                    >\n                        <MaterialIcon hasRipple icon=\"delete\" />\n                    </IconButton>\n                    <br />\n                    <span>{applicationStatus.date}</span>\n                    <br />\n                    {applicationStatus.applicationstatuslink_set.map(\n                        applicationStatusLink => {\n                            return (\n                                applicationStatusLink &&\n                                applicationStatusLink.link && (\n                                    <span key={applicationStatusLink.uuid}>\n                                        <a\n                                            href={\n                                                (\n                                                    applicationStatusLink.link.url && \n                                                    applicationStatusLink.link.url.includes(\"//\")\n                                                ) ?\n                                                applicationStatusLink.link.url :\n                                                `//${applicationStatusLink.link.url}`\n                                            }\n                                            target=\"_blank\"\n                                        >\n                                            {applicationStatusLink.link.text}\n                                        </a>{\" \"}\n                                        |{\" \"}\n                                    </span>\n                                )\n                            );\n                        }\n                    )}\n                </p>\n            </div>\n        );\n    };\n\n    renderFormController = (\n        application: Application,\n        applicationStatus?: ApplicationStatus\n    ) => {\n        return (\n            <div className=\"application-status-form-controller\">\n                {/* new application status form */}\n                {!this.state.isFormOpened ? (\n                    <Button\n                        onClick={clickEvent => {\n                            this.setState({\n                                isFormOpened: true\n                            });\n                        }}\n                        unelevated\n                        icon={<MaterialIcon hasRipple icon=\"add\" />}\n                    >\n                        Add New Status\n                    </Button>\n                ) : (\n                    <div className=\"application-component__status-form\">\n                        <h3>\n                            Add new status to application for{\" \"}\n                            {application.position_title}{\" \"}\n                        </h3>\n                        <ApplicationStatusFormComponentContainer\n                            application={application}\n                            applicationStatus={applicationStatus}\n                            onCancel={() => {\n                                this.setState({\n                                    isFormOpened: false\n                                });\n                            }}\n                            onSubmitSuccess={() => {\n                                this.setState({\n                                    isFormOpened: false\n                                });\n                            }}\n                        />\n                    </div>\n                )}\n            </div>\n        );\n    };\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    // prop: store.prop\n});\n\nconst mapDispatchToProps = (\n    dispatch: Dispatch<IObjectAction<ApplicationStatus>>\n) => {\n    // actionName: (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {\n        deleteApplicationStatus: (\n            applicationStatusToDelete: ApplicationStatus,\n            callback?: Function\n        ) =>\n            dispatch(\n                ApplicationStatusActions[CrudType.DELETE][\n                    RequestStatus.TRIGGERED\n                ].action(applicationStatusToDelete, callback)\n            )\n    };\n};\n\nexport const ApplicationStatusComponentContainer = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(ApplicationStatusComponent)\n);\n","import React, { Component } from \"react\";\n\n/** Components */\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\n// mdc-react input\nimport \"@material/react-text-field/dist/text-field.css\";\nimport TextField, { Input } from \"@material/react-text-field\";\n// formik\nimport {\n    Field, FieldProps,\n    ErrorMessage,\n} from \"formik\";\n// input field\nimport { IFormRichTextFieldProps } from \"./form-rich-text-field-meta\";\n// ckeditor\nimport CKEditor from '@ckeditor/ckeditor5-react';\nimport BalloonEditor from '@ckeditor/ckeditor5-build-balloon';\n// import BalloonEditor from '@shaungc/ckeditor5-custom-balloon';\n\nexport class FormRichTextField extends Component<IFormRichTextFieldProps> {\n    render() {\n        return (\n            <div className=\"FormRichTextField\">\n                <Field\n                    name={this.props.fieldName}\n                    render={({ field, form }: FieldProps<number | string>) => {\n                        return (\n                        <div className=\"RichTextFieldInput\">\n                            <div><strong>{this.props.label}</strong></div>\n                            <CKEditor\n                                editor={BalloonEditor}\n                                data={field.value}\n                                onChange={ ( event: any, editor: any ) => {\n                                    form.setFieldValue(field.name, editor.getData());\n                                } }\n                            />\n                        </div>\n                    )}}\n                />\n                <ErrorMessage name={this.props.fieldName} />\n            </div>\n        );\n    }\n}","// base field\nimport { FormBaseFieldMeta, IFormBaseFieldProps, IFieldBaseMetaProps } from \"../form-base-field/form-base-field-meta\";\n// input field\nimport { FormRichTextField } from \"./form-rich-text-field\";\n\n\n// API for caller to new props for input field\nexport interface IFormRichTextFieldProps extends IFormBaseFieldProps {\n}\n\n// for defining meta\nexport interface IFormRichTextFieldMetaProps extends IFieldBaseMetaProps {\n}\n\nexport class FormRichTextFieldMeta extends FormBaseFieldMeta {\n\n    constructor(props: IFormRichTextFieldMetaProps) {\n        super(props)\n        this.formField = FormRichTextField;\n    }\n}","import React, { Component } from \"react\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\nimport {\n    IObjectStore,\n    IObjectAction\n} from \"../../store/rest-api-redux-factory\";\n// data models\nimport { Company } from \"../../store/data-model/company\";\nimport {\n    Application,\n    ApplicationActions\n} from \"../../store/data-model/application\";\n\n/** Components */\nimport {\n    FormFactory,\n    FormActionButtonProps,\n    ActionButtonType\n} from \"../form-factory/form-factory\";\n// form field\nimport { FormBaseFieldMeta } from \"../form-factory/form-base-field/form-base-field-meta\";\nimport { FormInputFieldMeta } from \"../form-factory/form-input-field/form-input-field-meta\";\nimport { FormLinkFieldMeta } from \"../form-factory/form-link-field/form-link-field-meta\";\nimport { FormRichTextFieldMeta } from \"../form-factory/form-rich-text-field/form-rich-text-field-meta\";\n\ninterface IApplicationFormComponentProps {\n    application?: Application;\n    onCancel: (event: any) => void;\n    onSubmitSuccess?: () => void;\n\n    company: Company;\n    /** redux */\n    applicationStore: IObjectStore<Application>;\n    createApplication: (\n        applicationFormData: Application,\n        successCallback?: Function,\n        finalCallback?: Function,\n    ) => void;\n    updateApplication: (\n        applicationFormData: Application,\n        successCallback?: Function,\n        finalCallback?: Function,\n    ) => void;\n}\n\nclass ApplicationFormComponent extends Component<\n    IApplicationFormComponentProps\n> {\n\n    formFieldPropsList: Array<FormBaseFieldMeta>;\n    actionButtonPropsList: Array<FormActionButtonProps>;\n\n    constructor(props: IApplicationFormComponentProps) {\n        super(props);\n\n        this.formFieldPropsList = [\n            new FormInputFieldMeta({\n                fieldName: \"position_title\",\n                label: \"Position Title*\"\n            }),\n            new FormLinkFieldMeta({\n                fieldName: \"job_description_page\",\n                label: \"Job Description Link\",\n            }),\n            new FormLinkFieldMeta({\n                fieldName: \"job_source\",\n                label: \"Job Source Link\",\n            }),\n            new FormRichTextFieldMeta({\n                fieldName: \"notes\",\n                label: \"Notes\",\n            }),\n        ];\n        this.actionButtonPropsList = [\n            new FormActionButtonProps(\n                this.props.company ? \"Save Application\" : \"Create Application\",\n                undefined,\n                ActionButtonType.SUBMIT\n            ),\n            new FormActionButtonProps(\"Cancel\", this.props.onCancel)\n        ]\n    }\n\n    render() {\n        return (\n            <div className=\"ApplicationFormComponent\">\n                {/* <FormFactory {...this.formFactoryProps} /> */}\n                <FormFactory\n                    model={Application}\n                    initialInstance={new Application({\n                        ...this.props.application,\n                    })}\n                    enforcedInstanceData={{\n                        user_company: this.props.company.uuid\n                    }}\n        \n                    formFieldPropsList={this.formFieldPropsList}\n                    actionButtonPropsList={this.actionButtonPropsList}\n        \n                    createInstanceTriggerAction={this.props.createApplication}\n                    updateInstanceTriggerAction={this.props.updateApplication}\n\n                    onSubmitSuccess={this.props.onSubmitSuccess}\n                />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    applicationStore: store.application\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<Application>>) => {\n    return {\n        createApplication: (\n            applicationFormData: Application,\n            successCallback?: Function,\n            finalCallback?: Function,\n        ) =>\n            dispatch(\n                ApplicationActions[CrudType.CREATE][\n                    RequestStatus.TRIGGERED\n                ].action(applicationFormData, successCallback, undefined, finalCallback)\n            )\n        ,\n        updateApplication: (\n            applicationFormData: Application,\n            successCallback?: Function,\n            finalCallback?: Function,\n        ) =>\n            dispatch(\n                ApplicationActions[CrudType.UPDATE][\n                    RequestStatus.TRIGGERED\n                ].action(applicationFormData, successCallback, undefined, finalCallback)\n            )\n        ,\n    };\n};\n\nexport const ApplicationFormComponentContainer = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ApplicationFormComponent);\n","import React, { Component } from \"react\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport {\n    Application,\n    ApplicationActions\n} from \"../../store/data-model/application\";\nimport { IRootState } from \"../../store/types\";\nimport { IObjectAction } from \"../../store/rest-api-redux-factory\";\nimport { Dispatch } from \"redux\";\n\n/** data model */\nimport { ApplicationStatus } from \"../../store/data-model/application-status\";\nimport { Company } from \"../../store/data-model/company\";\n\n/** rest api */\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\n\n/** Components */\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\nimport IconButton from \"@material/react-icon-button\";\nimport { ApplicationStatusComponentContainer } from \"../application-status/application-status-component\";\nimport { ApplicationFormComponentContainer } from \"./application-form-component\";\n/** CKeditor */\nimport CKEditor from '@ckeditor/ckeditor5-react';\nimport BalloonEditor from '@ckeditor/ckeditor5-build-balloon';\n// import BalloonEditor from '@shaungc/ckeditor5-custom-balloon';\n\n/** Types */\ninterface IApplicationComponentProps {\n    application?: Application;\n\n    /** application form */\n    company?: Company;\n\n    isOnlyForm?: boolean;\n\n    applicationStatusList?: Array<ApplicationStatus>;\n    isShowApplicationStatuses?: boolean;\n\n    /** redux */\n    deleteApplication: (\n        applicationToDelete: Application,\n        callback?: Function\n    ) => void;\n}\n\ninterface IApplicationComponentState {\n    isFormOpened: boolean;\n}\n\n/** Main Class */\nexport class ApplicationComponent extends Component<\n    IApplicationComponentProps,\n    IApplicationComponentState\n> {\n    state = {\n        isFormOpened: false\n    };\n\n    render() {\n        return (\n            <div className=\"application-component\">\n                {this.state.isFormOpened || this.props.isOnlyForm\n                    ? this.renderApplicationFormController()\n                    : this.props.application &&\n                      Array.isArray(this.props.applicationStatusList) &&\n                      this.renderApplicationDisplay(\n                          this.props.application,\n                          this.props.applicationStatusList\n                      )}\n            </div>\n        );\n    }\n\n    renderApplicationFormController = () => {\n        return (\n            this.props.company && ( // application create or udpate must have company associate with it.\n                <div className=\"application-form-controller\">\n                    {!this.state.isFormOpened ? (\n                        <Button\n                            onClick={clickEvent => {\n                                this.setState({\n                                    isFormOpened: true\n                                });\n                            }}\n                            unelevated\n                            icon={<MaterialIcon hasRipple icon=\"add\" />}\n                        >\n                            Add Application\n                        </Button>\n                    ) : (\n                        <ApplicationFormComponentContainer\n                            onCancel={event => {\n                                process.env.NODE_ENV === 'development' && console.log(\"onCancel clicked\");\n                                this.setState({\n                                    isFormOpened: false\n                                });\n                            }}\n                            onSubmitSuccess={() =>\n                                this.setState({\n                                    isFormOpened: false\n                                })\n                            }\n                            company={this.props.company}\n                            application={this.props.application}\n                        />\n                    )}\n                </div>\n            )\n        );\n    };\n\n    renderApplicationDisplay = (\n        application: Application,\n        applicationStatusList: Array<ApplicationStatus>\n    ) => {\n        return (\n            <div className=\"application-component-display\">\n                {/* application display view */}\n                <h3>Application</h3>\n                <p>\n                    <span>\n                        <strong>Position:</strong> {application.position_title}\n                    </span>\n\n                    <IconButton\n                        onClick={() => {\n                            this.setState({\n                                isFormOpened: true // open form and close display\n                            });\n                        }}\n                    >\n                        <MaterialIcon hasRipple icon=\"edit\" />\n                    </IconButton>\n                    <IconButton\n                        onClick={() =>\n                            this.props.deleteApplication(application)\n                        }\n                    >\n                        <MaterialIcon hasRipple icon=\"delete\" />\n                    </IconButton>\n                    <br />\n                    <span>Application UUID: {application.uuid}</span>\n                    <br />\n                    {application.job_description_page.url && (\n                        <span>\n                            <strong>JD Page: </strong>\n                            <a\n                                target=\"_blank\"\n                                href={\n                                    application.job_description_page.url && application.job_description_page.url.includes(\"//\") ?\n                                    application.job_description_page.url :\n                                    `//${application.job_description_page.url}`\n                                }\n                            >\n                                {application.job_description_page.text || \"Link\"}\n                            </a>\n                        </span> \n                    )}\n\n                    <br />\n                    {application.job_source.url && (\n                        <span>\n                            <strong>Job Source: </strong>\n                            <a target=\"_blank\" href={\n                                (application.job_source.url && application.job_source.url.includes(\"//\")) ?\n                                application.job_source.url :\n                                `//${application.job_source.url}`\n                            }>\n                                {application.job_source.text || \"Link\"}\n                            </a>\n                        </span>\n                    )}\n                </p>\n\n                <div>\n                    <div><strong>Notes</strong></div>\n                    {application.notes ? (\n                        <CKEditor \n                            editor={BalloonEditor}\n                            disabled={true}\n                            data={application.notes}\n                        />\n                        \n                    ) : (\n                        <p>\n                            No notes yet.\n                        </p>\n                    )}\n                </div>\n\n                {/* application statuses list */}\n                {this.props.isShowApplicationStatuses &&\n                    applicationStatusList.map(status => {\n                        return (\n                            <ApplicationStatusComponentContainer\n                                key={status.uuid}\n                                applicationStatus={status}\n                                application={application}\n                            />\n                        );\n                    })}\n\n                {/* application status form controller */}\n                {this.props.isShowApplicationStatuses && (\n                    <ApplicationStatusComponentContainer\n                        application={application}\n                        isOnlyForm\n                    />\n                )}\n            </div>\n        );\n    };\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<Application>>) => {\n    // actionName: (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {\n        deleteApplication: (\n            applicationToDelete: Application,\n            callback?: Function\n        ) =>\n            dispatch(\n                ApplicationActions[CrudType.DELETE][\n                    RequestStatus.TRIGGERED\n                ].action(applicationToDelete, callback)\n            )\n    };\n};\n\nexport const ApplicationComponentController = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ApplicationComponent);\n","import React, { Component } from \"react\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\nimport {\n    IObjectAction,\n    IObjectStore\n} from \"../../store/rest-api-redux-factory\";\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\n// data models\nimport { CompanyActions, Company } from \"../../store/data-model/company\";\nimport {\n    ApplicationActions,\n    Application\n} from \"../../store/data-model/application\";\nimport { ApplicationStatus } from \"../../store/data-model/application-status\";\n\n/** Components */\n// objects\nimport { CompanyComponent } from \"../company/company-component\";\nimport { ApplicationComponentController } from \"../application/application-component\";\n\ninterface ICompanyApplicationComponentProps extends RouteComponentProps {\n    company: Company;\n    applicationStore: IObjectStore<Application>;\n    applicationStatusStore: IObjectStore<ApplicationStatus>;\n    isShowApplicationStatuses?: boolean;\n    deleteCompany: (companyToDelete: Company, callback?: Function) => void;\n    updateCompany: (companyToUpdate: Company, callback?: Function) => void;\n}\n\nclass CompanyApplicationComponent extends Component<\n    ICompanyApplicationComponentProps\n> {\n    onDeleteClick = (event: any) => {\n        if (this.props.company.uuid) {\n            this.props.deleteCompany(this.props.company);\n        } else {\n            console.error(\"Attempted to delete but company obj has no uuid\");\n        }\n    };\n\n    render() {\n        return (\n            <div className=\"CompanyApplicationContainer\">\n                <CompanyComponent\n                    company={this.props.company}\n                    onDeleteIconClicked={this.onDeleteClick}\n                    onEditIconClicked={() => {\n                        this.props.history.push(`/com-form/${this.props.company.uuid}/`);\n                    }}\n                />\n                {Object.values(this.props.applicationStore.collection)\n                    .filter(\n                        application =>\n                            application.user_company === this.props.company.uuid\n                    )\n                    .map(application => {\n                        if (this.props.isShowApplicationStatuses) {\n                            const applicationStatusList = Object.values(\n                                      this.props.applicationStatusStore\n                                          .collection\n                                  ).filter(\n                                      applicationStatus =>\n                                          applicationStatus.application ===\n                                          application.uuid\n                                  );\n                            return (\n                                <ApplicationComponentController\n                                    key={application.uuid}\n                                    application={application}\n                                    company={this.props.company}\n                                    applicationStatusList={applicationStatusList}\n                                    isShowApplicationStatuses={\n                                        this.props.isShowApplicationStatuses\n                                    }\n                                /> \n                            )\n                        }\n                        else {\n                            return (\n                                <div key={application.uuid}>\n                                    {application.position_title}\n                                </div>\n                            )\n                        }\n                    })}\n                {!this.props.isShowApplicationStatuses && <hr />}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    // prop: store.prop\n    applicationStore: store.application,\n    applicationStatusStore: store.applicationStatus\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<Application>>) => {\n    // actionName: (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {\n        deleteCompany: (companyToDelete: Company, callback?: Function) =>\n            dispatch(\n                CompanyActions[CrudType.DELETE][RequestStatus.TRIGGERED].action(\n                    companyToDelete,\n                    callback\n                )\n            ),\n        updateCompany: (companyToUpdate: Company, callback?: Function) =>\n            dispatch(\n                CompanyActions[CrudType.UPDATE][RequestStatus.TRIGGERED].action(\n                    companyToUpdate,\n                    callback\n                )\n            )\n    };\n};\n\nexport const CompanyApplicationComponentContainer = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(CompanyApplicationComponent)\n);\n","import React, { Component } from \"react\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\nimport { IObjectAction, IObjectStore } from \"../../store/rest-api-redux-factory\";\n// data models\nimport { Company } from \"../../store/data-model/company\";\nimport { Application } from \"../../store/data-model/application\";\n\n/** Components */\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n// objects\nimport { CompanyApplicationComponentContainer } from \"../../components/company-application/company-application-component\";\n\ninterface IUserAppPageProps extends RouteComponentProps {\n    company: IObjectStore<Company>\n    application: IObjectStore<Application>\n}\n\nclass UserAppPage extends Component<IUserAppPageProps> {\n\n    componentDidMount() {\n    }\n\n    render() {\n        return (\n            <div className=\"UserAppPage\">\n                <h1>Companies You Apply</h1>\n                <Button\n                    onClick={()=>{ this.props.history.push(\"/com-form/\") }}\n                    unelevated\n                    icon={<MaterialIcon hasRipple icon=\"add\" />}\n                    children=\"Add Company\"\n                />\n                <br></br>\n                {\n                    (this.props.company.collection !== {}) && Object.values(this.props.company.collection).map((company) => {\n                        return (\n                            <CompanyApplicationComponentContainer key={company.uuid} company={company} />\n                        )\n                    })\n                }\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    // prop: store.prop\n    company: store.company,\n    application: store.application,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<{}>>) => {\n    // actionName = (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n\n    return {\n        // listObject: (callback?: Function) =>\n        //     dispatch(\n        //         ObjectActions[CrudType.LIST][RequestStatus.TRIGGERED].action(\n        //             new Object({}),\n        //             callback\n        //         )\n        //     ),\n    }\n};\n\nexport const UserAppPageContainer = withRouter(connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(UserAppPage));\n","/** Components */\n// base field\nimport { withFormBaseField } from \"../form-base-field/form-base-field\";\n// link field\nimport { FormAddressFieldComponent } from \"./form-address-field-component\";\n\nexport const FormAddressField = withFormBaseField(FormAddressFieldComponent);\n","import React, { Component } from \"react\";\n\n/** Components */\n// mdc-react input\nimport \"@material/react-text-field/dist/text-field.css\";\n\nimport { FormInputFieldMeta } from \"../form-input-field/form-input-field-meta\";\nimport { FormInputField } from \"../form-input-field/form-input-field\";\nimport { IFormBaseFieldProps } from \"../form-base-field/form-base-field-meta\";\n\nexport interface IFormAddressFieldComponentProps extends IFormBaseFieldProps {\n}\n\nexport class FormAddressFieldComponent extends Component<IFormAddressFieldComponentProps> {\n\n    fullAddressInputFieldMeta: FormInputFieldMeta;\n    placeNameInputFieldMeta: FormInputFieldMeta;\n\n    constructor(props: IFormAddressFieldComponentProps) {\n        super(props)\n\n        this.fullAddressInputFieldMeta = new FormInputFieldMeta({\n            fieldName: `${this.props.fieldName}.full_address`,\n            label: `Full Address`\n        });\n        this.placeNameInputFieldMeta = new FormInputFieldMeta({\n            fieldName: `${this.props.fieldName}.place_name`,\n            label: `Place Name`\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"FormAddressField\">\n                {this.props.label && <h4>{this.props.label}</h4>}\n                \n                <FormInputField\n                    {...this.placeNameInputFieldMeta}\n                />\n\n                <FormInputField\n                    {...this.fullAddressInputFieldMeta}\n                />\n                \n            </div>\n        );\n    }\n}","// data model\nimport { Address } from \"../../../store/data-model/address\";\n\n/** Components */\n// base field\nimport { IFieldBaseMetaProps, FormBaseFieldMeta } from \"../form-base-field/form-base-field-meta\";\nimport { FormAddressField } from \"./form-address-field\";\n\nexport class FormAddressFieldMeta extends FormBaseFieldMeta {\n\n    constructor(props: IFieldBaseMetaProps) {\n        super(props)\n        this.model = Address;\n        this.formField = FormAddressField;\n    }\n}\n","import React, { Component } from \"react\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\nimport {\n    IObjectAction\n} from \"../../store/rest-api-redux-factory\";\n// data models\nimport { Company, CompanyActions } from \"../../store/data-model/company\";\n\n/** Components */\nimport {\n    FormFactory,\n    FormActionButtonProps,\n    ActionButtonType\n} from \"../form-factory/form-factory\";\n// form field\nimport { FormBaseFieldMeta } from \"../form-factory/form-base-field/form-base-field-meta\";\nimport { FormInputFieldMeta } from \"../form-factory/form-input-field/form-input-field-meta\";\nimport { FormLinkFieldMeta } from \"../form-factory/form-link-field/form-link-field-meta\";\nimport { FormAddressFieldMeta } from \"../form-factory/form-address-field/form-address-field-meta\";\n\ninterface ICompanyFormComponentProps {\n    company?: Company;\n    onCancel: (event: any) => void;\n    onSubmitSuccess?: () => void;\n\n    /** redux */\n    createCompany: (companyFormData: Company, successCallback?: Function, finalCallback?: Function) => void;\n    updateCompany: (companyFormData: Company, successCallback?: Function, finalCallback?: Function) => void;\n}\n\nclass CompanyFormComponent extends Component<ICompanyFormComponentProps> {\n\n    formFieldPropsList: Array<FormBaseFieldMeta>;\n    actionButtonPropsList: Array<FormActionButtonProps>;\n\n    constructor(props: ICompanyFormComponentProps) {\n        super(props);\n\n        this.formFieldPropsList = [\n            new FormInputFieldMeta({\n                fieldName: \"name\",\n                label: \"Company Name*\"\n            }),\n\n            new FormAddressFieldMeta({\n                fieldName: \"hq_location\",\n                label: \"Headquarter Location\"\n            }),\n\n            new FormLinkFieldMeta({\n                fieldName: \"home_page\",\n                label: \"Company Website\"\n            }),\n        ];\n\n        this.actionButtonPropsList = [\n            new FormActionButtonProps(\n                !this.props.company ? \"Create Company\" : \"Save Company\",\n                undefined,\n                ActionButtonType.SUBMIT\n            ),\n            new FormActionButtonProps(\"Cancel\", this.props.onCancel)\n        ]\n\n    }\n\n    render() {\n        return (\n            <div className=\"CompanyFormComponent\">\n                <FormFactory\n                    model={Company}\n                    initialInstance={this.props.company}\n        \n                    formFieldPropsList={this.formFieldPropsList}\n                    actionButtonPropsList={this.actionButtonPropsList}\n        \n                    createInstanceTriggerAction={this.props.createCompany}\n                    updateInstanceTriggerAction={this.props.updateCompany}\n\n                    onSubmitSuccess={this.props.onSubmitSuccess}\n                />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => ({});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<Company>>) => {\n    return {\n        createCompany: (companyFormData: Company, successCallback?: Function, finalCallback?: Function) =>\n            dispatch(\n                CompanyActions[CrudType.CREATE][RequestStatus.TRIGGERED].action(\n                    companyFormData,\n                    successCallback,\n                    undefined,\n                    finalCallback,\n                )\n            ),\n        updateCompany: (companyFormData: Company, successCallback?: Function, finalCallback?: Function) =>\n            dispatch(\n                CompanyActions[CrudType.UPDATE][RequestStatus.TRIGGERED].action(\n                    companyFormData,\n                    successCallback,\n                    undefined,\n                    finalCallback,\n                )\n            )\n    };\n};\n\nexport const CompanyFormComponentContainer = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(CompanyFormComponent);\n","import React, { Component } from \"react\";\n\n/** route */\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\n// REST API\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\nimport {\n    IObjectAction,\n    IObjectStore\n} from \"../../store/rest-api-redux-factory\";\nimport { CompanyActions, Company } from \"../../store/data-model/company\";\nimport { Address } from \"../../store/data-model/address\";\nimport { Link } from \"../../store/data-model/link\";\n\n/** Components */\n//mdc-react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc-react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n// mdc-react input\nimport \"@material/react-text-field/dist/text-field.css\";\nimport TextField, { HelperText, Input } from \"@material/react-text-field\";\nimport { CompanyFormComponentContainer } from \"../../components/company/company-form-component\";\n\ninterface IAddComPageParams {\n    uuid?: string;\n}\n\ninterface IAddComPageProps extends RouteComponentProps<IAddComPageParams> {\n    company: IObjectStore<Company>;\n}\n\nclass AddComPage extends Component<IAddComPageProps> {\n    render() {\n        const company: Company | undefined = (this.props.match.params.uuid && this.props.company.collection[this.props.match.params.uuid])\n            ? this.props.company.collection[this.props.match.params.uuid]\n            : undefined;\n        process.env.NODE_ENV === 'development' && console.log(\n            \"com form page: params is\",\n            this.props.match.params.uuid,\n            \"company is\",\n            company\n        );\n        return (\n            <div className=\"AddComPage\">\n                <h1>{!company ? \"Add a Company\" : `Update Company`}</h1>\n                <CompanyFormComponentContainer\n                    company={company}\n                    onSubmitSuccess={() => {\n                        process.env.NODE_ENV === 'development' && console.log(\"com form page: onSubmitSuccess\");\n                        if (this.props.company.lastChangedObjectID) {\n                            let newCompany = this.props.company.collection[\n                                this.props.company.lastChangedObjectID\n                            ];\n                            process.env.NODE_ENV === 'development' && console.log(\"new company:\", newCompany);\n                            this.props.history.push(\n                                `/com-app/${newCompany.uuid}/`\n                            );\n                        } else {\n                            console.error(\"store has no lastChangedObjectID\");\n                        }\n                    }}\n                    onCancel={event => {\n                        this.props.history.goBack()\n                    }}\n                />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: IRootState) => ({\n    // prop: state.prop\n    company: state.company\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<Company>>) => {\n    // actionName = (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {};\n};\n\nexport const AddComPageContainer = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(AddComPage)\n);\n","import React, { Component } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { RouteComponentProps } from \"react-router\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\n// rest api\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\nimport {\n    IObjectStore,\n    IObjectAction\n} from \"../../store/rest-api-redux-factory\";\nimport { Company } from \"../../store/data-model/company\";\nimport { Link } from \"../../store/data-model/link\";\nimport {\n    Application,\n    ApplicationActions\n} from \"../../store/data-model/application\";\n\n/** Components */\nimport { CompanyApplicationComponentContainer } from \"../../components/company-application/company-application-component\";\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n// mdc-react input\nimport \"@material/react-text-field/dist/text-field.css\";\nimport { ApplicationComponentController } from \"../../components/application/application-component\";\n\ninterface IUserComAppPageParams {\n    uuid: string;\n}\n\ninterface IUserComAppPageProps\n    extends RouteComponentProps<IUserComAppPageParams> {\n    company: IObjectStore<Company>;\n    createApplication: (\n        applicationFormData: Application,\n        callback?: Function\n    ) => void;\n}\n\ninterface IUserComAppPageState {\n    companyUuid: string;\n    company: Company;\n}\n\nclass UserComAppPage extends Component<\n    IUserComAppPageProps,\n    IUserComAppPageState\n> {\n    readonly state: IUserComAppPageState = {\n        companyUuid: \"\",\n        company: new Company({})\n    };\n\n    componentDidMount() {\n        let companyUuid = this.props.match.params.uuid;\n        process.env.NODE_ENV === 'development' && console.log(\"mount, got uuid from route?\", companyUuid);\n        if (\n            this.props.company.collection &&\n            companyUuid in this.props.company.collection\n        ) {\n            this.setState({\n                companyUuid,\n                company: new Company(this.props.company.collection[companyUuid])\n            });\n        }\n    }\n\n    renderAll() {\n        if (!this.state.company.uuid) {\n            return;\n        }\n\n        return (\n            <div className=\"user-com-app-page-content\">\n                <Button\n                    onClick={clickEvent => {\n                        this.props.history.push(\"/\");\n                    }}\n                >\n                    Back\n                </Button>\n                <h1>{this.state.company.name}</h1>\n                \n                {/* application form controller - always create form */}\n                <ApplicationComponentController \n                    company={this.state.company}\n                    isOnlyForm\n                />\n\n                <br />\n\n                {/* application list */}\n                {this.state.company.uuid && (\n                    <CompanyApplicationComponentContainer\n                        company={this.state.company}\n                        isShowApplicationStatuses\n                    />\n                )}\n            </div>\n        );\n    }\n\n    render() {\n        return (\n            <div className=\"UserComAppPage\">\n                {this.state.companyUuid &&\n                this.props.company.collection &&\n                this.state.companyUuid in this.props.company.collection ? (\n                    this.renderAll()\n                ) : this.state.companyUuid ? (\n                    <h1>No company found. Uuid={this.state.companyUuid}</h1>\n                ) : (\n                    <h1>Company uuid not specified</h1>\n                )}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => {\n    return {\n        // prop: store.prop\n        company: store.company,\n    };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<Application>>) => {\n    // actionName = (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {\n        createApplication: (\n            applicationFormData: Application,\n            callback?: Function\n        ) =>\n            dispatch(\n                ApplicationActions[CrudType.CREATE][\n                    RequestStatus.TRIGGERED\n                ].action(applicationFormData, callback)\n            )\n    };\n};\n\nexport const UserComAppPageContainer = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(UserComAppPage)\n);\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { IUpdateAuthState } from \"../../store/auth/types\";\n\ninterface UserInfoProps {\n    auth: IUpdateAuthState;\n}\n\nexport class UserInfo extends Component<UserInfoProps, any> {\n    render() {\n        return (\n            <div>\n                <div>\n                    Logged in:{\" \"}\n                    {(this.props.auth.isLogin &&\n                        this.props.auth.isLogin.toString()) ||\n                        \"undefine\"}\n                </div>\n                <div>User Name: {this.props.auth.userName || \"(empty)\"}</div>\n                <div>\n                    Token (for API): {this.props.auth.apiToken || \"(empty)\"}\n                </div>\n            </div>\n        );\n    }\n}\n","import React from \"react\";\n\n/** Components */\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n\ninterface ILocalLogoutButtonProps {\n    onClick: () => void;\n    disabled?: boolean;\n}\n\nconst LocalLogoutButton = (props: ILocalLogoutButtonProps) => {\n    return (\n        <div className=\"UserAuthButton\">\n            <Button\n                onClick={props.onClick}\n                unelevated\n                icon={\n                    <MaterialIcon hasRipple icon=\"account_circle\" />\n                }\n                disabled={props.disabled}\n            >\n                Local Logout\n                    </Button>\n        </div>\n    );\n}\n\nexport {\n    LocalLogoutButton\n};","import React, { Component, Dispatch } from \"react\";\n\n/** redux */\nimport { AnyAction } from \"redux\";\nimport { connect } from \"react-redux\";\nimport { IRootState } from \"../../store/types\";\nimport { IUpdateAuthState } from \"../../store/auth/types\";\nimport { RequestedLogoutAuth } from \"../../store/auth/actions\";\n\n/** Routes & pages */\nimport { UserInfo } from \"../../components/user-info/user-info\";\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\n\n/** Components */\nimport { SocialAuthButtonContainer } from \"../../components/login/social-auth-button\";\nimport { LocalLogoutButton } from \"../../components/login/local-logout-button\";\n\n\ninterface IUserProfilePageProps extends RouteComponentProps {\n    /** redux store state */\n    auth: IUpdateAuthState;\n\n    /** action dispatcher */\n    requestedLogoutAuth: () => void;\n}\n\nclass UserProfilePage extends Component<IUserProfilePageProps, any> {\n    localLogoutButton = () => {\n        this.props.requestedLogoutAuth();\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>My Profile</h1>\n                <div>\n                    isLocal = {JSON.stringify(this.props.auth.isLocal)}\n                </div>\n                <UserInfo auth={this.props.auth} />\n                {\n                    !this.props.auth.isLocal ? (\n                        <SocialAuthButtonContainer />\n                    ) : (\n                        <LocalLogoutButton \n                            onClick={this.localLogoutButton}\n                        />\n                    )\n                }\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => {\n    return {\n        auth: store.auth\n    };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>) => { \n    return {\n        requestedLogoutAuth: () => {\n            dispatch(\n                RequestedLogoutAuth()\n            );\n        },\n    }\n}\n\nexport const UserProfilePageContainer = withRouter(connect(mapStateToProps, mapDispatchToProps)(UserProfilePage));\n","import React, { Component } from \"react\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { IRootState } from \"../../store/types\";\nimport { IUpdateAuthState } from \"../../store/auth/types\";\n\nimport { RequestStatus } from \"../../utils/rest-api\";\n\n/** Routing & Pages */\nimport {\n    Route,\n    Redirect,\n    Switch,\n    Link,\n    withRouter,\n    RouteComponentProps\n} from \"react-router-dom\";\n// pages\nimport { LandingPageContainer } from \"../landing-page/landing-page\";\nimport { LocalLoginPageContainer } from \"../login-page/local-login-page\";\nimport { UserAppPageContainer } from \"../user-app-page/user-app-page\";\nimport { AddComPageContainer } from \"../add-com-page/add-com-page\";\nimport { UserComAppPageContainer } from \"../user-com-app-page/user-com-app-page\";\nimport { UserProfilePageContainer } from \"../user-profile-page/user-profile-page\";\n\n/** MDC React */\nimport TopAppBar, { TopAppBarFixedAdjust } from \"@material/react-top-app-bar\";\nimport \"@material/react-top-app-bar/dist/top-app-bar.css\";\n\nimport LinearProgress from '@material/react-linear-progress';\nimport '@material/react-linear-progress/dist/linear-progress.css';\n\nimport '@material/react-material-icon/dist/material-icon.css';\nimport MaterialIcon from \"@material/react-material-icon\";\n\nimport \"@material/react-ripple/dist/ripple.css\";\n\n// import {withRipple} from '@material/react-ripple';\n\ninterface IPageRoutesProps extends RouteComponentProps {\n    auth: IUpdateAuthState;\n}\n\nclass PageRoutes extends Component<IPageRoutesProps> {\n    render() {\n        return (\n            <div className=\"PageRoutesContainer\">\n                {(\n                    this.props.location.pathname === \"/\" ||\n                    this.props.location.pathname === \"/local-login/\"\n                    // add more public page routres here\n                    // ...\n                ) ? (\n                        <div className=\"PublicRoutesContainer\">\n                            {/** direct user to home pagae (internal) if logged in */\n                                this.props.auth.isLogin && <Redirect to=\"/home/\" />}\n                            <Switch>\n                                <Route path=\"/\" exact component={LandingPageContainer} />\n                                <Route path=\"/local-login/\" exact component={LocalLoginPageContainer} />\n                                {\n                                    /** add more public page routes here */\n                                    // ...\n                                }\n                            </Switch>\n                        </div>\n                    ) : (\n                        <div className=\"PrivateRoutesContainer\">\n                            {/** protect private routes */\n                                !this.props.auth.isLogin && <Redirect to=\"/\" />}\n\n                            <TopAppBar\n                                title=\"Appl Tracky\"\n                                actionItems={[\n                                    <Link to=\"/home/\">\n                                        <MaterialIcon\n                                            hasRipple\n                                            key=\"itemHome\"\n                                            icon=\"home\"\n                                        />\n                                    </Link>,\n\n                                    <Link to=\"/profile/\">\n                                        {this.props.auth.avatarUrl === \"\" ? (\n                                            <MaterialIcon\n                                                hasRipple\n                                                key=\"itemProfile\"\n                                                icon=\"account_circle\"\n                                            />\n                                        ) : (\n                                                <img style={{\n                                                    \"height\": \"100%\",\n                                                    \"borderRadius\": \"50%\",\n                                                }} src={this.props.auth.avatarUrl} />\n                                            )}\n                                    </Link>\n                                ]}\n                            />\n\n                            <TopAppBarFixedAdjust>\n\n                                <LinearProgress\n                                    indeterminate={this.props.auth.requestStatus === RequestStatus.REQUESTING}\n                                    \n                                    // mdc's progress bar bug workaround\n                                    // when press back button, avoid showing dotted buffer animation\n                                    buffer={1}\n                                    bufferingDots={true}\n                                />\n\n                                <Switch>\n                                    <Route\n                                        path=\"/home/\"\n                                        component={UserAppPageContainer}\n                                    />\n                                    <Route\n                                        path=\"/com-form/:uuid?/\"\n                                        component={AddComPageContainer}\n                                    />\n                                    <Route\n                                        path=\"/com-app/:uuid/\"\n                                        component={UserComAppPageContainer}\n                                    />\n                                    <Route\n                                        path=\"/com-app/\"\n                                        component={UserComAppPageContainer}\n                                    />\n                                    <Route\n                                        path=\"/profile/\"\n                                        component={UserProfilePageContainer}\n                                    />\n                                    {/** add more private page routes here */}\n                                </Switch>\n                            </TopAppBarFixedAdjust>\n                        </div>\n                    )}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    auth: store.auth\n});\n\nconst mapDispatchToProps = {};\n\nexport const PageRoutesContainer = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(PageRoutes)\n);\n","/** React core */\nimport React, { Component, Dispatch } from \"react\";\n\n/** Redux */\nimport { AnyAction } from \"redux\";\nimport { connect } from \"react-redux\";\nimport { IRootState } from \"./store/types\";\nimport { RequestedLoginAuth } from \"./store/auth/actions\";\nimport { RequestedLoginMode } from \"./store/auth/types\";\n\n/** Routes & pages */\nimport { PageRoutesContainer } from \"./pages/page-routes/page-routes\";\n\n/** Locals */\nimport \"./App.css\";\n\n\ninterface IAppProps {\n    retrieveLoginAuth: () => void;\n}\n\nclass App extends Component<IAppProps> {\n    componentDidMount() {\n        this.props.retrieveLoginAuth();\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <PageRoutesContainer />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => {\n    return {\n    };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>) => { \n    return {\n        retrieveLoginAuth: () => {\n            dispatch(\n                RequestedLoginAuth(RequestedLoginMode.PREFILL)\n            );\n        },\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          process.env.NODE_ENV === 'development' && console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              process.env.NODE_ENV === 'development' && console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              process.env.NODE_ENV === 'development' && console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      process.env.NODE_ENV === 'development' && console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export enum RootActionNames {\n    ResetAllStore = \"RESET_ALL_STORE\"\n}\n\nexport const resetAllStoreAction = () => {\n    return {\n        type: RootActionNames.ResetAllStore,\n    }\n}","import { Reducer, Action } from 'redux';\n\nimport { \n    /** store */\n    IUpdateAuthState, \n    /** action */\n    AuthActionNames, TAuthActions \n} from \"./types\";\n\nimport { RequestStatus } from \"../../utils/rest-api\";\n\nconst initialAuthState: IUpdateAuthState = {\n    requestStatus: RequestStatus.SUCCESS, // initial status just set to SUCCESS\n    isLogin: false,\n    isLocal: false,\n    socialAuthToken: \"\",\n    apiToken: \"\",\n    userName: \"\",\n    expireDateTime: \"\",\n    avatarUrl: \"\",\n}\n\n// authStore will be stored as a sub-entry in global store; this is defined in ./store/types.ts\nexport const authReducer: Reducer<IUpdateAuthState> = (authStore = initialAuthState, action: Action)  => {\n    // add reducer for new actions here\n    // ...\n\n    const authAction = action as TAuthActions;\n\n    if (authAction.type === AuthActionNames.SUCCESS_AUTH) {\n        sessionStorage.setItem('authState', JSON.stringify(authAction.payload));\n    }\n\n    return {\n        ...authStore,\n        ...authAction.payload\n    }\n}","/** redux */\nimport {\n    AuthActionNames,\n    IRequestedLoginAuthAction,\n    IRequestedLogoutAuthAction\n} from \"../../store/auth/types\";\nimport {\n    SuccessLoginAuth,\n    SuccessLogoutAuth,\n    FailureAuth\n} from \"../../store/auth/actions\";\nimport { resetAllStoreAction } from \"../../store/actions\";\nimport { CompanyActions, Company } from \"../../store/data-model/company\";\nimport { ApplicationActions, Application } from \"../../store/data-model/application\";\nimport { ApplicationStatusActions, ApplicationStatus } from \"../../store/data-model/application-status\";\n// redux-saga\nimport { takeEvery, call, put } from \"redux-saga/effects\";\n\n/** router */\nimport { push } from \"connected-react-router\";\n\n/** api */\nimport { AuthenticationService } from \"../../utils/authentication\";\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\n\nfunction* authLoginSagaHandler(\n    requestedLoginAuthAction: IRequestedLoginAuthAction\n) {\n    // RequestAuth action triggered & injecting side effects here...\n    process.env.NODE_ENV === 'development' && console.log(\"auth saga: initialize\");\n    \n    const {\n        loginMode, \n        params={},\n    } = requestedLoginAuthAction;\n    \n    try {\n        // TODO: define interface typing for api response\n\n        const jsonResponse = yield call(AuthenticationService.serverLogin, loginMode, params);\n\n        process.env.NODE_ENV === 'development' && console.log(\"auth saga: server login, jsonRes=\", jsonResponse);\n\n        // In prefill login case, if cannot restore/refresh login session\n        if (!jsonResponse.token) {\n            yield put(SuccessLogoutAuth());\n            return;\n        }\n\n        yield put(SuccessLoginAuth(\n            jsonResponse.email, \"\", \n            jsonResponse.token, \n            jsonResponse.avatar_url,\n            jsonResponse.isLocal\n        ));\n\n        // initial fetch user data\n        yield put(ApplicationActions[CrudType.LIST][RequestStatus.TRIGGERED].action(new Application({})))\n        yield put(CompanyActions[CrudType.LIST][RequestStatus.TRIGGERED].action(new Company({})))\n        yield put(ApplicationStatusActions[CrudType.LIST][RequestStatus.TRIGGERED].action(new ApplicationStatus({})))\n    } catch (error) {\n        console.warn(`auth saga error: ${JSON.stringify(error)}`);\n        yield put(FailureAuth(error));\n        return;\n    }\n}\n\nexport function* authLoginSaga() {\n    yield takeEvery(AuthActionNames.REQUESTED_LOGIN_AUTH, authLoginSagaHandler);\n}\n\nfunction* authLogoutSagaHandler(\n    requestedLogoutAuthAction: IRequestedLogoutAuthAction\n) {\n    // RequestAuth action triggered & injecting side effects here...\n    process.env.NODE_ENV === 'development' && console.log(\"auth logout saga: fired\");\n    try {\n        yield call(AuthenticationService.serverLogout);\n\n        // clear all store\n    } catch (error) {\n        yield put(FailureAuth(error));\n        return;\n    }\n\n    process.env.NODE_ENV === 'development' && console.log(\"auth logout saga: navigating\");\n    yield put(SuccessLogoutAuth());\n    // yield put(push(\"/\"));\n\n    // clear all redux store\n    yield put(resetAllStoreAction());\n}\n\nexport function* authLogoutSaga() {\n    yield takeEvery(\n        AuthActionNames.REQUESTED_LOGOUT_AUTH,\n        authLogoutSagaHandler\n    );\n}\n\n// add new saga handler here && a `takeEvery` saga.\n// ...","import createSagaMiddleware from 'redux-saga';\nimport { all } from \"redux-saga/effects\";\nimport { authLoginSaga, authLogoutSaga } from \"./auth/sagas\";\n// rest api\nimport { CompanySagas } from \"../store/data-model/company\";\nimport { ApplicationSagas } from \"../store/data-model/application\";\nimport { ApplicationStatusSagas } from \"../store/data-model/application-status\";\n\n/** setup saga */\nconst sagaMiddleware = createSagaMiddleware();\n\nexport {\n    sagaMiddleware\n};\n\nconst rootSaga = function*() {\n    yield all([\n        authLoginSaga(),\n        authLogoutSaga(),\n        ...CompanySagas.map((saga) => saga()),\n        ...ApplicationSagas.map((saga) => saga()),\n        ...ApplicationStatusSagas.map((saga) => saga()),\n        // add new saga here\n        // ...\n    ]);\n};\n\nexport const runSagaMiddleaware = () => {\n    sagaMiddleware.run(rootSaga)\n}\n\n","/** redux */\nimport { combineReducers, Reducer, AnyAction, Action } from \"redux\";\nimport { connectRouter, LocationChangeAction } from 'connected-react-router';\nimport { authReducer } from \"./auth/reducers\";\nimport { TAuthActions } from \"./auth/types\";\nimport { IRootState } from \"./types\";\nimport { RootActionNames } from \"./actions\";\n// rest api\nimport { CompanyReducer } from \"./data-model/company\";\nimport { ApplicationReducer } from \"./data-model/application\";\nimport { ApplicationStatusReducer } from \"./data-model/application-status\";\n\n/** router */\nimport { History } from \"history\";\n\n// root reducer with router state\nexport const createRootReducer = (history: History<any>): Reducer<IRootState> => {\n    // return combineReducers<IRootState>({\n    //     router: connectRouter(history),\n    \n    //     // add more reducers here\n    //     auth: authReducer,\n    //     company: CompanyReducer,\n    //     address: AddressReducer,\n    //     application: ApplicationReducer,\n    //     // ...\n    // })\n\n    const rootReducer: Reducer<IRootState> = (rootState: IRootState | undefined, action: Action): IRootState  => {\n\n        let rootStateChecked: any = {}\n        if (!rootState) {\n            rootStateChecked.router = undefined;\n            rootStateChecked.auth = undefined;\n            rootStateChecked.company = undefined;\n            rootStateChecked.application = undefined;\n            rootStateChecked.applicationStatus = undefined;\n            // add initial state for new sub-store here\n            // ...\n        } else if (action.type === RootActionNames.ResetAllStore) {\n            rootStateChecked = {\n                router: rootState.router\n            }\n        } else {\n            rootStateChecked = rootState;\n        }\n\n        process.env.NODE_ENV === 'development' && console.log(\"beforeRootStore\", rootState);\n\n        const afterStore  = { \n            ...rootState,\n            router: connectRouter(history)(rootStateChecked.router, action as LocationChangeAction),\n            auth: authReducer(rootStateChecked.auth, action),\n            company: CompanyReducer(rootStateChecked.company, action),\n            application: ApplicationReducer(rootStateChecked.application, action),\n            applicationStatus: ApplicationStatusReducer(rootStateChecked.applicationStatus, action),\n            // add new reducer here\n            // ...\n        }\n        process.env.NODE_ENV === 'development' && console.log(\"afterRootStore\", afterStore);\n\n        return afterStore;\n    }\n\n    return rootReducer;\n}","/** redux */\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport { IRootState } from \"../store/types\";\nimport { createRootReducer } from \"../store/reducers\";\n\n/** router */\nimport { createBrowserHistory } from 'history';\nimport { routerMiddleware } from 'connected-react-router';\n\n/** middleware */\n// saga\nimport { sagaMiddleware, runSagaMiddleaware } from \"../sagas/saga-config\";\n\n\n\nconst history = createBrowserHistory({\n    basename: (process.env.NODE_ENV === 'development') ?  \n    ``\n    :\n    // since we use custom domain which has root dir of /\n    // we no longer need a base subpath\n    // the subpath is originally used for github page\n    ``\n    // `/appl-tracky-spa`\n});\n\nconst preloadedState = {\n\n};\n\n// generate the singleton store from redux\nexport const store = createStore<IRootState, any, any, any>(\n    createRootReducer(history),\n    preloadedState,\n    compose(\n        applyMiddleware(\n            routerMiddleware(history),\n            sagaMiddleware,\n            // ... add other middlewares ...\n        )\n    )\n);\n\n/** after mount saga middlewares to store, run them */\nrunSagaMiddleaware();\n\nexport {\n    history\n};","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n/** redux */\nimport { Provider } from \"react-redux\";\nimport { Store } from \"redux\";\n/** root store */\nimport { IRootState } from \"./store/types\";\nimport { store } from \"./store/store-config\";\n\n/** router */\nimport { ConnectedRouter } from \"connected-react-router\";\nimport { history } from \"./store/store-config\";\n\n/** types */\ninterface IRootProps {\n    store: Store<IRootState>;\n}\n\n/** root component - just to wrap the App into redux store */\nconst Root: React.SFC<IRootProps> = props => {\n    return (\n        <Provider store={props.store}>\n            <ConnectedRouter history={history} >\n                <App />\n            </ConnectedRouter>\n        </Provider>\n    );\n};\n\nReactDOM.render(<Root store={store} />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}