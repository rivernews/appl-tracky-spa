{"version":3,"sources":["pages/user-app-page/user-app-page.module.css","components/application/application-component.module.css","components/company/company-component.module.css","components/form-factory/form-input-field/form-input-field.module.css","components/tab/tab-content.module.css","components/tab/tab-transition-slide-left.module.css","components/tab/tab-transition-slide-right.module.css","components/tab/tab-container.module.css","components/company/company-list-item.module.css","pages/user-com-app-page/user-com-app-page.module.css","pages/page-routes/page-routes-transition.module.css","components/app-top-bar/app-top-bar.module.css","state-management/types/auth-types.ts","utils/rest-api.ts","data-model/base-model.ts","utils/authentication.ts","state-management/action-creators/auth-actions.ts","components/login/social-auth-login-button.tsx","components/login/social-auth-logout-button.tsx","components/login/social-auth-button.tsx","components/form-factory/form-base-field/form-base-field-meta.tsx","pages/landing-page/landing-page.tsx","components/form-factory/form-input-field/form-input-field.tsx","components/form-factory/form-factory.tsx","components/form-factory/form-input-field/form-input-field-meta.tsx","data-model/label.ts","components/login/local-login-form.tsx","pages/login-page/local-login-page.tsx","utils/utilities.ts","data-model/address.ts","data-model/link.ts","data-model/company/company.ts","state-management/types/user-app-page-types.ts","components/tab/tab-content.tsx","state-management/action-creators/user-app-page-actions.ts","components/tab/tab-container.tsx","state-management/types/select-company-types.ts","state-management/action-creators/select-company-actions.ts","state-management/action-creators/root-actions.ts","components/company/company-list-item-checkbox.tsx","components/company/company-list-item.tsx","state-management/action-creators/action-creator-factory.ts","pages/user-app-page/user-app-page.tsx","components/form-factory/form-base-field/form-base-field.tsx","components/form-factory/form-link-field/form-link-field.tsx","components/form-factory/form-link-field/form-link-field-component.tsx","components/form-factory/form-link-field/form-link-field-meta.tsx","components/form-factory/form-address-field/form-address-field.tsx","components/form-factory/form-address-field/form-address-field-component.tsx","components/form-factory/form-address-field/form-address-field-meta.tsx","components/label/label-group-component.tsx","components/form-factory/form-label-field/form-label-field.tsx","components/form-factory/form-label-field/form-label-field-meta.tsx","components/form-factory/form-rich-text-field/form-rich-text-field.tsx","components/form-factory/form-rich-text-field/form-rich-text-field-meta.tsx","components/company/company-form-component.tsx","pages/add-com-page/add-com-page.tsx","data-model/application-status/application-status.ts","data-model/application-status-link.ts","components/form-factory/form-application-status-link-field/form-application-status-link-field.tsx","components/form-factory/form-application-status-link-field/form-application-status-link-field-component.tsx","components/form-factory/form-application-status-link-field/form-application-status-link-field-meta.tsx","components/application-status/application-status-form-component.tsx","components/application-status/application-status-component.tsx","data-model/application/application.ts","components/application/application-form-component.tsx","components/application/application-component.tsx","components/company/company-component.tsx","pages/user-com-app-page/user-com-app-page.tsx","components/user-info/user-info.tsx","components/login/local-logout-button.tsx","pages/user-profile-page/user-profile-page.tsx","components/themes.tsx","components/app-top-bar/select-company-menu.tsx","components/app-top-bar/app-top-bar.tsx","pages/page-routes/page-routes.tsx","App.tsx","serviceWorker.ts","state-management/reducers/auth-reducers.ts","state-management/reducers/reducer-factory.ts","state-management/reducers/select-company-reducers.ts","state-management/reducers/user-app-page-reducers.ts","state-management/reducers/root-reducers.ts","state-management/sagas/auth-sagas.ts","utils/graphql-api.ts","state-management/sagas/saga-factory.ts","state-management/sagas/company-custom-saga.ts","data-model/application-status/application-status-normalize-schema.ts","data-model/application/application-normalize-schema.ts","data-model/company/company-normalize-schema.ts","state-management/sagas/applicaiton-custom-saga.ts","state-management/sagas/application-status-custom-saga.ts","state-management/sagas/select-company-saga.ts","state-management/sagas/root-saga.ts","state-management/store/store-config.ts","index.tsx","pages/landing-page/landing-page.module.css"],"names":["module","exports","RequestedLoginMode","AuthActionNames","RequestStatus","CrudType","AuthActionNamesValue","Object","values","BaseModel","uuid","created_at","modified_at","normalizeSchemaShape","objectNamePlural","this","schema","Entity","idAttribute","normalizeSchema","getNormalizeSchema","Array","Yup","shape","RefreshObject","token","args","LoginObject","code","provider","redirect_uri","AuthenticationService","state","clientID","redirectUri","apiSocialLoginUrl","apiLocalLoginUrl","apiLoginRefreshUrl","socialAuthProvider","apiLoginToken","serverLogin","loginMode","params","a","PREFILL","sessionAuthState","localStorage","getItem","JSON","parse","isLogin","apiCallToken","apiToken","refreshToken","refreshTokenReponse","email","userName","avatar_url","avatarUrl","isLocal","SOCIAL_AUTH","loginObject","socialAuthToken","RestApiService","post","data","endpointUrl","resp","Error","LOCAL","fetch","apiBaseUrl","method","mode","credentials","headers","body","stringify","username","password","res","ok","statusText","json","parsedJsonResponse","refreshObject","serverLogout","RestMethod","CrudKeywords","CrudMapToRest","crudType","CREATE","BATCHCREATE","POST","READ","LIST","GET","UPDATE","BATCHUPDATE","PATCH","DELETE","IsSingleRestApiResponseTypeGuard","response","undefined","userEmail","userFirstName","userLastName","objectID","get","absoluteUrl","objectName","getRelativeUrl","setApiAuthHeaders","then","patch","delete","Authorization","RequestedLoginAuth","onCompleteCallback","type","REQUESTED_LOGIN_AUTH","payload","requestStatus","REQUESTING","RequestedLogoutAuth","REQUESTED_LOGOUT_AUTH","SuccessLogoutAuth","SUCCESS_AUTH","SUCCESS","expireDateTime","FailureAuth","error","FAILURE_AUTH","FAILURE","SocialAuthLoginButton","onLoginButtonClicked","clickEvent","renderProps","onClick","onAuthSuccess","authResponse","props","onSuccess","onAuthFailure","onFailure","className","render","unelevated","icon","faGoogle","disabled","clientId","responseType","cookiePolicy","hostedDomain","Component","SocialAuthLogoutButton","onLogoutSuccess","SocialAuthButton","onSocialLoginSuccess","googleOauthResponse","setState","requestedLoginAuth","onSocialLoginFailure","console","onSocialLogoutSuccess","requestedLogoutAuth","auth","InputFieldType","SocialAuthButtonContainer","withRouter","connect","store","dispatch","LandingPage","formFactoryProps","onStaffLoginClick","history","push","styles","primaryPageContent","headlineContent","headlineText","headlineSubText","loginActionsContainer","divider","sideNoteContent","href","target","LandingPageContainer","FormInputField","name","fieldName","field","form","TextField","label","onTrailingIconSelect","trailingIcon","role","TEXT","inputType","autoFocus","ActionButtonType","FormBaseFieldMeta","model","formField","isDynamic","dynamicLimit","getInstanceDataFromFormikValues","isArray","alert","map","instanceData","value","FormInputFieldMeta","labelTypes","TabNames","FormActionButtonProps","text","FormFactory","initialInstance","validationSchema","onSubmit","setSubmitting","formFieldPropsList","fieldProps","getInstance","createInstanceTriggerAction","updateInstanceTriggerAction","instance","enforcedInstanceData","onSubmitSuccess","initialValues","isSubmitting","submitForm","formFieldMeta","index","key","formikValues","onSaveKeystroke","actionButtonPropsList","actionButtonProps","BUTTON","children","LoginForm","PASSWORD","SUBMIT","onCancel","onSubmitLoginForm","required","LocalLoginPage","onLoginFormCancel","goBack","onLoginFormSubmit","LocalLoginPageContainer","Utilities","rawText","toLowerCase","trim","Address","place_name","country","city","street","full_address","zipcode","max","Link","user","url","order","default","when","is","Label","TARGET","color","UserAppPageActionNames","Company","labels","hq_location","home_page","notes","ratings","applications","companyObject","length","labelTypesMapToCompanyGroupTypes","APPLIED","INTERVIEWING","ARCHIVED","companyGroups","TabContent","SlideDirection","SelectCompanyActionNames","TabContainer","useDispatch","activeIndex","useSelector","userAppPage","activeTabIndex","useState","RIGHTWARD","tabContentSlideDirection","setTabContentSlideDirection","tabContents","tabContentList","tabBar","handleActiveIndexUpdate","newActiveIndex","SET_ACTIVE_TAB","LEFTWARD","tabContent","tabIndex","child","CSSTransition","classNames","rightSlideStyles","leftSlideStyles","in","timeout","unmountOnExit","RootActionNames","SetApplyAllSelectCompanyRequestStatus","SET_REQUEST_STATUS","CompanyListItemCheckBox","company","selectCompanyCollection","selectCompany","onCheckBoxChange","useCallback","event","companyId","checked","ADD_SELECT_COMPANY","AddSelectCompany","REMOVE_SELECT_COMPANY","Checkbox","edge","has","onChange","CompanyListItem","companyCardContent","to","Typography","variant","duration","width","nonInteractive","application","primaryText","position_title","ListItemSecondaryAction","RestApiActionCreatorsFactory","crudKeywords","ObjectRestApiActions","crudKeyword","triggerActionTypeName","TRIGGERED","toUpperCase","requestingActionTypeName","successActionTypeName","failureActionTypeName","actionTypeName","action","objectClassInstance","successCallback","failureCallback","finalCallback","graphqlFunctionName","graphqlArgs","triggerActionOptions","formData","jsonResponse","triggerFormData","graphqlEndCursor","clearAll","actionBase","results","CompanyActionCreators","GroupedCompanyActionCreators","reduce","accumulated","companyGroupText","SearchCompanyActionCreators","ApplicationActionCreators","ApplicationStatusActionCreators","useStyles","makeStyles","createStyles","loadMoreButtonContainer","display","justifyContent","margin","centerVertically","alignItems","GroupedCompanyLoadMoreButton","labelText","endCursor","labels__text","after","Button","disableElevation","SearchCompanyLoadMoreButton","searchText","searchCompany","name__icontains","UserAppPageContainer","styleClasses","setSearchText","isFiltering","setIsFiltering","anyGroupCompanyEndCursor","interviewingCompany","useEffect","labels__isnull","searchFieldTextIsEmpty","normalizeText","onSearchFieldChange","currentTarget","searchCompanyEndCursor","onSearchFieldKeyDown","onSearchFieldClear","searchCompanies","collection","reference","UserAppPageHeader","allCompanyTab","Badge","badgeContent","companyListHeader","searchField","outlined","leadingIcon","onKeyDown","applicationUuid","groupCompanyTabs","keys","companyRef","sort","companyA","companyB","Date","getTime","FormBaseDynamicFieldControlls","window","confirm","formikArrayHelpers","remove","BaseDynamicFieldAddButton","withFormBaseField","FormFieldComponent","FormLinkField","textInputFieldMeta","urlInputFieldMeta","FormLinkFieldMeta","FormAddressField","fullAddressInputFieldMeta","placeNameInputFieldMeta","FormAddressFieldMeta","LabelGroupComponentContainer","selectedLabels","setSelectedLabels","titleText","choice","selectedChipIds","handleSelect","id","FormLabelField","selectedLabelText","setFieldValue","FormLabelFieldMeta","FormRichTextField","editor","BalloonEditor","getData","FormRichTextFieldMeta","CompanyFormComponent","createCompany","updateCompany","CompanyFormComponentContainer","companyFormData","getLabel","updateFromCompany","updateFromObject","AddComPage","match","replace","AddComPageContainer","ApplicationStatus","applicationstatuslink_set","date","localeNowDateString","now","UTC","getUTCFullYear","getUTCMonth","getDate","toISOString","split","ApplicationStatusLink","application_status","link","FormApplicationStatusLinkField","linkFieldProps","FormApplicationStatusLinkFieldMeta","ApplicationStatusFormComponent","DATE","applicationStatus","createApplicationStatus","updateApplicationStatus","ApplicationStatusFormComponentContainer","applicationStatusStore","applicationStatusFormData","ApplicationStatusComponent","isFormOpened","renderDisplay","deleteApplicationStatus","applicationStatusLink","includes","renderFormController","isOnlyForm","ApplicationStatusComponentContainer","applicationStatusToDelete","callback","Application","user_company","job_description_page","job_source","job_description_notes","statuses","ApplicationFormComponent","createApplication","updateApplication","ApplicationFormComponentContainer","applicationStore","applicationFormData","ApplicationComponent","renderApplicationFormController","renderApplicationDisplay","applicationStatusList","IconButton","disableApplicationActionButtons","deleteApplication","applicationCard","applicationCardContent","ApplicationComponentController","applicationToDelete","CompanyComponent","companyTitleContainer","actionButtonsDisabled","onEditIconClicked","onDeleteIconClicked","companyTitleCaption","UserComAppPageContainer","companyStore","accumulate","deleteCompany","companyToDelete","companyToUpdate","companyUuid","goBackToCompanyListPage","onCompanyDelete","onCompanyEdit","renderPage","UserCompanyPage","_","applicationRef","applicationsIndex","statusUuid","someStillRequesting","renderController","UserInfo","toString","LocalLogoutButton","UserProfilePage","localLogoutButton","UserProfilePageContainer","lightTheme","createMuiTheme","palette","primary","main","purple","secondary","pink","darkTheme","useCompanyDropdownListStyle","chip","marginRight","CompanyDropdownList","classes","menuAnchorElement","setMenuAnchorElement","onMenuClick","closeMenu","size","Menu","anchorEl","keepMounted","open","Boolean","onClose","MenuItem","dense","Chip","noWrap","CompanyStatusDropdownListItem","onSelect","stagedStatus","destinationStatus","onDropdownListItemSelected","status","SET_DESTINATION_STATUS","selected","SelectCompanyMenu","selectCompanyApplyRequestStatus","React","setAnchorEl","onDropdownListClick","closeDropdownList","onApply","APPLY_ALL_CHANGES","CANCEL_ALL","theme","aria-controls","aria-haspopup","AppTopBar","location","useLocation","useHistory","goHome","pathname","align","topAppBarTitle","navIcon","faGithub","style","src","alt","publicPageSet","Set","PageRoutes","goInternal","search","nextUrl","URLSearchParams","isCurrentPublicPage","path","exact","component","indeterminate","buffer","bufferingDots","TransitionGroup","pageTransitionStyles","PageRoutesContainer","App","retrieveLoginAuth","CssBaseline","hostname","initialAuthState","authReducer","authStore","authAction","setItem","RestApiReducerFactory","initialState","objectStore","objectAction","newObject","newObjects","newObjectsCollection","object","resObjects","afterStore","updatedObject","updatedObjects","updatedObjectsCollection","targetDeleteUuids","targetDeleteObjectList","targetDeleteObject","omit","initialSelectCompanyState","Map","selectCompanyReducer","selectCompanyAction","isFound","filter","initialUserAppPageState","userAppPageReducer","userAppPageAction","CompanyReducer","GroupCompanyReducer","SearchCompanyReducer","ApplicationReducer","ApplicationStatusReducer","authLoginSagaHandler","authLoginSaga","authLogoutSagaHandler","authLogoutSaga","requestedLoginAuthAction","call","put","warn","takeEvery","requestedLogoutAuthAction","ResetAllStore","GraphQLApiService","apolloClient","ApolloClient","concat","ApolloLink","operation","forward","setContext","createHttpLink","uri","cache","InMemoryCache","defaultOptions","query","fetchPolicy","fetchDashboardCompanyData","signatureArgs","acc","cur","gql","companies","edges","normalizedResponse","node","RestApiSagaFactory","sagaFactoryOptions","sagaHandler","triggerAction","normalizeData","relationalNormalizeData","normalizeManifest","normalizeObjectEntityKey","objectEntityKey","dataSource","normalizeDataSourceSchema","listSchema","normalizeDataSource","normalize","entities","relationalEntityReduxActionsMap","hasOwnProperty","relationalEntityKey","dispatchResponseData","relationalActions","overrideCrudSuccessSagaHandler","dispatchDeleteData","pageInfo","companyGroupType","doneCrudSuccessSagaHandler","saga","actionChannel","objectTriggerActionChannel","take","objectTriggerAction","companyDoneUpdateSuccessSagaHandler","destinationCompany","destinationLabelText","currentCompany","currentLabelText","destinationCreateAction","currentDeleteAction","companyOverrideDeleteSuccessSagaHandler","currentAction","select","getApplicationStore","deleteStatusUuids","flatMap","groupedCompanyListSuccessSagaHandler","fetchedCompanyList","fetchedCompanyListUuids","searchCompanyListSuccessSagaHandler","fetchedCompanyReferenceCollections","all","f","companyReferences","ApplicationStatusNormalizeSchema","ApplicationNormalizeDefinition","ApplicationNormalizeSchema","ApplicationListNormalizeSchema","ApplicationNormalizeManifest","CompanyNormalizeDefinition","CompanyNormalizeSchema","CompanyNormalizeManifest","applicationDoneCreateSuccessSagaHandler","getCompanyStore","updatedCompany","applicationDoneDeleteSuccessSagaHandler","applicationStatusDoneCreateSuccessSagaHandler","updatedApplication","applicationStatusDoneDeleteSuccessSagaHandler","applicationStatusUuid","selectCompanyApplySagaHandler","selectCompanyApplySaga","applyAllAction","selectCompanyState","partialUpdateCompanies","updateCompaniesResult","removeGroupsMapping","forEach","removeGroupSet","add","set","from","uuidSet","deleteAction","batchCreateAction","batchUpdateAction","CompanySagas","update","GroupCompanySagas","list","SearchCompanySagas","ApplicationSagas","create","ApplicationStatusSagas","rootSaga","flat","sagaMiddleware","createSagaMiddleware","createBrowserHistory","basename","createStore","rootState","rootStateChecked","router","connectRouter","Reducer","composeWithDevTools","applyMiddleware","routerMiddleware","run","Root","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.340637ee.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"UserAppPageHeader\":\"user-app-page_UserAppPageHeader__x_cfW\",\"companyListHeader\":\"user-app-page_companyListHeader__19QUw\",\"searchField\":\"user-app-page_searchField__3q0QO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"applicationCard\":\"application-component_applicationCard__31V7N\",\"applicationCardContent\":\"application-component_applicationCardContent__37H7Z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"companyTitleContainer\":\"company-component_companyTitleContainer__Ri6WX\",\"companyTitleCaption\":\"company-component_companyTitleCaption__1Ke-4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TextField\":\"form-input-field_TextField__3KSDC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TabContent\":\"tab-content_TabContent__1_9TR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"tab-transition-slide-left_enter__1sdjC\",\"enterActive\":\"tab-transition-slide-left_enterActive__8WTGE\",\"enterDone\":\"tab-transition-slide-left_enterDone__1_OwZ\",\"exit\":\"tab-transition-slide-left_exit__3VudZ\",\"exitActive\":\"tab-transition-slide-left_exitActive__3-3TN\",\"exitDone\":\"tab-transition-slide-left_exitDone__3Mo2P\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"tab-transition-slide-right_enter__1QHPP\",\"enterActive\":\"tab-transition-slide-right_enterActive__2aDp0\",\"enterDone\":\"tab-transition-slide-right_enterDone__2f3WM\",\"exit\":\"tab-transition-slide-right_exit__36vYx\",\"exitActive\":\"tab-transition-slide-right_exitActive__k1Mfn\",\"exitDone\":\"tab-transition-slide-right_exitDone__3H4Ny\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tabBar\":\"tab-container_tabBar__18BpS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"companyCard\":\"company-list-item_companyCard__1aDLN\",\"companyCardContent\":\"company-list-item_companyCardContent__2-x9i\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"UserCompanyPage\":\"user-com-app-page_UserCompanyPage__1_59y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"exit\":\"page-routes-transition_exit__FV-eW\",\"exitActive\":\"page-routes-transition_exitActive__KOsYo\",\"exitDone\":\"page-routes-transition_exitDone__3tF_F\",\"enter\":\"page-routes-transition_enter__2xlSM\",\"enterActive\":\"page-routes-transition_enterActive__ARhrI\",\"enterDone\":\"page-routes-transition_enterDone__1rm_w\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"topAppBarTitle\":\"app-top-bar_topAppBarTitle__2xrzw\"};","import { Action } from \"redux\";\n\nimport { RequestStatus } from \"../../utils/rest-api\";\n\n/**\n * Store Types\n */\n\n// complete store type\nexport interface IUpdateAuthState {\n    requestStatus: RequestStatus\n    isLogin: boolean\n    isLocal: boolean\n    userName: string\n    socialAuthToken: string\n    apiToken: string\n    expireDateTime: string\n    avatarUrl: string\n}\n\nexport enum RequestedLoginMode {\n    PREFILL = \"prefill\",\n    SOCIAL_AUTH = \"social_auth\",\n    LOCAL = \"local\"\n}\n\n// async partial store types\nexport interface IRequestedLoginAuthState {\n    requestStatus: RequestStatus\n}\n\nexport interface IRequestedLogoutAuthState {\n    requestStatus: RequestStatus\n}\n\nexport interface ISuccessAuthState {\n    requestStatus: RequestStatus\n    isLogin: boolean\n    isLocal: boolean\n    userName: string\n    expireDateTime: string\n    apiToken: string\n    avatarUrl: string\n}\n\nexport interface IFailureAuthState {\n    requestStatus: RequestStatus,\n    error: any\n}\n\n// add more state types for this reducer - auth reducer\n// ...\n\n\n\n\n\n/**\n * Action Types\n */\n\nexport enum AuthActionNames {\n    UPDATE_AUTH = \"Update auth\",\n    REQUESTED_LOGIN_AUTH = \"Requested login auth\",\n    REQUESTED_LOGOUT_AUTH = \"Requested logout auth\",\n    SUCCESS_AUTH = \"Success auth\",\n    FAILURE_AUTH = \"Failure auth\",\n\n    // 1. add more action for this reducer - auth reducer\n    // 2. write the type interface for the action below\n    // ...\n}\n\nexport const AuthActionNamesValue = Object.values(AuthActionNames);\n\nexport interface IUpdateAuthAction extends Action<AuthActionNames.UPDATE_AUTH> {\n    type: typeof AuthActionNames.UPDATE_AUTH;\n    payload: IUpdateAuthState;\n}\n\nexport interface RequestedLoginAuthActionParams {\n    username?: string,\n    password?: string,\n    socialAuthToken?: string\n}\n\nexport interface IRequestedLoginAuthAction extends Action<AuthActionNames.REQUESTED_LOGIN_AUTH> {\n    type: typeof AuthActionNames.REQUESTED_LOGIN_AUTH;\n    loginMode: RequestedLoginMode;\n    params?: RequestedLoginAuthActionParams;\n    payload: IRequestedLoginAuthState;\n    onCompleteCallback?: () => void\n}\n\nexport interface IRequestedLogoutAuthAction extends Action<AuthActionNames.REQUESTED_LOGOUT_AUTH> {\n    type: typeof AuthActionNames.REQUESTED_LOGOUT_AUTH;\n    payload: IRequestedLogoutAuthState;\n}\n\nexport interface ISuccessAuthAction extends Action<AuthActionNames.SUCCESS_AUTH> {\n    type: typeof AuthActionNames.SUCCESS_AUTH;\n    payload: ISuccessAuthState;\n}\n\nexport interface IFailureAuthAction extends Action<AuthActionNames.FAILURE_AUTH> {\n    type: typeof AuthActionNames.FAILURE_AUTH;\n    payload: IFailureAuthState;\n}\n\n// use union | ... | ... to add more action types\nexport type TAuthActions = IUpdateAuthAction | IRequestedLoginAuthAction | IRequestedLogoutAuthAction | ISuccessAuthAction | IFailureAuthAction","import { TObject } from \"../state-management/types/factory-types\";\nimport { AuthenticationService } from \"./authentication\";\n\n\nexport enum RequestStatus {\n    TRIGGERED = \"triggered\",\n    REQUESTING = \"requesting\",\n    SUCCESS = \"success\",\n    FAILURE = \"failre\"\n}\n\nexport enum CrudType {\n    CREATE = \"create\",\n    BATCHCREATE = \"batchcreate\",\n    READ = \"read\",\n    LIST = \"list\",\n    UPDATE = \"update\",\n    BATCHUPDATE = \"batchupdate\",\n    // DELETE includes indivual delete and batch delete\n    DELETE = \"delete\",\n}\n\nexport const CrudKeywords = Object.values(CrudType) as Array<CrudType>;\n\nexport enum RestMethod {\n    POST = \"post\",\n    GET = \"get\",\n    PATCH = \"patch\",\n    DELETE = \"delete\"\n}\n\nexport const CrudMapToRest = (crudType: CrudType): RestMethod => {\n    switch (crudType) {\n        case CrudType.CREATE:\n        case CrudType.BATCHCREATE:\n            return RestMethod.POST;\n        case CrudType.READ:\n            return RestMethod.GET;\n        case CrudType.LIST:\n            return RestMethod.GET;\n        case CrudType.UPDATE:\n        case CrudType.BATCHUPDATE:\n            return RestMethod.PATCH;\n        // DELETE includes indivual delete and batch delete\n        case CrudType.DELETE:\n            return RestMethod.DELETE;\n\n        default:\n            return RestMethod.GET;\n    }\n};\n\nexport interface IRequestParams<Schema> {\n    endpointUrl?: string;\n    absoluteUrl?: string;\n    objectName?: string;\n    data?: TObject<Schema> | Array<TObject<Schema>>;\n}\n\nexport interface IListRestApiResponse<Schema> {\n    count: number;\n    next: string;\n    previous: string;\n    results: Array<TObject<Schema>>;\n}\n\nexport type ISingleRestApiResponse<Schema> = TObject<Schema>;\n\nexport function IsSingleRestApiResponseTypeGuard<Schema>(\n    response: any\n): response is ISingleRestApiResponse<Schema> {\n    return response && (<ISingleRestApiResponse<Schema>>response).uuid !== undefined;\n}\n\nfunction IsSingleFormDataTypeGuard<Schema>(\n    formData: TObject<Schema> | Array<TObject<Schema>>\n): formData is TObject<Schema> {\n    return (<TObject<Schema>>formData).uuid !== undefined;\n}\n\nexport class RestApi {\n    state = {\n        clientID: `732988498848-vuhd6g61bnlqe372i3l5pbpnerteu6na.apps.googleusercontent.com`,\n        code: ``,\n        redirectUri: `postmessage`,\n        apiBaseUrl: (process.env.NODE_ENV === 'development') ? \n        `http://localhost:8000/api/`\n        :\n        `https://appl-tracky.api.shaungc.com/api/`\n        ,\n        socialAuthProvider: `google-oauth2`,\n\n        userEmail: ``,\n        userFirstName: ``,\n        userLastName: ``,\n\n        objectID: ``\n    };\n\n    get = <Schema>({ endpointUrl, absoluteUrl, objectName, data }: IRequestParams<Schema>) => {\n        return fetch(\n            this.getRelativeUrl({\n                endpointUrl,\n                absoluteUrl,\n                objectName,\n                data\n            }),\n            {\n                method: \"GET\",\n                ...this.setApiAuthHeaders()\n            }\n        ).then(res => res.json());\n    };\n\n    post = <Schema>({ data, objectName, endpointUrl }: IRequestParams<Schema>) => {\n        return fetch(\n            this.getRelativeUrl({\n                endpointUrl,\n                objectName,\n                data\n            }),\n            {\n                method: \"POST\",\n                ...this.setApiAuthHeaders(),\n                body: JSON.stringify(data)\n            }\n        ).then(res => res.json());\n        // let caller handle error in their own .catch()\n    };\n\n    patch = <Schema>({ data, objectName, endpointUrl }: IRequestParams<Schema>) => {\n        return fetch(\n            this.getRelativeUrl({\n                endpointUrl,\n                objectName,\n                data\n            }),\n            {\n                method: \"PATCH\",\n                ...this.setApiAuthHeaders(),\n                body: JSON.stringify(data)\n            }\n        ).then(res => res.json());\n    };\n\n    delete = <Schema>({ data, objectName, endpointUrl }: IRequestParams<Schema>) => {\n        return fetch(\n            this.getRelativeUrl({\n                endpointUrl,\n                objectName,\n                data\n            }),\n            {\n                method: \"DELETE\",\n                ...this.setApiAuthHeaders(),\n                body: JSON.stringify(data)\n            }\n        );\n    };\n\n    /** helper */\n    private getRelativeUrl = <Schema>({\n        objectName,\n        data,\n        endpointUrl,\n        absoluteUrl,\n    }: IRequestParams<Schema>) => {\n        let url = \"\";\n        if (absoluteUrl) {\n            url = absoluteUrl;\n        }\n        else if (endpointUrl) {\n            url = `${this.state.apiBaseUrl}${endpointUrl}`;\n        } else {\n            if (data && IsSingleFormDataTypeGuard(data) && data.uuid) {\n                url = `${this.state.apiBaseUrl}${objectName}/${data.uuid}/`;\n            } else {\n                url = `${this.state.apiBaseUrl}${objectName}/`;\n            }\n        }\n        return url;\n    };\n\n    private setApiAuthHeaders = (): RequestInit => {\n\n        return {\n            mode: \"cors\",\n            credentials: AuthenticationService.apiCallToken ? \"include\" : \"omit\",\n            headers: {\n                Authorization: AuthenticationService.apiCallToken\n                    ? `JWT ${AuthenticationService.apiCallToken}`\n                    : ``,\n                \"Content-Type\": \"application/json\"\n            }\n        };\n    };\n}\n\n/** create restapi singleton */\nexport const RestApiService = new RestApi();\n","import * as Yup from \"yup\";\nimport { schema, Schema } from 'normalizr';\n\n\nexport type IReference = string;\n\nexport type IRelationship = {\n    uuid: string\n} | IReference;\n\nexport interface IBaseModelProps {\n    uuid?: string\n    created_at?: string\n    modified_at?: string\n}\n\nexport class BaseModel {\n    uuid: string\n    created_at: string\n    modified_at: string\n\n    normalizeSchemaShape?: Schema\n    objectNamePlural?: string\n    \n    constructor({\n        uuid = \"\",\n        created_at = \"\",\n        modified_at = \"\",\n    }: IBaseModelProps) {\n        this.uuid = uuid;\n        this.created_at = created_at;\n        this.modified_at = modified_at;\n    }\n\n    static schema() {\n        return Yup.object<BaseModel>().shape({});\n    }\n\n    getNormalizeSchema() {\n        if (this.normalizeSchemaShape && this.objectNamePlural) {\n            return new schema.Entity(this.objectNamePlural, this.normalizeSchemaShape, {\n                idAttribute: \"uuid\"\n            })\n        }\n\n        return null;\n    }\n\n    getListNormalizeSchema() {\n        const normalizeSchema = this.getNormalizeSchema();\n        if (normalizeSchema) {\n            return new schema.Array(normalizeSchema);\n        }\n\n        return null;\n    }\n}\n\n// for newing model class instance and access base class's assets\nexport type DataModelInstance<Model = BaseModel> = Model & BaseModel\n\nexport type DataModelClass<DataModel = any> = DataModelInstance<DataModel> & (new (props: any) => DataModel)\n","import { RestApiService } from \"./rest-api\";\nimport { BaseModel, IBaseModelProps } from \"../data-model/base-model\";\n\nimport { RequestedLoginMode, RequestedLoginAuthActionParams } from \"../state-management/types/auth-types\";\n\nexport interface ILoginObjectProps {\n    code?: string;\n    provider?: string;\n    redirect_uri?: string;\n}\n\nexport interface IRefreshObjectProps {\n    token: string;\n}\n\nclass RefreshObject extends BaseModel {\n    token: string;\n\n    constructor({\n        token = \"\",\n        ...args\n    }: IRefreshObjectProps & IBaseModelProps) {\n        super(args);\n        this.token = token;\n    }\n}\n\nclass LoginObject extends BaseModel {\n    code: string;\n    provider: string;\n    redirect_uri: string;\n\n    constructor({\n        code = \"\",\n        provider = \"\",\n        redirect_uri = \"\",\n        ...args\n    }: ILoginObjectProps & IBaseModelProps) {\n        super(args);\n        this.code = code;\n        this.provider = provider;\n        this.redirect_uri = redirect_uri;\n    }\n}\n\nclass Authentication {\n    state = {\n        clientID: `732988498848-vuhd6g61bnlqe372i3l5pbpnerteu6na.apps.googleusercontent.com`,\n        redirectUri: `postmessage`,\n        apiSocialLoginUrl: `login/social/`,\n        apiLocalLoginUrl: `api-token-auth/`,\n        apiLoginRefreshUrl: `api-token-refresh/`,\n        socialAuthProvider: `google-oauth2`,\n\n        apiLoginToken: ``,\n    };\n\n    serverLogin = async (loginMode: RequestedLoginMode, params: RequestedLoginAuthActionParams) => {\n        // prefill login\n        if (loginMode === RequestedLoginMode.PREFILL) {\n            // restore session login data\n            const sessionAuthState = localStorage.getItem(`${(process.env.NODE_ENV === \"development\") ? \"dev__\" : \"\"}applyTracky__authState`)\n                ? JSON.parse(localStorage.getItem(`${(process.env.NODE_ENV === \"development\") ? \"dev__\" : \"\"}applyTracky__authState`) || \"{}\")\n                : {};\n\n            if (sessionAuthState.isLogin) {\n                this.apiCallToken = sessionAuthState.apiToken;\n\n                try {\n                    const refreshTokenReponse = await this.refreshToken();\n\n                    return {\n                        email: sessionAuthState.userName,\n                        token: refreshTokenReponse.token,\n                        avatar_url: sessionAuthState.avatarUrl,\n                        isLocal: sessionAuthState.isLocal\n                    };\n                } catch (error) {\n                    // catch: refresh failed or data-fetching failed\n                    process.env.NODE_ENV === \"development\" &&\n                        console.error(\n                            `Error after refreshing token in Authentication service: ${error}`\n                        );\n                }\n            }\n            \n            // in case cannot restore login session,\n            // will let saga dispatch logout to reset authState in session storage\n            return {};\n        }\n\n        // social auth login\n        else if (loginMode === RequestedLoginMode.SOCIAL_AUTH) {\n            const loginObject = new LoginObject({\n                code: params.socialAuthToken,\n                provider: this.state.socialAuthProvider,\n                redirect_uri: this.state.redirectUri\n            });\n    \n            try {\n                const resp = await RestApiService.post<LoginObject>({\n                    data: loginObject,\n                    endpointUrl: this.state.apiSocialLoginUrl\n                });\n    \n                this.apiCallToken = resp.token;\n                return {\n                    ...resp,\n                    isLocal: false\n                };\n            }\n            catch (error) {\n                throw Error(error);\n            }\n        }\n\n        // local login\n        else if (loginMode === RequestedLoginMode.LOCAL) {\n            // post login form data to get login token\n            try {\n                const res = await fetch(`${RestApiService.state.apiBaseUrl}${this.state.apiLocalLoginUrl}`, {\n                    method: \"POST\",\n                    mode: \"cors\",\n                    credentials: \"omit\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    },\n                    body: JSON.stringify({\n                        username: params.username, password: params.password\n                    })\n                });\n    \n                if (!res.ok) {\n                    throw Error(res.statusText)\n                }\n    \n                const parsedJsonResponse = await res.json();\n                \n                this.apiCallToken = parsedJsonResponse.token;\n    \n                return {\n                    email: params.username,\n                    token: parsedJsonResponse.token,\n                    avatar_url: parsedJsonResponse.avatar_url,\n                    isLocal: true\n                }\n            }\n            catch (error) {\n                throw Error(error)\n            }\n        }\n    };\n\n    get apiCallToken() {\n        return this.state.apiLoginToken;\n    }\n\n    set apiCallToken(token) {\n        this.state.apiLoginToken = token;\n    }\n\n    refreshToken = async () => {\n        const refreshObject = new RefreshObject({\n            token: this.apiCallToken\n        });\n        try {\n            const resp = await RestApiService.post<RefreshObject>({\n                data: refreshObject,\n                endpointUrl: this.state.apiLoginRefreshUrl\n            });\n\n            this.apiCallToken = resp.token;\n\n            return resp;\n        } catch (error) {\n            throw Error(error);\n        }\n    };\n\n    serverLogout = async () => {\n        // no server-side invalidate implement at this point (a common case for JWT, however)\n\n        this.apiCallToken = \"\";\n        \n        // will let saga dispatch logout to reset authState in session storage\n        \n        return;\n    };\n}\n\nexport const AuthenticationService = new Authentication();\n","import {\n    /** state types */\n    IUpdateAuthState,\n    RequestedLoginMode,\n    /** action types */\n    IUpdateAuthAction,\n    IRequestedLoginAuthAction,\n    RequestedLoginAuthActionParams,\n    IRequestedLogoutAuthAction,\n    ISuccessAuthAction,\n    IFailureAuthAction,\n    /** action names */\n    AuthActionNames,\n} from \"../types/auth-types\";\n\nimport { RequestStatus } from \"../../utils/rest-api\";\n\nexport const UpdateAuth = (newAuthState: IUpdateAuthState): IUpdateAuthAction => {\n    return {\n        type: AuthActionNames.UPDATE_AUTH,\n        payload: newAuthState\n    };\n};\n\nexport const RequestedLoginAuth = (loginMode: RequestedLoginMode, params?: RequestedLoginAuthActionParams, onCompleteCallback?: () => void): IRequestedLoginAuthAction => {\n    return {\n        type: AuthActionNames.REQUESTED_LOGIN_AUTH,\n        loginMode,\n        params,\n        payload: {\n            requestStatus: RequestStatus.REQUESTING,\n        },\n        onCompleteCallback\n    };\n};\n\nexport const RequestedLogoutAuth = (): IRequestedLogoutAuthAction => {\n    return {\n        type: AuthActionNames.REQUESTED_LOGOUT_AUTH,\n        payload: {\n            requestStatus: RequestStatus.REQUESTING,\n        }\n    };\n};\n\nexport const SuccessLoginAuth = (userName: string, expireDateTime: string, apiToken: string, avatarUrl: string, isLocal: boolean): ISuccessAuthAction => {\n\n    return {\n        type: AuthActionNames.SUCCESS_AUTH,\n        payload: {\n            requestStatus: RequestStatus.SUCCESS,\n            isLogin: true,\n            isLocal: isLocal ? true : false,\n            userName,\n            expireDateTime,\n            apiToken,\n            avatarUrl\n        }\n    };\n};\n\nexport const SuccessLogoutAuth = (): ISuccessAuthAction => {\n    return {\n        type: AuthActionNames.SUCCESS_AUTH,\n        payload: {\n            requestStatus: RequestStatus.SUCCESS,\n            isLogin: false,\n            isLocal: false,\n            userName: \"\",\n            expireDateTime: \"\",\n            apiToken: \"\",\n            avatarUrl: \"\",\n        }\n    };\n};\n\nexport const FailureAuth = (error: any): IFailureAuthAction => {\n    return {\n        type: AuthActionNames.FAILURE_AUTH,\n        payload: {\n            requestStatus: RequestStatus.FAILURE,\n            error\n        }\n    };\n};\n\n// write new actions here for this reducer - auth reducer\n// ...\n","import React, { Component } from \"react\";\n\n/** Components */\nimport { GoogleLogin } from \"react-google-login\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n// font awesome\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faGoogle } from '@fortawesome/free-brands-svg-icons'\n\ninterface ISocialAuthLoginButtonProps {\n    clientID: string;\n    redirectUri?: string;\n    onSuccess(authResponse?: any): void;\n    onFailure?(error: any): void;\n    disabled?: boolean;\n}\n\nexport class SocialAuthLoginButton extends Component<\n    ISocialAuthLoginButtonProps\n> {\n    onLoginButtonClicked = (clickEvent: any, renderProps: any) => {\n        renderProps.onClick(clickEvent);\n    };\n\n    onAuthSuccess = (authResponse?: any) => {\n        this.props.onSuccess(authResponse);\n    };\n\n    onAuthFailure = (error: any) => {\n        if (this.props.onFailure) {\n            this.props.onFailure(error);\n        }\n    };\n\n    render() {\n        return (\n            <div className=\"UserAuthButton\">\n                <GoogleLogin\n                    render={(renderProps: any) => (\n                        <Button\n                            onClick={clickEvent =>\n                                this.onLoginButtonClicked(\n                                    clickEvent,\n                                    renderProps\n                                )\n                            }\n                            unelevated\n                            icon={\n                                <FontAwesomeIcon icon={faGoogle} />\n                            }\n                            disabled={this.props.disabled}\n                        >\n                            Google Login\n                        </Button>\n                    )}\n                    onSuccess={this.onAuthSuccess}\n                    onFailure={this.onAuthFailure}\n                    clientId={this.props.clientID}\n                    responseType=\"code\"\n                    redirectUri={this.props.redirectUri || \"postmessage\"}\n                    cookiePolicy={ (process.env.NODE_ENV === 'development') ? 'single_host_origin' : 'https://shaungc.com'}\n                    hostedDomain={ (process.env.NODE_ENV === 'development') ? \"http://localhost:3000\" : \"https://appl-tracky.shaungc.com\"}\n                />\n            </div>\n        );\n    }\n}\n","import React, { Component } from \"react\";\n\nimport { AuthenticationService } from \"../../utils/authentication\";\n\n/** Components */\nimport { GoogleLogout } from \"react-google-login\";\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n\n\ninterface ISocialAuthLogoutButtonProps {\n    onSuccess(authResponse?: any): void;\n    onClick: () => void\n    disabled?: boolean\n}\n\nexport class SocialAuthLogoutButton extends Component<\n    ISocialAuthLogoutButtonProps\n> {\n    onAuthSuccess = (authResponse?: any) => {\n        this.props.onSuccess(authResponse);\n    };\n\n    render() {\n        return (\n            <div className=\"UserAuthButton\">\n                <GoogleLogout\n                    clientId={AuthenticationService.state.clientID}\n                    render={(renderProps: any) => (\n                        <Button\n                            onClick={this.props.onClick}\n                            unelevated\n                            icon={<MaterialIcon icon=\"eject\" />}\n                            disabled={this.props.disabled}\n                        >\n                            Logout\n                        </Button>\n                    )}\n                    onLogoutSuccess={this.onAuthSuccess}\n                />\n            </div>\n        );\n    }\n}\n","import React, { Component } from \"react\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\n\n/** Redux */\nimport { Dispatch } from \"redux\";\nimport { connect } from \"react-redux\";\nimport { IRootState } from \"../../state-management/types/root-types\";\nimport { IUpdateAuthAction, IRequestedLoginAuthAction, TAuthActions, IUpdateAuthState, RequestedLoginMode } from \"../../state-management/types/auth-types\";\nimport { UpdateAuth, RequestedLoginAuth, RequestedLogoutAuth } from \"../../state-management/action-creators/auth-actions\";\n\n/** rest api */\nimport { RequestStatus } from \"../../utils/rest-api\";\n\n/** Components */\nimport { SocialAuthLoginButton } from \"./social-auth-login-button\";\nimport { SocialAuthLogoutButton } from \"./social-auth-logout-button\";\n\ninterface ISocialAuthButtonProps extends RouteComponentProps {\n    auth: IUpdateAuthState;\n    requestedLoginAuth: (socialAuthToken: string) => void;\n    requestedLogoutAuth: () => void;\n}\n\nclass SocialAuthButton extends Component<\n    ISocialAuthButtonProps\n> {\n    state = {\n        clientID: `732988498848-vuhd6g61bnlqe372i3l5pbpnerteu6na.apps.googleusercontent.com`,\n        \n        code: ``, // get `code` from social login button, then obtain token from django server\n        apiLoginToken: ``,\n\n        userEmail: ``,\n        userFirstName: ``,\n        userLastName: ``,\n\n        objectID: ``\n    };\n\n    onSocialLoginSuccess = (googleOauthResponse: any) => {\n        this.setState(\n            {\n                code: googleOauthResponse.code\n            },\n            () => {\n                // this.apiLogin();\n                this.props.requestedLoginAuth(this.state.code);\n            }\n        );\n    };\n\n    onSocialLoginFailure = (error: any) => {\n        console.error(\"Social login failed:\", error);\n    };\n\n    onSocialLogoutSuccess = () => {\n        this.props.requestedLogoutAuth();\n    };\n\n    render() {\n        return (\n            <div className=\"SocialAuth\">\n                {!this.props.auth.isLogin ? (\n                    <SocialAuthLoginButton\n                        clientID={this.state.clientID}\n                        onSuccess={this.onSocialLoginSuccess}\n                        onFailure={this.onSocialLoginFailure}\n                        disabled={this.props.auth.requestStatus === RequestStatus.REQUESTING}\n                    />\n                ) : (\n                    <SocialAuthLogoutButton\n                        onSuccess={this.onSocialLogoutSuccess}\n                        onClick={this.onSocialLogoutSuccess}\n                        \n                        // TODO: logout - ideally no need to wait for request status, just interrupt existing requests (actually this should be possible by looking at `axios` and its abort request feature, or the native javascript `AbortController` and its `AbortController.abort()`).\n                        // However, we'll have to cancel those ongoing sagas for data fetching\n                        // disabled={this.props.auth.requestStatus === RequestStatus.REQUESTING}\n                    />\n                )}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => {\n    return {\n        auth: store.auth\n    };\n};\n\nfunction mapDispatchToProps(dispatch: Dispatch<TAuthActions>) {\n    return {\n        requestedLoginAuth: (socialAuthToken: string) => {\n            dispatch(\n                RequestedLoginAuth(RequestedLoginMode.SOCIAL_AUTH, {\n                    socialAuthToken\n                })\n            );\n        },\n        requestedLogoutAuth: () => {\n            dispatch(\n                RequestedLogoutAuth()\n            );\n        }\n    };\n}\n\nexport const SocialAuthButtonContainer = withRouter(connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(SocialAuthButton));\n","import React from \"react\";\nimport { FormikValues } from \"formik\";\nimport { DataModelClass } from \"../../../data-model/base-model\";\nimport { FormInputField } from \"../form-input-field/form-input-field\";\n\n\nexport enum InputFieldType {\n    // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input\n    TEXT = \"text\",\n    PASSWORD = \"password\",\n    EMAIL = \"email\",\n    URL = \"url\",\n    DATE = \"date\"\n}\n\n// API for caller to new meta class\nexport interface IFieldBaseMetaProps {\n    fieldName: string\n    label: string;\n\n    isDynamic?: boolean;\n    dynamicLimit?: number;\n    getInstanceDataFromFormikValues?: (formikValues: FormikValues) => any // has to be optional since we want to let caller just use `fieldName` by default to access formik's values\n}\n\n// for form field props\nexport interface IFormBaseFieldProps extends IFieldBaseMetaProps {\n    model?: DataModelClass\n    formikValues?: FormikValues // for form field to load data (e.g. initial value) at a specific position in formik's `values`\n    // getInstanceDataFromFormikValues?: // when it's dynamic field, will use this to render dynamic fields\n    onSaveKeystroke?: () => void\n}\n\n// for the base meta class\ninterface IFormBaseFieldMeta extends IFieldBaseMetaProps {\n    model?: DataModelClass\n    formField?: React.ComponentType<IFormBaseFieldProps>\n\n    getInstance: (values: FormikValues) => any // for form factory to loop over fieldmeta and obtain field's data instance\n    getInstanceDataFromFormikValues: (formikValues: FormikValues) => any // required because getInstance() depends on it\n}\n\nexport class FormBaseFieldMeta implements IFormBaseFieldMeta {\n    fieldName: string\n    label: string\n\n    model?: DataModelClass\n    formField: React.ComponentType<IFormBaseFieldProps>\n\n    isDynamic?: boolean;\n    dynamicLimit?: number;\n    getInstanceDataFromFormikValues: (formikValues: FormikValues) => any\n\n    constructor(props: IFieldBaseMetaProps) {\n        this.fieldName = props.fieldName;\n        this.label = props.label;\n\n        this.isDynamic = props.isDynamic;\n        this.dynamicLimit = props.dynamicLimit;\n\n        if (props.getInstanceDataFromFormikValues) {\n            this.getInstanceDataFromFormikValues = props.getInstanceDataFromFormikValues;\n        }\n        else {\n            this.getInstanceDataFromFormikValues = (values: FormikValues) => {\n                if (!(values && values[this.fieldName])) {\n                    alert(\"Oops! Something might go wrong. Info: at class FormBaseFieldMeta.\")\n                    console.error(\"values =\", values, \" this.fieldName =\", this.fieldName);\n                    return (this.isDynamic) ? [] : \"\";\n                }\n                else {\n                    if (this.isDynamic && !Array.isArray(values[this.fieldName])) {\n                        alert(\"Oops! Something might go wrong. Info: at class FormBaseFieldMeta.\")\n                        console.error(\"isDynamic=true, but the value is not an array:\");\n                        console.error(\"values =\", values, \" this.fieldName =\", this.fieldName);\n                    }\n                    return values[this.fieldName];\n                }\n            }\n        }\n\n        this.formField = FormInputField;\n    }\n\n    getInstance(values: FormikValues) {\n        const model = this.model;\n        if (model) {\n            if (this.isDynamic) {\n                return this.getInstanceDataFromFormikValues(values).map((instanceData: any) => new model(instanceData))\n            }\n            else if (Array.isArray(values[this.fieldName])) {\n                return values[this.fieldName].map((value: typeof model) => new model(value));\n            }\n            else {\n                return new model(values[this.fieldName]);\n            }\n        }\n\n        // assume field values are plain string/num or other basic types\n        return values[this.fieldName];\n    }\n}\n","import React, { Component } from \"react\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch, AnyAction } from \"redux\";\nimport { IRootState } from \"../../state-management/types/root-types\";\nimport { IUpdateAuthState } from \"../../state-management/types/auth-types\";\n\n/** Components */\nimport { SocialAuthButtonContainer } from \"../../components/login/social-auth-button\";\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n\nimport {\n    Body1,\n    Body2,\n    // Button,\n    Caption,\n    Headline1,\n    Headline2,\n    Headline3,\n    Headline4,\n    Headline5,\n    Headline6,\n    Overline,\n    Subtitle1,\n    Subtitle2,\n} from '@material/react-typography';\nimport '@material/react-typography/dist/typography.css';\n\nimport styles from './landing-page.module.css';\n\n\ninterface ILandingPageProps extends RouteComponentProps {\n    auth: IUpdateAuthState;\n}\n\n\nclass LandingPage extends Component<ILandingPageProps> {\n    formFactoryProps: any;\n\n    constructor(props: ILandingPageProps) {\n        super(props);\n    }\n\n    onStaffLoginClick = () => {\n        this.props.history.push(\"/local-login/\");\n    }\n\n    render() {\n        return (\n            <div className={styles.LandingPage} >\n                <div className={styles.primaryPageContent}>\n                    <div className={styles.headlineContent}>\n                        <Headline1 className={styles.headlineText}>Appl Tracky</Headline1>\n                        <Headline4 className={styles.headlineSubText}>Got crazy using speadsheet to keep track of your application progress? Try out Appl Tracky to ease your workflow!</Headline4>\n                        <Body1>\n                            Whether it is application for job, school program, scholarship or whatever process that lets you wait from a couple weeks to months, Appl Tracky has you covered. Keep track of every steps in the process, insert links, put down notes to get you more organized and prepared!\n                        </Body1>\n                    </div>\n\n                    <div className={styles.loginActionsContainer}>\n                        <Headline4>Sign up & login now to get organized</Headline4>\n                        <SocialAuthButtonContainer />\n                        <Body1>\n                            Just want to try things out and don't want to sign up yet? No problem, here's a guest account you can use:\n                        </Body1>\n                        <div>🦄 username: guest</div>\n                        <div>🦄 password: appltracky</div>\n                        <Button\n                            onClick={this.onStaffLoginClick}\n                            unelevated\n                            icon={\n                                <MaterialIcon icon=\"account_circle\" />\n                            }\n                        >\n                            Sign in\n                    </Button>\n                    </div>\n\n                    <div className={styles.divider} />\n\n                    <div className={styles.sideNoteContent}>\n                        <Subtitle1>\n                            Take a look at the React code that fuels and powers all the goodies!\n                        </Subtitle1>\n                        <Button\n                            href=\"https://github.com/rivernews/appl-tracky-spa\"\n                            target=\"_blank\"\n                            unelevated\n                            icon={\n                                <MaterialIcon icon=\"code\" />\n                            }\n                        >\n                            Github Repository\n                </Button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: IRootState) => ({\n    auth: state.auth\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>) => {\n    // actionName = (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {\n    };\n};\n\nexport const LandingPageContainer = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(LandingPage)\n);\n","import React, { Component } from \"react\";\n\n/** Components */\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\n// mdc-react input\nimport \"@material/react-text-field/dist/text-field.css\";\nimport TextField, { Input } from \"@material/react-text-field\";\n// formik\nimport {\n    Field, FieldProps,\n    ErrorMessage,\n} from \"formik\";\n// input field\nimport { IFormInputFieldProps } from \"./form-input-field-meta\";\nimport { InputFieldType } from \"../form-base-field/form-base-field-meta\";\n\nimport styles from \"./form-input-field.module.css\";\n\n\nexport class FormInputField extends Component<IFormInputFieldProps> {\n    render() {\n        return (\n            <div className=\"FormInputField\">\n                <Field\n                    name={this.props.fieldName}\n                    render={({ field, form }: FieldProps<number | string>) => (\n                        <TextField\n                            className={styles.TextField}\n                            label={this.props.label}\n                            onTrailingIconSelect={this.props.onTrailingIconSelect}\n                            trailingIcon={this.props.onTrailingIconSelect && <MaterialIcon role=\"button\" icon=\"clear\" />}\n                        >\n                            <Input\n                                type={this.props.type || InputFieldType.TEXT}\n                                inputType=\"input\"\n                                autoFocus={this.props.autoFocus}\n                                {...field}\n                            />\n                        </TextField>\n                    )}\n                />\n                <ErrorMessage name={this.props.fieldName} />\n            </div>\n        );\n    }\n}","import React, { Component } from \"react\";\n\n/** Components */\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n// data model\nimport { DataModelClass, DataModelInstance } from \"../../data-model/base-model\";\n// formik\nimport {\n    Formik,\n    Form,\n    FormikValues\n} from \"formik\";\n// yup\nimport * as Yup from 'yup';\n// base field\nimport { FormBaseFieldMeta } from \"./form-base-field/form-base-field-meta\";\nimport { ISingleRestApiResponse } from \"../../utils/rest-api\";\n\n\nexport enum ActionButtonType {\n    SUBMIT = \"submit\",\n    BUTTON = \"button\"\n}\n\nexport class FormActionButtonProps {\n    constructor(\n        public text: string = \"\",\n        public onClick?: (event: any) => void,\n        public type?: ActionButtonType\n    ) { }\n}\n\nexport interface IFormFactoryProps<IDataModel> {\n    onSubmitSuccess?: (jsonResponse: ISingleRestApiResponse<IDataModel>) => void;\n\n    // pass in either `initialValues` or `initialInstance`, this is important for yup to render error message. If no initial info at all, yup will not display errors properly.\n    // `initialValues` should be used only for customize form; for data model forms please use `initialInstance` so update & create form can be handled together\n    initialValues?: any\n    initialInstance?: DataModelInstance<IDataModel>;\n    enforcedInstanceData?: any;\n\n    model?: DataModelClass;\n    actionButtonPropsList: Array<FormActionButtonProps>;\n    formFieldPropsList: Array<FormBaseFieldMeta>\n    \n    validationSchema?: Yup.Schema<IDataModel>\n\n    onSubmit?: (\n        values: FormikValues,\n        { setSubmitting }: { setSubmitting: Function }\n    ) => void;\n    \n    createInstanceTriggerAction?: (\n        instance: IDataModel,\n        successCallback?: (jsonResponse: ISingleRestApiResponse<IDataModel>) => void,\n        finalCallback?: Function,\n    ) => void;\n    updateInstanceTriggerAction?: (\n        instance: IDataModel,\n        successCallback?: (jsonResponse: ISingleRestApiResponse<IDataModel>) => void,\n        finalCallback?: Function,\n        updateFromCompany?: IDataModel\n    ) => void;\n}\n\nexport class FormFactory<DataModel> extends Component<\n    IFormFactoryProps<DataModel>\n    > {\n\n    initialInstance?: DataModelInstance<any>;\n    validationSchema?: Yup.Schema<DataModel>;\n\n    constructor(props: IFormFactoryProps<DataModel>) {\n        super(props);\n\n        // guarantee this.initialInstance\n        if (this.props.model && !this.props.initialInstance) {\n            // for create form\n            const model = this.props.model;\n            this.initialInstance = new model({});\n        }\n        else {\n            // for update form\n            this.initialInstance = this.props.initialInstance;\n        }\n\n        // form behavior integrity check\n        if (!this.initialInstance) {\n            if (!this.props.initialValues || !this.props.onSubmit) {\n                throw Error(\"ERROR: form factory has no initialInstance - seems like you're building a custom form that does not use data model. Please pass in initialValues and onSubmit in props to handle the behavior manually.\");\n            }\n        }\n\n        this.validationSchema = this.props.validationSchema || this.props.model.schema;\n    }\n\n    onSubmit = (\n        values: FormikValues,\n        { setSubmitting }: { setSubmitting: Function }\n    ) => {\n        setSubmitting(true);\n        let instanceData: any = {};\n        for (let fieldProps of this.props.formFieldPropsList) {\n            const keyName = fieldProps.fieldName;\n            instanceData[keyName] = fieldProps.getInstance(values);\n        }\n\n        // packaging\n        const model = this.props.model;\n        if (\n            model && this.props.createInstanceTriggerAction && this.props.updateInstanceTriggerAction &&\n            this.initialInstance\n        ) {\n            // a create / update form is assumed\n\n            const instance = new model({\n                uuid: this.initialInstance.uuid,\n                ...instanceData,\n                ...this.props.enforcedInstanceData\n            })\n\n            // dispatch API request\n            if (!instance.uuid) {\n                this.props.createInstanceTriggerAction(instance, this.props.onSubmitSuccess, () => setSubmitting(false));\n            } else {\n                this.props.updateInstanceTriggerAction(instance, this.props.onSubmitSuccess, () => setSubmitting(false), this.props.initialInstance);\n            }\n        }\n        else if (this.props.onSubmit) {\n            // if caller has customize onSubmit, then use it instead\n            this.props.onSubmit(values, { setSubmitting });\n        }\n        else {\n            alert(\"Something is wrong with the form...!\")\n            throw Error(\"ERROR: form factory props not properly configured. See above props.\")\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"FormFactory\">\n                <Formik\n                    initialValues={this.initialInstance || this.props.initialValues}\n                    validationSchema={this.validationSchema}\n                    onSubmit={this.onSubmit}\n                >\n                    {({\n                        values,\n                        isSubmitting,\n                        submitForm\n                    }) => (\n                            <Form>\n                                {this.props.formFieldPropsList.map((formFieldMeta: FormBaseFieldMeta, index: number) => (\n                                    <formFieldMeta.formField \n                                        key={index}\n                                        {...formFieldMeta}\n                                        formikValues={values}\n                                        onSaveKeystroke={submitForm}\n                                    />\n                                ) )}\n                                {this.props.actionButtonPropsList.map(\n                                    (actionButtonProps: FormActionButtonProps, index) => (\n                                        <Button\n                                            key={index}\n                                            type={actionButtonProps.type || ActionButtonType.BUTTON}\n                                            disabled={isSubmitting}\n                                            unelevated\n                                            onClick={actionButtonProps.onClick}\n                                            children={actionButtonProps.text}\n                                        />\n                                    )\n                                )}\n                            </Form>\n                        )}\n                </Formik>\n            </div>\n        );\n    }\n}\n","// base field\nimport { InputFieldType, FormBaseFieldMeta, IFormBaseFieldProps, IFieldBaseMetaProps } from \"../form-base-field/form-base-field-meta\";\n// input field\nimport { FormInputField } from \"./form-input-field\";\n\n\n// API for caller to new props for input field\nexport interface IFormInputFieldProps extends IFormBaseFieldProps {\n    type?: InputFieldType\n    onTrailingIconSelect?: () => void\n\n    autoFocus?: boolean\n}\n\n// for defining meta\nexport interface IFormInputFieldMetaProps extends IFieldBaseMetaProps {\n    type?: InputFieldType\n    onTrailingIconSelect?: () => void\n\n    autoFocus?: boolean\n}\n\nexport class FormInputFieldMeta extends FormBaseFieldMeta {\n    type?: InputFieldType\n    onTrailingIconSelect?: () => void\n\n    autoFocus?: boolean\n\n    constructor({\n        type,\n        onTrailingIconSelect,\n        autoFocus,\n        ...props\n    }: IFormInputFieldMetaProps) {\n        super(props)\n        this.type = type;\n        this.onTrailingIconSelect = onTrailingIconSelect;\n        this.autoFocus = autoFocus;\n\n        this.formField = FormInputField;\n    }\n}","import { BaseModel, IBaseModelProps } from \"./base-model\";\nimport * as Yup from \"yup\";\n\ninterface ILabelProps {\n    text?: labelTypes;\n    user?: any;\n    color?: string;\n    order?: number;\n}\n\nexport class Label extends BaseModel {\n    public text: labelTypes;\n    public user: any;\n    public color: string;\n    public order: number;\n\n    constructor({\n        text = labelTypes.TARGET,\n        user = null,\n        color = \"\",\n        order = 0,\n        ...args\n    }: ILabelProps & IBaseModelProps) {\n        super(args);\n        this.text = text;\n        this.user = user;\n\n        this.color = color;\n        this.order = order;\n    }\n\n    static schema(){\n        return Yup.object<Label>().shape({\n            text:  Yup.string().max(200),\n            color: Yup.string().max(20),\n            order: Yup.number()\n        });\n    }\n}\n\nexport enum labelTypes {\n    TARGET = \"Target\",\n    APPLIED = \"Applied\",\n    INTERVIEWING = \"Interviewing\",\n    ARCHIVED = \"Archived\",\n}\n\nexport enum TabNames {\n    ALL = 0,\n    TARGET = 1,\n    APPLIED = 2,\n    INTERVIEWING = 3,\n    ARCHIVED = 4\n}\n","import React from \"react\";\n\nimport { FormikValues } from \"formik\";\nimport { RestApiService } from \"../../utils/rest-api\";\nimport { AuthenticationService } from \"../../utils/authentication\";\nimport { FormBaseFieldMeta, InputFieldType } from \"../form-factory/form-base-field/form-base-field-meta\";\nimport { FormInputFieldMeta } from \"../form-factory/form-input-field/form-input-field-meta\";\nimport { FormActionButtonProps, ActionButtonType, FormFactory } from \"../form-factory/form-factory\";\n// yup\nimport * as Yup from 'yup';\n\ninterface ILoginFormProps {\n    onCancel: () => void\n    onSubmit: (values: FormikValues, setSubmitting: Function) => void\n}\n\nexport const LoginForm = (props: ILoginFormProps) => {\n\n    const formFieldPropsList: Array<FormBaseFieldMeta> = [\n        new FormInputFieldMeta({\n            fieldName: \"username\",\n            label: \"Username\",\n            autoFocus: true\n        }),\n        new FormInputFieldMeta({\n            fieldName: \"password\",\n            label: \"Password\",\n            type: InputFieldType.PASSWORD\n        }),\n    ];\n    const actionButtonPropsList: Array<FormActionButtonProps> = [\n        new FormActionButtonProps(\"Login\", undefined, ActionButtonType.SUBMIT),\n        new FormActionButtonProps(\"Cancel\", props.onCancel)\n    ];\n\n    const onSubmitLoginForm = async (\n        values: FormikValues,\n        { setSubmitting }: { setSubmitting: Function }\n    ) => {\n        setSubmitting(true);\n\n        props.onSubmit(values, setSubmitting);\n    };\n\n    // validation\n    const loginFormInitialValues = {\n        username: \"guest\",\n        password: \"appltracky\"\n    }\n    type ILoginFormShape = typeof loginFormInitialValues;\n    const validationSchema: Yup.Schema<ILoginFormShape> = Yup.object<ILoginFormShape>().shape({\n        username: Yup.string().required(\"Forgot to type username...?\"),\n        password: Yup.string().required(\"Password please...!\")\n    })\n\n\n    return (\n        <div className=\"loginForm\">\n            <FormFactory\n                initialValues={loginFormInitialValues}\n    \n                formFieldPropsList={formFieldPropsList}\n                actionButtonPropsList={actionButtonPropsList}\n\n                validationSchema={validationSchema}\n    \n                onSubmit={onSubmitLoginForm}\n            />\n        </div>\n    )\n}","import React, { Component } from \"react\";\nimport { withRouter, RouteComponentProps, Redirect } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch, AnyAction } from \"redux\";\nimport { IRootState } from \"../../state-management/types/root-types\";\nimport { IUpdateAuthState, RequestedLoginMode } from \"../../state-management/types/auth-types\";\nimport { RequestedLoginAuth } from \"../../state-management/action-creators/auth-actions\";\nimport { FormikValues } from \"formik\";\n\n/** Components */\nimport { LoginForm } from \"../../components/login/local-login-form\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\n\n\ninterface ILocalLoginPageProps extends RouteComponentProps {\n    /** redux state */\n    auth: IUpdateAuthState;\n\n    /** dispatch action */\n    requestedLoginAuth: (username: string, password: string, onCompleteCallback: () => void) => void;\n}\n\nclass LocalLoginPage extends Component<ILocalLoginPageProps> {\n    onLoginFormCancel = () => {\n        this.props.history.goBack();\n    }\n\n    onLoginFormSubmit = (values: FormikValues, setSubmitting: Function) => {\n        this.props.requestedLoginAuth(values.username, values.password, () => {\n            setSubmitting(false);\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"LocalLoginPage\">\n                <h1>Login Portal for local sign in</h1>\n                <div>\n                    If you just want to try it out, you can use guest account:\n                    <div>\n                        username: guest\n                    </div>\n                    <div>\n                        password: appltracky\n                    </div>\n                </div>\n\n                <LoginForm\n                    onSubmit={this.onLoginFormSubmit}\n                    onCancel={this.onLoginFormCancel}\n                />\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    auth: store.auth\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>) => {\n    // actionName: (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {\n        requestedLoginAuth: (username: string, password: string, onCompleteCallback: () => void) => {\n            dispatch(\n                RequestedLoginAuth(RequestedLoginMode.LOCAL, {\n                    username, password\n                }, onCompleteCallback)\n            );\n        },\n    }\n};\n\nexport const LocalLoginPageContainer = withRouter(connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(LocalLoginPage));\n","class Utilities {\n    static normalizeText(rawText: string) {\n        return rawText.toLowerCase().trim()\n    }\n}\n\nexport {\n    Utilities\n};","import { BaseModel, IBaseModelProps } from \"./base-model\";\nimport * as Yup from \"yup\";\n\nexport interface IAddressProps {\n    place_name?: string;\n    country?: string;\n    state?: string;\n    city?: string;\n    street?: string;\n    full_address?: string;\n    zipcode?: string;\n}\n\nexport class Address extends BaseModel {\n    place_name: string;\n    country: string;\n    state: string;\n    city: string;\n    street: string;\n    full_address: string;\n    zipcode: string;\n\n    constructor({\n        place_name = \"\",\n        country = \"\",\n        state = \"\",\n        city = \"\",\n        street = \"\",\n        full_address = \"\",\n        zipcode = \"\",\n        ...args\n    }: IAddressProps & IBaseModelProps) {\n        super(args);\n        this.place_name = place_name;\n        this.country = country;\n        this.state = state;\n        this.place_name = place_name;\n        this.city = city;\n        this.street = street;\n        this.full_address = full_address;\n        this.zipcode = zipcode;\n    }\n\n    static schema(){\n        return Yup.object<Address>().shape({\n            full_address: Yup.string().max(200),\n            street: Yup.string().max(150),\n            city: Yup.string().max(50),\n            state: Yup.string().max(50),\n            country: Yup.string().max(50),\n            place_name: Yup.string().max(50),\n            zipcode: Yup.string().max(20),\n        });\n    }\n\n}\n","import { BaseModel, IBaseModelProps } from \"./base-model\";\nimport * as Yup from \"yup\";\n\ninterface ILinkProps {\n    text?: string;\n    user?: any;\n    url?: string;\n    order?: number;\n}\n\nexport class Link extends BaseModel {\n    public text: string;\n    public user: any;\n    public url: string;\n    public order: number;\n\n    constructor({\n        text = \"\",\n        user = {},\n        url = \"\",\n        order = 0,\n        ...args\n    }: ILinkProps & IBaseModelProps) {\n        super(args);\n        this.text = text;\n        this.user = user;\n        this.url = url;\n        this.order = order;\n    }\n\n    static schema(){\n        return Yup.object<Link>().shape({\n            text:  Yup.string().max(200),\n            url: Yup.string().default(\"#\").when(\n                \"text\", {\n                    is: (text) => text,\n                    then: Yup.string().required(\"Since you gave the link some text, let's provide an url as well...!\").max(500, \"URL is too long, only less than 500 characters please\")\n                }\n            ),\n        });\n    }\n}\n","import { BaseModel, IBaseModelProps, IReference } from \"../base-model\";\nimport { Address } from \"../address\";\nimport { Link } from \"../link\";\nimport { Label, labelTypes } from \"../label\";\nimport { Application } from \"../application/application\";\nimport * as Yup from \"yup\";\n\n\ninterface ICompanyProps {\n    user?: string;\n    labels?: Array<Label>;\n    name?: string;\n    hq_location?: Address;\n    home_page?: Link;\n    notes?: string;\n    ratings?: any;\n    applications?: Array<Application> | Array<IReference>;\n}\n\nexport class Company extends BaseModel {\n    public user: string;\n    public labels: Array<Label>;\n    public name: string;\n    public hq_location: Address;\n    public home_page: Link;\n    public notes: string;\n    public ratings: any;\n    public applications: Array<Application> | Array<IReference>;\n\n    constructor({\n        user = \"\",\n        labels = [],\n        name = \"\",\n        hq_location = new Address({}),\n        home_page = new Link({}),\n        notes = \"\",\n        ratings = {},\n        applications = [],\n        ...args\n    }: ICompanyProps & IBaseModelProps) {\n        super(args);\n        this.user = user;\n        this.labels = labels;\n        this.name = name;\n        this.hq_location = hq_location;\n        this.home_page = home_page;\n        this.notes = notes;\n        this.ratings = ratings;\n        this.applications = applications;\n    }\n\n    static schema(){\n        return Yup.object<Company>().shape({\n            name: Yup.string().required(\"Every company needs a name...!\").max(100),\n            home_page: Link.schema(),\n            notes: Yup.string(),\n            hq_location: Address.schema()\n        });\n    }\n\n    static getLabel(companyObject: Company): labelTypes {\n        // default to TARGET\n        return companyObject.labels && companyObject.labels.length ? companyObject.labels[0].text : labelTypes.TARGET;\n    }\n}\n\nexport type companyGroupTypes = \"targetCompany\" | \"appliedCompany\" | \"interviewingCompany\" | \"archivedCompany\";\n\nexport const labelTypesMapToCompanyGroupTypes: {\n    [key in labelTypes]: companyGroupTypes\n} = {\n    [labelTypes.TARGET]: \"targetCompany\",\n    [labelTypes.APPLIED]: \"appliedCompany\",\n    [labelTypes.INTERVIEWING]: \"interviewingCompany\",\n    [labelTypes.ARCHIVED]: \"archivedCompany\"\n};\n\nexport const companyGroups = Object.values(labelTypesMapToCompanyGroupTypes);\n","import { Action } from \"redux\";\nimport { TabNames } from \"../../data-model/label\";\n\nexport interface IUserAppPageState {\n    activeTabIndex: TabNames\n}\n\nexport enum UserAppPageActionNames {\n    SET_ACTIVE_TAB = \"User app page set active tab\",\n}\n\nexport interface IUserAppPageSetActiveTabAction extends Action<UserAppPageActionNames.SET_ACTIVE_TAB> {\n    type: typeof UserAppPageActionNames.SET_ACTIVE_TAB;\n    activeTabIndex: TabNames;\n}\n\nexport type TUserAppPageActions = \n    IUserAppPageSetActiveTabAction;\n","import React, { Component } from \"react\";\n\nimport styles from \"./tab-content.module.css\";\n\n\nexport interface ITabContentProps {\n    label: string | JSX.Element\n}\n\nexport class TabContent extends Component<ITabContentProps> {\n    render() {\n        return (\n            <div className={styles.TabContent}>\n                {this.props.children}\n            </div>\n        )\n    }\n}\n","import { TabNames } from \"../../data-model/label\"\nimport { IUserAppPageSetActiveTabAction, UserAppPageActionNames } from \"../types/user-app-page-types\"\n\nexport const SetActiveTabOfUserAppPage = (activeTabIndex: TabNames): IUserAppPageSetActiveTabAction => {\n    return {\n        type: UserAppPageActionNames.SET_ACTIVE_TAB,\n        activeTabIndex\n    }\n}\n","import React, { useState } from \"react\";\n\n/** Components */\n// react-mdc tab\nimport '@material/react-tab-bar/dist/tab-bar.css';\nimport '@material/react-tab-scroller/dist/tab-scroller.css';\nimport '@material/react-tab/dist/tab.css';\nimport '@material/react-tab-indicator/dist/tab-indicator.css';\nimport Tab from '@material/react-tab';\nimport TabBar from '@material/react-tab-bar';\n\nimport { TabContent, ITabContentProps } from \"./tab-content\";\n\nimport { CSSTransition } from 'react-transition-group';\n\nimport leftSlideStyles from './tab-transition-slide-left.module.css';\nimport rightSlideStyles from './tab-transition-slide-right.module.css';\nimport styles from './tab-container.module.css';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { SetActiveTabOfUserAppPage } from \"../../state-management/action-creators/user-app-page-actions\";\nimport { IRootState } from \"../../state-management/types/root-types\";\n\n\nenum SlideDirection {\n    LEFTWARD = \"leftward\",\n    RIGHTWARD = \"rightward\"\n}\n\ninterface ITabContainerProps {\n    render?: () => React.ReactElement<ITabContentProps> | React.ReactElement<ITabContentProps>[]\n}\n\nexport const TabContainer = ({ render }: ITabContainerProps) => {\n    const dispatch = useDispatch();\n    const activeIndex = useSelector((state: IRootState) => state.userAppPage.activeTabIndex);\n    const [tabContentSlideDirection, setTabContentSlideDirection] = useState<SlideDirection>(SlideDirection.RIGHTWARD);\n\n    const handleActiveIndexUpdate = (newActiveIndex: number) => {\n        dispatch(SetActiveTabOfUserAppPage(newActiveIndex));\n        setTabContentSlideDirection(\n            (newActiveIndex > activeIndex) ?\n                SlideDirection.LEFTWARD : /** the tab item slides rightward, so content slides leftward */\n                SlideDirection.RIGHTWARD /** vice versa */\n        );\n    }\n\n\n    const tabContents = render ? (\n        render()\n    ) : [];\n    const tabContentList = Array.isArray(tabContents) ? tabContents : [tabContents];\n\n    return (\n        <div>\n            <TabBar\n                className={`${styles.tabBar}`}\n                activeIndex={activeIndex}\n                handleActiveIndexUpdate={handleActiveIndexUpdate}\n            >\n                {\n                    tabContentList.map((tabContent, index) => (\n                        <Tab key={index} tabIndex={index}>\n                            <span className='mdc-tab__text-label'>{tabContent.props.label}</span>\n                        </Tab>\n                    ))\n                }\n            </TabBar>\n            {\n                tabContentList.map((child, index) => {\n                    return (\n                        <CSSTransition\n                            key={index}\n                            classNames={tabContentSlideDirection === SlideDirection.RIGHTWARD ?\n                                { ...rightSlideStyles } :\n                                { ...leftSlideStyles }}\n                            in={activeIndex === index}\n                            timeout={500}\n                            unmountOnExit\n                        >\n                            <TabContent\n                                {...child.props}\n                            />\n                        </CSSTransition>\n                    );\n                })\n            }\n        </div>\n    );\n}\n","import { Action } from \"redux\";\nimport { IReference } from \"../../data-model/base-model\";\nimport { Company } from \"../../data-model/company/company\";\nimport { labelTypes } from \"../../data-model/label\";\nimport { RequestStatus } from \"../../utils/rest-api\";\n\nexport interface ISelectCompanyState {\n    selectCompanyCollection: Map<IReference, Company>;\n    destinationStatus: labelTypes;\n    requestStatus: RequestStatus;\n}\n\nexport enum SelectCompanyActionNames {\n    CANCEL_ALL = \"Cancel all selected company\",\n    ADD_SELECT_COMPANY = \"Add select company\",\n    REMOVE_SELECT_COMPANY = \"Remove select company\",\n    SET_DESTINATION_STATUS = \"Set destination status\",\n    APPLY_ALL_CHANGES = \"Batch apply all company status changes\",\n    SET_REQUEST_STATUS = \"Set select company apply request status\",\n}\n\nexport interface ICancelAllSelectCompanyAction extends Action<SelectCompanyActionNames.CANCEL_ALL> {\n    type: typeof SelectCompanyActionNames.CANCEL_ALL;\n}\n\nexport interface IAddSelectCompanyAction extends Action<SelectCompanyActionNames.ADD_SELECT_COMPANY> {\n    type: typeof SelectCompanyActionNames.ADD_SELECT_COMPANY;\n    company: Company\n}\n\nexport interface IRemoveSelectCompanyAction extends Action<SelectCompanyActionNames.REMOVE_SELECT_COMPANY> {\n    type: typeof SelectCompanyActionNames.REMOVE_SELECT_COMPANY;\n    companyId: string\n}\n\nexport interface ISetDestinationStatusAction extends Action<SelectCompanyActionNames.SET_DESTINATION_STATUS> {\n    type: typeof SelectCompanyActionNames.SET_DESTINATION_STATUS;\n    status: labelTypes;\n}\n\nexport interface IApplyAllSelectCompanyChangesAction extends Action<SelectCompanyActionNames.APPLY_ALL_CHANGES> {\n    type: typeof SelectCompanyActionNames.APPLY_ALL_CHANGES;\n    destinationStatus: labelTypes;\n}\n\nexport interface ISetApplyAllSelectCompanyRequestStatusAction extends Action<SelectCompanyActionNames.SET_REQUEST_STATUS> {\n    type: typeof SelectCompanyActionNames.SET_REQUEST_STATUS;\n    requestStatus: RequestStatus\n}\n\nexport type TSelectCompanyActions = \n    ICancelAllSelectCompanyAction |\n    IAddSelectCompanyAction | \n    IRemoveSelectCompanyAction | \n    ISetDestinationStatusAction |\n    IApplyAllSelectCompanyChangesAction |\n    ISetApplyAllSelectCompanyRequestStatusAction;\n","import { Company } from \"../../data-model/company/company\"\nimport { labelTypes } from \"../../data-model/label\"\nimport { RequestStatus } from \"../../utils/rest-api\"\nimport { IAddSelectCompanyAction, IApplyAllSelectCompanyChangesAction, ICancelAllSelectCompanyAction, IRemoveSelectCompanyAction, ISetApplyAllSelectCompanyRequestStatusAction, ISetDestinationStatusAction, SelectCompanyActionNames } from \"../types/select-company-types\"\n\nexport const CancelAllSelectCompany = (): ICancelAllSelectCompanyAction => {\n    return {\n        type: SelectCompanyActionNames.CANCEL_ALL\n    }\n}\n\nexport const AddSelectCompany = (company: Company): IAddSelectCompanyAction => {\n    return {\n        type: SelectCompanyActionNames.ADD_SELECT_COMPANY,\n        company\n    }\n}\n\nexport const RemoveSelectCompany = (companyId: string): IRemoveSelectCompanyAction => {\n    return {\n        type: SelectCompanyActionNames.REMOVE_SELECT_COMPANY,\n        companyId\n    }\n}\n\nexport const SetDestinationStatus = (status: labelTypes): ISetDestinationStatusAction => {\n    return {\n        type: SelectCompanyActionNames.SET_DESTINATION_STATUS,\n        status\n    }\n}\n\nexport const ApplyAllSelectCompanyChangesStatus = (destinationStatus: labelTypes): IApplyAllSelectCompanyChangesAction => {\n    return {\n        type: SelectCompanyActionNames.APPLY_ALL_CHANGES,\n        destinationStatus\n    }\n}\n\nexport const SetApplyAllSelectCompanyRequestStatus = (requestStatus: RequestStatus): ISetApplyAllSelectCompanyRequestStatusAction => {\n    return {\n        type: SelectCompanyActionNames.SET_REQUEST_STATUS,\n        requestStatus\n    }\n}\n","import { RestApiActionCreatorsFactory } from \"./action-creator-factory\";\nimport { companyGroupTypes, Company, companyGroups } from \"../../data-model/company/company\";\nimport { IObjectRestApiReduxFactoryActions } from \"../types/factory-types\";\nimport { Application } from \"../../data-model/application/application\";\nimport { ApplicationStatus } from \"../../data-model/application-status/application-status\";\n\n\nexport enum RootActionNames {\n    ResetAllStore = \"RESET_ALL_STORE\"\n}\n\nexport const resetAllStoreAction = () => {\n    return {\n        type: RootActionNames.ResetAllStore,\n    }\n}\n\n\n// action creators for companies\n\nexport const CompanyActionCreators = RestApiActionCreatorsFactory<Company>(\"companies\");\n\nconst groupedCompanyActionCreatorsHelper = () => {\n    return companyGroups.reduce((accumulated, companyGroupText) => {\n        return {\n            ...accumulated,\n            [companyGroupText]: RestApiActionCreatorsFactory<Company>(companyGroupText)\n        }\n    }, {});\n}\nexport const GroupedCompanyActionCreators = groupedCompanyActionCreatorsHelper() as {\n    [key in companyGroupTypes]: IObjectRestApiReduxFactoryActions<Company>\n};\n\nexport const SearchCompanyActionCreators = RestApiActionCreatorsFactory<Company>(\"searchCompany\");\n\n// action creators for application\n\nexport const ApplicationActionCreators = RestApiActionCreatorsFactory<Application>(\"applications\")\n\n\n// action creators for status\n\nexport const ApplicationStatusActionCreators = RestApiActionCreatorsFactory<ApplicationStatus>(\"application-statuses\")","import Checkbox from \"@material-ui/core/Checkbox\";\nimport React, { useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Company } from \"../../data-model/company/company\";\nimport { AddSelectCompany, RemoveSelectCompany } from \"../../state-management/action-creators/select-company-actions\";\nimport { IRootState } from \"../../state-management/types/root-types\";\n\n\ninterface ICompanyListItemCheckBoxProps {\n    company: Company;\n}\n\nconst CompanyListItemCheckBox = ({ company }: ICompanyListItemCheckBoxProps) => {\n    const dispatch = useDispatch();\n    const selectCompanyCollection = useSelector((state: IRootState) => state.selectCompany.selectCompanyCollection);\n    \n    const onCheckBoxChange = useCallback((event) => {\n        if (event.target.checked) {\n            dispatch(AddSelectCompany(company));\n        } else {\n            dispatch(RemoveSelectCompany(company.uuid));\n        }\n    }, [dispatch, company])\n\n    return (\n        <Checkbox\n            edge=\"end\"\n            checked={selectCompanyCollection.has(company.uuid)}\n            onChange={onCheckBoxChange}\n        />\n    )\n}\n\nexport default CompanyListItemCheckBox;","import React from \"react\";\n\n/** Redux & data models */\nimport { Company } from \"../../data-model/company/company\";\nimport { Application } from \"../../data-model/application/application\";\n\n/** Components */\nimport '@material/react-card/dist/card.css';\nimport List, { ListItem, ListItemText } from \"@material/react-list\";\nimport MaterialUIListItem from \"@material-ui/core/ListItem\";\nimport MaterialUIButton from \"@material-ui/core/Button\";\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\n\nimport '@material/react-list/dist/list.css';\n// mdc-chips\nimport { ChipSet, Chip } from '@material/react-chips';\nimport \"@material/react-chips/dist/chips.css\";\n\nimport Skeleton from 'react-loading-skeleton';\n\nimport styles from './company-list-item.module.css';\nimport { Typography } from \"@material-ui/core\";\nimport CompanyListItemCheckBox from \"./company-list-item-checkbox\";\nimport { Link } from \"react-router-dom\";\n\n\ninterface ICompanyListItemProps {\n    company?: Company;\n    applications?: Array<Application>\n}\n\nconst CompanyListItem = (props: ICompanyListItemProps) => {\n    return (\n        <MaterialUIListItem className={false ? styles.companyCard : ''}>\n            <div className={styles.companyCardContent}>\n                <Link to={`/com-app/${props?.company?.uuid}`}>\n                    <MaterialUIButton>\n                        <Typography variant=\"h5\">\n                            {props.company ? props.company.name : <Skeleton duration={1.1} width={`50vmin`} />}\n                        </Typography>\n                    </MaterialUIButton>\n                </Link>\n\n                {props.company ? (\n                    props.company.labels.length && props.company.labels[0].text ? (\n                        <ChipSet>\n                            <Chip label={props.company.labels[0].text} />\n                        </ChipSet>\n                    ) : (\n                        <ChipSet>\n                            <Chip label=\"None\" />\n                        </ChipSet>\n                    )\n                ) : (\n                    <Skeleton width=\"40px\" />\n                )}\n\n                <List nonInteractive>\n                    {\n                        props.applications ? props.applications.map((application: Application) => (\n                            <ListItem key={application.uuid}>\n                                <ListItemText primaryText={application.position_title} />\n                            </ListItem>\n                        )) : (\n                                <div className=\"skeletonGroup\">\n                                    <div><Skeleton duration={1.1} width=\"40vmin\" /></div>\n                                    <div><Skeleton duration={1.1} width=\"60vmin\" /></div>\n                                    <div><Skeleton duration={1.1} width=\"50vmin\" /></div>\n                                </div>\n                            )\n                    }\n                </List>\n                <ListItemSecondaryAction>\n                    {props.company?.uuid ? <CompanyListItemCheckBox company={props.company} /> : null}\n                </ListItemSecondaryAction>\n            </div>\n        </MaterialUIListItem>\n    );\n}\n\nexport {\n    CompanyListItem\n};","import { IObjectBase, TObject, IObjectRestApiReduxFactoryActions, IObjectAction, ObjectRestApiJsonResponse, IObjectTriggerActionArgs, IObjectSuccessActionArgs } from \"../types/factory-types\";\n\nimport { CrudType, RequestStatus, IsSingleRestApiResponseTypeGuard, ISingleRestApiResponse, IListRestApiResponse } from \"../../utils/rest-api\";\n\n\nexport const RestApiActionCreatorsFactory = <ObjectRestApiSchema extends IObjectBase>(\n    /** should have uuid */ objectName: string\n): IObjectRestApiReduxFactoryActions<ObjectRestApiSchema> => {\n    const crudKeywords = Object.values(CrudType);\n\n    let ObjectRestApiActions: IObjectRestApiReduxFactoryActions<ObjectRestApiSchema> = {};\n    for (let crudKeyword of crudKeywords) {\n        const triggerActionTypeName = `${RequestStatus.TRIGGERED.toUpperCase()}_${crudKeyword.toUpperCase()}_${objectName.toUpperCase()}`;\n        const requestingActionTypeName = `${RequestStatus.REQUESTING.toUpperCase()}_${crudKeyword.toUpperCase()}_${objectName.toUpperCase()}`;\n        const successActionTypeName = `${RequestStatus.SUCCESS.toUpperCase()}_${crudKeyword.toUpperCase()}_${objectName.toUpperCase()}`;\n        const failureActionTypeName = `${RequestStatus.FAILURE.toUpperCase()}_${crudKeyword.toUpperCase()}_${objectName.toUpperCase()}`;\n        \n        ObjectRestApiActions[crudKeyword] = {\n            [RequestStatus.TRIGGERED]: {\n                actionTypeName: triggerActionTypeName,\n                action:\n                    ({\n                        objectClassInstance,\n                        successCallback,\n                        failureCallback,\n                        finalCallback,\n                        absoluteUrl, graphqlFunctionName, graphqlArgs,\n                        triggerActionOptions\n                    }: IObjectTriggerActionArgs<ObjectRestApiSchema>): IObjectAction<ObjectRestApiSchema> => {\n                        return {\n                            type: triggerActionTypeName,\n                            crudType: crudKeyword,\n                            finalCallback,\n                            successCallback,\n                            failureCallback,\n                            absoluteUrl, graphqlFunctionName, graphqlArgs,\n                            triggerActionOptions,\n                            payload: {\n                                requestStatus: RequestStatus.TRIGGERED,\n                                formData: objectClassInstance\n                            }\n                        };\n                    }\n            },\n            [RequestStatus.REQUESTING]: {\n                actionTypeName: requestingActionTypeName,\n                action: \n                    (): IObjectAction<ObjectRestApiSchema> => {\n                        return {\n                            type: requestingActionTypeName,\n                            crudType: crudKeyword,\n                            payload: {\n                                requestStatus: RequestStatus.REQUESTING\n                            }\n                        };\n                    } \n            },\n            [RequestStatus.SUCCESS]: {\n                actionTypeName: successActionTypeName,\n                action: \n                    ({\n                        /** api response */\n                        jsonResponse,\n                        triggerFormData,\n                        graphqlEndCursor,\n                        clearAll\n                    }: IObjectSuccessActionArgs<ObjectRestApiSchema>): IObjectAction<ObjectRestApiSchema> => {\n                        let actionBase = {\n                            type: successActionTypeName,\n                            crudType: crudKeyword\n                        };\n                        // if is delete success, we don't need formData (& the server responds nothing for DELETE as well)\n                        if (crudKeyword === CrudType.DELETE) {\n                            if (clearAll) {\n                                return {\n                                   ...actionBase,\n                                   clearAll,\n                                   payload: {\n                                       requestStatus: RequestStatus.SUCCESS\n                                   } \n                                }    \n                            }\n                            return {\n                                ...actionBase,\n                                triggerFormData,\n                                payload: {\n                                    requestStatus: RequestStatus.SUCCESS,\n                                }\n                            }\n                        }\n                        else if (jsonResponse === undefined) {\n                            console.error(`action is ${crudKeyword} and not DELETE - so jsonResponse is required but it's undefined. Please make sure to pass in jsonResponse if not a DELETE action.`)\n                            return {\n                                ...actionBase,\n                                payload: {\n                                    requestStatus: RequestStatus.SUCCESS\n                                }\n                            }\n                        }\n                        else if (IsSingleRestApiResponseTypeGuard<ObjectRestApiSchema>(jsonResponse)) {\n                            return {\n                                ...actionBase,\n                                payload: {\n                                    requestStatus: RequestStatus.SUCCESS,\n                                    formData: <ISingleRestApiResponse<ObjectRestApiSchema>>(\n                                        jsonResponse\n                                    )\n                                }\n                            };\n                        } else {\n                            const formData = \n                                // if not coming from API request, i.e., saga manually called batchCreateAction(objects)\n                                // then we just use it as-is\n                                Array.isArray(jsonResponse) ? jsonResponse as TObject<ObjectRestApiSchema>[] :\n                                // otherwise, it's a API response, which nests objects in `.results`\n                                (<IListRestApiResponse<ObjectRestApiSchema>>(jsonResponse)).results;\n                            \n                            return {\n                                ...actionBase,\n                                graphqlEndCursor,\n                                payload: {\n                                    requestStatus: RequestStatus.SUCCESS,\n                                    formData\n                                }\n                            };\n                        }\n                    }\n            },\n            [RequestStatus.FAILURE]: {\n                actionTypeName: failureActionTypeName,\n                action:\n                    (\n                        error: any\n                    ): IObjectAction<ObjectRestApiSchema> => {\n                        return {\n                            type: failureActionTypeName,\n                            crudType: crudKeyword,\n                            payload: {\n                                requestStatus: RequestStatus.FAILURE,\n                                error\n                            }\n                        };\n                    }\n            },\n        };\n    }\n\n    return ObjectRestApiActions;\n}\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\nimport { Utilities } from \"../../utils/utilities\";\n\n/** Redux */\nimport { connect, useDispatch, useSelector } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../state-management/types/root-types\";\nimport { IObjectAction, IObjectStore } from \"../../state-management/types/factory-types\";\nimport { InputFieldType } from \"../../components/form-factory/form-base-field/form-base-field-meta\";\n// data models\nimport { Company, labelTypesMapToCompanyGroupTypes, companyGroupTypes, companyGroups } from \"../../data-model/company/company\";\nimport { labelTypes } from \"../../data-model/label\";\nimport { Application } from \"../../data-model/application/application\";\n\n/** Components */\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport TargetIcon from \"@material-ui/icons/AssistantPhoto\";\nimport AppliedIcon from \"@material-ui/icons/Check\";\nimport InterviewingIcon from \"@material-ui/icons/PhoneInTalk\";\nimport ArchivedIcon from \"@material-ui/icons/Archive\";\n// mdc react button\nimport MaterialUIList from \"@material-ui/core/List\";\nimport Button from '@material-ui/core/Button';\nimport Badge from \"@material-ui/core/Badge\";\n\n// mdc-react input\nimport \"@material/react-text-field/dist/text-field.css\";\nimport TextField, { Input } from \"@material/react-text-field\";\n\nimport { TabContainer } from \"../../components/tab/tab-container\";\nimport { TabContent } from \"../../components/tab/tab-content\";\n\n// objects\nimport { CompanyListItem } from \"../../components/company/company-list-item\";\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\n\nimport { Headline3 } from '@material/react-typography';\nimport '@material/react-typography/dist/typography.css';\n\n// styling\nimport styles from \"./user-app-page.module.css\";\nimport { IReference } from \"../../data-model/base-model\";\nimport { GroupedCompanyActionCreators, SearchCompanyActionCreators } from \"../../state-management/action-creators/root-actions\";\nimport { createStyles, makeStyles } from \"@material-ui/core\";\n\n\nconst useStyles = makeStyles(() => {\n    return createStyles({\n        loadMoreButtonContainer: {\n            display: 'flex',\n            justifyContent: 'center',\n            margin: '5vh 0 10vh 0'\n        },\n        centerVertically: {\n            display: 'flex',\n            alignItems: 'center'\n        }\n    })\n})\n\n\ninterface IUserAppPageProps extends RouteComponentProps {\n    company: IObjectStore<Company>\n    targetCompany: IObjectStore<Company>\n    appliedCompany: IObjectStore<Company>\n    interviewingCompany: IObjectStore<Company>\n    archivedCompany: IObjectStore<Company>\n\n    application: IObjectStore<Application>\n}\n\ninterface IGroupedCompanyLoadMoreButtonProps {\n    labelText: labelTypes\n}\n\nconst GroupedCompanyLoadMoreButton = ({ labelText }: IGroupedCompanyLoadMoreButtonProps) => {\n    const { graphqlEndCursor: endCursor, requestStatus } = useSelector((state: IRootState) => {\n        return state[labelTypesMapToCompanyGroupTypes[labelText as labelTypes]];\n    });\n    const dispatch = useDispatch();\n    const onClick = useCallback(() => {\n        dispatch(\n            GroupedCompanyActionCreators[labelTypesMapToCompanyGroupTypes[labelText as labelTypes]][CrudType.LIST][RequestStatus.TRIGGERED].action({\n                graphqlFunctionName: 'fetchDashboardCompanyData',\n                graphqlArgs: {\n                    labels__text: labelText,\n                    after: endCursor\n                }\n            })\n        );\n    }, [endCursor]);\n\n    return (\n        <Button color=\"primary\" disableElevation variant=\"contained\" onClick={onClick} disabled={requestStatus === RequestStatus.REQUESTING}>\n            Load More\n        </Button>\n    )\n}\n\ninterface ISearchCompanyLoadMoreButtonProps {\n    searchText: string\n    disabled?: boolean\n}\n\nconst SearchCompanyLoadMoreButton = ({ searchText, disabled }: ISearchCompanyLoadMoreButtonProps) => {\n    const { graphqlEndCursor: endCursor, requestStatus } = useSelector((state: IRootState) => {\n        return state.searchCompany;\n    })\n    const dispatch = useDispatch();\n    const onClick = useCallback(() => {\n        dispatch(\n            SearchCompanyActionCreators[CrudType.LIST][RequestStatus.TRIGGERED].action({\n                graphqlFunctionName: 'fetchDashboardCompanyData',\n                graphqlArgs: {\n                    name__icontains: searchText,\n                    after: endCursor\n                }\n            })\n        );\n    }, [endCursor]);\n\n    return (\n        <Button color=\"primary\" disableElevation variant=\"contained\" onClick={onClick} disabled={requestStatus === RequestStatus.REQUESTING || disabled}>\n            Load More\n        </Button>\n    )\n}\n\nconst UserAppPage = (props: IUserAppPageProps) => {\n    const styleClasses = useStyles();\n    \n    const dispatch = useDispatch();\n    const [searchText, setSearchText] = useState<string>('');\n    const [isFiltering, setIsFiltering] = useState<boolean>(false);\n\n    // only fetch once when first visit home page;\n    // avoid re-fetch first pagination of group companies when leaving and re-visiting home page again\n    const anyGroupCompanyEndCursor = useSelector((state: IRootState) => state.interviewingCompany.graphqlEndCursor);\n    useEffect(() => {\n        if (anyGroupCompanyEndCursor === undefined) {\n            // fetch companies that do not have label status yet, treat them as `target` and put them in target group\n            dispatch(\n                GroupedCompanyActionCreators[\"targetCompany\"][CrudType.LIST][RequestStatus.TRIGGERED].action({\n                    graphqlFunctionName: 'fetchDashboardCompanyData',\n                    graphqlArgs: {\n                        labels__isnull: true\n                    }\n                })\n            );\n    \n            // fetch companies by their label status, so each can be displayed separately in their tabs\n            for (let labelText of Object.values(labelTypes)) {\n                dispatch(\n                    GroupedCompanyActionCreators[labelTypesMapToCompanyGroupTypes[labelText as labelTypes]][CrudType.LIST][RequestStatus.TRIGGERED].action({\n                        graphqlFunctionName: 'fetchDashboardCompanyData',\n                        graphqlArgs: {\n                            labels__text: labelText\n                        }\n                    })\n                );\n            }\n        }\n    }, [anyGroupCompanyEndCursor])\n\n    const searchFieldTextIsEmpty = () => {\n        return Utilities.normalizeText(searchText) === '';\n    }\n\n    const onSearchFieldChange = (event: React.FormEvent<HTMLInputElement>) => {\n        setSearchText(event.currentTarget.value);\n    }\n\n    // switch off filtering mode if field becomes empty\n    useEffect(() => {\n        if (searchFieldTextIsEmpty()) {\n            if (isFiltering) {\n                setIsFiltering(false);\n            }\n        } else {\n            if (!isFiltering) {\n                setIsFiltering(true);\n            }\n        }\n    }, [searchText]);\n\n    const searchCompanyEndCursor = useSelector((state: IRootState) => state.searchCompany.graphqlEndCursor);\n\n    const onSearchFieldKeyDown = (event: React.KeyboardEvent<HTMLDivElement>) => {\n        switch (event.key.toLowerCase()) {\n            case 'enter':\n                if (!searchFieldTextIsEmpty()) {\n                    dispatch(\n                        SearchCompanyActionCreators[CrudType.LIST][RequestStatus.TRIGGERED].action({\n                            graphqlFunctionName: 'fetchDashboardCompanyData',\n                            graphqlArgs: {\n                                name__icontains: searchText,\n                                after: searchCompanyEndCursor\n                            }\n                        })\n                    )\n                }\n                break;\n            case 'escape':\n                onSearchFieldClear();\n                break\n        }\n    }\n\n    const onSearchFieldClear = () => {\n        setSearchText('');\n        setIsFiltering(false);\n        // clear searchCompany redux (but don't delete company redux, which stores the actual company objects)\n        dispatch(\n            SearchCompanyActionCreators[CrudType.DELETE][RequestStatus.SUCCESS].action({\n                clearAll: true\n            })\n        )\n    }\n\n    // for searching feature\n    const searchCompanies = useSelector((state: IRootState) => {\n        return Object.values(state.searchCompany.collection).map(reference => props.company.collection[reference.uuid]);\n    })\n\n    return (\n        <div>\n            <div className={styles.UserAppPageHeader}>\n                <Headline3>Your Organizations</Headline3>\n                <Button\n                    color=\"secondary\"\n                    variant=\"contained\"\n                    disableElevation\n                    onClick={() => { props.history.push(\"/com-form/\") }}\n                >\n                    <MaterialIcon icon=\"add\" />\n                    Add Organization\n                </Button>\n            </div>\n            <TabContainer\n                render={() => {\n                    const allCompanyTab = (<TabContent label={\n                        <Badge badgeContent={searchCompanies.length} color=\"secondary\">\n                            <div className={styleClasses.centerVertically}>\n                                Search <SearchIcon /> \n                            </div>\n                        </Badge>\n                    }>\n                        <div className={styles.companyListHeader}>\n                            <TextField\n                                className={styles.searchField}\n                                label=\"Google, UCLA, ... etc\"\n                                outlined\n                                leadingIcon={<MaterialIcon role=\"button\" icon=\"search\" />}\n                                trailingIcon={searchText === '' ? undefined : <MaterialIcon role=\"button\" icon=\"clear\" />}\n                                onTrailingIconSelect={onSearchFieldClear}\n                            >\n                                <Input\n                                    type={InputFieldType.TEXT}\n                                    inputType=\"input\"\n                                    onKeyDown={onSearchFieldKeyDown}\n                                    onChange={onSearchFieldChange}\n                                    value={searchText}\n                                    autoFocus\n                                />\n                            </TextField>\n                        </div>\n                        <MaterialUIList>\n                            {\n                                searchCompanies.map(\n                                    (company, index) => {\n                                        return (\n                                            <CompanyListItem\n                                                key={company ? company.uuid : index}\n                                                company={company}\n                                                applications={company?.applications ? (company.applications as Array<IReference>).map((applicationUuid) => props.application.collection[applicationUuid]) : undefined}\n                                            />\n                                        )\n                                    }\n                                )\n                            }\n                        </MaterialUIList>\n                        <div className={styleClasses.loadMoreButtonContainer}>\n                            <SearchCompanyLoadMoreButton searchText={searchText} disabled={!isFiltering} />\n                        </div>\n                    </TabContent>)\n\n                    const groupCompanyTabs = Object.values(labelTypes).map((labelText: labelTypes, index) => {\n                        return (\n                            <TabContent key={index} label={\n                                <Badge badgeContent={Object.keys(props[labelTypesMapToCompanyGroupTypes[labelText]].collection).length}\n                                    color=\"secondary\"\n                                >\n                                    <div className={styleClasses.centerVertically}>\n                                        {labelText}\n                                        {labelText === labelTypes.TARGET ?\n                                            <TargetIcon /> :\n                                            labelText === labelTypes.APPLIED ?\n                                            <AppliedIcon /> :\n                                            labelText === labelTypes.INTERVIEWING ?\n                                            <InterviewingIcon /> :\n                                            labelText === labelTypes.ARCHIVED ?\n                                            <ArchivedIcon /> : null}\n                                    </div>\n                                </Badge>\n                            }>\n                                <div className={styles.companyListHeader}>\n                                    <h1>{labelText}</h1>\n                                </div>\n                                <div>\n                                    {\n                                        Object.values(props[labelTypesMapToCompanyGroupTypes[labelText]].collection).map(\n                                            (companyRef, index) => {\n                                                const company = props.company.collection[companyRef.uuid];\n                                                return company;\n                                            }\n                                        )\n                                        .sort((companyA, companyB) => {\n                                            // descending order, latest goes first\n                                            return new Date(companyB.modified_at).getTime() - new Date(companyA.modified_at).getTime();\n                                        })\n                                        .map((company, index) => {\n                                            const applications = company ? (company.applications as Array<IReference>).map((applicationUuid) => {\n                                                return props.application.collection[applicationUuid];\n                                            }) : undefined;\n\n                                            return (\n                                                <CompanyListItem\n                                                    key={company ? company.uuid : index}\n                                                    company={company}\n                                                    applications={applications}\n                                                />\n                                            )\n                                        })\n                                    }\n                                </div>\n                                \n                                <div className={styleClasses.loadMoreButtonContainer}>\n                                    <GroupedCompanyLoadMoreButton labelText={labelText} />\n                                </div>\n                            </TabContent>\n                        )\n                    })\n\n                    return [\n                        allCompanyTab,\n                        ...groupCompanyTabs\n                    ]\n                }}\n            />\n        </div>\n    )\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    // prop: store.prop\n    company: store.company,\n\n    ...(companyGroups.reduce((accumulated, labelText) => ({\n        ...accumulated,\n        [labelText]: store[labelText]\n    }), {}) as {[key in companyGroupTypes]: IObjectStore<Company>}),\n\n    application: store.application,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<{}>>) => {\n    // actionName = (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n\n    return {\n        // listObject: (callback?: Function) =>\n        //     dispatch(\n        //         ObjectActions[CrudType.LIST][RequestStatus.TRIGGERED].action(\n        //             new Object({}),\n        //             callback\n        //         )\n        //     ),\n    }\n};\n\nexport const UserAppPageContainer = withRouter(connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(UserAppPage));\n","import React from \"react\";\n\n/** Components */\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n// mdc-react icon button\nimport '@material/react-icon-button/dist/icon-button.css';\nimport IconButton from '@material/react-icon-button';\n// data model\nimport { DataModelClass } from \"../../../data-model/base-model\";\n// formik\nimport {\n    FieldArray,\n    ArrayHelpers,\n} from \"formik\";\n// base field\nimport { IFormBaseFieldProps } from \"./form-base-field-meta\";\n\n\ninterface IFormBaseDyanmicFieldControllsProps {\n    index: number\n    formikArrayHelpers: ArrayHelpers\n}\n\nconst FormBaseDynamicFieldControlls = (props: IFormBaseDyanmicFieldControllsProps) => {\n\n    const deleteField = () => {\n        window.confirm(`Are you sure you want to delete this dynamic field?`) && props.formikArrayHelpers.remove(props.index);\n    }\n\n    return (\n        <div className=\"FormBaseDynamicFieldControlls\">\n            <IconButton type=\"button\" onClick={deleteField}>\n                <MaterialIcon icon=\"delete\" />\n            </IconButton>\n        </div>\n    )\n}\n\nconst BaseDynamicFieldAddButton = (props: {\n    formikArrayHelpers: ArrayHelpers\n    model?: DataModelClass\n    label: string\n}) => {\n\n    const onAddClick = () => {\n        if (props.model) {\n            const model = props.model;\n            props.formikArrayHelpers.push(new model({}));\n        } else {\n            props.formikArrayHelpers.push({});\n        }\n    }\n\n    return (\n        <Button type=\"button\" onClick={onAddClick} children={`New ${props.label}`} />\n    )\n}\n\nexport const withFormBaseField = (FormFieldComponent: React.ComponentType<IFormBaseFieldProps>) => (props: IFormBaseFieldProps) => {\n\n    if (props.isDynamic && !props.formikValues) {\n        alert(\"Oops! Something's wrong.\");\n        throw Error(\"When `isDynamic` is true, you need to pass over `formikValues`.\");\n    }\n\n    const formikValues = props.formikValues;\n    const getInstanceDataFromFormikValues = props.getInstanceDataFromFormikValues;\n\n    return (\n        (props.isDynamic && getInstanceDataFromFormikValues && formikValues) ?\n            (<FieldArray\n                name={props.fieldName}\n                render={formikArrayHelpers => (\n                    <div className=\"FormApplicationStatusLinkFieldsContainer\">\n                        {getInstanceDataFromFormikValues(formikValues).map((instanceData: any, index: number) => (\n                            <div key={index} className=\"FormBaseDynamicField\">\n                                <FormFieldComponent\n                                    fieldName={`${props.fieldName}[${index}]`}\n                                    label={`${props.label} ${index}`}\n                                    formikValues={props.formikValues}\n                                    getInstanceDataFromFormikValues={props.getInstanceDataFromFormikValues}\n                                />\n                                <FormBaseDynamicFieldControlls\n                                    index={index}\n                                    formikArrayHelpers={formikArrayHelpers}\n                                />\n                            </div>\n                        ))}\n\n                        <BaseDynamicFieldAddButton\n                            formikArrayHelpers={formikArrayHelpers}\n                            label={props.label}\n                            model={props.model}\n                        />\n                    </div>\n                )}\n            />)\n            :\n            (<FormFieldComponent\n                fieldName={props.fieldName}\n                label={props.label}\n                formikValues={props.formikValues}\n                getInstanceDataFromFormikValues={props.getInstanceDataFromFormikValues}\n            />)\n    )\n}\n","/** Components */\n// base field\nimport { withFormBaseField } from \"../form-base-field/form-base-field\";\n// link field\nimport { FormLinkFieldComponent } from \"./form-link-field-component\";\n\nexport const FormLinkField = withFormBaseField(FormLinkFieldComponent);\n","import React, { Component } from \"react\";\n\n/** Components */\n// mdc-react input\nimport \"@material/react-text-field/dist/text-field.css\";\nimport { Overline } from \"@material/react-typography\";\n\nimport { FormInputFieldMeta } from \"../form-input-field/form-input-field-meta\";\nimport { FormInputField } from \"../form-input-field/form-input-field\";\nimport { IFormBaseFieldProps } from \"../form-base-field/form-base-field-meta\";\n\n\nexport interface IFormLinkFieldComponentProps extends IFormBaseFieldProps {\n}\n\nexport class FormLinkFieldComponent extends Component<IFormLinkFieldComponentProps> {\n\n    textInputFieldMeta: FormInputFieldMeta;\n    urlInputFieldMeta: FormInputFieldMeta;\n\n    constructor(props: IFormLinkFieldComponentProps) {\n        super(props)\n\n        this.textInputFieldMeta = new FormInputFieldMeta({\n            fieldName: `${this.props.fieldName}.text`,\n            label: \"Description\",\n            autoFocus: true\n        });\n        this.urlInputFieldMeta = new FormInputFieldMeta({\n            fieldName: `${this.props.fieldName}.url`,\n            label: \"Link url\"\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"FormLinkField\">\n                {this.props.label && <Overline>{this.props.label}</Overline>}\n                <FormInputField\n                    {...this.textInputFieldMeta}\n                />\n\n                <FormInputField\n                    {...this.urlInputFieldMeta}\n                />\n            </div>\n        );\n    }\n}","// data model\nimport { Link } from \"../../../data-model/link\";\n\n/** Components */\n// base field\nimport { IFieldBaseMetaProps, FormBaseFieldMeta } from \"../form-base-field/form-base-field-meta\";\nimport { FormLinkField } from \"./form-link-field\";\n\nexport class FormLinkFieldMeta extends FormBaseFieldMeta {\n\n    constructor(props: IFieldBaseMetaProps) {\n        super(props)\n        this.model = Link;\n        this.formField = FormLinkField;\n    }\n}\n","/** Components */\n// base field\nimport { withFormBaseField } from \"../form-base-field/form-base-field\";\n// link field\nimport { FormAddressFieldComponent } from \"./form-address-field-component\";\n\nexport const FormAddressField = withFormBaseField(FormAddressFieldComponent);\n","import React, { Component } from \"react\";\n\n/** Components */\n// mdc-react input\nimport \"@material/react-text-field/dist/text-field.css\";\nimport { Overline } from '@material/react-typography';\n\nimport { FormInputFieldMeta } from \"../form-input-field/form-input-field-meta\";\nimport { FormInputField } from \"../form-input-field/form-input-field\";\nimport { IFormBaseFieldProps } from \"../form-base-field/form-base-field-meta\";\n\n\nexport interface IFormAddressFieldComponentProps extends IFormBaseFieldProps {\n}\n\nexport class FormAddressFieldComponent extends Component<IFormAddressFieldComponentProps> {\n\n    fullAddressInputFieldMeta: FormInputFieldMeta;\n    placeNameInputFieldMeta: FormInputFieldMeta;\n\n    constructor(props: IFormAddressFieldComponentProps) {\n        super(props);\n\n        this.fullAddressInputFieldMeta = new FormInputFieldMeta({\n            fieldName: `${this.props.fieldName}.full_address`,\n            label: `Full Address`\n        });\n        this.placeNameInputFieldMeta = new FormInputFieldMeta({\n            fieldName: `${this.props.fieldName}.place_name`,\n            label: `Place Name`\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"FormAddressField\">\n                {this.props.label && <Overline>{this.props.label}</Overline>}\n                \n                <FormInputField\n                    {...this.placeNameInputFieldMeta}\n                />\n\n                <FormInputField\n                    {...this.fullAddressInputFieldMeta}\n                />\n                \n            </div>\n        );\n    }\n}","// data model\nimport { Address } from \"../../../data-model/address\";\n\n/** Components */\n// base field\nimport { IFieldBaseMetaProps, FormBaseFieldMeta } from \"../form-base-field/form-base-field-meta\";\nimport { FormAddressField } from \"./form-address-field\";\n\nexport class FormAddressFieldMeta extends FormBaseFieldMeta {\n\n    constructor(props: IFieldBaseMetaProps) {\n        super(props)\n        this.model = Address;\n        this.formField = FormAddressField;\n    }\n}\n","import React, { Component, FunctionComponent, useState, useEffect } from \"react\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { IRootState } from \"../../state-management/types/root-types\";\nimport { Label, labelTypes } from \"../../data-model/label\";\n\n/** Components */\nimport { ChipSet, Chip } from '@material/react-chips';\nimport \"@material/react-chips/dist/chips.css\";\nimport { Overline } from \"@material/react-typography\";\n\n\ninterface ILabelGroupComponentProps extends RouteComponentProps {\n    titleText?: string\n    selectedLabels?: Label[]\n    onChange?: (selectedLabelText: labelTypes) => void\n}\n\nconst LabelGroupComponent: FunctionComponent<ILabelGroupComponentProps> = (props) => {\n    const [selectedLabels, setSelectedLabels] = useState<labelTypes[]>(\n        props.selectedLabels && props.selectedLabels.length ? [props.selectedLabels[0].text] : [labelTypes.TARGET]\n    );\n\n    const handleSelectionChange = (selectedLabels: Array<string>) => {\n        setSelectedLabels(selectedLabels as labelTypes[]);\n    }\n\n    // signal the change to external world\n    useEffect(()=> {\n        props.onChange && props.onChange(selectedLabels[0]);\n    }, [selectedLabels]);\n\n    return (\n        <div className=\"LabelGroupComponent\">\n            {props.titleText && <Overline>{props.titleText}</Overline>}\n            <ChipSet choice selectedChipIds={selectedLabels} handleSelect={handleSelectionChange}>\n                {\n                    Object.values(labelTypes).map((labelText, index) => {\n                        return <Chip key={index} id={labelText} label={labelText} />\n                    })\n                }\n            </ChipSet>\n        </div>\n    )\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    // prop: store.prop\n});\n\nexport const LabelGroupComponentContainer = withRouter(connect(\n    mapStateToProps,\n    // mapDispatchToProps\n)(LabelGroupComponent));\n","import React, { Component } from \"react\";\n\n/** Components */\nimport { LabelGroupComponentContainer } from \"../../label/label-group-component\";\nimport { labelTypes } from \"../../../data-model/label\";\nimport { Label } from \"../../../data-model/label\";\n// formik\nimport {\n    Field, FieldProps,\n    ErrorMessage,\n} from \"formik\";\n// label field\nimport { IFormLabelFieldProps } from \"./form-label-field-meta\";\n\n\nexport class FormLabelField extends Component<IFormLabelFieldProps> {\n\n    render() {\n        return (\n            <div className=\"FormLabelField\">\n                <Field\n                    name={this.props.fieldName}\n                    render={({ field, form }: FieldProps<number | string>) => (\n                        <LabelGroupComponentContainer \n                            titleText={this.props.label}\n                            selectedLabels={field.value}\n                            onChange={(selectedLabelText: labelTypes) => {\n                                form.setFieldValue(field.name, [new Label({\n                                    text: selectedLabelText\n                                })]);\n                            }}\n                        />\n                    )}\n                />\n                <ErrorMessage name={this.props.fieldName} />\n            </div>\n        );\n    }\n}\n","// base field\nimport { FormBaseFieldMeta, IFormBaseFieldProps, IFieldBaseMetaProps } from \"../form-base-field/form-base-field-meta\";\n// label field\nimport { FormLabelField } from \"./form-label-field\";\n\n// data model\nimport { Label } from \"../../../data-model/label\";\n\n\n// API for caller to new props for label field\nexport interface IFormLabelFieldProps extends IFormBaseFieldProps {\n    onTrailingIconSelect?: () => void\n\n    autoFocus?: boolean\n}\n\n// for defining meta\nexport interface IFormLabelFieldMetaProps extends IFieldBaseMetaProps {\n    onTrailingIconSelect?: () => void\n\n    autoFocus?: boolean\n}\n\nexport class FormLabelFieldMeta extends FormBaseFieldMeta {\n    onTrailingIconSelect?: () => void\n\n    autoFocus?: boolean\n\n    constructor({\n        onTrailingIconSelect,\n        autoFocus,\n        ...props\n    }: IFormLabelFieldMetaProps) {\n        super(props)\n        this.model = Label;\n\n        this.onTrailingIconSelect = onTrailingIconSelect;\n        this.autoFocus = autoFocus;\n\n        this.formField = FormLabelField;\n    }\n}\n","import React, { Component } from \"react\";\n\n/** Components */\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\n// mdc-react input\nimport \"@material/react-text-field/dist/text-field.css\";\n// formik\nimport {\n    Field, FieldProps,\n    ErrorMessage,\n} from \"formik\";\n// input field\nimport { IFormRichTextFieldProps } from \"./form-rich-text-field-meta\";\n// ckeditor\n// import CKEditor from '@ckeditor/ckeditor5-react';\nimport CKEditor from '@shaungc/custom-ckeditor5-react';\n// import BalloonEditor from '@ckeditor/ckeditor5-build-balloon';\nimport BalloonEditor from '@shaungc/ckeditor5-custom-balloon';\nimport Typography from \"@material-ui/core/Typography\";\n\n\nexport class FormRichTextField extends Component<IFormRichTextFieldProps> {\n    render() {\n        return (\n            <div className=\"FormRichTextField\">\n                <Field\n                    name={this.props.fieldName}\n                    render={({ field, form }: FieldProps<number | string>) => {\n                        return (\n                            <>\n                                <Typography variant=\"overline\">{this.props.label}</Typography>\n                                <CKEditor\n                                    editor={BalloonEditor}\n                                    data={field.value}\n                                    onChange={(event: any, editor: any) => {\n                                        form.setFieldValue(field.name, editor.getData());\n                                    }}\n                                    onSaveKeystroke={this.props.onSaveKeystroke}\n                                />\n                            </>\n                        )\n                    }}\n                />\n                <ErrorMessage name={this.props.fieldName} />\n            </div>\n        );\n    }\n}","// base field\nimport { FormBaseFieldMeta, IFormBaseFieldProps, IFieldBaseMetaProps } from \"../form-base-field/form-base-field-meta\";\n// input field\nimport { FormRichTextField } from \"./form-rich-text-field\";\n\n\n// API for caller to new props for input field\nexport interface IFormRichTextFieldProps extends IFormBaseFieldProps {\n    onSaveKeystroke?: () => void\n}\n\n// for defining meta\nexport interface IFormRichTextFieldMetaProps extends IFieldBaseMetaProps {\n}\n\nexport class FormRichTextFieldMeta extends FormBaseFieldMeta {\n\n    constructor(props: IFormRichTextFieldMetaProps) {\n        super(props)\n        this.formField = FormRichTextField;\n    }\n}","import React, { Component } from \"react\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../state-management/types/root-types\";\nimport { CrudType, RequestStatus, ISingleRestApiResponse } from \"../../utils/rest-api\";\nimport {\n    IObjectAction, JsonResponseType, ObjectRestApiJsonResponse\n} from \"../../state-management/types/factory-types\";\n// data models\nimport { Company, labelTypesMapToCompanyGroupTypes } from \"../../data-model/company/company\";\nimport { CompanyActionCreators, GroupedCompanyActionCreators } from \"../../state-management/action-creators/root-actions\";\n\n/** Components */\nimport {\n    FormFactory,\n    FormActionButtonProps,\n    ActionButtonType\n} from \"../form-factory/form-factory\";\n// form field\nimport { FormBaseFieldMeta } from \"../form-factory/form-base-field/form-base-field-meta\";\nimport { FormInputFieldMeta } from \"../form-factory/form-input-field/form-input-field-meta\";\nimport { FormLinkFieldMeta } from \"../form-factory/form-link-field/form-link-field-meta\";\nimport { FormAddressFieldMeta } from \"../form-factory/form-address-field/form-address-field-meta\";\nimport { FormLabelFieldMeta } from \"../form-factory/form-label-field/form-label-field-meta\";\nimport { FormRichTextFieldMeta } from \"../form-factory/form-rich-text-field/form-rich-text-field-meta\";\n\n\ninterface ICompanyFormComponentProps {\n    company?: Company;\n    onCancel: (event: any) => void;\n    onSubmitSuccess?: (jsonResponse: ObjectRestApiJsonResponse<Company>) => void;\n\n    /** redux */\n    createCompany: (companyFormData: Company, successCallback?: (jsonResponse: ISingleRestApiResponse<Company>) => void, finalCallback?: Function) => void;\n    updateCompany: (companyFormData: Company, successCallback?: (jsonResponse: ISingleRestApiResponse<Company>) => void, finalCallback?: Function, updateFromCompany?: Company) => void;\n}\n\nclass CompanyFormComponent extends Component<ICompanyFormComponentProps> {\n\n    formFieldPropsList: Array<FormBaseFieldMeta>;\n    actionButtonPropsList: Array<FormActionButtonProps>;\n\n    constructor(props: ICompanyFormComponentProps) {\n        super(props);\n\n        this.formFieldPropsList = [\n            new FormInputFieldMeta({\n                fieldName: \"name\",\n                label: \"Organization Name*\",\n                autoFocus: true\n            }),\n\n            new FormLabelFieldMeta({\n                fieldName: \"labels\",\n                label: \"Process Status\",\n            }),\n\n            new FormAddressFieldMeta({\n                fieldName: \"hq_location\",\n                label: \"Headquarter Location\"\n            }),\n\n            new FormLinkFieldMeta({\n                fieldName: \"home_page\",\n                label: \"Organization Website\"\n            }),\n\n            new FormRichTextFieldMeta({\n                fieldName: \"notes\",\n                label: \"Quick Notes (Company Background, Culture, etc)\",\n            }),\n        ];\n\n        this.actionButtonPropsList = [\n            new FormActionButtonProps(\n                !this.props.company ? \"Create Company\" : \"Save Company\",\n                undefined,\n                ActionButtonType.SUBMIT\n            ),\n            new FormActionButtonProps(\"Cancel\", this.props.onCancel)\n        ]\n\n    }\n\n    render() {\n        return (\n            <div className=\"CompanyFormComponent\">\n                <FormFactory\n                    model={Company}\n                    initialInstance={this.props.company}\n\n                    formFieldPropsList={this.formFieldPropsList}\n                    actionButtonPropsList={this.actionButtonPropsList}\n\n                    createInstanceTriggerAction={this.props.createCompany}\n                    updateInstanceTriggerAction={this.props.updateCompany}\n\n                    onSubmitSuccess={this.props.onSubmitSuccess}\n                />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => ({});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<Company>>) => {\n    return {\n        createCompany: (companyFormData: Company, successCallback?: (jsonResponse: ISingleRestApiResponse<Company>) => void, finalCallback?: Function) => (\n            // create company object in pool redux\n            dispatch(\n                CompanyActionCreators[CrudType.CREATE][RequestStatus.TRIGGERED].action({\n                    objectClassInstance: companyFormData,\n                    successCallback: (jsonResponse: JsonResponseType<Company>) => {\n                        jsonResponse = jsonResponse as ISingleRestApiResponse<Company>;\n                        // create ref in grouped redux\n                        dispatch(\n                            // no api calls, so don't dispatch TRIGGER action, just SUCCESS action\n                            GroupedCompanyActionCreators[labelTypesMapToCompanyGroupTypes[Company.getLabel(jsonResponse)]][CrudType.CREATE][RequestStatus.SUCCESS].action({\n                                jsonResponse: { uuid: jsonResponse.uuid }\n                            })\n                        );\n                        // Only TRIGGER/SUCCESS has success callback. Since this is CREATE/SUCCESS, we can only call the func here. This is necessary because the form component rely on this callback to carry out order-critical operations, like page transition after create, etc.\n                        successCallback && successCallback(jsonResponse);\n                    },\n                    finalCallback\n                })\n            )\n        ),\n        updateCompany: (\n            companyFormData: Company,\n            successCallback?: (jsonResponse: ISingleRestApiResponse<Company>) => void,\n            finalCallback?: Function,\n            updateFromCompany?: Company\n        ) => dispatch(\n            CompanyActionCreators[CrudType.UPDATE][RequestStatus.TRIGGERED].action({\n                objectClassInstance: companyFormData,\n                successCallback: successCallback as ((jsonResponse: JsonResponseType<Company>) => void),\n                finalCallback,\n                triggerActionOptions: {\n                    updateFromObject: updateFromCompany\n                }\n            })\n        )\n    };\n};\n\nexport const CompanyFormComponentContainer = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(CompanyFormComponent);\n","import React, { Component } from \"react\";\n\n/** route */\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../state-management/types/root-types\";\n// REST API\nimport { ISingleRestApiResponse } from \"../../utils/rest-api\";\nimport {\n    IObjectAction,\n    IObjectStore\n} from \"../../state-management/types/factory-types\";\nimport { Company } from \"../../data-model/company/company\";\n\n/** Components */\nimport \"./add-com-page.css\"\n// mdc-react button\nimport \"@material/react-button/dist/button.css\";\n// mdc-react input\nimport \"@material/react-text-field/dist/text-field.css\";\nimport { CompanyFormComponentContainer } from \"../../components/company/company-form-component\";\n\n\ninterface IAddComPageParams {\n    uuid?: string;\n}\n\ninterface IAddComPageProps extends RouteComponentProps<IAddComPageParams> {\n    company: IObjectStore<Company>;\n}\n\nclass AddComPage extends Component<IAddComPageProps> {\n    render() {\n        const company: Company | undefined = (this.props.match.params.uuid && this.props.company.collection[this.props.match.params.uuid])\n            ? this.props.company.collection[this.props.match.params.uuid]\n            : undefined;\n        return (\n            <div className=\"AddComPage\">\n                <h1>{!company ? \"Add an Organization\" : `Update Organization`}</h1>\n                <CompanyFormComponentContainer\n                    company={company}\n                    onSubmitSuccess={(jsonResponse) => {\n                        const uuid = (jsonResponse as ISingleRestApiResponse<Company>).uuid;\n\n                        company ? (\n                            // case: update company, let user be able to go back to update form\n                            this.props.history.push(`/com-app/${uuid}/`)\n                        ) : (\n                            // case: create company, don't let user go back to form. If attempt to update company, user should click on edit; if attempt to create another company, should go to /home/ to do so\n                            this.props.history.replace(`/com-app/${uuid}/`)\n                        );\n                    }}\n                    onCancel={event => {\n                        this.props.history.goBack()\n                    }}\n                />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: IRootState) => ({\n    // prop: state.prop\n    company: state.company\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<Company>>) => {\n    // actionName = (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {};\n};\n\nexport const AddComPageContainer = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(AddComPage)\n);\n","import { BaseModel, IBaseModelProps, IRelationship } from \"../base-model\";\nimport { ApplicationStatusLink } from \"../application-status-link\";\nimport * as Yup from \"yup\";\n\n\ninterface IApplicationStatusProps {\n    text?: string;\n    application?: IRelationship;\n    applicationstatuslink_set?: Array<ApplicationStatusLink>\n    date?: string;\n    order?: number\n}\n\nexport class ApplicationStatus extends BaseModel {\n    public text: string;\n    public application: IRelationship;\n    public applicationstatuslink_set: Array<ApplicationStatusLink>\n    public date: string;\n    public order: number;\n\n    constructor({\n        text = \"\",\n        application = \"\",\n        // applicationstatuslink_set = [],\n        applicationstatuslink_set = [],\n        date = ApplicationStatus.localeNowDateString(),\n        order = 0,\n        ...args\n    }: IApplicationStatusProps & IBaseModelProps) {\n        super(args);\n        this.text = text;\n        this.application = application;\n        this.applicationstatuslink_set = applicationstatuslink_set;\n        this.date = date;\n        this.order = order;\n    }\n\n    static schema(){\n        return Yup.object<ApplicationStatus>().shape({\n            text: Yup.string().required(\"Give a quick one or two words for the status\").max(50, \"No more than 50 characters\"),\n\n            // date: Yup.string().matches(/[01]\\d{1}[-/][0123]\\d{1}[-/]\\d{4}/), // TODO: not working, always invalid, figure out why\n            date: Yup.string().length(10), // workaround\n            \n            order: Yup.number()\n        });\n    }\n\n    static localeNowDateString() {\n        const now = new Date();\n        const localeNow = new Date(Date.UTC(now.getUTCFullYear(), now.getUTCMonth(), now.getDate() ));\n        const localeNowTimeString = localeNow.toISOString().split(\"T\")[0]\n        return localeNowTimeString;\n    }\n}\n","import { BaseModel, IBaseModelProps, IRelationship } from \"./base-model\";\nimport { Link } from \"./link\";\n\ninterface IApplicationStatusLinkProps {\n    application_status?: IRelationship;\n    link?: Link;\n}\n\nexport class ApplicationStatusLink extends BaseModel {\n    public application_status: IRelationship;\n    public link: Link;\n\n    constructor({\n        application_status = \"\",\n        link = new Link({}),\n        ...args\n    }: IApplicationStatusLinkProps & IBaseModelProps) {\n        super(args);\n        this.application_status = application_status;\n        this.link = link;\n    }\n}","/** Components */\n// link field\nimport { FormApplicationStatusLinkFieldComponent } from \"./form-application-status-link-field-component\";\n// base dynamic field\nimport { withFormBaseField } from \"../form-base-field/form-base-field\";\n\nexport const FormApplicationStatusLinkField = withFormBaseField(FormApplicationStatusLinkFieldComponent);","import React, { Component } from \"react\";\n\n/** Components */\n// mdc-react input\nimport \"@material/react-text-field/dist/text-field.css\";\n// link form\nimport { FormLinkFieldMeta } from \"../form-link-field/form-link-field-meta\";\nimport { FormLinkField } from \"../form-link-field/form-link-field\";\nimport { IFormBaseFieldProps } from \"../form-base-field/form-base-field-meta\";\n\nexport interface IFormApplicationStatusLinkFieldComponentProps extends IFormBaseFieldProps {\n}\n\nexport class FormApplicationStatusLinkFieldComponent extends Component<IFormApplicationStatusLinkFieldComponentProps> {\n\n    linkFieldProps: FormLinkFieldMeta;\n\n    constructor(props: IFormApplicationStatusLinkFieldComponentProps) {\n        super(props)\n\n        this.linkFieldProps = new FormLinkFieldMeta({\n            fieldName: `${this.props.fieldName}.link`,\n            label: ``,\n            isDynamic: false, // Link is a one-to-one field in application status link model\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"FormApplicationStatusLinkField\">\n                {this.props.label && <h4>{this.props.label}</h4>}\n                <FormLinkField\n                    {...this.linkFieldProps}\n                    formikValues={this.props.formikValues}\n                    getInstanceDataFromFormikValues={this.props.getInstanceDataFromFormikValues}\n                />\n            </div>\n        );\n    }\n}","// data model\nimport { ApplicationStatusLink } from \"../../../data-model/application-status-link\";\n\n/** Components */\nimport { FormBaseFieldMeta, IFieldBaseMetaProps } from \"../form-base-field/form-base-field-meta\";\nimport { FormApplicationStatusLinkField } from \"./form-application-status-link-field\";\n\nexport class FormApplicationStatusLinkFieldMeta extends FormBaseFieldMeta {\n\n    constructor(props: IFieldBaseMetaProps) {\n        super(props)\n        this.model = ApplicationStatusLink;\n        this.formField = FormApplicationStatusLinkField;\n    }\n}\n","import React, { Component } from \"react\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../state-management/types/root-types\";\nimport { IObjectStore, IObjectAction, JsonResponseType } from \"../../state-management/types/factory-types\";\n// data models\nimport { ApplicationStatus } from \"../../data-model/application-status/application-status\";\nimport { ApplicationStatusLink } from \"../../data-model/application-status-link\";\nimport { Application } from \"../../data-model/application/application\";\nimport { ApplicationStatusActionCreators } from \"../../state-management/action-creators/root-actions\";\n\n/** Rest API */\nimport { CrudType, ISingleRestApiResponse, RequestStatus } from \"../../utils/rest-api\";\n\n/** Components */\nimport {\n    FormFactory,\n    FormActionButtonProps,\n    ActionButtonType\n} from \"../form-factory/form-factory\";\nimport {FormInputFieldMeta } from \"../form-factory/form-input-field/form-input-field-meta\";\nimport { InputFieldType, FormBaseFieldMeta } from \"../form-factory/form-base-field/form-base-field-meta\";\n// form fields\nimport { FormApplicationStatusLinkFieldMeta } from \"../form-factory/form-application-status-link-field/form-application-status-link-field-meta\";\n\n\ninterface IApplicationStatusFormComponentProps extends RouteComponentProps {\n    applicationStatus?: ApplicationStatus; // for update form\n    onSubmitSuccess?: () => void;\n    onCancel: () => void;\n\n    /** redux */\n    application: Application;\n    applicationStatusStore: IObjectStore<ApplicationStatus>\n    createApplicationStatus: (\n        applicationStatusFormData: ApplicationStatus,\n        successCallback?: (jsonResponse: ISingleRestApiResponse<ApplicationStatus>) => void,\n        finalCallback?: Function,\n    ) => void;\n    updateApplicationStatus: (\n        applicationStatusFormData: ApplicationStatus,\n        successCallback?: (jsonResponse: ISingleRestApiResponse<ApplicationStatus>) => void,\n        finalCallback?: Function,\n    ) => void;\n}\n\nclass ApplicationStatusFormComponent extends Component<\n    IApplicationStatusFormComponentProps\n> {\n    formFieldPropsList: Array<FormBaseFieldMeta>;\n    actionButtonPropsList: Array<FormActionButtonProps>;\n\n    constructor(props: IApplicationStatusFormComponentProps) {\n        super(props);\n\n        this.formFieldPropsList = [\n            new FormInputFieldMeta({\n                fieldName: \"text\",\n                label: \"Status*\",\n                autoFocus: true\n            }),\n            new FormInputFieldMeta({\n                fieldName: \"date\",\n                label: \"Date\",\n                type: InputFieldType.DATE\n            }),\n            new FormApplicationStatusLinkFieldMeta({\n                fieldName: `applicationstatuslink_set`,\n                label: `Status Link`,\n                isDynamic: true,\n            }),\n        ];\n\n        this.actionButtonPropsList = [\n            new FormActionButtonProps(\n                this.props.applicationStatus ?\n                \"Save Status\":\n                \"Create Status\",\n                undefined,\n                ActionButtonType.SUBMIT\n            ),\n            new FormActionButtonProps(\"Cancel\", this.props.onCancel)\n        ];\n    }\n\n    render() {\n        return (\n            <div className=\"ApplicationStatusFormComponent\">\n                <FormFactory\n                    model={ApplicationStatus}\n                    initialInstance={new ApplicationStatus({\n                        ...this.props.applicationStatus,\n                    })}\n                    enforcedInstanceData={{\n                        application: this.props.application.uuid\n                    }}\n        \n                    formFieldPropsList={this.formFieldPropsList}\n                    actionButtonPropsList={this.actionButtonPropsList}\n        \n                    createInstanceTriggerAction={this.props.createApplicationStatus}\n                    updateInstanceTriggerAction={this.props.updateApplicationStatus}\n\n                    onSubmitSuccess={this.props.onSubmitSuccess}\n                />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    // prop: store.prop\n    applicationStatusStore: store.applicationStatus\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<ApplicationStatus> | IObjectAction<ApplicationStatusLink>>) => {\n    // actionName: (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {\n        createApplicationStatus: (\n            applicationStatusFormData: ApplicationStatus,\n            successCallback?: (jsonResponse: ISingleRestApiResponse<ApplicationStatus>) => void,\n            finalCallback?: Function\n        ) =>\n            dispatch(\n                ApplicationStatusActionCreators[CrudType.CREATE][\n                    RequestStatus.TRIGGERED\n                ].action({\n                    objectClassInstance: applicationStatusFormData, \n                    successCallback: (successCallback as ( (jsonResponse: JsonResponseType<ApplicationStatus>) => void )) ,\n                    finalCallback})\n            )\n        ,\n        updateApplicationStatus: (\n            applicationStatusFormData: ApplicationStatus,\n            successCallback?: (jsonResponse: ISingleRestApiResponse<ApplicationStatus>) => void,\n            finalCallback?: Function\n        ) =>\n            dispatch(\n                ApplicationStatusActionCreators[CrudType.UPDATE][\n                    RequestStatus.TRIGGERED\n                ].action({\n                    objectClassInstance: applicationStatusFormData,\n                    successCallback: (successCallback as ( (jsonResponse: JsonResponseType<ApplicationStatus>) => void )),\n                    finalCallback\n                })\n            )\n        ,\n    };\n};\n\nexport const ApplicationStatusFormComponentContainer = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(ApplicationStatusFormComponent)\n);\n","import React, { Component } from \"react\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../state-management/types/root-types\";\nimport {\n    IObjectAction, IObjectStore, JsonResponseType,\n} from \"../../state-management/types/factory-types\";\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\nimport { ApplicationStatusActionCreators } from \"../../state-management/action-creators/root-actions\";\n\n/** data model */\nimport { ApplicationStatus } from \"../../data-model/application-status/application-status\";\nimport { Application } from \"../../data-model/application/application\";\n\n/** Components */\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc-react icon button\nimport \"@material/react-icon-button/dist/icon-button.css\";\nimport IconButton from \"@material/react-icon-button\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\nimport { ApplicationStatusFormComponentContainer } from \"./application-status-form-component\";\n\nimport Skeleton from 'react-loading-skeleton';\n\n\ninterface IApplicationStatusComponentProps extends RouteComponentProps {\n    applicationStatus?: ApplicationStatus;\n    application?: Application; // needed by form\n    isOnlyForm?: boolean; // needed by add-button\n\n    applicationStatusStore: IObjectStore<ApplicationStatus>;\n    deleteApplicationStatus: (\n        applicationStatusToDelete: ApplicationStatus,\n        callback?: (jsonResponse: JsonResponseType<ApplicationStatus>) => void\n    ) => void;\n}\n\ninterface IApplicationStatusComponentState {\n    isFormOpened: boolean;\n}\n\nclass ApplicationStatusComponent extends Component<\n    IApplicationStatusComponentProps,\n    IApplicationStatusComponentState\n    > {\n    state = {\n        isFormOpened: false\n    };\n\n    render() {\n        return (\n            <div className=\"ApplicationStatusComponent\">\n                {(this.state.isFormOpened || this.props.isOnlyForm) ? (\n                    this.renderFormController(\n                        this.props.application,\n                        this.props.applicationStatus\n                    )\n                ) : this.renderDisplay(this.props.applicationStatus)\n                }\n            </div>\n        );\n    }\n\n    renderDisplay = (applicationStatus?: ApplicationStatus) => {\n        return (\n            <div className=\"ApplicationStatusComponent\">\n                <span>Status: {applicationStatus ? applicationStatus.text : <Skeleton width=\"20vmin\" />}</span>\n\n                {/* edit button */}\n                {\n                    applicationStatus ? (\n                        <IconButton\n                            onClick={() => {\n                                this.setState({ isFormOpened: true });\n                            }}\n                        >\n                            <MaterialIcon icon=\"edit\" />\n                        </IconButton>\n                    ) : (\n                            <IconButton disabled>\n                                <MaterialIcon icon=\"edit\" />\n                            </IconButton>\n                        )\n                }\n\n                {/* delete button */}\n                {\n                    applicationStatus ? (\n                        <IconButton\n                            onClick={() =>\n                                window.confirm(`Are you sure you want to delete this status? ${applicationStatus.text}`) && this.props.deleteApplicationStatus(\n                                    applicationStatus\n                                )\n                            }\n                        >\n                            <MaterialIcon icon=\"delete\" />\n                        </IconButton>\n                    ) : (\n                            <IconButton disabled>\n                                <MaterialIcon icon=\"delete\" />\n                            </IconButton>\n                        )\n                }\n\n                <div>{applicationStatus ? applicationStatus.date : <Skeleton width=\"35vmin\" />}</div>\n\n                {applicationStatus ? applicationStatus.applicationstatuslink_set.map(\n                    applicationStatusLink => {\n                        return (\n                            applicationStatusLink &&\n                            applicationStatusLink.link && (\n                                <span key={applicationStatusLink.uuid}>\n                                    <a\n                                        href={\n                                            (\n                                                applicationStatusLink.link.url &&\n                                                applicationStatusLink.link.url.includes(\"//\")\n                                            ) ?\n                                                applicationStatusLink.link.url :\n                                                `//${applicationStatusLink.link.url}`\n                                        }\n                                        target=\"_blank\"\n                                    >\n                                        {applicationStatusLink.link.text}\n                                    </a>{\" \"}\n                                    |{\" \"}\n                                </span>\n                            )\n                        );\n                    }\n                ) : (\n                        <Skeleton width=\"10vmin\" />\n                    )}\n            </div>\n        );\n    };\n\n    renderFormController = (\n        application?: Application,\n        applicationStatus?: ApplicationStatus\n    ) => {\n        return (\n            <div className=\"application-status-form-controller\">\n                {/* new application status form */}\n                {(\n                    !this.state.isFormOpened ||\n                    !application // application may be still in requesting state\n                ) ? (\n                        <Button\n                            disabled={!application || this.props.applicationStatusStore.requestStatus === RequestStatus.REQUESTING} // disable action button \n                            onClick={clickEvent => {\n                                this.setState({\n                                    isFormOpened: true\n                                });\n                            }}\n                            unelevated\n                            icon={<MaterialIcon icon=\"add\" />}\n                        >\n                            Add New Status\n                    </Button>\n                    ) : (\n                        <div className=\"application-component__status-form\">\n                            <h3>\n                                Add new status to application for{\" \"}\n                                {application.position_title}{\" \"}\n                            </h3>\n                            <ApplicationStatusFormComponentContainer\n                                application={application}\n                                applicationStatus={applicationStatus}\n                                onCancel={() => {\n                                    this.setState({\n                                        isFormOpened: false\n                                    });\n                                }}\n                                onSubmitSuccess={() => {\n                                    this.setState({\n                                        isFormOpened: false\n                                    });\n                                }}\n                            />\n                        </div>\n                    )}\n            </div>\n        );\n    };\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    // prop: store.prop\n    applicationStatusStore: store.applicationStatus\n});\n\nconst mapDispatchToProps = (\n    dispatch: Dispatch<IObjectAction<ApplicationStatus>>\n) => {\n    // actionName: (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {\n        deleteApplicationStatus: (\n            applicationStatusToDelete: ApplicationStatus,\n            callback?: (jsonResponse: JsonResponseType<ApplicationStatus>) => void\n        ) =>\n            dispatch(\n                ApplicationStatusActionCreators[CrudType.DELETE][\n                    RequestStatus.TRIGGERED\n                ].action({\n                    objectClassInstance: applicationStatusToDelete,\n                    successCallback: callback\n                })\n            )\n    };\n};\n\nexport const ApplicationStatusComponentContainer = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(ApplicationStatusComponent)\n);\n","import { BaseModel, IBaseModelProps, IRelationship, IReference } from \"../base-model\";\nimport { Link } from \"../link\";\nimport { ApplicationStatus } from \"../application-status/application-status\";\nimport * as Yup from \"yup\";\n\n\ninterface IApplicationProps {\n    user?: IRelationship;\n    user_company?: IRelationship;\n    position_title?: string;\n    job_description_page?: Link;\n    job_source?: Link;\n    labels?: any;\n    notes?: string;\n    job_description_notes?: string;\n    statuses?: Array<ApplicationStatus> | Array<IReference>;\n}\n\nexport class Application extends BaseModel {\n    public user: IRelationship;\n    public user_company: IRelationship;\n    public position_title: string;\n    public job_description_page: Link;\n    public job_source: Link;\n    public labels: any;\n    public notes: string;\n    public job_description_notes: string;\n    public statuses: Array<ApplicationStatus> | Array<IReference>;\n\n    constructor({\n        user = \"\",\n        user_company = \"\",\n        position_title = \"\",\n        job_description_page = new Link({}),\n        job_source = new Link({}),\n        labels = {},\n        notes = \"\",\n        job_description_notes = \"\",\n        statuses = [],\n        ...args\n    }: IApplicationProps & IBaseModelProps) {\n        super(args);\n        this.user = user;\n        this.user_company = user_company;\n        this.position_title = position_title;\n        this.job_description_page = job_description_page;\n        this.job_source = job_source;\n        this.labels = labels;\n        this.notes = notes;\n        this.job_description_notes = job_description_notes;\n        this.statuses = statuses;\n    }\n\n    static schema(){\n        return Yup.object<Application>().shape({\n            position_title: Yup.string().required(\"We need a title...!\").max(150, \"No more than 150 characters\"),\n            job_description_page: Link.schema(),\n            job_source: Link.schema(),\n            notes: Yup.string(),\n            job_description_notes: Yup.string(),\n        });\n    }\n}\n","import React, { Component } from \"react\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../state-management/types/root-types\";\nimport { CrudType, ISingleRestApiResponse, RequestStatus } from \"../../utils/rest-api\";\nimport {\n    IObjectStore,\n    IObjectAction,\n    JsonResponseType\n} from \"../../state-management/types/factory-types\";\nimport { ApplicationActionCreators } from \"../../state-management/action-creators/root-actions\";\n\n// data models\nimport { Company } from \"../../data-model/company/company\";\nimport { Application } from \"../../data-model/application/application\";\n\n/** Components */\nimport {\n    FormFactory,\n    FormActionButtonProps,\n    ActionButtonType\n} from \"../form-factory/form-factory\";\n// form field\nimport { FormBaseFieldMeta } from \"../form-factory/form-base-field/form-base-field-meta\";\nimport { FormInputFieldMeta } from \"../form-factory/form-input-field/form-input-field-meta\";\nimport { FormLinkFieldMeta } from \"../form-factory/form-link-field/form-link-field-meta\";\nimport { FormRichTextFieldMeta } from \"../form-factory/form-rich-text-field/form-rich-text-field-meta\";\n\n\ninterface IApplicationFormComponentProps {\n    application?: Application;\n    onCancel: (event: any) => void;\n    onSubmitSuccess?: () => void;\n\n    company: Company;\n    /** redux */\n    applicationStore: IObjectStore<Application>;\n    createApplication: (\n        applicationFormData: Application,\n        successCallback?: (jsonResponse: ISingleRestApiResponse<Application>) => void,\n        finalCallback?: Function,\n    ) => void;\n    updateApplication: (\n        applicationFormData: Application,\n        successCallback?: (jsonResponse: ISingleRestApiResponse<Application>) => void,\n        finalCallback?: Function,\n    ) => void;\n}\n\nclass ApplicationFormComponent extends Component<\n    IApplicationFormComponentProps\n> {\n\n    formFieldPropsList: Array<FormBaseFieldMeta>;\n    actionButtonPropsList: Array<FormActionButtonProps>;\n\n    constructor(props: IApplicationFormComponentProps) {\n        super(props);\n\n        this.formFieldPropsList = [\n            new FormInputFieldMeta({\n                fieldName: \"position_title\",\n                label: \"Position Title*\",\n                autoFocus: true\n            }),\n            new FormLinkFieldMeta({\n                fieldName: \"job_description_page\",\n                label: \"Job Description Link\",\n            }),\n            new FormLinkFieldMeta({\n                fieldName: \"job_source\",\n                label: \"Job Source Link\",\n            }),\n            new FormRichTextFieldMeta({\n                fieldName: \"notes\",\n                label: \"Quick Notes\",\n            }),\n            new FormRichTextFieldMeta({\n                fieldName: \"job_description_notes\",\n                label: \"Job Description Notes\",\n            }),\n        ];\n        this.actionButtonPropsList = [\n            new FormActionButtonProps(\n                this.props.company ? \"Save Application\" : \"Create Application\",\n                undefined,\n                ActionButtonType.SUBMIT\n            ),\n            new FormActionButtonProps(\"Cancel\", this.props.onCancel)\n        ]\n    }\n\n    render() {\n        return (\n            <div className=\"ApplicationFormComponent\">\n                {/* <FormFactory {...this.formFactoryProps} /> */}\n                <FormFactory\n                    model={Application}\n                    initialInstance={new Application({\n                        ...this.props.application,\n                    })}\n                    enforcedInstanceData={{\n                        user_company: this.props.company.uuid\n                    }}\n        \n                    formFieldPropsList={this.formFieldPropsList}\n                    actionButtonPropsList={this.actionButtonPropsList}\n        \n                    createInstanceTriggerAction={this.props.createApplication}\n                    updateInstanceTriggerAction={this.props.updateApplication}\n\n                    onSubmitSuccess={this.props.onSubmitSuccess}\n                />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    applicationStore: store.application\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<Application>>) => {\n    return {\n        createApplication: (\n            applicationFormData: Application,\n            successCallback?: (jsonResponse: ISingleRestApiResponse<Application>) => void,\n            finalCallback?: Function,\n        ) =>\n            dispatch(\n                ApplicationActionCreators[CrudType.CREATE][\n                    RequestStatus.TRIGGERED\n                ].action({\n                    objectClassInstance: applicationFormData, \n                    successCallback: successCallback as ( (jsonResponse: JsonResponseType<Application>) => void ), \n                    finalCallback\n                })\n            )\n        ,\n        updateApplication: (\n            applicationFormData: Application,\n            successCallback?: (jsonResponse: ISingleRestApiResponse<Application>) => void,\n            finalCallback?: Function,\n        ) =>\n            dispatch(\n                ApplicationActionCreators[CrudType.UPDATE][\n                    RequestStatus.TRIGGERED\n                ].action({\n                    objectClassInstance: applicationFormData,\n                    successCallback: successCallback as ( (jsonResponse: JsonResponseType<Application>) => void ), \n                    finalCallback\n                })\n            )\n        ,\n    };\n};\n\nexport const ApplicationFormComponentContainer = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ApplicationFormComponent);\n","import React, { Component } from \"react\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Application } from \"../../data-model/application/application\";\nimport { IRootState } from \"../../state-management/types/root-types\";\nimport { IObjectAction, IObjectStore, JsonResponseType } from \"../../state-management/types/factory-types\";\nimport { Dispatch } from \"redux\";\n\n/** data model */\nimport { ApplicationStatus } from \"../../data-model/application-status/application-status\";\nimport { Company } from \"../../data-model/company/company\";\n\n/** rest api */\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\n\n/** Components */\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport EditIcon from '@material-ui/icons/Edit';\nimport GlobeIcon from '@material-ui/icons/Language';\nimport OpenInNewTabIcon from '@material-ui/icons/Launch';\nimport PlusIcon from '@material-ui/icons/Add';\nimport IconButton from '@material-ui/core/IconButton';\n\nimport { ApplicationStatusComponentContainer } from \"../application-status/application-status-component\";\nimport { ApplicationFormComponentContainer } from \"./application-form-component\";\nimport {\n    Headline6,\n} from '@material/react-typography';\n/** CKeditor */\n// import CKEditor from '@ckeditor/ckeditor5-react';\nimport CKEditor from '@shaungc/custom-ckeditor5-react';\n// import BalloonEditor from '@ckeditor/ckeditor5-build-balloon';\nimport BalloonEditor from '@shaungc/ckeditor5-custom-balloon';\n\nimport Skeleton from 'react-loading-skeleton';\n\nimport styles from './application-component.module.css';\nimport { ApplicationActionCreators } from \"../../state-management/action-creators/root-actions\";\n\n\n/** Types */\ninterface IApplicationComponentProps {\n    application?: Application;\n\n    disableApplicationActionButtons?: boolean\n\n    /** application form */\n    company?: Company;\n\n    isOnlyForm?: boolean;\n\n    applicationStatusList?: Array<ApplicationStatus>;\n\n    /** redux */\n    applicationStatusStore: IObjectStore<ApplicationStatus>;\n\n    deleteApplication: (\n        applicationToDelete: Application,\n        callback?: (jsonResponse: JsonResponseType<Application>) => void,\n    ) => void;\n}\n\ninterface IApplicationComponentState {\n    isFormOpened: boolean;\n}\n\n/** Main Class */\nexport class ApplicationComponent extends Component<\n    IApplicationComponentProps,\n    IApplicationComponentState\n    > {\n    state = {\n        isFormOpened: false\n    };\n\n    render() {\n        if (!this.state.isFormOpened && this.props.isOnlyForm) {  // company may still be in requesting state, when attempt to render form\n            return (\n                <Button\n                    disabled={!this.props.company}\n                    onClick={clickEvent => {\n                        this.setState({\n                            isFormOpened: true\n                        });\n                    }}\n                    unelevated\n                    icon={<PlusIcon />}\n                >\n                    Add Application\n                </Button>\n            )\n        }\n\n        return (\n            <div className={styles.applicationCard}>\n                <div className={styles.applicationCardContent}>\n                    {(!this.state.isFormOpened && !this.props.isOnlyForm) ? (\n                        this.renderApplicationDisplay(\n                            this.props.application,\n                            this.props.applicationStatusList\n                        )\n                    ) : (\n                            this.renderApplicationFormController()\n                        )}\n                </div>\n            </div>\n\n        )\n    }\n\n    renderApplicationFormController = () => {\n        return this.props.company && (\n            // application create or udpate must have company associate with it.\n            <div className=\"application-form-controller\">\n                <h2>{this.props.application ? \"Edit Application\" : \"New Application\"}</h2>\n                <ApplicationFormComponentContainer\n                    onCancel={event => {\n                        this.setState({\n                            isFormOpened: false\n                        });\n                    }}\n                    onSubmitSuccess={() =>\n                        this.setState({\n                            isFormOpened: false\n                        })\n                    }\n                    company={this.props.company}\n                    application={this.props.application}\n                />\n            </div>\n        );\n    };\n\n    renderApplicationDisplay = (\n        application?: Application,\n        applicationStatusList: Array<ApplicationStatus> = []\n    ) => {\n\n        return (\n            <div className=\"application-component-display\">\n                {/* application display view */}\n                <h2>{application ? application.position_title : <Skeleton />}\n                    {/* external link icon */}\n                    {\n                        application?.job_description_page ? (\n                            <IconButton\n                                disabled={application.job_description_page.url == \"#\"}\n                            >\n                                <OpenInNewTabIcon />\n                            </IconButton>\n                        ) : (\n                                <IconButton disabled>\n                                    <OpenInNewTabIcon />\n                                </IconButton>\n                            )\n                    }\n\n                    {/* external link icon */}\n                    {\n                        application?.job_source ? (\n                            <IconButton\n                                disabled={application.job_source.url == \"#\"}\n                            >\n                                <GlobeIcon />\n                            </IconButton>\n                        ) : (\n                                <IconButton disabled>\n                                    <GlobeIcon />\n                                </IconButton>\n                            )\n                    }\n\n                    {/* application actions */}\n                    {\n                        application ? (\n                            <IconButton\n                                disabled={this.props.disableApplicationActionButtons}\n                                onClick={() => {\n                                    this.setState({\n                                        isFormOpened: true // open form and close display\n                                    });\n                                }}\n                            >\n                                <EditIcon />\n                            </IconButton>\n                        ) : (\n                                <IconButton disabled>\n                                    <EditIcon />\n                                </IconButton>\n                            )\n                    }\n\n                    {\n                        application ? (\n                            <IconButton\n                                disabled={this.props.disableApplicationActionButtons}\n                                onClick={() =>\n                                    window.confirm(`Are you sure you want to delete ${application.position_title}?`) && this.props.deleteApplication(application)\n                                }\n                            >\n                                <DeleteIcon />\n                            </IconButton>\n                        ) : (\n                                <IconButton disabled>\n                                    <DeleteIcon />\n                                </IconButton>\n                            )\n                    }\n                </h2>\n\n                {/* general notes */}\n                <div className=\"applicationNotesRichText\">\n                    <h3>Quick Notes</h3>\n                    {application ? (application.notes ? (\n                        <CKEditor\n                            editor={BalloonEditor}\n                            disabled={true}\n                            data={application.notes}\n                        />\n\n                    ) : (\n                            <p>\n                                No notes yet.\n                            </p>\n                        )) : (\n                            <div>\n                                <div><Skeleton width=\"70vmin\" /></div>\n                                <div><Skeleton width=\"30vmin\" /></div>\n                                <div><Skeleton width=\"50vmin\" /></div>\n                            </div>\n                        )}\n                </div>\n\n                {/* job description notes */}\n                <div className=\"applicationNotesRichText\">\n                    <h3>Job Description Notes</h3>\n                    {application ? (application.job_description_notes ? (\n                        <CKEditor\n                            editor={BalloonEditor}\n                            disabled={true}\n                            data={application.job_description_notes}\n                        />\n\n                    ) : (\n                            <p>\n                                No job description notes yet.\n                            </p>\n                        )) : (\n                            <div>\n                                <div><Skeleton width=\"60vmin\" /></div>\n                                <div><Skeleton width=\"30vmin\" /></div>\n                                <div><Skeleton width=\"80vmin\" /></div>\n                            </div>\n                        )}\n                </div>\n\n                {/* application statuses list */}\n                <div className=\"statusContainer\">\n                    <Headline6>Status</Headline6>\n\n                    {/* application status form controller */}\n                    {\n                        <ApplicationStatusComponentContainer\n                            application={application}\n                            isOnlyForm\n                        />\n                    }\n\n                    {\n                        /* show skeleton to indicate application status is loading */\n                        (this.props.applicationStatusStore.requestStatus === RequestStatus.REQUESTING) && (\n                            <ApplicationStatusComponentContainer />\n                        )\n                    }\n\n                    {\n                        application && (\n                            applicationStatusList.map((applicationStatus, index) => {\n                                return (\n                                    <ApplicationStatusComponentContainer\n                                        key={index}\n                                        applicationStatus={applicationStatus}\n                                        application={application}\n                                    />\n                                );\n                            })\n                        )\n                    }\n                </div>\n            </div>\n        );\n    };\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    applicationStatusStore: store.applicationStatus\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<Application>>) => {\n    // actionName: (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {\n        deleteApplication: (\n            applicationToDelete: Application,\n            callback?: (jsonResponse: JsonResponseType<Application>) => void\n        ) =>\n            dispatch(\n                ApplicationActionCreators[CrudType.DELETE][\n                    RequestStatus.TRIGGERED\n                ].action({\n                    objectClassInstance: applicationToDelete, \n                    successCallback: callback\n                })\n            )\n    };\n};\n\nexport const ApplicationComponentController = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ApplicationComponent);\n","import React, { Component } from \"react\";\n\n/** Redux */\nimport { Company } from \"../../data-model/company/company\";\n\n/** Components */\nimport CKEditor from '@shaungc/custom-ckeditor5-react';\nimport BalloonEditor from '@shaungc/ckeditor5-custom-balloon';\n\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport EditIcon from '@material-ui/icons/Edit';\nimport OpenInNewTabIcon from '@material-ui/icons/Launch';\nimport IconButton from '@material-ui/core/IconButton';\n// mdc-chips\nimport { ChipSet, Chip } from '@material/react-chips';\nimport \"@material/react-chips/dist/chips.css\";\n\nimport Skeleton from 'react-loading-skeleton';\n\nimport styles from './company-component.module.css';\n\n\ninterface ICompanyComponentProps {\n    company: Company;\n    onDeleteIconClicked?: (event: any) => void\n    onEditIconClicked?: (event: any) => void\n    actionButtonsDisabled?: boolean\n}\n\nexport class CompanyComponent extends Component<ICompanyComponentProps> {\n    render() {\n        const company = this.props.company;\n\n        return (\n            <div className=\"CompanyComponent\">\n                <div className={styles.companyTitleContainer}>\n                    <h1>{company ? company.name : <Skeleton width=\"50vmin\" />}</h1>\n\n                    {company ? (\n                        company.labels.length && company.labels[0].text ? (\n                            <ChipSet>\n                                <Chip label={company.labels[0].text} />\n                            </ChipSet>\n                        ) : (\n                            <ChipSet>\n                                <Chip label=\"None\" />\n                            </ChipSet>\n                        )\n                    ) : (\n                        <Skeleton width=\"40px\" />\n                    )}\n\n                    {/* company link */}\n                    {\n                        company?.home_page ? (\n                            <IconButton\n                                disabled={company.home_page.url == \"#\"}\n                                target=\"_blank\"\n                                href={company.home_page.url && company.home_page.url.includes('//') ? company.home_page.url : `//${company.home_page.url}`}>\n                                <OpenInNewTabIcon />\n                            </IconButton>\n                        ) : (\n                                <IconButton disabled>\n                                    <OpenInNewTabIcon />\n                                </IconButton>\n                            )\n                    }\n\n                    {/* company actions */}\n                    {\n                        <div className=\"CompanyActionCreators\">\n                            <IconButton disabled={this.props.actionButtonsDisabled} onClick={this.props.onEditIconClicked}>\n                                <EditIcon />\n                            </IconButton>\n                            <IconButton disabled={this.props.actionButtonsDisabled} onClick={this.props.onDeleteIconClicked}>\n                                <DeleteIcon />\n                            </IconButton>\n                        </div>\n                    }\n                </div>\n                <div className={styles.companyTitleCaption}>{company?.hq_location ? company.hq_location.place_name : <Skeleton />}{company?.hq_location ? company.hq_location.full_address : <Skeleton />}</div>\n\n                {/* notes for company */}\n                <div>\n                    <h2>Quick Notes (Company Background, Culture, etc)</h2>\n                    {company ? (\n                        company.notes ? (\n                            <CKEditor\n                                editor={BalloonEditor}\n                                disabled={true}\n                                data={company.notes}\n                            />\n                        ) : <p>No company quick notes yet</p>\n                    ) : \n                    <>\n                        <div><Skeleton width=\"70vmin\" /></div>\n                        <div><Skeleton width=\"30vmin\" /></div>\n                    </>}\n                </div>\n            </div>\n        );\n    }\n}\n","import React, { useEffect } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { RouteComponentProps } from \"react-router\";\n\n/** Redux */\nimport { connect, useDispatch } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../state-management/types/root-types\";\n// rest api\nimport { CrudType, RequestStatus, RestApiService } from \"../../utils/rest-api\";\nimport {\n    IObjectStore,\n    IObjectAction,\n    JsonResponseType\n} from \"../../state-management/types/factory-types\";\nimport { Company, companyGroupTypes, companyGroups } from \"../../data-model/company/company\";\nimport { Application } from \"../../data-model/application/application\";\nimport { ApplicationStatus } from \"../../data-model/application-status/application-status\";\n\n/** Components */\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n// mdc-react input\nimport \"@material/react-text-field/dist/text-field.css\";\nimport { ApplicationComponentController } from \"../../components/application/application-component\";\nimport { CompanyComponent } from \"../../components/company/company-component\";\n\nimport styles from \"./user-com-app-page.module.css\";\nimport { IReference } from \"../../data-model/base-model\";\nimport { CompanyActionCreators, ApplicationActionCreators, GroupedCompanyActionCreators } from \"../../state-management/action-creators/root-actions\";\n\n\ninterface IUserComAppPageParams {\n    uuid: string;\n}\n\ninterface IUserComAppPageNoGroupCompanyProps\n    extends RouteComponentProps<IUserComAppPageParams> {\n    companyStore: IObjectStore<Company>;\n    applicationStore: IObjectStore<Application>;\n    applicationStatusStore: IObjectStore<ApplicationStatus>;\n\n    createApplication: (\n        applicationFormData: Application,\n        callback?: (jsonResponse: JsonResponseType<Application>) => void\n    ) => void;\n\n    deleteCompany: (companyToDelete: Company, callback?: (jsonResponse: JsonResponseType<Company>) => void) => void;\n    updateCompany: (companyToUpdate: Company, callback?: (jsonResponse: JsonResponseType<Company>) => void) => void;\n}\n\ntype IUserComAppPageProps = IUserComAppPageNoGroupCompanyProps & {\n    [key in companyGroupTypes]: IObjectStore<Company>\n}\n\nexport const UserComAppPage = (props: IUserComAppPageProps) => {\n    const companyUuid = props.match.params.uuid;\n    const company = props.companyStore.collection[companyUuid];\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        if (companyUuid) {\n            if ((!company || !company.modified_at) && props.companyStore.requestStatus !== RequestStatus.REQUESTING) {\n                dispatch(\n                    CompanyActionCreators[CrudType.READ][RequestStatus.TRIGGERED].action({\n                        absoluteUrl: `${RestApiService.state.apiBaseUrl}companies/${companyUuid}/`,\n                    })\n                )\n            }\n        }\n    }, [company, companyUuid])\n\n\n    const goBackToCompanyListPage = () => {\n        props.history.replace('/home/');\n    }\n\n    const onCompanyDelete = () => {\n        if (props.match.params.uuid) {\n            window.confirm(`Are you sure you want to delete company ${company.name}?`) && props.deleteCompany(company, goBackToCompanyListPage);\n            return;\n        }\n\n        console.error(\"Attempted to delete but company obj has no uuid\");\n    }\n\n    const onCompanyEdit = () => {\n        if (props.match.params.uuid) {\n            const company = props.companyStore.collection[props.match.params.uuid];\n            props.history.push(`/com-form/${company.uuid}/`);\n            return;\n        }\n\n        console.error(\"Attempted to edit but no company uuid provided\");\n    }\n\n    const renderPage = () => {\n        if (!props.match.params.uuid) {\n            return;\n        }\n\n        const company = props.companyStore.collection[props.match.params.uuid];\n        const applications = company ? company.applications as Array<IReference> : [];\n\n        return (\n            <div className={styles.UserCompanyPage}>\n                <Button\n                    onClick={_ => {\n                        props.history.length > 1 ? props.history.goBack()  : props.history.push('/home/');\n                    }}\n                >\n                    Back\n                </Button>\n\n                <CompanyComponent\n                    company={company}\n                    onDeleteIconClicked={onCompanyDelete}\n                    onEditIconClicked={onCompanyEdit}\n                    actionButtonsDisabled={props.companyStore.requestStatus === RequestStatus.REQUESTING}\n                />\n\n                <h2>Your Applications</h2>\n                {/* add application button - application form controller - always create form */}\n                <div>\n                    <ApplicationComponentController\n                        company={company}\n                        isOnlyForm\n                    />\n                </div>\n\n                {/* application list */}\n                {company ? applications.map((applicationRef, applicationsIndex) => {\n                    const application = props.applicationStore.collection[applicationRef as IReference];\n                    const applicationStatusList =  application ? ((application.statuses || []) as Array<IReference>).map((statusUuid) => props.applicationStatusStore.collection[statusUuid]) : undefined;\n                    return (\n                        <ApplicationComponentController\n                            key={applicationsIndex}\n                            application={application}\n                            company={company}\n                            applicationStatusList={applicationStatusList}\n                            disableApplicationActionButtons={props.applicationStore.requestStatus === RequestStatus.REQUESTING}\n                        />\n                    )\n                }) : (\n                    <ApplicationComponentController \n                        disableApplicationActionButtons\n                    />\n                )}\n\n            </div>\n        );\n    }\n\n    const renderController = () => {\n        if (!props.match.params.uuid) {\n            return <h1>Company uuid not specified</h1>\n        }\n\n        // if such company in store, just take it\n        if (props.match.params.uuid in props.companyStore.collection) {\n            return renderPage();\n        }\n\n        // need to really make sure company not found in database\n        // will not show \"not found\" till all requesting finish\n        let someStillRequesting: boolean = false;\n        for (const companyGroupText of companyGroups) {\n            if (\n                props[companyGroupText].requestStatus !== RequestStatus.SUCCESS ||\n                props[companyGroupText].requestStatus !== RequestStatus.FAILURE\n            ) {\n                someStillRequesting = true;\n                break;\n            }\n        }\n\n        if (\n            !someStillRequesting &&\n            !(props.match.params.uuid in props.companyStore.collection)\n        ) {\n            return <h1>Company not found</h1>\n        }\n\n        return renderPage();\n    }\n\n    // handle invalid company uuid given in url\n    return (\n        <div className=\"UserComAppPageContainer\">\n            {renderController()}\n        </div>\n    );\n}\n\nconst mapStateToProps = (store: IRootState) => {\n    return {\n        // prop: store.prop\n        companyStore: store.company,\n        ...(companyGroups.reduce((accumulate, companyGroupText) => ({\n            ...accumulate,\n            [companyGroupText]: store[companyGroupText]\n        }), {})),\n        applicationStore: store.application,\n        applicationStatusStore: store.applicationStatus\n    };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<Application | Company>>) => {\n    // actionName = (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {\n        createApplication: (\n            applicationFormData: Application,\n            callback?: (jsonResponse: JsonResponseType<Application>) => void\n        ) =>\n            dispatch(\n                ApplicationActionCreators[CrudType.CREATE][\n                    RequestStatus.TRIGGERED\n                ].action({\n                    objectClassInstance: applicationFormData,\n                    successCallback: callback\n                })\n            )\n        ,\n        deleteCompany: (companyToDelete: Company, successCallback?: (jsonResponse: JsonResponseType<Company>) => void) =>\n            dispatch(\n                CompanyActionCreators[CrudType.DELETE][RequestStatus.TRIGGERED].action({\n                    objectClassInstance: companyToDelete,\n                    successCallback\n                })\n            ),\n        updateCompany: (companyToUpdate: Company, successCallback?: (jsonResponse: JsonResponseType<Company>) => void) =>\n            dispatch(\n                CompanyActionCreators[CrudType.UPDATE][RequestStatus.TRIGGERED].action({\n                    objectClassInstance: companyToUpdate,\n                    successCallback\n                })\n            )\n    };\n};\n\nexport const UserComAppPageContainer = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(UserComAppPage)\n);\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { IUpdateAuthState } from \"../../state-management/types/auth-types\";\n\ninterface UserInfoProps {\n    auth: IUpdateAuthState;\n}\n\nexport class UserInfo extends Component<UserInfoProps, any> {\n    render() {\n        return (\n            <div>\n                <div>\n                    Logged in:{\" \"}\n                    {(this.props.auth.isLogin &&\n                        this.props.auth.isLogin.toString()) ||\n                        \"undefine\"}\n                </div>\n                <div>User Name: {this.props.auth.userName || \"(empty)\"}</div>\n            </div>\n        );\n    }\n}\n","import React from \"react\";\n\n/** Components */\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n\ninterface ILocalLogoutButtonProps {\n    onClick: () => void;\n    disabled?: boolean;\n}\n\nconst LocalLogoutButton = (props: ILocalLogoutButtonProps) => {\n    return (\n        <div className=\"UserAuthButton\">\n            <Button\n                onClick={props.onClick}\n                unelevated\n                icon={\n                    <MaterialIcon icon=\"account_circle\" />\n                }\n                disabled={props.disabled}\n            >\n                Local Logout\n                    </Button>\n        </div>\n    );\n}\n\nexport {\n    LocalLogoutButton\n};","import React, { Component, Dispatch } from \"react\";\n\n/** redux */\nimport { AnyAction } from \"redux\";\nimport { connect } from \"react-redux\";\nimport { IRootState } from \"../../state-management/types/root-types\";\nimport { IUpdateAuthState } from \"../../state-management/types/auth-types\";\nimport { RequestedLogoutAuth } from \"../../state-management/action-creators/auth-actions\";\n\n/** Routes & pages */\nimport { UserInfo } from \"../../components/user-info/user-info\";\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\n\n/** Components */\nimport \"./user-profile-page.css\"\n\nimport { SocialAuthButtonContainer } from \"../../components/login/social-auth-button\";\nimport { LocalLogoutButton } from \"../../components/login/local-logout-button\";\n\n\ninterface IUserProfilePageProps extends RouteComponentProps {\n    /** redux store state */\n    auth: IUpdateAuthState;\n\n    /** action dispatcher */\n    requestedLogoutAuth: () => void;\n}\n\nclass UserProfilePage extends Component<IUserProfilePageProps, any> {\n    localLogoutButton = () => {\n        this.props.requestedLogoutAuth();\n    }\n\n    render() {\n        return (\n            <div className=\"UserProfilePage\">\n                <h1>{this.props.auth.userName}'s profile</h1>\n                <div>\n                    isLocal = {JSON.stringify(this.props.auth.isLocal)}\n                </div>\n                <UserInfo auth={this.props.auth} />\n                {\n                    !this.props.auth.isLocal ? (\n                        <SocialAuthButtonContainer />\n                    ) : (\n                        <LocalLogoutButton \n                            onClick={this.localLogoutButton}\n                        />\n                    )\n                }\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => {\n    return {\n        auth: store.auth\n    };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>) => { \n    return {\n        requestedLogoutAuth: () => {\n            dispatch(\n                RequestedLogoutAuth()\n            );\n        },\n    }\n}\n\nexport const UserProfilePageContainer = withRouter(connect(mapStateToProps, mapDispatchToProps)(UserProfilePage));\n","import { createMuiTheme } from \"@material-ui/core/styles\";\nimport purple from \"@material-ui/core/colors/purple\";\nimport pink from \"@material-ui/core/colors/pink\";\n\nexport const lightTheme = createMuiTheme({\n    palette: {\n        primary: {\n            main: purple[800]\n        },\n        secondary: {\n            main: pink[500]\n        }\n    }\n});\n\nexport const darkTheme = createMuiTheme({\n    palette: {\n        type: 'dark'\n    }\n});","import React, { useCallback, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { IRootState } from \"../../state-management/types/root-types\";\n\nimport Button from '@material-ui/core/Button';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\n\nimport { labelTypes } from \"../../data-model/label\";\nimport { ApplyAllSelectCompanyChangesStatus, CancelAllSelectCompany, SetDestinationStatus } from \"../../state-management/action-creators/select-company-actions\";\nimport { RequestStatus } from \"../../utils/rest-api\";\n\nimport { MuiThemeProvider, makeStyles } from \"@material-ui/core/styles\";\nimport { darkTheme } from \"../themes\";\nimport Chip from \"@material-ui/core/Chip\";\nimport Typography from \"@material-ui/core/Typography\";\n\n\nconst  useCompanyDropdownListStyle = makeStyles({\n    chip: {\n        marginRight: '.5rem'\n    }\n})\n\nconst CompanyDropdownList = () => {\n    const classes = useCompanyDropdownListStyle();\n    const selectCompanyCollection = useSelector((state: IRootState) => state.selectCompany.selectCompanyCollection);\n    const [menuAnchorElement, setMenuAnchorElement] = useState<null | HTMLElement>(null);\n\n    const onMenuClick = useCallback((event: React.MouseEvent<HTMLButtonElement>) => {\n        setMenuAnchorElement(event.currentTarget);\n    }, [])\n\n    const closeMenu = useCallback(() => {\n        setMenuAnchorElement(null);\n    }, [])\n\n    return (\n        <>\n            <Button onClick={onMenuClick} size=\"small\">{selectCompanyCollection.size} companies</Button>\n            <Menu anchorEl={menuAnchorElement} keepMounted open={Boolean(menuAnchorElement)} onClose={closeMenu}>\n                {[...selectCompanyCollection].map(([uuid, company], index) => {\n                    // only support single label/status on company for now\n                    const label = company.labels.length ? company.labels[0].text : null;\n                    return (\n                        <MenuItem key={index} dense>\n                            {label ? (\n                                <Chip className={classes.chip} label={company.labels[0].text} size=\"small\" \n                                    color={label === labelTypes.INTERVIEWING ? 'secondary' :\n                                        label === labelTypes.TARGET ? 'primary' : 'default'}\n                                />\n                            ) : null}\n                            <Typography noWrap>\n                                {company.name} \n                            </Typography>\n                        </MenuItem>\n                    )\n                })}\n            </Menu>\n        </>\n    )\n}\n\ninterface ICompanyStatusDropdownListItem {\n    label: labelTypes;\n    onSelect: () => void\n}\n\nconst CompanyStatusDropdownListItem = ({ label, onSelect }: ICompanyStatusDropdownListItem) => {\n    const dispatch = useDispatch();\n    const stagedStatus = useSelector((state: IRootState) => state.selectCompany.destinationStatus);\n\n    const onDropdownListItemSelected = useCallback(() => {\n        dispatch(SetDestinationStatus(label));\n        onSelect && onSelect();\n    }, [dispatch, onSelect, label])\n\n    return (\n        <MenuItem selected={stagedStatus === label} onClick={onDropdownListItemSelected}>{label}</MenuItem>\n    )\n}\n\nexport const SelectCompanyMenu = () => {\n    const dispatch = useDispatch();\n    const selectCompanyApplyRequestStatus = useSelector((state: IRootState) => state.selectCompany.requestStatus);\n    const stagedStatus = useSelector((state: IRootState) => state.selectCompany.destinationStatus);\n\n    const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n\n    const onDropdownListClick = useCallback((event: React.MouseEvent<HTMLButtonElement>) => {\n        setAnchorEl(event.currentTarget);\n    }, [])\n\n    const closeDropdownList = useCallback(() => {\n        setAnchorEl(null);\n    }, [])\n\n    const onApply = useCallback(() => {\n        dispatch(ApplyAllSelectCompanyChangesStatus(stagedStatus));\n    }, [dispatch, stagedStatus])\n\n    const onCancel = useCallback(() => {\n        dispatch(CancelAllSelectCompany());\n    }, [dispatch]);\n    \n    \n    return (\n        <MuiThemeProvider theme={darkTheme}>\n            Move <CompanyDropdownList /> to \n\n            <Button aria-controls=\"simple-menu\" aria-haspopup=\"true\" onClick={onDropdownListClick}>\n                {stagedStatus} <ArrowDropDownIcon />\n            </Button>\n            <Menu\n                id=\"simple-menu\"\n                anchorEl={anchorEl}\n                keepMounted\n                open={Boolean(anchorEl)}\n                onClose={closeDropdownList}\n            >\n                {Object.values(labelTypes).map((label, index) => {\n                    return <div key={index}>\n                        <CompanyStatusDropdownListItem label={label} onSelect={closeDropdownList} />\n                    </div>\n                })}\n            </Menu>\n            <Button onClick={onApply} disabled={selectCompanyApplyRequestStatus === RequestStatus.REQUESTING} size=\"small\" variant=\"contained\">\n                Apply\n            </Button>\n            <Button onClick={onCancel} disabled={selectCompanyApplyRequestStatus === RequestStatus.REQUESTING} size=\"small\" variant=\"contained\">\n                Cancel\n            </Button>\n        </MuiThemeProvider>\n    )\n}","import React, { useCallback } from 'react';\n\nimport {\n    Link,\n    useLocation,\n    useHistory\n} from \"react-router-dom\";\n\n// font awesome\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faGithub } from '@fortawesome/free-brands-svg-icons'\n\n\n/** MDC React */\nimport TopAppBar, {\n    TopAppBarIcon,\n    TopAppBarRow,\n    TopAppBarSection,\n    TopAppBarTitle,\n} from '@material/react-top-app-bar';\nimport \"@material/react-top-app-bar/dist/top-app-bar.css\";\n\n\nimport '@material/react-material-icon/dist/material-icon.css';\nimport MaterialIcon from \"@material/react-material-icon\";\nimport { useSelector } from 'react-redux';\nimport { IRootState } from '../../state-management/types/root-types';\n\nimport styles from './app-top-bar.module.css';\nimport { SelectCompanyMenu } from './select-company-menu';\n\n\nexport const AppTopBar = () => {\n    const auth = useSelector((state: IRootState) => state.auth);\n    const location = useLocation();\n    const history = useHistory();\n\n    const goHome = useCallback(() => {\n        location.pathname === '/home/' ? history.replace('/home/') : history.push('/home/');\n    }, [history, location.pathname])\n\n    const selectCompanyCollection = useSelector((state: IRootState) => state.selectCompany.selectCompanyCollection);\n\n    return (<>\n        <TopAppBar>\n            <TopAppBarRow>\n                <TopAppBarSection align=\"start\">\n                    {/* <TopAppBarIcon>\n                        <MaterialIcon icon='menu' />\n                    </TopAppBarIcon> */}\n                    <TopAppBarTitle className={styles.topAppBarTitle} onClick={goHome}>Appl Tracky</TopAppBarTitle>\n                </TopAppBarSection>\n\n                {selectCompanyCollection.size ? (\n                    <TopAppBarSection align=\"start\">\n                        <SelectCompanyMenu />\n                    </TopAppBarSection>\n                ) : null}\n\n                <TopAppBarSection align='end' role='toolbar'>\n                    <TopAppBarIcon navIcon tabIndex={0}>\n                        <Link to=\"/home/\">\n                            <MaterialIcon\n                                key=\"itemHome\"\n                                icon=\"home\"\n                            />\n                        </Link>\n                    </TopAppBarIcon>\n                    <TopAppBarIcon navIcon tabIndex={1}>\n                        <a target=\"_blank\" href=\"//github.com/rivernews/appl-tracky-spa\">\n                            <FontAwesomeIcon icon={faGithub} size=\"lg\" />\n                        </a>\n                    </TopAppBarIcon>\n                    <TopAppBarIcon navIcon tabIndex={2}>\n                        <Link to=\"/profile/\">\n                            {!auth.avatarUrl ? (\n                                <MaterialIcon\n                                    key=\"itemProfile\"\n                                    icon=\"account_circle\"\n                                />\n                            ) : (\n                                    <img style={{\n                                        \"height\": \"100%\",\n                                        \"borderRadius\": \"50%\",\n                                    }} src={auth.avatarUrl} alt=\"user avatar\" />\n                                )}\n                        </Link>\n                    </TopAppBarIcon>\n                </TopAppBarSection>\n            </TopAppBarRow>\n        </TopAppBar>\n    </>)\n}","import React, { Component } from \"react\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { IRootState } from \"../../state-management/types/root-types\";\nimport { IUpdateAuthState } from \"../../state-management/types/auth-types\";\n\nimport { RequestStatus } from \"../../utils/rest-api\";\n\n/** Routing & Pages */\nimport {\n    Route,\n    Redirect,\n    Switch,\n    Link,\n    withRouter,\n    RouteComponentProps\n} from \"react-router-dom\";\nimport {\n    TopAppBarFixedAdjust,\n} from '@material/react-top-app-bar';\n\n// transition effects\nimport {\n    TransitionGroup,\n    CSSTransition\n} from \"react-transition-group\";\n\n// pages\nimport { LandingPageContainer } from \"../landing-page/landing-page\";\nimport { LocalLoginPageContainer } from \"../login-page/local-login-page\";\nimport { UserAppPageContainer } from \"../../pages/user-app-page/user-app-page\";\nimport { AddComPageContainer } from \"../../pages/add-com-page/add-com-page\";\nimport { UserComAppPageContainer } from \"../../pages/user-com-app-page/user-com-app-page\";\nimport { UserProfilePageContainer } from \"../../pages/user-profile-page/user-profile-page\";\n\nimport pageTransitionStyles from \"./page-routes-transition.module.css\";\n\nimport LinearProgress from '@material/react-linear-progress';\nimport '@material/react-linear-progress/dist/linear-progress.css';\n\nimport { AppTopBar } from \"../../components/app-top-bar/app-top-bar\";\n\n\nconst publicPageSet = new Set([\n    \"/\",\n    \"/local-login/\",\n    // add more public page routres here\n    // ...\n]);\n\n\ninterface IPageRoutesRouterParams {\n    next?: string;\n}\n\n\ninterface IPageRoutesProps extends RouteComponentProps<IPageRoutesRouterParams> {\n    auth: IUpdateAuthState;\n}\n\n\nclass PageRoutes extends Component<IPageRoutesProps> {\n    goInternal = (): string => {\n        if (!this.props.location.search) {\n            return \"/home/\";\n        }\n\n        const query = new URLSearchParams(this.props.location.search);\n        const nextUrl = query.get(\"next\");\n        if (!nextUrl) {\n            return \"\";\n        }\n\n        return nextUrl;\n    }\n\n    isCurrentPublicPage = () => {\n        return publicPageSet.has(this.props.location.pathname);\n    }\n\n    render() {\n        return (\n            <div>\n                {this.isCurrentPublicPage() ? (\n                    <div className=\"PublicRoutesContainer\">\n                        {/** direct user to internal page if logged in */\n                            this.props.auth.isLogin && <Redirect to={this.goInternal()} />}\n\n                        <Switch>\n                            <Route path=\"/\" exact component={LandingPageContainer} />\n                            <Route path=\"/local-login/\" exact component={LocalLoginPageContainer} />\n                            {\n                                /** add more public page routes here */\n                                // ...\n                            }\n                        </Switch>\n                    </div>\n                ) : (\n                        <div className=\"PrivateRoutesContainer\">\n                            {/** protect private routes, but let people come back the internal page they want to access after they login */\n                                !this.props.auth.isLogin && <Redirect to={`/?next=${this.props.location.pathname}`} />}\n\n                            <AppTopBar />\n\n                            <TopAppBarFixedAdjust>\n                                <LinearProgress\n                                    indeterminate={this.props.auth.requestStatus === RequestStatus.REQUESTING}\n\n                                    // mdc's progress bar bug workaround\n                                    // when press back button, avoid showing dotted buffer animation\n                                    buffer={1}\n                                    bufferingDots={true}\n                                />\n\n                                <TransitionGroup>\n                                    <CSSTransition\n                                        key={this.props.location.key}\n                                        classNames={{ ...pageTransitionStyles }}\n                                        timeout={500}\n                                    >\n                                        <Switch location={this.props.location}>\n                                            <Route\n                                                path=\"/home/\"\n                                                component={UserAppPageContainer}\n                                            />\n                                            <Route\n                                                path=\"/com-form/:uuid?/\"\n                                                component={AddComPageContainer}\n                                            />\n                                            <Route\n                                                path=\"/com-app/:uuid/\"\n                                                component={UserComAppPageContainer}\n                                            />\n                                            <Route\n                                                path=\"/com-app/\"\n                                                component={UserComAppPageContainer}\n                                            />\n                                            <Route\n                                                path=\"/profile/\"\n                                                component={UserProfilePageContainer}\n                                            />\n                                            {/** add more private page routes here */}\n                                        </Switch>\n                                    </CSSTransition>\n                                </TransitionGroup>\n                            </TopAppBarFixedAdjust>\n                        </div>\n                    )}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    auth: store.auth\n});\n\nconst mapDispatchToProps = {};\n\nexport const PageRoutesContainer = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(PageRoutes)\n);\n","/** React core */\nimport React, { Component, Dispatch } from \"react\";\n\n/** Redux */\nimport { AnyAction } from \"redux\";\nimport { connect } from \"react-redux\";\nimport { IRootState } from \"./state-management/types/root-types\";\nimport { RequestedLoginAuth } from \"./state-management/action-creators/auth-actions\";\nimport { RequestedLoginMode } from \"./state-management/types/auth-types\";\n\n/** Routes & pages */\nimport { PageRoutesContainer } from \"./pages/page-routes/page-routes\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport { MuiThemeProvider } from \"@material-ui/core/styles\";\n\n/** Locals */\nimport \"./App.css\";\nimport \"./ckeditor.css\";\nimport { lightTheme } from \"./components/themes\";\n\n\ninterface IAppProps {\n    retrieveLoginAuth: () => void;\n}\n\nclass App extends Component<IAppProps> {\n    componentDidMount() {\n        this.props.retrieveLoginAuth();\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <CssBaseline />\n                <MuiThemeProvider theme={lightTheme}>\n                    <PageRoutesContainer />\n                </MuiThemeProvider>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => {\n    return {\n    };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>) => { \n    return {\n        retrieveLoginAuth: () => {\n            dispatch(\n                RequestedLoginAuth(RequestedLoginMode.PREFILL)\n            );\n        },\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          process.env.NODE_ENV === 'development' && console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              process.env.NODE_ENV === 'development' && console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              process.env.NODE_ENV === 'development' && console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      process.env.NODE_ENV === 'development' && console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { Reducer, Action } from 'redux';\n\nimport { \n    /** store */\n    IUpdateAuthState, \n    /** action */\n    AuthActionNames, TAuthActions, AuthActionNamesValue \n} from \"../types/auth-types\";\n\nimport { RequestStatus } from \"../../utils/rest-api\";\n\nconst initialAuthState: IUpdateAuthState = {\n    requestStatus: RequestStatus.SUCCESS, // initial status just set to SUCCESS\n    isLogin: false,\n    isLocal: false,\n    socialAuthToken: \"\",\n    apiToken: \"\",\n    userName: \"\",\n    expireDateTime: \"\",\n    avatarUrl: \"\",\n}\n\n// authStore will be stored as a sub-entry in global store; this is defined in ./store/types.ts\nexport const authReducer: Reducer<IUpdateAuthState> = (authStore = initialAuthState, action: Action)  => {\n    // add reducer for new actions here\n    // ...\n\n    if (!(AuthActionNamesValue.includes(action.type))) {\n        return authStore;\n    }\n\n    const authAction = action as TAuthActions;\n\n    if (authAction.type === AuthActionNames.SUCCESS_AUTH) {\n        localStorage.setItem(process.env.NODE_ENV === 'development' ? 'dev__applyTracky__authState' : 'applyTracky__authState', JSON.stringify(authAction.payload));\n    }\n\n    return {\n        ...authStore,\n        ...authAction.payload\n    }\n}","import { IObjectStore, IObjectAction, TObject, IObjectList, IObjectBase } from \"../types/factory-types\";\n\nimport { RequestStatus, CrudType } from \"../../utils/rest-api\";\n\nimport { Action, Reducer } from \"redux\";\n\nimport { omit } from \"lodash\";\n\n\nexport const RestApiReducerFactory = <ObjectRestApiSchema extends IObjectBase>(\n    objectName: string,\n): Reducer<IObjectStore<ObjectRestApiSchema>> => {\n    const initialState: IObjectStore<ObjectRestApiSchema> = {\n        collection: {},\n        requestStatus: RequestStatus.SUCCESS\n    };\n\n    const storeReducer: Reducer<IObjectStore<ObjectRestApiSchema>> = (\n        objectStore: IObjectStore<ObjectRestApiSchema> = initialState,\n        action: Action\n    ): IObjectStore<ObjectRestApiSchema> => {\n\n        const objectAction = action as IObjectAction<ObjectRestApiSchema>;\n\n        if (\n            !(objectAction && objectAction.payload && objectAction.payload.requestStatus) ||\n            !(action.type.split(\"_\")[2] === objectName.toUpperCase())\n        ) {\n            return objectStore;\n        }\n\n        // async success\n        if (objectAction.payload.requestStatus === RequestStatus.SUCCESS) {\n            // CREATE\n            // or READ (single)\n            if (objectAction.crudType === CrudType.CREATE || objectAction.crudType === CrudType.READ) {\n                let newObject = <TObject<ObjectRestApiSchema>>objectAction.payload.formData;\n\n                return {\n                    ...objectStore,\n                    collection: {\n                        ...objectStore.collection,\n                        [newObject.uuid]: newObject\n                    },\n                    requestStatus: objectAction.payload.requestStatus\n                };\n            }\n            // BATCH CREATE\n            else if (objectAction.crudType === CrudType.BATCHCREATE) {\n                const newObjects = <Array<TObject<ObjectRestApiSchema>>>objectAction.payload.formData;\n                // turn into a collection so we can spread\n                const newObjectsCollection = newObjects.reduce((collection, object) => {\n                    collection[object.uuid] = object;\n                    return collection;\n                }, <IObjectList<ObjectRestApiSchema>>{});\n\n                return {\n                    ...objectStore,\n                    collection: {\n                        ...objectStore.collection,\n                        ...newObjectsCollection\n                    },\n                    requestStatus: objectAction.payload.requestStatus\n                };\n            }\n\n            // LIST\n            else if (objectAction.crudType === CrudType.LIST) {\n                const resObjects = <Array<TObject<ObjectRestApiSchema>>>objectAction.payload.formData;\n                // turn into a collection so we can spread\n                const newObjectsCollection: IObjectList<ObjectRestApiSchema> = {};\n                for (let object of resObjects) {\n                    newObjectsCollection[object.uuid] = object;\n                }\n\n                const afterStore: IObjectStore<ObjectRestApiSchema> = {\n                    ...objectStore,\n                    collection: {\n                        ...objectStore.collection,\n                        ...newObjectsCollection\n                    },\n                    requestStatus: objectAction.payload.requestStatus,\n                    graphqlEndCursor: objectAction.graphqlEndCursor,\n                };\n\n                return afterStore;\n            }\n\n            // UPDATE\n            else if (objectAction.crudType === CrudType.UPDATE) {\n                let updatedObject = <TObject<ObjectRestApiSchema>>objectAction.payload.formData;\n\n                return {\n                    ...objectStore,\n                    collection: {\n                        ...objectStore.collection,\n                        // support partial update - only update attributes included by updatedObject\n                        [updatedObject.uuid]: {\n                            ...objectStore.collection[updatedObject.uuid],\n                            ...updatedObject\n                        }\n                    },\n                    requestStatus: objectAction.payload.requestStatus\n                };\n            }\n            // BATCH UPDATE\n            else if (objectAction.crudType === CrudType.BATCHUPDATE) {\n                let updatedObjects = <Array<TObject<ObjectRestApiSchema>>>objectAction.payload.formData;\n                // turn into a collection so we can spread\n                const updatedObjectsCollection = updatedObjects.reduce((collection, updatedObject) => {\n                    // support partial update - only update attributes included by updatedObject\n                    collection[updatedObject.uuid] = {\n                        ...objectStore.collection[updatedObject.uuid],\n                        ...updatedObject\n                    };\n                    return collection;\n                }, <IObjectList<ObjectRestApiSchema>>{});\n\n                return {\n                    ...objectStore,\n                    collection: {\n                        ...objectStore.collection,\n                        ...updatedObjectsCollection\n                    },\n                    requestStatus: objectAction.payload.requestStatus\n                };\n            }\n\n            // DELETE & BATCH DELETE\n            else if (objectAction.crudType === CrudType.DELETE) {\n                if (objectAction.clearAll) {\n                    return initialState;\n                }\n\n                let targetDeleteUuids: Array<string> = [];\n                if (objectAction.triggerFormData) {\n                    if (!Array.isArray(objectAction.triggerFormData) && typeof objectAction.triggerFormData === 'object') {\n                        const targetDeleteObject = <TObject<ObjectRestApiSchema>>objectAction.triggerFormData;\n                        targetDeleteUuids.push(targetDeleteObject.uuid);\n                    }\n                    else if (objectAction.triggerFormData.length) {\n                        if (typeof (objectAction.triggerFormData[0]) === \"string\") {\n                            targetDeleteUuids = objectAction.triggerFormData as Array<string>;\n                        }\n                        else {\n                            const targetDeleteObjectList = <Array<TObject<ObjectRestApiSchema>>>objectAction.triggerFormData;\n    \n                            targetDeleteUuids = targetDeleteObjectList.map(targetDeleteObject => targetDeleteObject.uuid);\n                        }\n                    }\n                }\n\n                const afterStore = {\n                    ...objectStore,\n                    collection: omit(objectStore.collection, targetDeleteUuids),\n                    requestStatus: objectAction.payload.requestStatus\n                }\n\n                return afterStore;\n            }\n        }\n\n        // async trigger\n        else if (objectAction.payload.requestStatus === RequestStatus.TRIGGERED) {\n            return {\n                ...objectStore,\n                requestStatus: objectAction.payload.requestStatus\n            };\n        }\n\n        // async requesting & failure\n        else {\n            return {\n                ...objectStore,\n                ...objectAction.payload\n            };\n        }\n\n        // no effect\n        return {\n            ...objectStore\n        };\n    };\n\n    return storeReducer;\n}","import { Reducer, Action } from \"redux\";\nimport { IReference } from \"../../data-model/base-model\";\nimport { Company } from \"../../data-model/company/company\";\nimport { labelTypes } from \"../../data-model/label\";\nimport { RequestStatus } from \"../../utils/rest-api\";\nimport { ISelectCompanyState, SelectCompanyActionNames, TSelectCompanyActions } from \"../types/select-company-types\";\n\nconst initialSelectCompanyState: ISelectCompanyState = {\n    selectCompanyCollection: new Map<IReference, Company>(),\n    destinationStatus: labelTypes.TARGET,\n    requestStatus: RequestStatus.SUCCESS\n}\n\nexport const selectCompanyReducer: Reducer<ISelectCompanyState> = (state = initialSelectCompanyState, action: Action) => {\n    const selectCompanyAction = action as TSelectCompanyActions;\n    switch (selectCompanyAction.type) {\n        case SelectCompanyActionNames.CANCEL_ALL:\n            return initialSelectCompanyState;\n        \n        case SelectCompanyActionNames.ADD_SELECT_COMPANY:\n            const isFound = state.selectCompanyCollection.has(selectCompanyAction.company.uuid);\n            if (isFound) {\n                return state;\n            } else {\n                return {\n                    ...state,\n                    selectCompanyCollection: new Map([...state.selectCompanyCollection, [selectCompanyAction.company.uuid, selectCompanyAction.company]])\n                }\n            }\n        \n        case SelectCompanyActionNames.REMOVE_SELECT_COMPANY:\n            return {\n                ...state,\n                selectCompanyCollection: new Map(\n                    [...state.selectCompanyCollection]\n                        .filter(([uuid,]) => uuid !== selectCompanyAction.companyId)\n                )\n            }\n        \n        case SelectCompanyActionNames.SET_DESTINATION_STATUS:\n            return {\n                ...state,\n                destinationStatus: selectCompanyAction.status\n            }\n        \n        case SelectCompanyActionNames.SET_REQUEST_STATUS:\n            // if request success, also reset the state\n            if (selectCompanyAction.requestStatus === RequestStatus.SUCCESS) {\n                return initialSelectCompanyState;\n            }\n            return {\n                ...state,\n                requestStatus: selectCompanyAction.requestStatus\n            }\n    }\n\n    return state;\n}","import { Reducer, Action } from \"redux\";\nimport { TabNames } from \"../../data-model/label\";\nimport { IUserAppPageState, TUserAppPageActions, UserAppPageActionNames } from \"../types/user-app-page-types\";\n\nconst initialUserAppPageState: IUserAppPageState = {\n    activeTabIndex: TabNames.INTERVIEWING\n}\n\nexport const userAppPageReducer: Reducer<IUserAppPageState> = (state = initialUserAppPageState, action: Action) => {\n    const userAppPageAction = action as TUserAppPageActions;\n    switch (userAppPageAction.type) {\n        case UserAppPageActionNames.SET_ACTIVE_TAB:\n            return {\n                activeTabIndex: userAppPageAction.activeTabIndex\n            };\n    }\n\n    // make sure to return the initial state in case action doesn't belong to current reducer\n    return state;\n}\n","/** redux */\nimport { Reducer, Action } from \"redux\";\nimport { connectRouter, LocationChangeAction } from 'connected-react-router';\nimport { authReducer } from \"./auth-reducers\";\nimport { IRootState } from \"../types/root-types\";\nimport { IObjectStore } from \"../types/factory-types\";\nimport { RootActionNames } from \"../action-creators/root-actions\";\nimport { RestApiReducerFactory } from \"./reducer-factory\";\nimport { ApplicationStatus } from \"../../data-model/application-status/application-status\";\nimport { Application } from \"../../data-model/application/application\";\n// rest api\nimport { companyGroupTypes, Company, companyGroups } from \"../../data-model/company/company\";\n\n/** router */\nimport { History } from \"history\";\nimport { selectCompanyReducer } from \"./select-company-reducers\";\nimport { userAppPageReducer } from \"./user-app-page-reducers\";\n\n\n// create reducer for each data model\n\nexport const CompanyReducer = RestApiReducerFactory<Company>(\"companies\");\n\nexport const GroupCompanyReducer = companyGroups.reduce((accumulated, companyGroupText) => {\n    return {\n        ...accumulated,\n        [companyGroupText]: RestApiReducerFactory(companyGroupText)\n    }\n}, {}) as { [key in companyGroupTypes]: Reducer<IObjectStore<Company>> };\n\nexport const SearchCompanyReducer = RestApiReducerFactory<Company>(\"searchCompany\");\n\nexport const ApplicationReducer = RestApiReducerFactory<Application>(\"applications\");\n\nexport const ApplicationStatusReducer = RestApiReducerFactory<ApplicationStatus>(\"application-statuses\");\n\n\n// root reducer with router state\n\nexport const createRootReducer = (history: History<any>): Reducer<IRootState> => {\n    // return combineReducers<IRootState>({\n    //     router: connectRouter(history),\n    \n    //     // add more reducers here\n    //     auth: authReducer,\n    //     company: CompanyReducer,\n    //     address: AddressReducer,\n    //     application: ApplicationReducer,\n    //     // ...\n    // })\n\n    const rootReducer: Reducer<IRootState> = (rootState: IRootState | undefined, action: Action): IRootState  => {\n\n        let rootStateChecked: {\n            [storeName: string]: any\n        } = {};\n        if (!rootState) {\n            rootStateChecked.router = undefined;\n            rootStateChecked.auth = undefined;\n\n            rootStateChecked.company = undefined;\n            companyGroups.forEach((companyGroupText) => {\n                rootStateChecked[companyGroupText] = undefined;\n            });\n            rootStateChecked.searchCompany = undefined\n\n            rootStateChecked.application = undefined;\n            rootStateChecked.applicationStatus = undefined;\n\n            rootStateChecked.selectCompany = undefined;\n            rootStateChecked.userAppPage = undefined;\n            // add initial state for new sub-store here\n            // ...\n        } else if (action.type === RootActionNames.ResetAllStore) {\n            // exclude all store instead of the router's\n            rootStateChecked = {\n                router: rootState.router\n            }\n        } else {\n            rootStateChecked = rootState;\n        }\n\n        const afterStore = { \n            ...rootState,\n            router: connectRouter(history)(rootStateChecked.router, action as LocationChangeAction),\n            auth: authReducer(rootStateChecked.auth, action),\n\n            company: CompanyReducer(rootStateChecked.company, action),\n            \n            // add grouped company reducers\n            ...(companyGroups.reduce((accumulate, companyGroupText) => {\n                const Reducer = GroupCompanyReducer[companyGroupText];\n                return ({\n                    ...accumulate,\n                    [companyGroupText]: Reducer(rootStateChecked[companyGroupText], action)\n                })\n            }, {}) as {\n                [key in companyGroupTypes]: IObjectStore<Company>\n            }),\n\n            searchCompany: SearchCompanyReducer(rootStateChecked.searchCompany, action),\n\n            application: ApplicationReducer(rootStateChecked.application, action),\n            applicationStatus: ApplicationStatusReducer(rootStateChecked.applicationStatus, action),\n\n            selectCompany: selectCompanyReducer(rootStateChecked.selectCompany, action),\n            userAppPage: userAppPageReducer(rootStateChecked.userAppPage, action),\n            \n            // add new reducer here\n            // ...\n        }\n        \n        return afterStore;\n    }\n\n    return rootReducer;\n}","/** redux */\nimport {\n    AuthActionNames,\n    IRequestedLoginAuthAction,\n    IRequestedLogoutAuthAction\n} from \"../types/auth-types\";\nimport {\n    SuccessLoginAuth,\n    SuccessLogoutAuth,\n    FailureAuth\n} from \"../action-creators/auth-actions\";\nimport { resetAllStoreAction, GroupedCompanyActionCreators } from \"../action-creators/root-actions\";\nimport { labelTypesMapToCompanyGroupTypes } from \"../../data-model/company/company\";\nimport { labelTypes } from \"../../data-model/label\";\n// redux-saga\nimport { takeEvery, call, put } from \"redux-saga/effects\";\n\n/** api */\nimport { AuthenticationService } from \"../../utils/authentication\";\nimport { CrudType, RequestStatus, RestApiService } from \"../../utils/rest-api\";\n\n\nfunction* authLoginSagaHandler(\n    requestedLoginAuthAction: IRequestedLoginAuthAction\n) {\n    // RequestAuth action triggered & injecting side effects here...\n    \n    const {\n        loginMode, \n        params={},\n        onCompleteCallback,\n    } = requestedLoginAuthAction;\n    \n    try {\n        // TODO: define interface typing for api response\n\n        const jsonResponse = yield call(AuthenticationService.serverLogin, loginMode, params);\n\n        // In prefill login case, if cannot restore/refresh login session\n        if (!jsonResponse.token) {\n            yield put(SuccessLogoutAuth());\n            return;\n        }\n\n        yield put(SuccessLoginAuth(\n            jsonResponse.email, \"\", \n            jsonResponse.token, \n            jsonResponse.avatar_url,\n            jsonResponse.isLocal\n        ));\n    } catch (error) {\n        console.warn(`auth saga error: ${JSON.stringify(error)}`);\n        yield put(FailureAuth(error));\n    }\n\n    onCompleteCallback && onCompleteCallback();\n}\n\nexport function* authLoginSaga() {\n    yield takeEvery(AuthActionNames.REQUESTED_LOGIN_AUTH, authLoginSagaHandler);\n}\n\nfunction* authLogoutSagaHandler(\n    requestedLogoutAuthAction: IRequestedLogoutAuthAction\n) {\n    // RequestAuth action triggered & injecting side effects here...\n    try {\n        yield call(AuthenticationService.serverLogout);\n\n        // clear all store\n    } catch (error) {\n        yield put(FailureAuth(error));\n        return;\n    }\n\n    yield put(SuccessLogoutAuth());\n    // yield put(push(\"/\"));\n\n    // clear all redux store\n    yield put(resetAllStoreAction());\n}\n\nexport function* authLogoutSaga() {\n    yield takeEvery(\n        AuthActionNames.REQUESTED_LOGOUT_AUTH,\n        authLogoutSagaHandler\n    );\n}\n\n// add new saga handler here && a `takeEvery` saga.\n// ...","import { ApolloClient, ApolloLink, concat, createHttpLink, gql, InMemoryCache } from \"@apollo/client\"\nimport { Company } from \"../data-model/company/company\";\nimport { labelTypes } from \"../data-model/label\";\nimport { AuthenticationService } from \"./authentication\"\n\ntype IGraphQLQueryResult<Schema> = {\n    // TODO: add single response typing\n    [key in \"companies\"]: IGraphQLQueryListResponse<Schema>;\n}\n\nexport interface IGraphQLQueryListResponse<Schema> {\n    edges: Array<{ node: Schema }>;\n    count: number;\n    totalCount: number;\n    pageInfo: {\n        endCursor: string\n    }\n}\n\ninterface IPaginatedQueryArgs {\n    after?: string;\n}\n\ninterface ICompaniesQueryArgs extends IPaginatedQueryArgs {\n    labels__text?: labelTypes;\n    labels__isnull?: boolean;\n    name__icontains?: string;\n}\n\nexport type IGraphQLQueryArgs = ICompaniesQueryArgs;\n\nexport class GraphQLApi {\n    state = {\n        apiBaseUrl: (process.env.NODE_ENV === 'development') ? \n        `http://localhost:8000/graphql/`\n        :\n        `https://appl-tracky.api.shaungc.com/graphql/`\n    }\n\n    // customizing apollo's fetch logic\n    // https://www.apollographql.com/docs/react/networking/advanced-http-networking/#customizing-request-logic\n    apolloClient = new ApolloClient({\n        link: concat(\n            new ApolloLink((operation, forward) => {\n                operation.setContext({\n                    credentials: AuthenticationService.apiCallToken ? \"include\" : \"omit\",\n                    headers: {\n                        Authorization: AuthenticationService.apiCallToken\n                            ? `JWT ${AuthenticationService.apiCallToken}`\n                            : ``,\n                    },\n                });\n    \n                return forward(operation);\n            }),\n            createHttpLink({\n                uri: this.state.apiBaseUrl,\n            })\n        ),\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        cache: new InMemoryCache(),\n        defaultOptions: {\n            query: {\n                fetchPolicy: 'no-cache'\n            }\n        }\n    })\n\n    fetchDashboardCompanyData = ({\n        after = '',\n        ...args\n    }: ICompaniesQueryArgs) => {\n        const signatureArgs = (Object.keys(args) as Array<keyof typeof args>).reduce((acc, cur) => {\n            const value = args[cur];\n            switch (typeof value) {\n                case 'string':\n                    return `${acc}, ${cur}: \"${value}\"`;\n                default:\n                    return `${acc}, ${cur}: ${value}`;\n            }\n        }, '');\n\n        return this.apolloClient.query<IGraphQLQueryResult<Company>>({\n            query: gql`\n                query {\n                    companies(first:20, order_by: \"-modified_at\", after: \"${after}\" ${signatureArgs}) {\n                        totalCount\n                        count\n                        pageInfo {\n                            startCursor\n                            endCursor\n                        }\n                        edges {\n                            node {\n                                uuid\n                                name\n                                labels {\n                                    text\n                                }\n                                applications {\n                                    uuid\n                                    position_title\n                                }\n                            }\n                        }\n                    }\n                }\n            `,\n        }).then((res) => {\n            const { edges, ...normalizedResponse} = res.data.companies;\n\n            return {\n                ...normalizedResponse,\n                results: edges.map(edge => edge.node)\n            };\n        })\n    }\n}\n\nexport const GraphQLApiService = new GraphQLApi();\n","import { IObjectBase, IObjectRestApiReduxFactoryActions, IObjectAction, ISuccessSagaHandlerArgs, ISagaFactoryOptions, TObject } from \"../types/factory-types\";\n\nimport { CrudType, RequestStatus, IsSingleRestApiResponseTypeGuard, CrudKeywords, IRequestParams, RestApiService, CrudMapToRest } from \"../../utils/rest-api\";\nimport { SagaIterator } from \"redux-saga\";\nimport { actionChannel, take, call, put } from \"redux-saga/effects\";\nimport { normalize } from \"normalizr\";\nimport { GraphQLApiService } from \"../../utils/graphql-api\";\nimport { companyGroups, companyGroupTypes } from \"../../data-model/company/company\";\n\n\nexport const RestApiSagaFactory = <ObjectRestApiSchema extends IObjectBase>(\n    /** should have uuid */ objectName: string,\n    ObjectRestApiActions: IObjectRestApiReduxFactoryActions<ObjectRestApiSchema>,\n    sagaFactoryOptions: ISagaFactoryOptions<ObjectRestApiSchema>\n): Array<() => SagaIterator> => {\n    \n    const sagas = CrudKeywords.map((crudKeyword) => {\n\n        const sagaHandler = function* (\n            triggerAction: IObjectAction<ObjectRestApiSchema>\n        ) {\n            let formData = triggerAction.payload.formData as ObjectRestApiSchema | Array<ObjectRestApiSchema> | undefined;\n            const { absoluteUrl, graphqlFunctionName, graphqlArgs } = triggerAction;\n\n            yield put(\n                ObjectRestApiActions[crudKeyword][\n                    RequestStatus.REQUESTING\n                ].action()\n            );\n\n            try {\n                // api call\n                \n                // note that yield will always return `any`\n                let jsonResponse = !(graphqlFunctionName) ? \n                    (yield call(\n                        <(params: IRequestParams<ObjectRestApiSchema>) => void>RestApiService[CrudMapToRest(crudKeyword)],\n                        {\n                            data: formData,\n                            objectName,\n                            absoluteUrl,\n                        }\n                    )) :\n                    (yield call(\n                        GraphQLApiService.fetchDashboardCompanyData,\n                        {\n                            ...graphqlArgs\n                        }\n                    ));\n\n                // TODO: currently `status` not available, how to better handle error?\n                // if (jsonResponse.status && jsonResponse.status >= 400) {\n                //     console.error(\"Server error, see message in res.\");\n                //     throw new Error(\"Server error, see message in res.\");\n                // }\n\n                // normalize primary object data (for relational object normalizing, will do it later) if  normalize manifest speciified\n                let normalizeData: undefined | Array<ObjectRestApiSchema> = undefined;\n                let relationalNormalizeData: undefined | {\n                    [relationalEntityKey: string]: Array<ObjectRestApiSchema>\n                } = undefined;\n\n                if (sagaFactoryOptions.normalizeManifest) {\n\n                    const normalizeObjectEntityKey = sagaFactoryOptions.normalizeManifest.objectEntityKey;\n\n                    // collect data from meaningful source\n                    let dataSource = undefined;\n                    if (crudKeyword === CrudType.DELETE) {\n                        dataSource = formData;\n                    }\n                    else if (IsSingleRestApiResponseTypeGuard(jsonResponse)) {\n                        dataSource = jsonResponse as ObjectRestApiSchema;\n                    }\n                    else {\n                        dataSource = jsonResponse.results as Array<ObjectRestApiSchema>;\n                    }\n\n                    // normalize all data once for all\n                    const normalizeDataSourceSchema = Array.isArray(dataSource) ? (sagaFactoryOptions.normalizeManifest.listSchema) : (sagaFactoryOptions.normalizeManifest.schema);\n                    const normalizeDataSource = normalize(dataSource, normalizeDataSourceSchema);\n\n                    // place noramlized data to variables to fit in existing framework\n                    normalizeData = Object.values(normalizeDataSource.entities[normalizeObjectEntityKey] || {});\n                    if (crudKeyword === CrudType.DELETE) {\n                        formData = normalizeData.length === 1 ? normalizeData[0] : normalizeData;\n                    }\n                    else if (IsSingleRestApiResponseTypeGuard(jsonResponse)) {\n                        jsonResponse = normalizeData[0];\n                    }\n                    else {\n                        jsonResponse.results = normalizeData;\n                    }\n\n                    // prepare relational data for later use\n                    relationalNormalizeData = Object.keys(sagaFactoryOptions.normalizeManifest.relationalEntityReduxActionsMap).filter(key => normalizeDataSource.entities.hasOwnProperty(key)).reduce((accumulate, relationalEntityKey) => ({\n                        ...accumulate,\n                        [relationalEntityKey]: Object.values(normalizeDataSource.entities[relationalEntityKey])\n                    }), {});\n                }\n\n                // handle success state --\n\n                // dispatch relational object actions, if normalize is needed (normalize manifest specified)\n                if (sagaFactoryOptions.normalizeManifest && relationalNormalizeData) {\n\n                    switch (crudKeyword) {\n                        case CrudType.UPDATE:\n                            // relational object will do nothing when primary action is UPDATE - UPDATE is purely on primary object\n                            break\n\n                        case CrudType.LIST:\n                        // relational objects should also apply LIST\n                        case CrudType.CREATE:\n                        case CrudType.READ:\n                            // when there's a fresh new object created, if there're relational objects present then will also apply LIST to them\n                            for (const relationalEntityKey in sagaFactoryOptions.normalizeManifest.relationalEntityReduxActionsMap) {\n                                if (\n                                    // if no embed data, normalizr will not include it in `entities`\n                                    // so don't compare length; just compare its key existence\n                                    !relationalNormalizeData[relationalEntityKey]\n                                ) {\n                                    // process.env.NODE_ENV === 'development' && console.log('skip for relational key', relationalEntityKey, relationalNormalizeData)\n                                    continue;\n                                }\n\n                                // normalizer will put related objects as Arrays in `relationalNormalizeData`,\n                                // even if the relational field is not an array field on parent object.\n                                // since we just need to store all related objects into their redux store bucket,\n                                // we use action of `CrudType.LIST` to push them all in redux, and don't care about single/array\n                                // we treat objects of all related types as array here\n                                const dispatchResponseData = {\n                                        results: relationalNormalizeData[relationalEntityKey]\n                                    };\n                                \n                                const relationalActions = sagaFactoryOptions.normalizeManifest.relationalEntityReduxActionsMap[relationalEntityKey] as IObjectRestApiReduxFactoryActions<IObjectBase>;\n\n                                yield put(\n                                    relationalActions[CrudType.LIST][RequestStatus.SUCCESS].action({\n                                        jsonResponse: dispatchResponseData\n                                    })\n                                );\n                            }\n                            break;\n\n                        case CrudType.DELETE:\n                            // if got `overrideCrudSuccessHandler.delete`, we will not do any side effects (dispatching actions) to redux store\n                            // we'll let `overrideCrudSuccessHandler.delete` handle all side effects to redux store\n                            if (sagaFactoryOptions.overrideCrudSuccessSagaHandler && sagaFactoryOptions.overrideCrudSuccessSagaHandler.delete) {\n                                break;\n                            }\n\n                            // because formData is always already normalized and we only have 1st-level-relationship's uuids, we will only dispatch delete action for 1st level relational fields. \n                            // we will not do cascade delete for nested && relational field.\n                            // if you need cascade delete to deal with nested relational fields, you'll have to write your own `overrideCrudSuccessHandler.delete` in the sagaOptions.\n\n                            // in backend, cascade delete should already be handled.\n                            // here we are only cleaning up / cascade delete the frontend redux store\n\n                            for (const relationalEntityKey in sagaFactoryOptions.normalizeManifest.relationalEntityReduxActionsMap) {\n                                const relationalActions = sagaFactoryOptions.normalizeManifest.relationalEntityReduxActionsMap[relationalEntityKey] as IObjectRestApiReduxFactoryActions<IObjectBase>;\n\n                                // relational objects should apply DELETE action -- this is a bulk deletion, not single delete\n                                const dispatchDeleteData = relationalNormalizeData[relationalEntityKey] ? relationalNormalizeData[relationalEntityKey] : (\n                                    formData && !Array.isArray(formData) && formData.hasOwnProperty(relationalEntityKey) ? (<ObjectRestApiSchema>formData)[relationalEntityKey as keyof ObjectRestApiSchema] : []\n                                ) as Array<TObject<IObjectBase>>;\n\n                                yield put(\n                                    relationalActions[CrudType.DELETE][RequestStatus.SUCCESS].action({\n                                        triggerFormData: dispatchDeleteData\n                                    })\n                                );\n                            }\n                            break;\n\n                        default:\n                            break;\n                    }\n                }\n\n                // dispatch primary object action\n                const overrideCrudSuccessSagaHandler: ((args: ISuccessSagaHandlerArgs<ObjectRestApiSchema>) => void) | undefined = (\n                    sagaFactoryOptions.overrideCrudSuccessSagaHandler &&\n                    sagaFactoryOptions.overrideCrudSuccessSagaHandler.hasOwnProperty(crudKeyword) &&\n                    sagaFactoryOptions.overrideCrudSuccessSagaHandler[crudKeyword as CrudType] // only call the corresponding CRUD success saga handler\n                ) ? (\n                        sagaFactoryOptions.overrideCrudSuccessSagaHandler[crudKeyword as CrudType]\n                    ) : undefined;\n                if (overrideCrudSuccessSagaHandler) {\n                    // use custom handler if provided\n                    yield call(overrideCrudSuccessSagaHandler, {\n                        data: normalizeData ? normalizeData : (\n                            crudKeyword === CrudType.DELETE ? formData : jsonResponse\n                        ),\n                        updateFromObject: triggerAction.triggerActionOptions ? triggerAction.triggerActionOptions.updateFromObject : undefined,\n                        graphqlEndCursor: (crudKeyword === CrudType.LIST && graphqlFunctionName) ?\n                            jsonResponse.pageInfo.endCursor :\n                            undefined,\n                        companyGroupType: (companyGroups as string[]).includes(objectName) ? objectName as companyGroupTypes : undefined,\n                    });\n                }\n                else {\n                    // default handler\n                    if (crudKeyword === CrudType.DELETE) {\n                        yield put(\n                            ObjectRestApiActions[CrudType.DELETE][\n                                RequestStatus.SUCCESS\n                            ].action({\n                                triggerFormData: formData\n                            })\n                        );\n                    } else {\n                        yield put(\n                            ObjectRestApiActions[crudKeyword][\n                                RequestStatus.SUCCESS\n                            ].action({\n                                jsonResponse,\n                                graphqlEndCursor: crudKeyword === CrudType.LIST && graphqlFunctionName ?\n                                    jsonResponse.pageInfo.endCursor :\n                                    undefined\n                            })\n                        );\n                    }\n                }\n\n                // add-on behavior\n                const doneCrudSuccessSagaHandler = sagaFactoryOptions.doneCrudSuccessSagaHandler && sagaFactoryOptions.doneCrudSuccessSagaHandler[crudKeyword as CrudType] ? sagaFactoryOptions.doneCrudSuccessSagaHandler[crudKeyword as CrudType] : undefined;\n                if (doneCrudSuccessSagaHandler) {\n                    yield call(doneCrudSuccessSagaHandler, {\n                        data: normalizeData ? normalizeData : (\n                            crudKeyword === CrudType.DELETE ? formData : jsonResponse\n                        ),\n                        updateFromObject: triggerAction.triggerActionOptions ? triggerAction.triggerActionOptions.updateFromObject : undefined\n                    }\n                    );\n                }\n\n                if (triggerAction.successCallback) {\n                    triggerAction.successCallback(jsonResponse);\n                }\n            } catch (error) {\n                console.error('o-oh! error in saga:', error)\n                // error state\n                yield put(\n                    ObjectRestApiActions[crudKeyword][\n                        RequestStatus.FAILURE\n                    ].action(error)\n                );\n\n                if (triggerAction.failureCallback) {\n                    triggerAction.failureCallback(error);\n                }\n                return;\n            }\n\n            if (triggerAction.finalCallback) {\n                triggerAction.finalCallback();\n            }\n        };\n\n        // saga listener\n        const saga = function* () {\n\n            // queue style \n            const objectTriggerActionChannel = yield actionChannel(\n                ObjectRestApiActions[crudKeyword][RequestStatus.TRIGGERED]\n                    .actionTypeName\n            )\n\n            while (true) {\n                const objectTriggerAction = yield take(objectTriggerActionChannel);\n                yield call(sagaHandler, objectTriggerAction);\n            }\n        };\n\n        return saga;\n    }\n    );\n\n    return sagas;\n}","import { ISuccessSagaHandlerArgs, IObjectStore, IObjectBase } from \"../types/factory-types\";\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\nimport { Company, companyGroups, companyGroupTypes, labelTypesMapToCompanyGroupTypes } from \"../../data-model/company/company\";\nimport { CompanyActionCreators, GroupedCompanyActionCreators, ApplicationStatusActionCreators, ApplicationActionCreators, SearchCompanyActionCreators } from \"../action-creators/root-actions\";\n\nimport { put, select } from \"redux-saga/effects\";\nimport { getApplicationStore } from \"../store/store-config\";\nimport { Application } from \"../../data-model/application/application\";\nimport { IReference } from \"../../data-model/base-model\";\n\n\nexport const companyDoneUpdateSuccessSagaHandler = function*(args: ISuccessSagaHandlerArgs<Company>) {\n    if (!args.data || (Array.isArray(args.data) && !args.data.length)) {\n        return;\n    }\n\n    const destinationCompany = Array.isArray(args.data) ? args.data[0] : args.data;\n    const destinationLabelText = Company.getLabel(destinationCompany);\n\n    // formData will always be a single company since we are dealing with Update only\n    const currentCompany = args.updateFromObject as Company;\n    const currentLabelText = Company.getLabel(currentCompany);\n\n    // update ref in grouped redux\n    if (destinationLabelText === currentLabelText) {\n        return;\n    }\n\n    // dispatch a success/CREATE action to the destination company group's action\n    const destinationCreateAction = GroupedCompanyActionCreators[labelTypesMapToCompanyGroupTypes[destinationLabelText]][CrudType.CREATE][RequestStatus.SUCCESS].action;\n    yield put(\n        destinationCreateAction({\n            jsonResponse: { uuid: destinationCompany.uuid }\n        })\n    );\n    \n    // dispatch a success/DELETE action of the original (current) company group \n    const currentDeleteAction = GroupedCompanyActionCreators[labelTypesMapToCompanyGroupTypes[currentLabelText]][CrudType.DELETE][RequestStatus.SUCCESS].action;\n    yield put(\n        currentDeleteAction({\n            triggerFormData: { uuid: currentCompany.uuid }\n        })\n    );\n}\nexport const companyOverrideDeleteSuccessSagaHandler = function*(args: ISuccessSagaHandlerArgs<Company>) {\n    if (!args.data || (Array.isArray(args.data) && !args.data.length)) {\n        return;\n    }\n    // delete ref in grouped company redux\n    const currentCompany = Array.isArray(args.data) ? args.data[0] : args.data;\n    const currentLabelText = Company.getLabel(currentCompany);\n    const currentAction = GroupedCompanyActionCreators[labelTypesMapToCompanyGroupTypes[currentLabelText]][CrudType.DELETE][RequestStatus.SUCCESS].action;\n    yield put(\n        currentAction({\n            triggerFormData: { uuid: currentCompany.uuid }\n        })\n    );\n\n    // handle cascade delete - delete relational data in their redux\n    \n    // delete related statuses\n    const applicationStore: IObjectStore<Application> = yield select(getApplicationStore);\n    alert(`currentCompany applications: ${JSON.stringify(currentCompany.applications)}`);\n    const deleteStatusUuids = (currentCompany.applications as Array<IReference>).flatMap((applicationUuid) => {\n        return applicationUuid in applicationStore.collection ? (\n            applicationStore.collection[applicationUuid].statuses as Array<IReference>\n        ) : []\n    });\n    alert(`cascade delete statuses: ${JSON.stringify(deleteStatusUuids)}`);\n\n    yield put(\n        ApplicationStatusActionCreators[CrudType.DELETE][RequestStatus.SUCCESS].action({\n            triggerFormData: deleteStatusUuids\n        })\n    );\n\n    // delete related applications\n    yield put(\n        ApplicationActionCreators[CrudType.DELETE][RequestStatus.SUCCESS].action({\n            triggerFormData: currentCompany.applications\n        })\n    );\n\n    // handle deleting company itself\n    yield put(\n        CompanyActionCreators[CrudType.DELETE][RequestStatus.SUCCESS].action({\n            triggerFormData: currentCompany\n        })\n    );\n}\n\n// grouped redux can only do api call when it's fetch (LIST), using the absolute url when dispatching TRIGGER action (in login saga).\n// if operation is others like UPDATE, CREATE, DELETE, then cannot do api call because the absolute url might not work for POST/PATCH/DELET.\nexport const groupedCompanyListSuccessSagaHandler = function*(args: ISuccessSagaHandlerArgs<Company>) {\n    // In redux factory saga, already ensure the right CRUD so no need to check crudType\n\n    if (!args.data || !Array.isArray(args.data)) {\n        return;\n    }\n\n    if (!args.companyGroupType) {\n        console.error('companyGroupType is not supplied');\n        return;\n    }\n\n    const fetchedCompanyList: Array<Company> = Array.isArray(args.data) ? args.data : [args.data];\n\n    // place company objects in pool redux\n    yield put(\n        CompanyActionCreators[CrudType.LIST][RequestStatus.SUCCESS].action({\n            jsonResponse: {\n                results: fetchedCompanyList\n            }\n        })\n    );\n\n    // place \"pointers\", i.e., uuids, of company objects to grouped redux\n    const fetchedCompanyListUuids = fetchedCompanyList.map(company => ({\n        uuid: company.uuid\n    }));\n    yield put(\n        GroupedCompanyActionCreators[args.companyGroupType][CrudType.LIST][RequestStatus.SUCCESS].action({\n            jsonResponse: { results: fetchedCompanyListUuids },\n            // pass over endCursor for each company group for pagination\n            // no need to pass endCursor for `CompanyActionCreators` since company store only serve as saving complete company objects;\n            // the UI render (and thus pagination) will be based on each company group's store\n            graphqlEndCursor: args.graphqlEndCursor\n        })\n    );\n}\n\nexport const searchCompanyListSuccessSagaHandler = function*(args: ISuccessSagaHandlerArgs<Company>) {\n    // In redux factory saga, already ensure the right CRUD so no need to check crudType\n\n    if (!args.data || !Array.isArray(args.data)) {\n        return;\n    }\n\n    const fetchedCompanyList: Array<Company> = Array.isArray(args.data) ? args.data : [args.data];\n\n    // place company objects in pool redux - store the complete object\n    yield put(\n        CompanyActionCreators[CrudType.LIST][RequestStatus.SUCCESS].action({\n            jsonResponse: { results: fetchedCompanyList }\n        })\n    );\n\n    // place \"references/pointers\", i.e., uuids, of company objects to grouped redux\n    const fetchedCompanyReferenceCollections = {\n        ...(companyGroups.reduce((accumulated, companyGroupText) => {\n            return {\n                ...accumulated,\n                [companyGroupText]: []\n            }\n        }, {}) as {\n            [groupText in companyGroupTypes]: Array<IObjectBase>\n        }),\n        all: [] as Array<IObjectBase>\n    };\n    // collect all references in one pass\n    for (let company of fetchedCompanyList) {\n        fetchedCompanyReferenceCollections[\n            labelTypesMapToCompanyGroupTypes[ Company.getLabel(company) ]\n        ].push({ uuid: company.uuid })\n        fetchedCompanyReferenceCollections.all.push({ uuid: company.uuid });\n    }\n    for (let companyGroupType of companyGroups) {\n        const companyReferences = fetchedCompanyReferenceCollections[companyGroupType];\n        if (companyReferences.length === 0) {\n            continue;\n        }\n\n        yield put(\n            GroupedCompanyActionCreators[companyGroupType][CrudType.LIST][RequestStatus.SUCCESS].action({\n                jsonResponse: { results: companyReferences }\n            })\n        );\n    }\n\n    // place \"references/pointers\" to searchCompany redux\n    yield put(\n        SearchCompanyActionCreators[CrudType.LIST][RequestStatus.SUCCESS].action({\n            jsonResponse: {\n                results: fetchedCompanyReferenceCollections.all,\n            },\n            // pagination for search company since this is the saga for search,\n            // so make sure not to mix up with grouped company's `graphqlEndCursor`\n            graphqlEndCursor: args.graphqlEndCursor\n        })\n    );\n}\n","import { schema } from \"normalizr\";\n\nexport const ApplicationStatusNormalizeSchema = new schema.Entity(\"statuses\", {}, {\n    idAttribute: \"uuid\"\n})\n\nexport const ApplicationStatusListNormalizeSchema = new schema.Array(ApplicationStatusNormalizeSchema);","import { schema } from \"normalizr\";\nimport { ApplicationStatusListNormalizeSchema } from \"../application-status/application-status-normalize-schema\";\nimport { ApplicationStatusActionCreators } from \"../../state-management/action-creators/root-actions\";\n\n\nconst ApplicationNormalizeDefinition = {\n    \"statuses\": ApplicationStatusListNormalizeSchema\n};\n\nexport const ApplicationNormalizeSchema = new schema.Entity(\"applications\", ApplicationNormalizeDefinition, {\n    idAttribute: \"uuid\"\n});\n\nexport const ApplicationListNormalizeSchema = new schema.Array(ApplicationNormalizeSchema);\n\nexport const ApplicationNormalizeManifest = {\n    schema: ApplicationNormalizeSchema,\n    listSchema: ApplicationListNormalizeSchema,\n    objectEntityKey: \"applications\",\n    relationalEntityReduxActionsMap: {\n        \"statuses\": ApplicationStatusActionCreators\n    }\n}\n","import { schema } from 'normalizr';\nimport { ApplicationListNormalizeSchema } from \"../application/application-normalize-schema\";\nimport { ApplicationActionCreators, ApplicationStatusActionCreators } from '../../state-management/action-creators/root-actions';\n\n\nconst CompanyNormalizeDefinition = {\n    applications: ApplicationListNormalizeSchema\n};\n\nexport const CompanyNormalizeSchema = new schema.Entity(\"companies\", CompanyNormalizeDefinition, {\n    idAttribute: \"uuid\"\n});\n\nexport const CompanyListNormalizeSchema = new schema.Array(CompanyNormalizeSchema);\nexport const CompanyNormalizeManifest = {\n    schema: CompanyNormalizeSchema,\n    listSchema: CompanyListNormalizeSchema,\n    objectEntityKey: \"companies\",\n    relationalEntityReduxActionsMap: {\n        \"applications\": ApplicationActionCreators,\n        \"statuses\": ApplicationStatusActionCreators\n    }\n}","import { ISuccessSagaHandlerArgs } from \"../types/factory-types\";\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\nimport { IReference } from \"../../data-model/base-model\";\nimport { Company } from \"../../data-model/company/company\";\nimport { CompanyActionCreators } from \"../action-creators/root-actions\";\nimport { Application } from \"../../data-model/application/application\";\n\nimport { select, put } from \"redux-saga/effects\";\nimport { getCompanyStore } from \"../store/store-config\";\n\n\n// create a ref (uuid) in the upstream object - company\nexport const applicationDoneCreateSuccessSagaHandler = function*(args: ISuccessSagaHandlerArgs<Application>) {\n    if (!args.data || (Array.isArray(args.data) && !args.data.length)) {\n        return;\n    }\n    const application = (Array.isArray(args.data) ? args.data[0] : args.data) as Application;\n    const companyStore = yield select(getCompanyStore);\n    const company = companyStore.collection[application.user_company as IReference];\n    let updatedCompany = new Company(company);\n    updatedCompany.applications = [\n        application.uuid,\n        ...updatedCompany.applications as Array<IReference>\n    ];\n\n    yield put(\n        CompanyActionCreators[CrudType.UPDATE][RequestStatus.SUCCESS].action({\n            jsonResponse: updatedCompany\n        })\n    );\n}\nexport const applicationDoneDeleteSuccessSagaHandler = function*(args: ISuccessSagaHandlerArgs<Application>) {\n    if (!args.data || (Array.isArray(args.data) && !args.data.length)) {\n        return;\n    }\n    const application = (Array.isArray(args.data) ? args.data[0] : args.data) as Application;\n    const companyStore = yield select(getCompanyStore);\n    const company = companyStore.collection[application.user_company as IReference];\n    let updatedCompany = new Company(company);\n    updatedCompany.applications = (updatedCompany.applications as Array<IReference>).filter(applicationUuid => applicationUuid !== application.uuid);\n\n    yield put(\n        CompanyActionCreators[CrudType.UPDATE][RequestStatus.SUCCESS].action({\n            jsonResponse: updatedCompany\n        })\n    );\n}\n","import { ISuccessSagaHandlerArgs } from \"../types/factory-types\";\nimport { IReference } from \"../../data-model/base-model\";\nimport { IRootState } from \"../types/root-types\";\nimport { Application } from \"../../data-model/application/application\";\nimport { ApplicationStatus } from \"../../data-model/application-status/application-status\";\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\n\nimport { select, put } from \"redux-saga/effects\";\nimport { ApplicationActionCreators } from \"../action-creators/root-actions\";\n\n\nconst getApplicationStore = (store: IRootState) => store.application;\nexport const applicationStatusDoneCreateSuccessSagaHandler = function*(args: ISuccessSagaHandlerArgs<ApplicationStatus>) {\n    if (!args.data || (Array.isArray(args.data) && !args.data.length)) {\n        return;\n    }\n    const status = (Array.isArray(args.data) ? args.data[0] : args.data) as ApplicationStatus;\n    const applicationStore = yield select(getApplicationStore);\n    const application = applicationStore.collection[status.application as IReference];\n    let updatedApplication = new Application(application);\n    updatedApplication.statuses = [\n        status.uuid,\n        ...updatedApplication.statuses as Array<IReference>\n    ];\n    yield put(\n        ApplicationActionCreators[CrudType.UPDATE][RequestStatus.SUCCESS].action({\n            jsonResponse: updatedApplication\n        })\n    );\n}\nexport const applicationStatusDoneDeleteSuccessSagaHandler = function*(args: ISuccessSagaHandlerArgs<ApplicationStatus>) {\n    if (!args.data || (Array.isArray(args.data) && !args.data.length)) {\n        return;\n    }\n    const status = (Array.isArray(args.data) ? args.data[0] : args.data) as ApplicationStatus;\n    const applicationStore = yield select(getApplicationStore);\n    const application = applicationStore.collection[status.application as IReference];\n    let updatedApplication = new Application(application);\n    updatedApplication.statuses = (updatedApplication.statuses as Array<IReference>).filter(applicationStatusUuid => applicationStatusUuid !== status.uuid);\n\n    yield put(\n        ApplicationActionCreators[CrudType.UPDATE][RequestStatus.SUCCESS].action({\n            jsonResponse: updatedApplication\n        })\n    );\n}","import { put, call, takeEvery, all, select } from \"redux-saga/effects\";\nimport { IReference } from \"../../data-model/base-model\";\nimport { Company, labelTypesMapToCompanyGroupTypes } from \"../../data-model/company/company\";\nimport { labelTypes } from \"../../data-model/label\";\nimport { CrudType, RequestStatus, RestApiService } from \"../../utils/rest-api\";\nimport { CompanyActionCreators, GroupedCompanyActionCreators } from \"../action-creators/root-actions\";\nimport { SetApplyAllSelectCompanyRequestStatus } from \"../action-creators/select-company-actions\";\nimport { IRootState } from \"../types/root-types\";\nimport { SelectCompanyActionNames, IApplyAllSelectCompanyChangesAction, ISelectCompanyState } from \"../types/select-company-types\";\n\nfunction* selectCompanyApplySagaHandler(\n    applyAllAction: IApplyAllSelectCompanyChangesAction\n) {\n    const { destinationStatus } = applyAllAction;\n    const selectCompanyState: ISelectCompanyState = yield select((state: IRootState) => state.selectCompany);\n    const selectCompanyCollection = selectCompanyState.selectCompanyCollection;\n\n    const partialUpdateCompanies = [...selectCompanyCollection].map(([uuid]) => {\n        return {\n            uuid,\n            labels: [{ text: destinationStatus }]\n        }\n    });\n\n    let res;\n    yield put(SetApplyAllSelectCompanyRequestStatus(RequestStatus.REQUESTING));\n    try {\n        res = yield call(RestApiService.patch, {\n            data: partialUpdateCompanies,\n            objectName: 'companies'\n        })\n        if (!res) {\n            throw new Error('Failed to apply company changes. Server response is empty.');\n        }\n    } catch (error) {\n        yield put(SetApplyAllSelectCompanyRequestStatus(RequestStatus.FAILURE));\n        console.error('Failed to apply company changes', error)\n        // TODO: just do nothing for now, but in the future we may \n        // want to add alerts, danger highlights in UI, etc\n        return;\n    }\n\n    const updateCompaniesResult = res as Company[];\n\n    // move company uuids out of company buckets\n    const removeGroupsMapping = new Map<labelTypes, Set<IReference>>();\n    selectCompanyCollection.forEach((company, uuid) => {\n        if (!(company.labels.length && company.labels[0].text === destinationStatus)) {\n            // only support single label/status for now; default to target for companies without a label/status\n            const label = company.labels.length ? company.labels[0].text : labelTypes.TARGET;\n            \n            const removeGroupSet = removeGroupsMapping.get(label) || new Set<IReference>();\n            removeGroupSet.add(uuid);\n            removeGroupsMapping.set(label, removeGroupSet);\n        }\n    })\n    yield all(Array.from(removeGroupsMapping).map(([label, uuidSet]) => {\n        const deleteAction = GroupedCompanyActionCreators[\n            labelTypesMapToCompanyGroupTypes[label]\n        ][CrudType.DELETE][RequestStatus.SUCCESS].action;\n        return put(\n            deleteAction({\n                triggerFormData: Array.from(uuidSet).map(uuid => ({ uuid }))\n            })\n        );\n    }));\n\n    // move company uuids into destination company bucket\n    const batchCreateAction = GroupedCompanyActionCreators[\n        labelTypesMapToCompanyGroupTypes[destinationStatus]\n    ][CrudType.BATCHCREATE][RequestStatus.SUCCESS].action;\n    yield put(\n        batchCreateAction({\n            jsonResponse: updateCompaniesResult.map(company => {\n                return { uuid: company.uuid }\n            })\n        })\n    )\n    \n    // update companies (TODO: limit to just status, but need to pull in company redux state)\n    const batchUpdateAction = CompanyActionCreators[CrudType.BATCHUPDATE][RequestStatus.SUCCESS].action;\n    yield put(\n        batchUpdateAction({\n            jsonResponse: updateCompaniesResult.map(company => {\n                return { uuid: company.uuid, labels: company.labels }\n            })\n        })\n    );\n\n    yield put(\n        SetApplyAllSelectCompanyRequestStatus(RequestStatus.SUCCESS)\n    );\n    return;\n}\n\nexport function* selectCompanyApplySaga(): Generator {\n    yield takeEvery(SelectCompanyActionNames.APPLY_ALL_CHANGES, selectCompanyApplySagaHandler);\n}","import createSagaMiddleware, { SagaIterator } from 'redux-saga';\nimport { all } from \"redux-saga/effects\";\nimport { authLoginSaga, authLogoutSaga } from \"./auth-sagas\";\n// rest api\nimport { companyGroupTypes, companyGroups} from \"../../data-model/company/company\";\nimport { RestApiSagaFactory } from './saga-factory';\nimport { CompanyActionCreators, ApplicationActionCreators, ApplicationStatusActionCreators, GroupedCompanyActionCreators, SearchCompanyActionCreators } from '../action-creators/root-actions';\nimport { companyDoneUpdateSuccessSagaHandler, groupedCompanyListSuccessSagaHandler, searchCompanyListSuccessSagaHandler, companyOverrideDeleteSuccessSagaHandler } from './company-custom-saga';\nimport { CompanyNormalizeManifest } from '../../data-model/company/company-normalize-schema';\nimport { applicationDoneCreateSuccessSagaHandler, applicationDoneDeleteSuccessSagaHandler } from './applicaiton-custom-saga';\nimport { ApplicationNormalizeManifest } from '../../data-model/application/application-normalize-schema';\nimport { applicationStatusDoneCreateSuccessSagaHandler, applicationStatusDoneDeleteSuccessSagaHandler } from './application-status-custom-saga';\nimport { selectCompanyApplySaga } from './select-company-saga';\n\n\n// saga for company\nexport const CompanySagas = RestApiSagaFactory(\"companies\", CompanyActionCreators, {\n    doneCrudSuccessSagaHandler: {\n        update: companyDoneUpdateSuccessSagaHandler,\n    },\n    overrideCrudSuccessSagaHandler: {\n        delete: companyOverrideDeleteSuccessSagaHandler\n    },\n    normalizeManifest: CompanyNormalizeManifest\n})\n\nexport const GroupCompanySagas = companyGroups.reduce((accumulated, companyGroupText) => {\n    return {\n        ...accumulated,\n        [companyGroupText]: RestApiSagaFactory(companyGroupText, GroupedCompanyActionCreators[companyGroupText], {\n            overrideCrudSuccessSagaHandler: {\n                list: groupedCompanyListSuccessSagaHandler\n            },\n            normalizeManifest: CompanyNormalizeManifest\n        })\n    }\n}, {}) as {\n    [groupText in companyGroupTypes]: Array<() => SagaIterator>\n};\n\nexport const SearchCompanySagas = RestApiSagaFactory(\"searchCompany\", SearchCompanyActionCreators, {\n    overrideCrudSuccessSagaHandler: {\n        list: searchCompanyListSuccessSagaHandler\n    },\n    normalizeManifest: CompanyNormalizeManifest\n})\n\n\n// saga for application\nexport const ApplicationSagas = RestApiSagaFactory(\"applications\", ApplicationActionCreators, {\n    doneCrudSuccessSagaHandler: {\n        create: applicationDoneCreateSuccessSagaHandler,\n        delete: applicationDoneDeleteSuccessSagaHandler\n    },\n    normalizeManifest: ApplicationNormalizeManifest\n});\n\n\n// saga for statuses\nexport const ApplicationStatusSagas = RestApiSagaFactory(\"application-statuses\", ApplicationStatusActionCreators, {\n    doneCrudSuccessSagaHandler: {\n        create: applicationStatusDoneCreateSuccessSagaHandler,\n        delete: applicationStatusDoneDeleteSuccessSagaHandler\n    }\n});\n\n\n// collect all sagas in root saga\n\nconst rootSaga = function*() {\n    yield all([\n        authLoginSaga(),\n        authLogoutSaga(),\n\n        ...CompanySagas.map((saga) => saga()),\n        ...companyGroups.map(companyGroupText => {\n            return GroupCompanySagas[companyGroupText].map(saga => saga())\n        }).flat(),\n        ...SearchCompanySagas.map((saga) => saga()),\n\n        ...ApplicationSagas.map((saga) => saga()),\n        ...ApplicationStatusSagas.map((saga) => saga()),\n\n        selectCompanyApplySaga(),\n\n        // add new saga here\n        // ...\n    ]);\n};\n\n\n/** setup saga */\nexport const sagaMiddleware = createSagaMiddleware();\n\n\nexport const runSagaMiddleaware = () => {\n    sagaMiddleware.run(rootSaga)\n}\n","/** redux */\nimport { createStore, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension/developmentOnly\";\nimport { IRootState } from \"../types/root-types\";\nimport { createRootReducer } from \"../reducers/root-reducers\";\n\n/** router */\nimport { createBrowserHistory } from 'history';\nimport { routerMiddleware } from 'connected-react-router';\n\n/** middleware */\n// saga\nimport { sagaMiddleware, runSagaMiddleaware } from \"../sagas/root-saga\";\n\n\nexport const history = createBrowserHistory({\n    basename: (process.env.NODE_ENV === 'development') ?  \n    ``\n    :\n    // since we use custom domain which has root dir of /\n    // we no longer need a base subpath\n    // the subpath is originally used for github page\n    ``\n    // `/appl-tracky-spa`\n});\n\nconst preloadedState = {\n\n};\n\n// generate the singleton store from redux\nexport const store = createStore<IRootState, any, any, any>(\n    createRootReducer(history),\n    preloadedState,\n    \n    // for redux debugging (only enabled in development)\n    // https://extension.remotedev.io/#usage\n    composeWithDevTools(\n        applyMiddleware(\n            routerMiddleware(history),\n            sagaMiddleware,\n            // ... add other middlewares ...\n        )\n    )\n);\n\n/** after mount saga middlewares to store, run them */\nrunSagaMiddleaware();\n\nexport const getCompanyStore = (store: IRootState) => store.company;\nexport const getApplicationStore = (store: IRootState) => store.application;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n/** redux */\nimport { Provider } from \"react-redux\";\nimport { Store } from \"redux\";\n/** root store */\nimport { IRootState } from \"./state-management/types/root-types\";\nimport { store } from \"./state-management/store/store-config\";\n\n/** router */\nimport { ConnectedRouter } from \"connected-react-router\";\nimport { history } from \"./state-management/store/store-config\";\n\n/** types */\ninterface IRootProps {\n    store: Store<IRootState>;\n}\n\n/** root component - just to wrap the App into redux store */\nconst Root: React.SFC<IRootProps> = props => {\n    return (\n        <Provider store={props.store}>\n            <ConnectedRouter history={history} >\n                <App />\n            </ConnectedRouter>\n        </Provider>\n    );\n};\n\nReactDOM.render(<Root store={store} />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"LandingPage\":\"landing-page_LandingPage__2ZnLo\",\"primaryPageContent\":\"landing-page_primaryPageContent__YLaLX\",\"headlineContent\":\"landing-page_headlineContent__2vF0w\",\"headlineText\":\"landing-page_headlineText__33RBB\",\"headlineSubText\":\"landing-page_headlineSubText__3tLwP\",\"loginActionsContainer\":\"landing-page_loginActionsContainer__2SARI\",\"divider\":\"landing-page_divider__3PurT\",\"sideNoteContent\":\"landing-page_sideNoteContent__NMAYC\"};"],"sourceRoot":""}