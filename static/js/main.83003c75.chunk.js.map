{"version":3,"sources":["store/auth/types.ts","utils/rest-api.ts","store/data-model/base-model.ts","utils/auth.ts","store/auth/actions.ts","store/rest-api-redux-factory.ts","store/data-model/address.ts","store/data-model/link.ts","store/data-model/company.ts","store/data-model/application.ts","components/social-auth/social-auth-login-button.tsx","components/social-auth/social-auth-logout-button.tsx","components/social-auth/social-auth-button.tsx","components/form-factory/form-field-factory.tsx","components/form-factory/form-factory.tsx","pages/landing-page/landing-page.tsx","components/company/company-component.tsx","store/data-model/application-status.ts","store/data-model/application-status-link.ts","components/application-status/application-status-form-component.tsx","components/application-status/application-status-component.tsx","components/application/application-form-component.tsx","components/application/application-component.tsx","components/company-application/company-application-component.tsx","pages/user-app-page/user-app-page.tsx","components/company/company-form-component.tsx","pages/add-com-page/add-com-page.tsx","pages/user-com-app-page/user-com-app-page.tsx","components/user-info/user-info.tsx","pages/user-profile-page/user-profile-page.tsx","pages/page-routes/page-routes.tsx","App.tsx","serviceWorker.ts","store/actions.ts","store/auth/reducers.ts","sagas/auth/sagas.ts","sagas/saga-config.ts","store/reducers.ts","store/store-config.ts","index.tsx"],"names":["AuthActionNames","RequestStatus","CrudType","RestMethod","BaseModel","_ref","_ref$uuid","uuid","_ref$created_at","created_at","_ref$modified_at","modified_at","Object","classCallCheck","this","AuthObject","_BaseModel","_this","_ref$code","code","_ref$provider","provider","_ref$redirect_uri","redirect_uri","args","objectWithoutProperties","possibleConstructorReturn","getPrototypeOf","call","inherits","AuthenticationService","state","clientID","redirectUri","apiLoginUrl","socialAuthProvider","userEmail","apiLoginToken","userFirstName","userLastName","objectID","serverLogin","socialLoginCode","authFormData","_this2","RestApiService","post","data","endpointUrl","serverLogout","_callee","regenerator_default","a","wrap","_context","prev","next","console","log","abrupt","stop","CrudMapToRest","crudType","CREATE","POST","READ","LIST","GET","UPDATE","PATCH","DELETE","RestApi","apiBaseUrl","get","absoluteUrl","objectName","fetch","getRelativeUrl","objectSpread","method","setApiAuthHeaders","then","res","json","_ref2","body","JSON","stringify","patch","_ref3","delete","_ref4","_ref5","url","concat","undefined","mode","credentials","headers","Authorization","Content-Type","RequestedLoginAuth","socialAuthToken","type","REQUESTED_LOGIN_AUTH","payload","requestStatus","REQUESTING","RequestedLogoutAuth","REQUESTED_LOGOUT_AUTH","SuccessLoginAuth","userName","expireDateTime","apiToken","avatarUrl","SUCCESS_AUTH","SUCCESS","isLogin","SuccessLogoutAuth","FailureAuth","error","FAILURE_AUTH","FAILURE","RestApiReduxFactory","initialObjectInstance","crudKeywords","values","ObjectRestApiRedux","_loop","crudKeyword","_i","_arr","_i2","length","actionTypeName","action","toUpperCase","TRIGGERED","objectClassInstance","callback","formData","jsonResponse","triggerFormData","newState","lastChangedObjectID","results","sagaHandler","mark","triggerAction","put","sent","status","Error","t0","saga","objectTriggerActionChannel","objectTriggerAction","_context2","actionChannel","take","initialState","collection","sagas","map","actions","storeReducer","objectStore","arguments","objectAction","split","newObject","defineProperty","resObjectList","newObjects","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","done","object","value","err","return","afterStore","targetDeleteObject","omit","Address","_ref$place_name","place_name","_ref$country","country","_ref$state","_ref$city","city","_ref$street","street","_ref$full_address","full_address","_ref$zipcode","zipcode","AddressRestApiRedux","AddressReducer","AddressSagas","Link","_ref$text","text","_ref$user","user","_ref$url","_ref$order","order","Company","_ref$labels","labels","_ref$name","name","_ref$hq_location","hq_location","_ref$home_page","home_page","_ref$ratings","ratings","_ref$applications","applications","CompanyRestApiRedux","CompanyActions","CompanyReducer","CompanySagas","Application","_ref$user_company","user_company","_ref$position_title","position_title","_ref$job_description_","job_description_page","_ref$job_source","job_source","ApplicationRestApiRedux","ApplicationActions","ApplicationReducer","ApplicationSagas","SocialAuthLoginButton","_Component","_getPrototypeOf2","_len","Array","_key","apply","onLoginButtonClicked","clickEvent","renderProps","onClick","onAuthSuccess","authResponse","props","onSuccess","onAuthFailure","onFailure","createClass","key","react_default","createElement","className","google_login","render","react_button_dist_default","unelevated","icon","dist_default","hasRipple","disabled","clientId","responseType","Component","SocialAuthLogoutButton","onLogoutSuccess","SocialAuthButton","onSocialLoginSuccess","googleOauthResponse","setState","requestedLoginAuth","onSocialLoginFailure","onSocialLogoutSuccess","requestedLogoutAuth","auth","social_auth_logout_button_SocialAuthLogoutButton","social_auth_login_button_SocialAuthLoginButton","InputFieldType","SocialAuthButtonContainer","withRouter","connect","store","dispatch","ActionButtonType","FormInputFieldProps","fieldName","label","onTrailingIconSelect","FormInputFieldFactory","react_text_field_dist_default","react_text_field_dist","TEXT","inputType","onChange","onBlur","formik_esm","FormActionButtonProps","FormFactory","initialValues","validate","onSubmit","errors","touched","handleChange","handleBlur","isSubmitting","handleSubmit","formInputFieldPropsList","formInputFieldProps","index","form_field_factory_FormInputFieldFactory","assign","actionButtonPropsList","actionButtonProps","BUTTON","children","styles","backgroundColor","color","LandingPage","formFactoryProps","validateLoginForm","onSubmitLoginForm","setSubmitting","token","loginSuccess","username","avatar_url","listApplication","listCompany","catch","prepareLoginForm","password","PASSWORD","SUBMIT","style","react_router","to","form_factory_FormFactory","href","target","LandingPageContainer","CompanyComponent","company","react_router_dom","react_icon_button_dist_default","onEditIconClicked","onDeleteIconClicked","ApplicationStatus","_ref$application","application","_ref$applicationstatu","applicationstatuslink_set","_ref$date","date","ApplicationStatusRestApiRedux","ApplicationStatusActions","ApplicationStatusReducer","ApplicationStatusSagas","ApplicationStatusLink","_ref$application_stat","application_status","_ref$link","link","ApplicationStatusFormComponent","application_status__text","application_status__date","application__id","links","indexes","push","applicationStatusLinks","applicationStatus","updateApplicationStatus","onSubmitSuccess","createApplicationStatus","application_status__link0__url","application_status__link0__text","application_status__link1__url","application_status__link1__text","DATE","onCancel","ApplicationStatusFormComponentContainer","applicationStatusStore","applicationStatusFormData","ApplicationStatusComponent","isFormOpened","renderDisplay","deleteApplicationStatus","applicationStatusLink","renderFormController","isOnlyForm","ApplicationStatusComponentContainer","applicationStatusToDelete","ApplicationFormComponent","validateAppForm","application__position_title","test","application__job_description_page__url","application__job_source__url","onSubmitAppForm","application__user_company__id","updateApplication","createApplication","applicationStore","newApplication","ApplicationFormComponentContainer","applicationFormData","ApplicationComponent","renderApplicationFormController","event","renderApplicationDisplay","applicationStatusList","deleteApplication","isShowApplicationStatuses","isArray","ApplicationComponentController","applicationToDelete","CompanyApplicationComponent","onDeleteClick","deleteCompany","company_component_CompanyComponent","history","filter","CompanyApplicationComponentContainer","companyToDelete","updateCompany","companyToUpdate","UserAppPage","UserAppPageContainer","CompanyFormComponent","company__name","company__home_page__url","company__hq_location__full_address","createCompany","CompanyFormComponentContainer","companyFormData","AddComPage","match","params","newCompany","goBack","AddComPageContainer","UserComAppPage","companyUuid","renderAll","UserComAppPageContainer","UserInfo","toString","UserProfilePage","user_info_UserInfo","UserProfilePageContainer","PageRoutes","location","pathname","path","exact","component","react_top_app_bar_dist_default","title","actionItems","height","borderRadius","src","react_top_app_bar_dist","PageRoutesContainer","App","Boolean","window","hostname","RootActionNames","initialAuthState","authReducer","authStore","authAction","resetAllStoreAction","ResetAllStore","authLoginSagaHandler","authLoginSaga","authLogoutSagaHandler","authLogoutSaga","requestedLoginAuthAction","email","warn","_marked","takeEvery","_marked2","requestedLogoutAuthAction","_context3","_marked3","_context4","_marked4","sagaMiddleware","createSagaMiddleware","rootSaga","all","toConsumableArray","createBrowserHistory","basename","createStore","rootState","rootStateChecked","router","address","connectRouter","compose","applyMiddleware","routerMiddleware","run","ReactDOM","es","esm","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.83003c75.chunk.js","sourcesContent":["import { Action } from \"redux\";\n\nimport { RequestStatus } from \"../../utils/rest-api\";\n\n/**\n * Store Types\n */\n\n// complete store type\nexport interface IUpdateAuthState {\n    requestStatus: RequestStatus\n    isLogin: boolean\n    userName: string\n    socialAuthToken: string\n    apiToken: string\n    expireDateTime: string\n    avatarUrl: string\n}\n\n// async partial store types\nexport interface IRequestedLoginAuthState {\n    requestStatus: RequestStatus\n    socialAuthToken: string\n}\n\nexport interface IRequestedLogoutAuthState {\n    requestStatus: RequestStatus\n}\n\nexport interface ISuccessAuthState {\n    requestStatus: RequestStatus\n    isLogin: boolean\n    userName: string\n    expireDateTime: string\n    apiToken: string\n    avatarUrl: string\n}\n\nexport interface IFailureAuthState {\n    requestStatus: RequestStatus,\n    error: any\n}\n\n// add more state types for this reducer - auth reducer\n// ...\n\n\n\n\n\n/**\n * Action Types\n */\n\nexport enum AuthActionNames {\n    UPDATE_AUTH = \"Update auth\",\n    REQUESTED_LOGIN_AUTH = \"Requested login auth\",\n    REQUESTED_LOGOUT_AUTH = \"Requested logout auth\",\n    SUCCESS_AUTH = \"Success auth\",\n    FAILURE_AUTH = \"Failure auth\",\n\n    // 1. add more action for this reducer - auth reducer\n    // 2. write the type interface for the action below\n    // ...\n}\n\nexport interface IUpdateAuthAction extends Action<AuthActionNames.UPDATE_AUTH> {\n    type: typeof AuthActionNames.UPDATE_AUTH;\n    payload: IUpdateAuthState;\n}\n\nexport interface IRequestedLoginAuthAction extends Action<AuthActionNames.REQUESTED_LOGIN_AUTH> {\n    type: typeof AuthActionNames.REQUESTED_LOGIN_AUTH;\n    payload: IRequestedLoginAuthState;\n}\n\nexport interface IRequestedLogoutAuthAction extends Action<AuthActionNames.REQUESTED_LOGOUT_AUTH> {\n    type: typeof AuthActionNames.REQUESTED_LOGOUT_AUTH;\n    payload: IRequestedLogoutAuthState;\n}\n\nexport interface ISuccessAuthAction extends Action<AuthActionNames.SUCCESS_AUTH> {\n    type: typeof AuthActionNames.SUCCESS_AUTH;\n    payload: ISuccessAuthState;\n}\n\nexport interface IFailureAuthAction extends Action<AuthActionNames.FAILURE_AUTH> {\n    type: typeof AuthActionNames.FAILURE_AUTH;\n    payload: IFailureAuthState;\n}\n\n// use union | ... | ... to add more action types\nexport type TAuthActions = IUpdateAuthAction | IRequestedLoginAuthAction | IRequestedLogoutAuthAction | ISuccessAuthAction | IFailureAuthAction","import React from \"react\";\nimport { TObject, IObjectBase } from \"../store/rest-api-redux-factory\";\nimport { BaseModel } from \"../store/data-model/base-model\";\nimport { AuthenticationService } from \"./auth\";\n\nexport enum RequestStatus {\n    TRIGGERED = \"triggered\",\n    REQUESTING = \"requesting\",\n    SUCCESS = \"success\",\n    FAILURE = \"failre\"\n}\n\nexport enum CrudType {\n    CREATE = \"create\",\n    READ = \"read\",\n    LIST = \"list\",\n    UPDATE = \"update\",\n    DELETE = \"delete\"\n}\n\nexport enum RestMethod {\n    POST = \"post\",\n    GET = \"get\",\n    PATCH = \"patch\",\n    DELETE = \"delete\"\n}\n\nexport const CrudMapToRest = (crudType: CrudType): RestMethod => {\n    switch (crudType) {\n        case CrudType.CREATE:\n            return RestMethod.POST;\n        case CrudType.READ:\n            return RestMethod.GET;\n        case CrudType.LIST:\n            return RestMethod.GET;\n        case CrudType.UPDATE:\n            return RestMethod.PATCH;\n        case CrudType.DELETE:\n            return RestMethod.DELETE;\n\n        default:\n            return RestMethod.GET;\n    }\n};\n\nexport interface IRequestParams<Schema> {\n    endpointUrl?: string;\n    absoluteUrl?: string;\n    objectName?: string;\n    data?: TObject<Schema> | Array<TObject<Schema>>;\n}\n\nexport interface IListRestApiResponse<Schema> {\n    count: number;\n    next: any;\n    previous: any;\n    results: Array<TObject<Schema>>;\n}\n\nexport type ISingleRestApiResponse<Schema> = TObject<Schema>;\n\nexport function IsSingleRestApiResponseTypeGuard<Schema>(\n    response: ISingleRestApiResponse<Schema> | IListRestApiResponse<Schema>\n): response is ISingleRestApiResponse<Schema> {\n    return (<ISingleRestApiResponse<Schema>>response).uuid !== undefined;\n}\n\nfunction IsSingleFormDataTypeGuard<Schema>(\n    formData: TObject<Schema> | Array<TObject<Schema>>\n): formData is TObject<Schema> {\n    return (<TObject<Schema>>formData).uuid !== undefined;\n}\n\nexport class RestApi {\n    state = {\n        clientID: `732988498848-vuhd6g61bnlqe372i3l5pbpnerteu6na.apps.googleusercontent.com`,\n        code: ``,\n        redirectUri: `postmessage`,\n        apiBaseUrl: (process.env.NODE_ENV === 'development') ? \n        `http://localhost:8000/api/`\n        :\n        `https://appl-tracky-api-https.shaungc.com/api/`\n        ,\n        apiLoginUrl: `login/social/`,\n        socialAuthProvider: `google-oauth2`,\n\n        userEmail: ``,\n        apiLoginToken: ``,\n        userFirstName: ``,\n        userLastName: ``,\n\n        objectID: ``\n    };\n\n    get = <Schema>({ endpointUrl, absoluteUrl, objectName, data }: IRequestParams<Schema>) => {\n        return fetch(\n            this.getRelativeUrl({\n                endpointUrl,\n                absoluteUrl,\n                objectName,\n                data\n            }),\n            {\n                method: \"GET\",\n                ...this.setApiAuthHeaders()\n            }\n        ).then(res => res.json());\n    };\n\n    post = <Schema>({ data, objectName, endpointUrl }: IRequestParams<Schema>) => {\n        console.log(`restapi:post fired`);\n        return fetch(\n            this.getRelativeUrl({\n                endpointUrl,\n                objectName,\n                data\n            }),\n            {\n                method: \"POST\",\n                ...this.setApiAuthHeaders(),\n                body: JSON.stringify(data)\n            }\n        ).then(res => res.json());\n        // let caller handle error in their own .catch()\n    };\n\n    patch = <Schema>({ data, objectName, endpointUrl }: IRequestParams<Schema>) => {\n        return fetch(\n            this.getRelativeUrl({\n                endpointUrl,\n                objectName,\n                data\n            }),\n            {\n                method: \"PATCH\",\n                ...this.setApiAuthHeaders(),\n                body: JSON.stringify(data)\n            }\n        ).then(res => res.json());\n    };\n\n    delete = <Schema>({ data, objectName, endpointUrl }: IRequestParams<Schema>) => {\n        return fetch(\n            this.getRelativeUrl({\n                endpointUrl,\n                objectName,\n                data\n            }),\n            {\n                method: \"DELETE\",\n                ...this.setApiAuthHeaders(),\n                body: JSON.stringify(data)\n            }\n        );\n    };\n\n    /** helper */\n    private getRelativeUrl = <Schema>({\n        objectName,\n        data,\n        endpointUrl,\n        absoluteUrl,\n    }: IRequestParams<Schema>) => {\n        let url = \"\";\n        if (absoluteUrl) {\n            url = absoluteUrl;\n        }\n        else if (endpointUrl) {\n            url = `${this.state.apiBaseUrl}${endpointUrl}`;\n        } else {\n            if (data && IsSingleFormDataTypeGuard(data) && data.uuid) {\n                url = `${this.state.apiBaseUrl}${objectName}/${data.uuid}/`;\n            } else {\n                url = `${this.state.apiBaseUrl}${objectName}/`;\n            }\n        }\n        console.log(`restapi: url: ${url}, objname=${objectName}`);\n        return url;\n    };\n\n    private setApiAuthHeaders = (): RequestInit => {\n\n        this.state.apiLoginToken = (\n            AuthenticationService.state.apiLoginToken\n        ) ? AuthenticationService.state.apiLoginToken : this.state.apiLoginToken;\n\n        console.log(\"api: set header: got credentials?\", this.state.apiLoginToken);\n        return {\n            mode: \"cors\",\n            credentials: this.state.apiLoginToken ? \"include\" : \"omit\",\n            headers: {\n                Authorization: this.state.apiLoginToken\n                    ? `JWT ${this.state.apiLoginToken}`\n                    : ``,\n                \"Content-Type\": \"application/json\"\n            }\n        };\n    };\n}\n\n/** create restapi singleton */\nexport const RestApiService = new RestApi();\n","export type IRelationship = string;\n\nexport interface IBaseModelProps {\n    uuid?: IRelationship\n    created_at?: string\n    modified_at?: string\n}\n\nexport class BaseModel {\n    uuid: string\n    created_at: string\n    modified_at: string\n    \n    constructor({\n        uuid = \"\",\n        created_at = \"\",\n        modified_at = \"\",\n    }: IBaseModelProps) {\n        this.uuid = uuid;\n        this.created_at = created_at;\n        this.modified_at = modified_at;\n    }\n}","import { RestApiService } from \"./rest-api\";\nimport { BaseModel, IBaseModelProps } from \"../store/data-model/base-model\";\n\nexport interface IAuthObjectProps {\n    code?: string\n    provider?: string\n    redirect_uri?: string\n}\n\nexport class AuthObject extends BaseModel {\n    code: string\n    provider: string\n    redirect_uri: string\n\n    constructor({\n        code = \"\",\n        provider = \"\",\n        redirect_uri = \"\",\n        ...args\n    }: IAuthObjectProps & IBaseModelProps) {\n        super(args);\n        this.code = code;\n        this.provider = provider;\n        this.redirect_uri = redirect_uri;\n    }\n}\n\nclass Authentication {\n    state = {\n        clientID: `732988498848-vuhd6g61bnlqe372i3l5pbpnerteu6na.apps.googleusercontent.com`,\n\n        redirectUri: `postmessage`,\n        apiLoginUrl: `login/social/`,\n        socialAuthProvider: `google-oauth2`,\n\n        userEmail: ``,\n        apiLoginToken: ``,\n        userFirstName: ``,\n        userLastName: ``,\n\n        objectID: ``\n    };\n\n    serverLogin = (socialLoginCode: string) => {\n        let authFormData = new AuthObject({\n            code: socialLoginCode,\n            provider: this.state.socialAuthProvider,\n            redirect_uri: this.state.redirectUri\n        })\n        return RestApiService\n            .post<AuthObject>({\n                data: authFormData,\n                endpointUrl: this.state.apiLoginUrl\n            })\n    }\n\n    serverLogout = async () => {\n        console.log(\"server logout...\");\n        // no server-side invalidate implement at this point (a common case for JWT, however)\n        this.state.userEmail = \"\";\n        this.state.userFirstName = \"\"\n        this.state.userLastName = \"\"\n        this.state.apiLoginToken = RestApiService.state.apiLoginToken = \"\";\n        return;\n    }\n}\n\nexport const AuthenticationService = new Authentication();","import { ActionCreator } from \"redux\";\n\nimport {\n    /** state types */\n    IUpdateAuthState,\n    IRequestedLoginAuthState,\n    /** action types */\n    IUpdateAuthAction,\n    IRequestedLoginAuthAction,\n    IRequestedLogoutAuthAction,\n    ISuccessAuthAction,\n    IFailureAuthAction,\n    /** action names */\n    AuthActionNames\n} from \"./types\";\n\nimport { RequestStatus } from \"../../utils/rest-api\";\n\nexport const UpdateAuth = (newAuthState: IUpdateAuthState): IUpdateAuthAction => {\n    return {\n        type: AuthActionNames.UPDATE_AUTH,\n        payload: newAuthState\n    };\n};\n\nexport const RequestedLoginAuth = (socialAuthToken: string): IRequestedLoginAuthAction => {\n    return {\n        type: AuthActionNames.REQUESTED_LOGIN_AUTH,\n        payload: {\n            requestStatus: RequestStatus.REQUESTING,\n            socialAuthToken\n        }\n    };\n};\n\nexport const RequestedLogoutAuth = (): IRequestedLogoutAuthAction => {\n    return {\n        type: AuthActionNames.REQUESTED_LOGOUT_AUTH,\n        payload: {\n            requestStatus: RequestStatus.REQUESTING,\n        }\n    };\n};\n\nexport const SuccessLoginAuth = (userName: string, expireDateTime: string, apiToken: string, avatarUrl: string): ISuccessAuthAction => {\n    console.log(\"action username:\", userName);\n    return {\n        type: AuthActionNames.SUCCESS_AUTH,\n        payload: {\n            requestStatus: RequestStatus.SUCCESS,\n            isLogin: true,\n            userName,\n            expireDateTime,\n            apiToken,\n            avatarUrl\n        }\n    };\n};\n\nexport const SuccessLogoutAuth = (): ISuccessAuthAction => {\n    return {\n        type: AuthActionNames.SUCCESS_AUTH,\n        payload: {\n            requestStatus: RequestStatus.SUCCESS,\n            isLogin: false,\n            userName: \"\",\n            expireDateTime: \"\",\n            apiToken: \"\",\n            avatarUrl: \"\",\n        }\n    };\n};\n\nexport const FailureAuth = (error: any): IFailureAuthAction => {\n    return {\n        type: AuthActionNames.FAILURE_AUTH,\n        payload: {\n            requestStatus: RequestStatus.FAILURE,\n            error\n        }\n    };\n};\n\n// write new actions here for this reducer - auth reducer\n// ...\n","import { Action, Reducer } from \"redux\";\nimport { takeEvery, take, call, put, actionChannel } from \"redux-saga/effects\";\nimport { SagaIterator } from \"redux-saga\";\nimport {\n    RequestStatus,\n    CrudType,\n    CrudMapToRest,\n    RestApiService,\n    IRequestParams,\n    ISingleRestApiResponse,\n    IListRestApiResponse,\n    IsSingleRestApiResponseTypeGuard\n} from \"../utils/rest-api\";\nimport omit from \"lodash/omit\";\n\n/** state & store */\n\nexport interface IObjectBase {\n    uuid: string;\n}\n\nexport type TObject<Schema> = IObjectBase & { [Property in keyof Schema]: Schema[Property] };\n\ninterface IObjectList<Schema> {\n    [uuid: string]: TObject<Schema>;\n}\n\nexport interface IObjectStore<Schema> {\n    lastChangedObjectID?: string;\n    requestStatus: RequestStatus;\n    error?: any;\n    collection: IObjectList<Schema>;\n}\n\n/** action */\n\ntype IObjectRestApiReduxFactoryActions = {\n    [restfulKeyword: string]: {\n        [asyncKeyword: string]: {\n            actionTypeName: string;\n            action: Function;\n            saga?: () => SagaIterator;\n        };\n    };\n};\n\nexport interface IObjectAction<Schema> extends Action {\n    type: string;\n    crudType: CrudType;\n\n    // for deleteAction or other actions to obtain the original instance obj passed into trigger action\n    triggerFormData?: TObject<Schema> | Array<TObject<Schema>>;\n\n    // for saga to perform additional side effect e.g. navigation\n    callback?: Function;\n\n    // for custumized api call\n    absoluteUrl?: string\n    \n    payload: {\n        formData?: TObject<Schema> | Array<TObject<Schema>>;\n        lastChangedObjectID?: string;\n        requestStatus: RequestStatus;\n        error?: any;\n    };\n}\n\n/** factory API */\n\ninterface IRestApiReduxFactory<Schema> {\n    actions: IObjectRestApiReduxFactoryActions;\n    storeReducer: Reducer<IObjectStore<Schema>>\n    sagas: Array<() => SagaIterator>;\n}\n\nexport const RestApiReduxFactory = <Schema extends IObjectBase>(\n    /** should have uuid */ objectName: string,\n    initialObjectInstance: TObject<Schema>\n): IRestApiReduxFactory<Schema> => {\n    type TObjectSchema = typeof initialObjectInstance;\n    const crudKeywords = Object.values(CrudType);\n\n    let ObjectRestApiRedux: IObjectRestApiReduxFactoryActions = {};\n    for (let crudKeyword of crudKeywords) {\n        ObjectRestApiRedux[crudKeyword] = {};\n        /** store */\n        // TODO?: action state\n\n        /** action */\n        // action type names\n        for (let requestStatus of Object.values(RequestStatus)) {\n            ObjectRestApiRedux[crudKeyword][requestStatus] = {\n                actionTypeName: \"\",\n                action: () => {}\n            };\n            ObjectRestApiRedux[crudKeyword][\n                requestStatus\n            ].actionTypeName = `${requestStatus.toUpperCase()}_${crudKeyword.toUpperCase()}_${objectName.toUpperCase()}`;\n        }\n\n        // async actions ( & state...)\n        ObjectRestApiRedux[crudKeyword][RequestStatus.TRIGGERED].action = (\n            objectClassInstance?: TObjectSchema,\n            callback?: Function,\n            absoluteUrl?: string,\n        ): IObjectAction<TObjectSchema> => {\n            console.log(`action:fired, trigger, ${crudKeyword}`);\n            return {\n                type:\n                    ObjectRestApiRedux[crudKeyword][RequestStatus.TRIGGERED]\n                        .actionTypeName,\n                crudType: crudKeyword,\n                callback,\n                absoluteUrl,\n                payload: {\n                    requestStatus: RequestStatus.TRIGGERED,\n                    formData: objectClassInstance\n                }\n            };\n        };\n        ObjectRestApiRedux[crudKeyword][\n            RequestStatus.REQUESTING\n        ].action = (): IObjectAction<TObjectSchema> => {\n            return {\n                type:\n                    ObjectRestApiRedux[crudKeyword][RequestStatus.REQUESTING]\n                        .actionTypeName,\n                crudType: crudKeyword,\n                payload: {\n                    requestStatus: RequestStatus.REQUESTING\n                }\n            };\n        };\n        ObjectRestApiRedux[crudKeyword][RequestStatus.SUCCESS].action = (\n            /** api response */\n            jsonResponse:\n            | IListRestApiResponse<TObjectSchema>\n            | ISingleRestApiResponse<TObjectSchema>,\n            triggerFormData?: TObject<Schema> | Array<TObject<Schema>>\n        ): IObjectAction<TObjectSchema> => {\n            let newState = {\n                type:\n                    ObjectRestApiRedux[crudKeyword][RequestStatus.SUCCESS]\n                        .actionTypeName,\n                crudType: crudKeyword\n            };\n            // if is delete success, we don't need formData (& the server responds nothing for DELETE as well)\n            if (crudKeyword === CrudType.DELETE) {\n                return {\n                    ...newState,\n                    triggerFormData,\n                    payload: {\n                        requestStatus: RequestStatus.SUCCESS,\n                    }\n                }\n            }\n            else if (IsSingleRestApiResponseTypeGuard(jsonResponse)) {\n                return {\n                    ...newState,\n                    payload: {\n                        requestStatus: RequestStatus.SUCCESS,\n                        formData: <ISingleRestApiResponse<TObjectSchema>>(\n                            jsonResponse\n                        ),\n                        lastChangedObjectID: jsonResponse.uuid\n                    }\n                };\n            } else {\n                return {\n                    ...newState,\n                    payload: {\n                        requestStatus: RequestStatus.SUCCESS,\n                        formData: (<IListRestApiResponse<TObjectSchema>>(\n                            jsonResponse\n                        )).results\n                    }\n                };\n            }\n        };\n        ObjectRestApiRedux[crudKeyword][RequestStatus.FAILURE].action = (\n            error: any\n        ): IObjectAction<TObjectSchema> => {\n            return {\n                type:\n                    ObjectRestApiRedux[crudKeyword][RequestStatus.FAILURE]\n                        .actionTypeName,\n                crudType: crudKeyword,\n                payload: {\n                    requestStatus: RequestStatus.FAILURE,\n                    error\n                }\n            };\n        };\n\n        /** saga */\n        const sagaHandler = function*(\n            triggerAction: IObjectAction<TObjectSchema>\n        ) {\n            console.log(`Saga: action intercepted; aync=trigger, crud=${crudKeyword}, obj=${objectName}; ready to call api`);\n            const formData = triggerAction.payload.formData;\n            const absoluteUrl = triggerAction.absoluteUrl;\n\n            yield put(\n                ObjectRestApiRedux[crudKeyword][\n                    RequestStatus.REQUESTING\n                ].action()\n            );\n\n            try {\n                // api call\n                const jsonResponse:\n                    | IListRestApiResponse<TObjectSchema>\n                    | ISingleRestApiResponse<TObjectSchema> \n                    | any = yield call(\n                    (<(params: IRequestParams<TObjectSchema>) => void>RestApiService[CrudMapToRest(crudKeyword)]),\n                    {\n                        data: formData,\n                        objectName,\n                        absoluteUrl,\n                    }\n                );\n\n                console.log(\"Saga: res from server\", jsonResponse);\n\n                if (jsonResponse.status && jsonResponse.status >= 400) {\n                    console.error(\"Server error, see message in res.\");\n                    throw new Error(\"Server error, see message in res.\");\n                } \n\n                // if there is .next in res, then it's paginated data and we should perform a next request to next page data\n                if(jsonResponse.next) {\n                    console.log(\"Saga: res contains next url, so we will also trigger list request for next=\", jsonResponse.next);\n                    yield put(ObjectRestApiRedux[CrudType.LIST][RequestStatus.TRIGGERED].action(\n                        undefined, undefined, jsonResponse.next\n                    ));\n                }\n\n                // success state\n                if (crudKeyword === CrudType.DELETE) {\n                    yield put(\n                        ObjectRestApiRedux[CrudType.DELETE][\n                            RequestStatus.SUCCESS\n                        ].action(jsonResponse, formData)\n                    );\n                } else {\n                    console.log(\"Saga: ready to dispatch success action\")\n                    yield put(\n                        ObjectRestApiRedux[crudKeyword][\n                            RequestStatus.SUCCESS\n                        ].action(jsonResponse)\n                    );\n                }\n\n                if (triggerAction.callback) {\n                    triggerAction.callback();\n                }\n            } catch (error) {\n                // error state\n                yield put(\n                    ObjectRestApiRedux[crudKeyword][\n                        RequestStatus.FAILURE\n                    ].action(error)\n                );\n                return;\n            }\n        };\n\n        ObjectRestApiRedux[crudKeyword][\n            RequestStatus.TRIGGERED\n        ].saga = function*() {\n            console.log(`Saga: action intercepted; async=trigger, crud=${crudKeyword}, obj=${objectName}`);\n            \n            // queue style \n            const objectTriggerActionChannel = yield actionChannel(\n                ObjectRestApiRedux[crudKeyword][RequestStatus.TRIGGERED]\n                    .actionTypeName\n            )\n\n            while (true) {\n                const objectTriggerAction = yield take(objectTriggerActionChannel);\n                yield call(sagaHandler, objectTriggerAction);\n            }\n        };\n    }\n\n    const initialState: IObjectStore<TObjectSchema> = {\n        collection: {},\n        requestStatus: RequestStatus.SUCCESS\n    };\n\n    const storeReducer: Reducer<IObjectStore<Schema>> = (\n        objectStore: IObjectStore<TObjectSchema> = initialState,\n        action: Action\n    ): IObjectStore<TObjectSchema> => {\n        \n        const objectAction = action as IObjectAction<TObjectSchema>;\n\n        if (\n            !(objectAction && objectAction.payload && objectAction.payload.requestStatus) ||\n            !(action.type.split(\"_\")[2] === objectName.toUpperCase())\n        ) {\n            return {\n                ...objectStore\n            };\n        }\n\n        // async success\n        if (objectAction.payload.requestStatus === RequestStatus.SUCCESS) {\n            // CREATE\n            if (objectAction.crudType === CrudType.CREATE) {\n                let newObject = <TObject<TObjectSchema>>objectAction.payload.formData;\n                return {\n                    collection: {\n                        ...objectStore.collection,\n                        [newObject.uuid]: newObject\n                    },\n                    requestStatus: objectAction.payload.requestStatus,\n                    lastChangedObjectID: objectAction.payload.lastChangedObjectID\n                };\n            }\n\n            // LIST\n            else if (objectAction.crudType === CrudType.LIST) {\n                const resObjectList = <Array<TObject<TObjectSchema>>>(\n                    objectAction.payload.formData\n                );\n                let newObjects: IObjectList<TObjectSchema> = {};\n                for (let object of resObjectList) {\n                    newObjects[object.uuid] = object;\n                }\n                console.log(\"Reducer: crud=list, action=\", objectAction)\n                console.log(\"initialState=\", initialState)\n                console.log(\"beforestore=\", objectStore)\n                console.log(\"newlistobjects=\", newObjects)\n\n                const afterStore: IObjectStore<TObjectSchema> = {\n                    collection: {\n                        ...objectStore.collection,\n                        ...newObjects\n                    },\n                    requestStatus: objectAction.payload.requestStatus\n                };\n                console.log(\"afterstore=\", afterStore)\n\n                return afterStore;\n            }\n\n            // UPDATE\n            else if (objectAction.crudType === CrudType.UPDATE) {\n                let newObject = <TObject<TObjectSchema>>objectAction.payload.formData;\n                return {\n                    collection: {\n                        ...objectStore.collection,\n                        [newObject.uuid]: newObject\n                    },\n                    requestStatus: objectAction.payload.requestStatus,\n                    lastChangedObjectID: objectAction.payload.lastChangedObjectID\n                };\n            }\n\n            // DELETE\n            else if (objectAction.crudType === CrudType.DELETE) {\n                let targetDeleteObject = <TObject<TObjectSchema>>objectAction.triggerFormData;\n                console.log(\"Reducer: delete, targetobj=\", targetDeleteObject)\n\n                console.log(\"Reducer: delete, beforestore=\", objectStore)\n                \n                const afterStore = {\n                    collection: omit(objectStore.collection, [targetDeleteObject.uuid]),\n                    requestStatus: objectAction.payload.requestStatus\n                }\n                console.log(\"Reducer: delete, afterstore\", afterStore)\n\n                return afterStore;\n            }\n        }\n\n        // async trigger\n        else if (objectAction.payload.requestStatus === RequestStatus.TRIGGERED) {\n            return {\n                ...objectStore,\n                requestStatus: objectAction.payload.requestStatus\n            };\n        }\n\n        // async requesting & failure\n        else {\n            return {\n                ...objectStore,\n                ...objectAction.payload\n            };\n        }\n\n        // no effect\n        return {\n            ...objectStore\n        };\n    };\n\n    const sagas = crudKeywords.map((crudKeyword) => \n        (<() => SagaIterator>ObjectRestApiRedux[crudKeyword][RequestStatus.TRIGGERED].saga)\n    );\n\n    return {\n        actions: ObjectRestApiRedux,\n        storeReducer,\n        sagas\n    };\n};\n","import { RestApiReduxFactory } from \"../rest-api-redux-factory\";\nimport { BaseModel, IBaseModelProps } from \"./base-model\";\n\nexport interface IAddressProps {\n    place_name?: string;\n    country?: string;\n    state?: string;\n    city?: string;\n    street?: string;\n    full_address?: string;\n    zipcode?: string;\n}\n\nexport class Address extends BaseModel {\n    place_name: string;\n    country: string;\n    state: string;\n    city: string;\n    street: string;\n    full_address: string;\n    zipcode: string;\n\n    constructor({\n        place_name = \"\",\n        country = \"\",\n        state = \"\",\n        city = \"\",\n        street = \"\",\n        full_address = \"\",\n        zipcode = \"\",\n        ...args\n    }: IAddressProps & IBaseModelProps) {\n        super(args);\n        this.place_name = place_name;\n        this.country = country;\n        this.state = state;\n        this.place_name = place_name;\n        this.city = city;\n        this.street = street;\n        this.full_address = full_address;\n        this.zipcode = zipcode;\n    }\n}\n\nconst initialAddressInstance = new Address({});\nconst AddressRestApiRedux = RestApiReduxFactory<Address>(\n    \"addresses\",\n    initialAddressInstance\n);\nexport const AddressActions = AddressRestApiRedux.actions;\nexport const AddressReducer = AddressRestApiRedux.storeReducer;\nexport const AddressSagas = AddressRestApiRedux.sagas;\n","import { BaseModel, IBaseModelProps } from \"./base-model\";\n\ninterface ILinkProps {\n    text?: string;\n    user?: any;\n    url?: string;\n    order?: number;\n}\n\nexport class Link extends BaseModel {\n    public text: string;\n    public user: any;\n    public url: string;\n    public order: number;\n\n    constructor({\n        text = \"\",\n        user = {},\n        url = \"\",\n        order = 0,\n        ...args\n    }: ILinkProps & IBaseModelProps) {\n        super(args);\n        this.text = text;\n        this.user = user;\n        this.url = url;\n        this.order = order;\n    }\n}\n","import { RestApiReduxFactory } from \"../rest-api-redux-factory\";\nimport { BaseModel, IBaseModelProps } from \"./base-model\";\nimport { Address } from \"./address\";\nimport { Link } from \"./link\";\n\ninterface ICompanyProps {\n    user?: string;\n    labels?: any;\n    name?: string;\n    hq_location?: Address;\n    home_page?: Link;\n    ratings?: any;\n    applications?: any;\n}\n\nexport class Company extends BaseModel {\n    public user: string;\n    public labels: any;\n    public name: string;\n    public hq_location: Address;\n    public home_page: Link;\n    public ratings: any;\n    public applications: any;\n\n    constructor({\n        user = \"\",\n        labels = [],\n        name = \"\",\n        hq_location = new Address({}),\n        home_page = new Link({}),\n        ratings = {},\n        applications = {},\n        ...args\n    }: ICompanyProps & IBaseModelProps) {\n        super(args);\n        this.user = user;\n        this.labels = labels;\n        this.name = name;\n        this.hq_location = hq_location;\n        this.home_page = home_page;\n        this.ratings = ratings;\n        this.applications = applications;\n    }\n}\n\nconst initialCompanyInstance = new Company({});\nconst CompanyRestApiRedux = RestApiReduxFactory<Company>(\n    \"companies\",\n    initialCompanyInstance\n);\nexport const CompanyActions = CompanyRestApiRedux.actions;\nexport const CompanyReducer = CompanyRestApiRedux.storeReducer;\nexport const CompanySagas = CompanyRestApiRedux.sagas;\n","import { RestApiReduxFactory } from \"../rest-api-redux-factory\";\nimport { BaseModel, IBaseModelProps, IRelationship } from \"./base-model\";\nimport { Link } from \"./link\";\n\ninterface IApplicationProps {\n    user?: IRelationship;\n    user_company?: IRelationship;\n    position_title?: string;\n    job_description_page?: Link;\n    job_source?: Link;\n    labels?: any;\n}\n\nexport class Application extends BaseModel {\n    public user: string;\n    public user_company: IRelationship;\n    public position_title: string;\n    public job_description_page: Link;\n    public job_source: Link;\n    public labels: any;\n\n    constructor({\n        user = \"\",\n        user_company = \"\",\n        position_title = \"\",\n        job_description_page = new Link({}),\n        job_source = new Link({}),\n        labels = {},\n        ...args\n    }: IApplicationProps & IBaseModelProps) {\n        super(args);\n        this.user = user;\n        this.user_company = user_company;\n        this.position_title = position_title;\n        this.job_description_page = job_description_page;\n        this.job_source = job_source;\n        this.labels = labels;\n    }\n}\n\nconst initialApplicationInstance = new Application({});\nconst ApplicationRestApiRedux = RestApiReduxFactory<Application>(\n    \"applications\",\n    initialApplicationInstance\n);\nexport const ApplicationActions = ApplicationRestApiRedux.actions;\nexport const ApplicationReducer = ApplicationRestApiRedux.storeReducer;\nexport const ApplicationSagas = ApplicationRestApiRedux.sagas;\n","import React, { Component } from \"react\";\n\n/** Components */\nimport { GoogleLogin } from \"react-google-login\";\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n\ninterface ISocialAuthLoginButtonProps {\n    clientID: string;\n    redirectUri?: string;\n    onSuccess(authResponse?: any): void;\n    onFailure?(error: any): void;\n    disabled?: boolean;\n}\n\nexport class SocialAuthLoginButton extends Component<\n    ISocialAuthLoginButtonProps\n> {\n    onLoginButtonClicked = (clickEvent: any, renderProps: any) => {\n        console.log(\"login button clicked\", clickEvent, renderProps);\n        renderProps.onClick(clickEvent);\n    };\n\n    onAuthSuccess = (authResponse?: any) => {\n        console.log(\"login button auth success\");\n        this.props.onSuccess(authResponse);\n    };\n\n    onAuthFailure = (error: any) => {\n        console.log(\"login button auth failed\");\n        if (this.props.onFailure) {\n            this.props.onFailure(error);\n        }\n    };\n\n    render() {\n        return (\n            <div className=\"UserAuthButton\">\n                <GoogleLogin\n                    render={(renderProps: any) => (\n                        <Button\n                            onClick={clickEvent =>\n                                this.onLoginButtonClicked(\n                                    clickEvent,\n                                    renderProps\n                                )\n                            }\n                            unelevated\n                            icon={\n                                <MaterialIcon hasRipple icon=\"account_circle\" />\n                            }\n                            disabled={this.props.disabled}\n                        >\n                            Google Login\n                        </Button>\n                    )}\n                    onSuccess={this.onAuthSuccess}\n                    onFailure={this.onAuthFailure}\n                    clientId={this.props.clientID}\n                    responseType=\"code\"\n                    redirectUri={this.props.redirectUri || \"postmessage\"}\n                />\n            </div>\n        );\n    }\n}\n","import React, { Component } from \"react\";\n\n/** Components */\nimport { GoogleLogout } from \"react-google-login\";\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n\ninterface ISocialAuthLogoutButtonProps {\n    onSuccess(authResponse?: any): void;\n    disabled?: boolean\n}\n\nexport class SocialAuthLogoutButton extends Component<\n    ISocialAuthLogoutButtonProps\n> {\n    onAuthSuccess = (authResponse?: any) => {\n        this.props.onSuccess(authResponse);\n    };\n\n    render() {\n        return (\n            <div className=\"UserAuthButton\">\n                <GoogleLogout\n                    render={(renderProps: any) => (\n                        <Button\n                            onClick={renderProps.onClick}\n                            unelevated\n                            icon={<MaterialIcon hasRipple icon=\"eject\" />}\n                            disabled={this.props.disabled}\n                        >\n                            Logout\n                        </Button>\n                    )}\n                    onLogoutSuccess={this.onAuthSuccess}\n                />\n            </div>\n        );\n    }\n}\n","import React, { Component } from \"react\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\n\n/** Redux */\nimport { Dispatch } from \"redux\";\nimport { connect } from \"react-redux\";\nimport { IRootState } from \"../../store/types\";\nimport { IUpdateAuthAction, IRequestedLoginAuthAction, TAuthActions, IUpdateAuthState } from \"../../store/auth/types\";\nimport { UpdateAuth, RequestedLoginAuth, RequestedLogoutAuth } from \"../../store/auth/actions\";\n\n/** rest api */\nimport { RequestStatus } from \"../../utils/rest-api\";\n\n/** Components */\nimport { SocialAuthLoginButton } from \"./social-auth-login-button\";\nimport { SocialAuthLogoutButton } from \"./social-auth-logout-button\";\n\ninterface ISocialAuthButtonProps extends RouteComponentProps {\n    auth: IUpdateAuthState;\n    requestedLoginAuth: (socialAuthToken: string) => void;\n    requestedLogoutAuth: () => void;\n}\n\nclass SocialAuthButton extends Component<\n    ISocialAuthButtonProps\n> {\n    state = {\n        clientID: `732988498848-vuhd6g61bnlqe372i3l5pbpnerteu6na.apps.googleusercontent.com`,\n        code: ``,\n        redirectUri: `postmessage`,\n        apiBaseUrl: `http://localhost:8000/`,\n        apiLoginUrl: `login/social/`,\n        socialAuthProvider: `google-oauth2`,\n\n        userEmail: ``,\n        apiLoginToken: ``,\n        userFirstName: ``,\n        userLastName: ``,\n\n        objectID: ``\n    };\n\n    onSocialLoginSuccess = (googleOauthResponse: any) => {\n        console.log(\"Google Oauth2 res:\", googleOauthResponse);\n        this.setState(\n            {\n                code: googleOauthResponse.code\n            },\n            () => {\n                // this.apiLogin();\n                console.log(\"social button: request auth...\");\n                this.props.requestedLoginAuth(this.state.code);\n            }\n        );\n    };\n\n    onSocialLoginFailure = (error: any) => {\n        console.error(\"Social login failed:\", error);\n    };\n\n    onSocialLogoutSuccess = () => {\n        console.log(\"Social logout success, now our web app logout\");\n        this.props.requestedLogoutAuth();\n    };\n\n    render() {\n        return (\n            <div className=\"SocialAuth\">\n                auth requestStatus: {this.props.auth.requestStatus} <br></br>\n                {!this.props.auth.isLogin ? (\n                    <SocialAuthLoginButton\n                        clientID={this.state.clientID}\n                        onSuccess={this.onSocialLoginSuccess}\n                        onFailure={this.onSocialLoginFailure}\n                        disabled={this.props.auth.requestStatus === RequestStatus.REQUESTING}\n                    />\n                ) : (\n                    <SocialAuthLogoutButton\n                        onSuccess={this.onSocialLogoutSuccess}\n                        disabled={this.props.auth.requestStatus === RequestStatus.REQUESTING}\n                    />\n                )}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => {\n    return {\n        auth: store.auth\n    };\n};\n\nfunction mapDispatchToProps(dispatch: Dispatch<TAuthActions>) {\n    return {\n        requestedLoginAuth: (socialAuthToken: string) => {\n            dispatch(\n                RequestedLoginAuth(socialAuthToken)\n            );\n        },\n        requestedLogoutAuth: () => {\n            dispatch(\n                RequestedLogoutAuth()\n            );\n        }\n    };\n}\n\nexport const SocialAuthButtonContainer = withRouter(connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(SocialAuthButton));\n","import React, { Component } from \"react\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\n\n/** Components */\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n// mdc-react input\nimport \"@material/react-text-field/dist/text-field.css\";\nimport TextField, { HelperText, Input } from \"@material/react-text-field\";\n// formik\nimport {\n    Formik,\n    Form,\n    Field,\n    ErrorMessage,\n    FormikValues,\n    FormikTouched,\n    FormikErrors,\n} from \"formik\";\n\nexport enum InputFieldType {\n    // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input\n    TEXT = \"text\",\n    PASSWORD = \"password\",\n    EMAIL = \"email\",\n    URL = \"url\",\n    DATE = \"date\"\n}\n\nexport class FormInputFieldProps {\n    constructor(\n        public fieldName: string = \"\",\n        public label: string = \"\",\n        public type?: InputFieldType,\n        public onTrailingIconSelect?: () => void\n    ) {}\n}\n\ninterface IFormInputFieldFactoryProps extends FormInputFieldProps {\n    /* formik */\n    onChange: (event: any) => void\n    onBlur: (event: any) => void\n    values: FormikValues\n    errors: FormikErrors<FormikValues>\n    touched: FormikTouched<FormikValues>\n}\n\nexport class FormInputFieldFactory extends Component<IFormInputFieldFactoryProps> {\n    render() {\n        return (\n            <div className=\"FormFieldFactory\">\n                <TextField\n                    label={this.props.label}\n                    onTrailingIconSelect={this.props.onTrailingIconSelect}\n                    // trailingIcon={<MaterialIcon role=\"button\" icon=\"clear\" />}\n                >\n                    <Input\n                        type={this.props.type || InputFieldType.TEXT}\n                        name={this.props.fieldName}\n                        inputType=\"input\"\n                        onChange={this.props.onChange}\n                        onBlur={this.props.onBlur}\n                        value={this.props.values[this.props.fieldName]}\n                    />\n                </TextField>\n                <ErrorMessage name={this.props.fieldName} />\n            </div>\n        );\n    }\n}","import React, { Component } from \"react\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\n\n/** Components */\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n// mdc-react input\nimport \"@material/react-text-field/dist/text-field.css\";\nimport TextField, { HelperText, Input } from \"@material/react-text-field\";\n// formik\nimport {\n    Formik,\n    Form,\n    Field,\n    ErrorMessage,\n    FormikValues,\n    FormikErrors,\n    FormikTouched\n} from \"formik\";\nimport { FormInputFieldFactory, FormInputFieldProps } from \"./form-field-factory\";\n\nexport enum ActionButtonType {\n    SUBMIT = \"submit\",\n    BUTTON = \"button\"\n}\n\nexport class FormActionButtonProps {\n    constructor(\n        public text: string = \"\", \n        public onClick?: (event: any) => void, \n        public type?: ActionButtonType\n    ) {}\n}\n\nexport interface IFormFactoryProps<DataModel> {\n    initialValues: DataModel;\n\n    validate: (values: FormikValues) => FormikErrors<FormikValues>;\n    onSubmit: (\n        values: FormikValues,\n        { setSubmitting }: { setSubmitting: Function }\n    ) => void;\n\n    actionButtonPropsList: Array<FormActionButtonProps>;\n    formInputFieldPropsList: Array<FormInputFieldProps>\n}\n\nexport class FormFactory<DataModel> extends Component<\n    IFormFactoryProps<DataModel>\n> {\n    render() {\n        return (\n            <div className=\"FormFactory\">\n                <Formik\n                    initialValues={this.props.initialValues}\n                    validate={this.props.validate}\n                    onSubmit={this.props.onSubmit}\n                >\n                    {({\n                        values,\n                        errors,\n                        touched,\n                        handleChange,\n                        handleBlur,\n                        handleSubmit,\n                        isSubmitting\n                    }: {\n                        values: FormikValues,\n                        touched: FormikTouched<FormikValues>,\n                        [props: string]: any\n                    }) => (\n                        <Form>\n                            {this.props.formInputFieldPropsList.map((formInputFieldProps: FormInputFieldProps, index) => (\n                                <FormInputFieldFactory \n                                    key={index}\n                                    {...formInputFieldProps} \n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    values={values}\n                                    errors={errors}\n                                    touched={touched}\n                                />\n                            ))}\n                            {this.props.actionButtonPropsList.map(\n                                (actionButtonProps: FormActionButtonProps, index) => (\n                                    <Button\n                                        key={index}\n                                        type={actionButtonProps.type || ActionButtonType.BUTTON}\n                                        disabled={isSubmitting}\n                                        unelevated\n                                        onClick={actionButtonProps.onClick}\n                                        children={actionButtonProps.text}\n                                    />\n                                )\n                            )}\n                        </Form>\n                    )}\n                </Formik>\n            </div>\n        );\n    }\n}\n","import React, { Component } from \"react\";\nimport { withRouter, RouteComponentProps, Redirect } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch, AnyAction } from \"redux\";\nimport { IRootState } from \"../../store/types\";\nimport { IUpdateAuthState } from \"../../store/auth/types\";\nimport { SuccessLoginAuth } from \"../../store/auth/actions\";\nimport { CompanyActions, Company } from \"../../store/data-model/company\";\nimport {\n    ApplicationActions,\n    Application\n} from \"../../store/data-model/application\";\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\n\n/** Components */\nimport { SocialAuthButtonContainer } from \"../../components/social-auth/social-auth-button\";\n// form\nimport {\n    FormFactory,\n    FormActionButtonProps,\n    IFormFactoryProps,\n    ActionButtonType\n} from \"../../components/form-factory/form-factory\";\nimport {\n    FormInputFieldFactory,\n    FormInputFieldProps,\n    InputFieldType\n} from \"../../components/form-factory/form-field-factory\";\nimport { ErrorMessage, FormikValues, FormikErrors } from \"formik\";\nimport { AuthenticationService } from \"../../utils/auth\";\nimport { RestApiService } from \"../../utils/rest-api\";\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n\n\nlet styles = {\n    backgroundColor: \"purple\",\n    color: \"white\"\n};\n\ninterface ILandingPageProps extends RouteComponentProps {\n    auth: IUpdateAuthState;\n    loginSuccess: (userName: string, apiToken: string, avatarUrl: string) => void;\n    listApplication: () => void\n    listCompany: () => void\n}\n\nclass LandingPage extends Component<ILandingPageProps> {\n    formFactoryProps: any;\n\n    constructor(props: ILandingPageProps) {\n        super(props);\n        this.prepareLoginForm();\n    }\n\n    validateLoginForm = (values: FormikValues) => {\n        let errors: FormikErrors<any> = {};\n        return errors;\n    };\n\n    onSubmitLoginForm = (\n        values: FormikValues,\n        { setSubmitting }: { setSubmitting: Function }\n    ) => {\n        setSubmitting(false);\n        console.log(\"values=\", values);\n\n        // post to get login token\n\n        fetch(`${RestApiService.state.apiBaseUrl}api-token-auth/`, {\n            method: \"POST\",\n            mode: \"cors\",\n            credentials: \"omit\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(values)\n        })\n            .then(res => res.json())\n            .then(res => {\n                console.log(\"res=\", res);\n                // set login token\n                AuthenticationService.state.apiLoginToken = res.token;\n\n                // set redux auth store isLogin state --- have to write action and reducer.\n                this.props.loginSuccess(values.username, res.token, res.avatar_url);\n\n                // request com & app list (dispatch)\n                this.props.listApplication();\n                this.props.listCompany();\n            })\n            .catch(err => {\n                console.error(\"login error~~\", err);\n            });\n    };\n\n    prepareLoginForm = () => {\n        const initialValues = {\n            username: \"\",\n            password: \"\"\n        };\n\n        this.formFactoryProps = {\n            initialValues: initialValues,\n            validate: this.validateLoginForm,\n            onSubmit: this.onSubmitLoginForm,\n            formInputFieldPropsList: [\n                new FormInputFieldProps(\"username\", \"Username\"),\n                new FormInputFieldProps(\n                    \"password\",\n                    \"Password\",\n                    InputFieldType.PASSWORD\n                )\n            ],\n            actionButtonPropsList: [\n                new FormActionButtonProps(\"Login\", undefined, ActionButtonType.SUBMIT)\n            ]\n        };\n    };\n\n    render() {\n        return (\n            <div className=\"LandingPage\" style={styles}>\n                {/** redirect logged in user to private routes */\n                this.props.auth.isLogin && <Redirect to=\"/home/\" />}\n                <h1>Appl Tracky</h1>\n                <SocialAuthButtonContainer />\n                <h2>Or login locally (admin only):</h2>\n                <FormFactory {...this.formFactoryProps} />\n                <hr />\n                <Button\n                    href=\"https://github.com/rivernews/appl-tracky-spa\"\n                    target=\"_blank\"\n                    unelevated\n                    icon={\n                        <MaterialIcon hasRipple icon=\"code\" />\n                    }\n                >\n                    Github Repository\n                </Button>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: IRootState) => ({\n    auth: state.auth\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>) => {\n    // actionName = (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {\n        loginSuccess: (userName: string, apiToken: string, avatarUrl: string) =>\n            dispatch(SuccessLoginAuth(userName, \"\", apiToken, avatarUrl)),\n        listApplication: () =>\n            dispatch(\n                ApplicationActions[CrudType.LIST][\n                    RequestStatus.TRIGGERED\n                ].action(new Application({}))\n            ),\n        listCompany: () =>\n            dispatch(\n                CompanyActions[CrudType.LIST][\n                    RequestStatus.TRIGGERED\n                ].action(new Company({}))\n            )\n    };\n};\n\nexport const LandingPageContainer = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(LandingPage)\n);\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\n\n/** Redux */\nimport { Company } from \"../../store/data-model/company\";\n\n/** Components */\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc-react icon button\nimport '@material/react-icon-button/dist/icon-button.css';\nimport IconButton from '@material/react-icon-button';\n\ninterface ICompanyComponentProps {\n    company: Company;\n    onDeleteIconClicked?: (event: any) => void\n    onEditIconClicked?: (event: any) => void\n}\n\nexport class CompanyComponent extends Component<ICompanyComponentProps> {\n    render() {\n        const company = this.props.company;\n        return (\n            <div className=\"CompanyComponent\">\n                <p>\n                    <Link to={`/com-app/${company.uuid}/`}>\n                        {company.name}\n                    </Link>\n                    <IconButton onClick={this.props.onEditIconClicked}>\n                        <MaterialIcon hasRipple icon=\"edit\"/>\n                    </IconButton>\n                    <IconButton onClick={this.props.onDeleteIconClicked}>\n                        <MaterialIcon hasRipple icon=\"delete\"/>\n                    </IconButton>\n                    <br />\n                    <span>\n                        <strong>UUID:</strong> {company.uuid}\n                    </span>\n                    <br />\n                    <span>\n                        <strong>HQ:</strong> {company.hq_location.full_address}\n                    </span>\n                    <br />\n                    <a target=\"_blank\" href={company.home_page.url}>\n                        <strong>Homepage</strong>\n                    </a>\n                    <br />\n                </p>\n            </div>\n        );\n    }\n}\n","import { RestApiReduxFactory } from \"../rest-api-redux-factory\";\nimport { BaseModel, IBaseModelProps, IRelationship } from \"./base-model\";\nimport { ApplicationStatusLink } from \"./application-status-link\";\n\ninterface IApplicationStatusProps {\n    text?: string;\n    application?: IRelationship;\n    applicationstatuslink_set?: Array<ApplicationStatusLink>\n    date?: string;\n    order?: number\n}\n\nexport class ApplicationStatus extends BaseModel {\n    public text: string;\n    public application: IRelationship;\n    public applicationstatuslink_set: Array<ApplicationStatusLink>\n    public date: string;\n    public order: number;\n\n    constructor({\n        text = \"\",\n        application = \"\",\n        applicationstatuslink_set = [],\n        date = \"\",\n        order = 0,\n        ...args\n    }: IApplicationStatusProps & IBaseModelProps) {\n        super(args);\n        this.text = text;\n        this.application = application;\n        this.applicationstatuslink_set = applicationstatuslink_set;\n        this.date = date;\n        this.order = order;\n    }\n}\n\nconst initialApplicationStatusInstance = new ApplicationStatus({});\nconst ApplicationStatusRestApiRedux = RestApiReduxFactory<ApplicationStatus>(\n    \"application-statuses\",\n    initialApplicationStatusInstance\n);\nexport const ApplicationStatusActions = ApplicationStatusRestApiRedux.actions;\nexport const ApplicationStatusReducer = ApplicationStatusRestApiRedux.storeReducer;\nexport const ApplicationStatusSagas = ApplicationStatusRestApiRedux.sagas;\n","import { RestApiReduxFactory } from \"../rest-api-redux-factory\";\nimport { BaseModel, IBaseModelProps, IRelationship } from \"./base-model\";\nimport { Link } from \"./link\";\n\ninterface IApplicationStatusLinkProps {\n    application_status?: IRelationship;\n    link?: Link;\n}\n\nexport class ApplicationStatusLink extends BaseModel {\n    public application_status: IRelationship;\n    public link: Link;\n\n    constructor({\n        application_status = \"\",\n        link = new Link({}),\n        ...args\n    }: IApplicationStatusLinkProps & IBaseModelProps) {\n        super(args);\n        this.application_status = application_status;\n        this.link = link;\n    }\n}","import React, { Component } from \"react\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\nimport { IObjectStore, IObjectAction } from \"../../store/rest-api-redux-factory\";\n// data models\nimport {\n    ApplicationStatus,\n    ApplicationStatusActions\n} from \"../../store/data-model/application-status\";\nimport {\n    ApplicationStatusLink,\n} from \"../../store/data-model/application-status-link\";\nimport { Application } from \"../../store/data-model/application\";\nimport { Link } from \"../../store/data-model/link\";\n\n/** Rest API */\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\n\n/** Components */\nimport {\n    FormFactory,\n    FormActionButtonProps,\n    IFormFactoryProps,\n    ActionButtonType\n} from \"../form-factory/form-factory\";\nimport {\n    FormInputFieldFactory,\n    FormInputFieldProps,\n    InputFieldType\n} from \"../form-factory/form-field-factory\";\nimport { ErrorMessage, FormikValues, FormikErrors } from \"formik\";\n\ninterface IApplicationStatusFormComponentProps extends RouteComponentProps {\n    applicationStatus?: ApplicationStatus; // for update form\n    onCancel: (event: any) => void;\n    onSubmitSuccess?: () => void;\n\n    /** redux */\n    application: Application;\n    applicationStatusStore: IObjectStore<ApplicationStatus>\n    createApplicationStatus: (\n        applicationStatusFormData: ApplicationStatus,\n        callback?: Function\n    ) => void;\n    updateApplicationStatus: (\n        applicationStatusFormData: ApplicationStatus,\n        callback?: Function\n    ) => void;\n}\n\nclass ApplicationStatusFormComponent extends Component<\n    IApplicationStatusFormComponentProps\n> {\n    formFactoryProps: IFormFactoryProps<any>;\n\n    constructor(props: IApplicationStatusFormComponentProps) {\n        super(props);\n\n        const applicationStatus = this.props.applicationStatus;\n        const initialValues = {\n            application_status__text: applicationStatus ? applicationStatus.text : \"\",\n            application_status__date: applicationStatus ? applicationStatus.date : \"\",\n            application_status__link0__url: applicationStatus ? applicationStatus.applicationstatuslink_set[0].link.url : \"\",\n            application_status__link0__text: applicationStatus ? applicationStatus.applicationstatuslink_set[0].link.text : \"\",\n            application_status__link1__url: applicationStatus ? applicationStatus.applicationstatuslink_set[1].link.url : \"\",\n            application_status__link1__text: applicationStatus ? applicationStatus.applicationstatuslink_set[1].link.text : \"\",\n        }\n\n        this.formFactoryProps = {\n            initialValues: initialValues,\n            validate: this.validate,\n            onSubmit: this.onSubmit,\n            formInputFieldPropsList: [\n                new FormInputFieldProps(\"application_status__text\", \"Status*\"),\n                new FormInputFieldProps(\n                    \"application_status__date\",\n                    \"Date\",\n                    InputFieldType.DATE\n                ),\n                new FormInputFieldProps(\"application_status__link0__url\", \"Link 0 URL\"),\n                new FormInputFieldProps(\"application_status__link0__text\", \"Link 0 Text\"),\n                new FormInputFieldProps(\"application_status__link1__url\", \"Link 1 URL\"),\n                new FormInputFieldProps(\"application_status__link1__text\", \"Link 1 Text\"),\n            ],\n            actionButtonPropsList: [\n                new FormActionButtonProps(\n                    applicationStatus ?\n                    \"Update Status\":\n                    \"Add Status\",\n                    undefined,\n                    ActionButtonType.SUBMIT\n                ),\n                new FormActionButtonProps(\"Cancel\", this.props.onCancel)\n            ]\n        };\n    }\n\n    validate = (values: FormikValues) => {\n        let errors: FormikErrors<any> = {};\n        if (!values.application_status__text) {\n            errors.application_status__text = \"Required\";\n        }\n        if (!values.application_status__date) {\n            errors.application_status__date = \"Please give a valid date\";\n        }\n        return errors;\n    };\n\n    onSubmit = (\n        values: FormikValues,\n        { setSubmitting }: { setSubmitting: Function }\n    ) => {\n        setSubmitting(false);\n        console.log(\"values=\", values);\n\n        // prepare relational objects\n        const application__id = this.props.application.uuid;\n        if (!application__id) {\n            console.error(\n                \"Application object has no uuid so cannot submit form.\"\n            );\n            return;\n        }\n\n        // create link(s)\n        let links = [];\n        const indexes = [0, 1];\n        for (let index of indexes) {\n            if (values[`application_status__link${index}__url`]) {\n                links.push(new Link({\n                    url: values[`application_status__link${index}__url`],\n                    text: values[`application_status__link${index}__text`] || `Link of status`,\n                }))\n            }\n        }\n        // create main object for applicationStatusLink(s)\n        const applicationStatusLinks = links.map(link => {\n            return new ApplicationStatusLink({\n                link,\n            });\n        });\n\n        // create main object for application status\n        const applicationStatus = new ApplicationStatus({\n            text: values.application_status__text,\n            application: application__id,\n            date: values.application_status__date,\n            applicationstatuslink_set: applicationStatusLinks,\n        });\n\n        // dispatch for application status\n        if (!this.props.applicationStatus) {\n            this.props.createApplicationStatus(applicationStatus, this.props.onSubmitSuccess);\n        } else {\n            applicationStatus.uuid = this.props.applicationStatus.uuid;\n            this.props.updateApplicationStatus(applicationStatus, this.props.onSubmitSuccess);\n        }\n        \n    };\n\n    render() {\n        return (\n            <div className=\"ApplicationStatusFormComponent\">\n                <FormFactory {...this.formFactoryProps} />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    // prop: store.prop\n    applicationStatusStore: store.applicationStatus\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<ApplicationStatus> | IObjectAction<ApplicationStatusLink>>) => {\n    // actionName: (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {\n        createApplicationStatus: (\n            applicationStatusFormData: ApplicationStatus,\n            callback?: Function\n        ) =>\n            dispatch(\n                ApplicationStatusActions[CrudType.CREATE][\n                    RequestStatus.TRIGGERED\n                ].action(applicationStatusFormData, callback)\n            )\n        ,\n        updateApplicationStatus: (\n            applicationStatusFormData: ApplicationStatus,\n            callback?: Function\n        ) =>\n            dispatch(\n                ApplicationStatusActions[CrudType.UPDATE][\n                    RequestStatus.TRIGGERED\n                ].action(applicationStatusFormData, callback)\n            )\n        ,\n    };\n};\n\nexport const ApplicationStatusFormComponentContainer = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(ApplicationStatusFormComponent)\n);\n","import React, { Component } from \"react\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\nimport {\n    IObjectAction,\n    IObjectStore\n} from \"../../store/rest-api-redux-factory\";\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\n\n/** data model */\nimport {\n    ApplicationStatus,\n    ApplicationStatusActions\n} from \"../../store/data-model/application-status\";\nimport { ApplicationStatusLink } from \"../../store/data-model/application-status-link\";\nimport { Application } from \"../../store/data-model/application\";\n\n/** Components */\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc-react icon button\nimport \"@material/react-icon-button/dist/icon-button.css\";\nimport IconButton from \"@material/react-icon-button\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\nimport { ApplicationStatusFormComponentContainer } from \"./application-status-form-component\";\n\ninterface IApplicationStatusComponentProps extends RouteComponentProps {\n    applicationStatus?: ApplicationStatus;\n    application?: Application; // needed by form\n    isOnlyForm?: boolean; // needed by add-button\n    deleteApplicationStatus: (\n        applicationStatusToDelete: ApplicationStatus,\n        callback?: Function\n    ) => void;\n}\n\ninterface IApplicationStatusComponentState {\n    isFormOpened: boolean;\n}\n\nclass ApplicationStatusComponent extends Component<\n    IApplicationStatusComponentProps,\n    IApplicationStatusComponentState\n> {\n    state = {\n        isFormOpened: false\n    };\n\n    render() {\n        return (\n            <div className=\"ApplicationStatusComponent\">\n                {(this.state.isFormOpened || this.props.isOnlyForm) && this.props.application ? (\n                    this.renderFormController(\n                        this.props.application,\n                        this.props.applicationStatus\n                    )\n                ) : this.props.applicationStatus ? (\n                    this.renderDisplay(this.props.applicationStatus)\n                ) : (\n                    <span>\n                        Nothing to render: no application status provided so\n                        cannot display; no application provided so form for\n                        create/update are not allowed.\n                    </span>\n                )}\n            </div>\n        );\n    }\n\n    renderDisplay = (applicationStatus: ApplicationStatus) => {\n        return (\n            <div className=\"ApplicationStatusComponent\">\n                <p>\n                    <span>Status: {applicationStatus.text}</span>\n                    <IconButton\n                        onClick={() => this.setState({isFormOpened: true})}\n                    >\n                        <MaterialIcon hasRipple icon=\"edit\" />\n                    </IconButton>\n                    <IconButton\n                        onClick={() =>\n                            this.props.deleteApplicationStatus(\n                                applicationStatus\n                            )\n                        }\n                    >\n                        <MaterialIcon hasRipple icon=\"delete\" />\n                    </IconButton>\n                    <br />\n                    <span>{applicationStatus.date}</span>\n                    <br />\n                    {applicationStatus.applicationstatuslink_set.map(\n                        applicationStatusLink => {\n                            console.log(\n                                \"applicationStatusLinkID Obj=\",\n                                applicationStatusLink\n                            );\n                            return (\n                                applicationStatusLink &&\n                                applicationStatusLink.link && (\n                                    <span key={applicationStatusLink.uuid}>\n                                        <a\n                                            href={\n                                                applicationStatusLink.link.url\n                                            }\n                                            target=\"_blank\"\n                                        >\n                                            {applicationStatusLink.link.text}\n                                        </a>{\" \"}\n                                        |{\" \"}\n                                    </span>\n                                )\n                            );\n                        }\n                    )}\n                </p>\n            </div>\n        );\n    };\n\n    renderFormController = (\n        application: Application,\n        applicationStatus?: ApplicationStatus\n    ) => {\n        return (\n            <div className=\"application-status-form-controller\">\n                {/* new application status form */}\n                {!this.state.isFormOpened ? (\n                    <Button\n                        onClick={clickEvent => {\n                            this.setState({\n                                isFormOpened: true\n                            });\n                        }}\n                        unelevated\n                        icon={<MaterialIcon hasRipple icon=\"add\" />}\n                    >\n                        Add New Status\n                    </Button>\n                ) : (\n                    <div className=\"application-component__status-form\">\n                        <h3>\n                            Add new status to application for{\" \"}\n                            {application.position_title}{\" \"}\n                        </h3>\n                        <ApplicationStatusFormComponentContainer\n                            application={application}\n                            onCancel={clickEvent => {\n                                this.setState({\n                                    isFormOpened: false\n                                });\n                            }}\n                            onSubmitSuccess={() => {\n                                this.setState({\n                                    isFormOpened: false\n                                });\n                            }}\n                        />\n                    </div>\n                )}\n            </div>\n        );\n    };\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    // prop: store.prop\n});\n\nconst mapDispatchToProps = (\n    dispatch: Dispatch<IObjectAction<ApplicationStatus>>\n) => {\n    // actionName: (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {\n        deleteApplicationStatus: (\n            applicationStatusToDelete: ApplicationStatus,\n            callback?: Function\n        ) =>\n            dispatch(\n                ApplicationStatusActions[CrudType.DELETE][\n                    RequestStatus.TRIGGERED\n                ].action(applicationStatusToDelete, callback)\n            )\n    };\n};\n\nexport const ApplicationStatusComponentContainer = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(ApplicationStatusComponent)\n);\n","import React, { Component } from \"react\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\nimport {\n    IObjectStore,\n    IObjectAction\n} from \"../../store/rest-api-redux-factory\";\n// data models\nimport { Company } from \"../../store/data-model/company\";\nimport {\n    Application,\n    ApplicationActions\n} from \"../../store/data-model/application\";\nimport { Link } from \"../../store/data-model/link\";\n\n/** Components */\nimport {\n    FormFactory,\n    FormActionButtonProps,\n    IFormFactoryProps,\n    ActionButtonType\n} from \"../form-factory/form-factory\";\nimport {\n    FormInputFieldFactory,\n    FormInputFieldProps,\n    InputFieldType\n} from \"../form-factory/form-field-factory\";\nimport { ErrorMessage, FormikValues, FormikErrors } from \"formik\";\n\ninterface IApplicationFormComponentProps {\n    application?: Application;\n    onCancel: (event: any) => void;\n    onSubmitSuccess?: () => void;\n\n    company: Company;\n    /** redux */\n    applicationStore: IObjectStore<Application>;\n    createApplication: (\n        applicationFormData: Application,\n        callback?: Function\n    ) => void;\n    updateApplication: (\n        applicationFormData: Application,\n        callback?: Function\n    ) => void;\n}\n\nclass ApplicationFormComponent extends Component<\n    IApplicationFormComponentProps\n> {\n    formFactoryProps: IFormFactoryProps<any>;\n\n    constructor(props: IApplicationFormComponentProps) {\n        super(props);\n\n        // prepare for new application form\n        const application = this.props.application;\n        const initialValues = {\n            application__position_title: application\n                ? application.position_title\n                : \"\",\n            application__job_description_page__url: application\n                ? application.job_description_page.url\n                : \"\",\n            application__job_source__url: application\n                ? application.job_source.url\n                : \"\"\n        };\n\n        this.formFactoryProps = {\n            initialValues: initialValues,\n            validate: this.validateAppForm,\n            onSubmit: this.onSubmitAppForm,\n            formInputFieldPropsList: [\n                new FormInputFieldProps(\n                    \"application__position_title\",\n                    \"Position Title*\"\n                ),\n                new FormInputFieldProps(\n                    \"application__job_description_page__url\",\n                    \"Job Description URL\"\n                ),\n                new FormInputFieldProps(\n                    \"application__job_source__url\",\n                    \"Job Source URL\"\n                )\n            ],\n            actionButtonPropsList: [\n                new FormActionButtonProps(\n                    application ? \"Update\" : \"Create\",\n                    undefined,\n                    ActionButtonType.SUBMIT\n                ),\n                new FormActionButtonProps(\"Cancel\", this.props.onCancel)\n            ]\n        };\n    }\n\n    validateAppForm = (values: FormikValues) => {\n        let errors: FormikErrors<any> = {};\n        if (!values.application__position_title) {\n            errors.application__position_title = \"Required\";\n        }\n        if (\n            !/^https*\\:\\/\\/.+$/i.test(\n                values.application__job_description_page__url\n            )\n        ) {\n            errors.application__job_description_page__url =\n                \"Please start by http:// or https://\";\n        }\n        if (!/^https*\\:\\/\\/.+$/i.test(values.application__job_source__url)) {\n            errors.application__job_source__url =\n                \"Please start by http:// or https://\";\n        }\n        return errors;\n    };\n\n    onSubmitAppForm = (\n        values: FormikValues,\n        { setSubmitting }: { setSubmitting: Function }\n    ) => {\n        setSubmitting(false);\n\n        // prep relationship object by data model\n        const job_description_page = new Link({\n            url: values.application__job_description_page__url,\n            text: `Job description URL for application ${\n                values.application__position_title\n            } at company ${this.props.company.name}`\n        });\n        const job_source = new Link({\n            url: values.application__job_source__url,\n            text: `Job source URL for application ${\n                values.application__position_title\n            } at company ${this.props.company.name}`\n        });\n        const application__user_company__id = this.props.company.uuid;\n\n        // create main object\n        const application = new Application({\n            position_title: values.application__position_title,\n            job_description_page,\n            job_source,\n            user_company: application__user_company__id\n        });\n\n        // dispatch\n        if (!this.props.application) {\n            this.props.createApplication(application, () => {\n                // log print newly created application\n                if (this.props.applicationStore.lastChangedObjectID) {\n                    const newApplication = this.props.applicationStore\n                        .collection[\n                        this.props.applicationStore.lastChangedObjectID\n                    ];\n                    console.log(\"new application:\", newApplication);\n                    this.props.onSubmitSuccess && this.props.onSubmitSuccess();\n                } else {\n                    console.error(\n                        \"application store has no lastChangedObjectID\"\n                    );\n                }\n            });\n        } else {\n            console.log(\"Update application form: application=\", application);\n            application.uuid = this.props.application.uuid;\n            this.props.updateApplication(application, this.props.onSubmitSuccess);\n        }\n    };\n\n    render() {\n        return (\n            <div className=\"ApplicationFormComponent\">\n                <FormFactory {...this.formFactoryProps} />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    applicationStore: store.application\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<Application>>) => {\n    return {\n        createApplication: (\n            applicationFormData: Application,\n            callback?: Function\n        ) =>\n            dispatch(\n                ApplicationActions[CrudType.CREATE][\n                    RequestStatus.TRIGGERED\n                ].action(applicationFormData, callback)\n            )\n        ,\n        updateApplication: (\n            applicationFormData: Application,\n            callback?: Function\n        ) =>\n            dispatch(\n                ApplicationActions[CrudType.UPDATE][\n                    RequestStatus.TRIGGERED\n                ].action(applicationFormData, callback)\n            )\n        ,\n    };\n};\n\nexport const ApplicationFormComponentContainer = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ApplicationFormComponent);\n","import React, { Component } from \"react\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport {\n    Application,\n    ApplicationActions\n} from \"../../store/data-model/application\";\nimport { IRootState } from \"../../store/types\";\nimport { IObjectAction } from \"../../store/rest-api-redux-factory\";\nimport { Dispatch } from \"redux\";\n\n/** data model */\nimport { ApplicationStatus } from \"../../store/data-model/application-status\";\nimport { Company } from \"../../store/data-model/company\";\n\n/** rest api */\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\n\n/** Components */\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\nimport IconButton from \"@material/react-icon-button\";\nimport { ApplicationStatusComponentContainer } from \"../application-status/application-status-component\";\nimport { ApplicationFormComponentContainer } from \"./application-form-component\";\n\n/** Types */\ninterface IApplicationComponentProps {\n    application?: Application;\n\n    /** application form */\n    company?: Company;\n\n    isOnlyForm?: boolean;\n\n    applicationStatusList?: Array<ApplicationStatus>;\n    isShowApplicationStatuses?: boolean;\n\n    /** redux */\n    deleteApplication: (\n        applicationToDelete: Application,\n        callback?: Function\n    ) => void;\n}\n\ninterface IApplicationComponentState {\n    isFormOpened: boolean;\n}\n\n/** Main Class */\nexport class ApplicationComponent extends Component<\n    IApplicationComponentProps,\n    IApplicationComponentState\n> {\n    state = {\n        isFormOpened: false\n    };\n\n    render() {\n        return (\n            <div className=\"application-component\">\n                {this.state.isFormOpened || this.props.isOnlyForm\n                    ? this.renderApplicationFormController()\n                    : this.props.application &&\n                      Array.isArray(this.props.applicationStatusList) &&\n                      this.renderApplicationDisplay(\n                          this.props.application,\n                          this.props.applicationStatusList\n                      )}\n            </div>\n        );\n    }\n\n    renderApplicationFormController = () => {\n        return (\n            this.props.company && ( // application create or udpate must have company associate with it.\n                <div className=\"application-form-controller\">\n                    {!this.state.isFormOpened ? (\n                        <Button\n                            onClick={clickEvent => {\n                                this.setState({\n                                    isFormOpened: true\n                                });\n                            }}\n                            unelevated\n                            icon={<MaterialIcon hasRipple icon=\"add\" />}\n                        >\n                            Add Application\n                        </Button>\n                    ) : (\n                        <ApplicationFormComponentContainer\n                            onCancel={event => {\n                                console.log(\"onCancel clicked\");\n                                this.setState({\n                                    isFormOpened: false\n                                });\n                            }}\n                            onSubmitSuccess={() =>\n                                this.setState({\n                                    isFormOpened: false\n                                })\n                            }\n                            company={this.props.company}\n                            application={this.props.application}\n                        />\n                    )}\n                </div>\n            )\n        );\n    };\n\n    renderApplicationDisplay = (\n        application: Application,\n        applicationStatusList: Array<ApplicationStatus>\n    ) => {\n        return (\n            <div className=\"application-component-display\">\n                {/* application display view */}\n                <h3>Application</h3>\n                <p>\n                    <span>\n                        <strong>Position:</strong> {application.position_title}\n                    </span>\n\n                    <IconButton\n                        onClick={() => {\n                            this.setState({\n                                isFormOpened: true // open form and close display\n                            });\n                        }}\n                    >\n                        <MaterialIcon hasRipple icon=\"edit\" />\n                    </IconButton>\n                    <IconButton\n                        onClick={() =>\n                            this.props.deleteApplication(application)\n                        }\n                    >\n                        <MaterialIcon hasRipple icon=\"delete\" />\n                    </IconButton>\n                    <br />\n                    <span>Application UUID: {application.uuid}</span>\n                    <br />\n                    {application.job_description_page.url ? (\n                        <a\n                            target=\"_blank\"\n                            href={application.job_description_page.url}\n                        >\n                            <strong>JD Page</strong>\n                        </a>\n                    ) : (\n                        <span>JD Page</span>\n                    )}\n\n                    <br />\n                    {application.job_source.url ? (\n                        <a target=\"_blank\" href={application.job_source.url}>\n                            <strong>Job Source</strong>\n                        </a>\n                    ) : (\n                        <span>Job Source</span>\n                    )}\n                </p>\n\n                {/* application statuses list */}\n                {this.props.isShowApplicationStatuses &&\n                    applicationStatusList.map(status => {\n                        return (\n                            <ApplicationStatusComponentContainer\n                                key={status.uuid}\n                                applicationStatus={status}\n                            />\n                        );\n                    })}\n\n                {/* application status form controller */}\n                <ApplicationStatusComponentContainer\n                    application={application}\n                    isOnlyForm\n                />\n            </div>\n        );\n    };\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<Application>>) => {\n    // actionName: (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {\n        deleteApplication: (\n            applicationToDelete: Application,\n            callback?: Function\n        ) =>\n            dispatch(\n                ApplicationActions[CrudType.DELETE][\n                    RequestStatus.TRIGGERED\n                ].action(applicationToDelete, callback)\n            )\n    };\n};\n\nexport const ApplicationComponentController = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ApplicationComponent);\n","import React, { Component } from \"react\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\nimport {\n    IObjectAction,\n    IObjectStore\n} from \"../../store/rest-api-redux-factory\";\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\n// data models\nimport { CompanyActions, Company } from \"../../store/data-model/company\";\nimport {\n    ApplicationActions,\n    Application\n} from \"../../store/data-model/application\";\nimport { ApplicationStatus } from \"../../store/data-model/application-status\";\n\n/** Components */\n// objects\nimport { CompanyComponent } from \"../company/company-component\";\nimport { ApplicationComponentController } from \"../application/application-component\";\n\ninterface ICompanyApplicationComponentProps extends RouteComponentProps {\n    company: Company;\n    applicationStore: IObjectStore<Application>;\n    applicationStatusStore: IObjectStore<ApplicationStatus>;\n    isShowApplicationStatuses?: boolean;\n    deleteCompany: (companyToDelete: Company, callback?: Function) => void;\n    updateCompany: (companyToUpdate: Company, callback?: Function) => void;\n}\n\nclass CompanyApplicationComponent extends Component<\n    ICompanyApplicationComponentProps\n> {\n    onDeleteClick = (event: any) => {\n        if (this.props.company.uuid) {\n            this.props.deleteCompany(this.props.company);\n        } else {\n            console.error(\"Attempted to delete but company obj has no uuid\");\n        }\n    };\n\n    render() {\n        return (\n            <div className=\"CompanyApplicationContainer\">\n                <CompanyComponent\n                    company={this.props.company}\n                    onDeleteIconClicked={this.onDeleteClick}\n                    onEditIconClicked={() => {\n                        this.props.history.push(`/com-form/${this.props.company.uuid}/`);\n                    }}\n                />\n                {Object.values(this.props.applicationStore.collection)\n                    .filter(\n                        application =>\n                            application.user_company === this.props.company.uuid\n                    )\n                    .map(application => {\n                        const applicationStatusList =\n                            this.props.isShowApplicationStatuses || false\n                                ? Object.values(\n                                      this.props.applicationStatusStore\n                                          .collection\n                                  ).filter(\n                                      applicationStatus =>\n                                          applicationStatus.application ===\n                                          application.uuid\n                                  )\n                                : [];\n                        return (\n                            <ApplicationComponentController\n                                key={application.uuid}\n                                application={application}\n                                company={this.props.company}\n                                applicationStatusList={applicationStatusList}\n                                isShowApplicationStatuses={\n                                    this.props.isShowApplicationStatuses\n                                }\n                            />\n                        );\n                    })}\n                {!this.props.isShowApplicationStatuses && <hr />}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    // prop: store.prop\n    applicationStore: store.application,\n    applicationStatusStore: store.applicationStatus\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<Application>>) => {\n    // actionName: (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {\n        deleteCompany: (companyToDelete: Company, callback?: Function) =>\n            dispatch(\n                CompanyActions[CrudType.DELETE][RequestStatus.TRIGGERED].action(\n                    companyToDelete,\n                    callback\n                )\n            ),\n        updateCompany: (companyToUpdate: Company, callback?: Function) =>\n            dispatch(\n                CompanyActions[CrudType.UPDATE][RequestStatus.TRIGGERED].action(\n                    companyToUpdate,\n                    callback\n                )\n            )\n    };\n};\n\nexport const CompanyApplicationComponentContainer = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(CompanyApplicationComponent)\n);\n","import React, { Component } from \"react\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\nimport { IObjectAction, IObjectStore } from \"../../store/rest-api-redux-factory\";\n// data models\nimport { Company } from \"../../store/data-model/company\";\nimport { Application } from \"../../store/data-model/application\";\n\n/** Components */\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n// objects\nimport { CompanyApplicationComponentContainer } from \"../../components/company-application/company-application-component\";\n\ninterface IUserAppPageProps extends RouteComponentProps {\n    company: IObjectStore<Company>\n    application: IObjectStore<Application>\n}\n\nclass UserAppPage extends Component<IUserAppPageProps> {\n\n    componentDidMount() {\n    }\n\n    render() {\n        return (\n            <div className=\"UserAppPage\">\n                <h1>Your Applications</h1>\n                <Button\n                    onClick={()=>{ this.props.history.push(\"/com-form/\") }}\n                    unelevated\n                    icon={<MaterialIcon hasRipple icon=\"add\" />}\n                    children=\"Add Company\"\n                />\n                <br></br>\n                {\n                    (this.props.company.collection !== {}) && Object.values(this.props.company.collection).map((company) => {\n                        return (\n                            <CompanyApplicationComponentContainer key={company.uuid} company={company} />\n                        )\n                    })\n                }\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    // prop: store.prop\n    company: store.company,\n    application: store.application,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<{}>>) => {\n    // actionName = (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n\n    return {\n        // listObject: (callback?: Function) =>\n        //     dispatch(\n        //         ObjectActions[CrudType.LIST][RequestStatus.TRIGGERED].action(\n        //             new Object({}),\n        //             callback\n        //         )\n        //     ),\n    }\n};\n\nexport const UserAppPageContainer = withRouter(connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(UserAppPage));\n","import React, { Component } from \"react\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\nimport {\n    IObjectStore,\n    IObjectAction\n} from \"../../store/rest-api-redux-factory\";\n// data models\nimport { Company, CompanyActions } from \"../../store/data-model/company\";\nimport { Link } from \"../../store/data-model/link\";\nimport { Address } from \"../../store/data-model/address\";\n\n/** Components */\nimport {\n    FormFactory,\n    FormActionButtonProps,\n    IFormFactoryProps,\n    ActionButtonType\n} from \"../form-factory/form-factory\";\nimport {\n    FormInputFieldFactory,\n    FormInputFieldProps,\n    InputFieldType\n} from \"../form-factory/form-field-factory\";\nimport { ErrorMessage, FormikValues, FormikErrors } from \"formik\";\n\ninterface ICompanyFormComponentProps {\n    company?: Company;\n    onCancel: (event: any) => void;\n    onSubmitSuccess?: () => void;\n\n    /** redux */\n    createCompany: (companyFormData: Company, callback?: Function) => void;\n    updateCompany: (companyFormData: Company, callback?: Function) => void;\n}\n\nclass CompanyFormComponent extends Component<ICompanyFormComponentProps> {\n    formFactoryProps: IFormFactoryProps<any>;\n\n    constructor(props: ICompanyFormComponentProps) {\n        super(props);\n\n        // prepare for new company form\n        const initialValues = {\n            company__name: this.props.company && this.props.company.name ||  \"\",\n            company__hq_location__full_address: this.props.company && this.props.company.hq_location.full_address ||  \"\",\n            company__home_page__url: this.props.company && this.props.company.home_page.url || \"\",\n        };\n\n        this.formFactoryProps = {\n            initialValues: initialValues,\n            validate: this.validateAppForm,\n            onSubmit: this.onSubmitAppForm,\n            formInputFieldPropsList: [\n                new FormInputFieldProps(\"company__name\", \"Company Name*\"),\n                new FormInputFieldProps(\n                    \"company__hq_location__full_address\",\n                    \"HQ Address or Location\"\n                ),\n                new FormInputFieldProps(\n                    \"company__home_page__url\",\n                    \"Company Home Page URL\"\n                )\n            ],\n            actionButtonPropsList: [\n                new FormActionButtonProps(\n                    !this.props.company ? \"Create\" : \"Update\",\n                    undefined,\n                    ActionButtonType.SUBMIT\n                ),\n                new FormActionButtonProps(\"Cancel\", this.props.onCancel)\n            ]\n        };\n    }\n\n    validateAppForm = (values: FormikValues) => {\n        let errors: FormikErrors<any> = {};\n        if (!values.company__name) {\n            errors.company__name = \"Required\";\n        }\n        if (!/^https*\\:\\/\\/.+$/i.test(values.company__home_page__url)) {\n            errors.company__home_page__url =\n                \"Please start by http:// or https://\";\n        }\n        return errors;\n    };\n\n    onSubmitAppForm = (\n        values: FormikValues,\n        { setSubmitting }: { setSubmitting: Function }\n    ) => {\n        setSubmitting(false);\n        console.log(\"values=\", values);\n\n        // prep relationship object by data model\n        const hq_location = new Address({\n            full_address: values.company__hq_location__full_address,\n            place_name: `HQ of ${values.company__name}`\n        });\n        const home_page = new Link({\n            url: values.company__home_page__url,\n            text: `Home page of ${values.company__name}`\n        });\n        // create main object\n        const company = new Company({\n            name: values.company__name,\n            hq_location,\n            home_page\n        });\n\n        // dispatch\n        if (!this.props.company) {\n            console.log(\"company form: dispatching createCompany action\");\n            this.props.createCompany(company, this.props.onSubmitSuccess);\n        }\n        else  {\n            console.log(\"company form: dispatching updateCompany action\");\n            company.uuid = this.props.company.uuid;\n            this.props.updateCompany(company, this.props.onSubmitSuccess);\n        }\n    };\n\n    render() {\n        return (\n            <div className=\"CompanyFormComponent\">\n                <FormFactory {...this.formFactoryProps} />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => ({});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<Company>>) => {\n    return {\n        createCompany: (companyFormData: Company, callback?: Function) =>\n            dispatch(\n                CompanyActions[CrudType.CREATE][RequestStatus.TRIGGERED].action(\n                    companyFormData,\n                    callback\n                )\n            ),\n        updateCompany: (companyFormData: Company, callback?: Function) =>\n            dispatch(\n                CompanyActions[CrudType.UPDATE][RequestStatus.TRIGGERED].action(\n                    companyFormData,\n                    callback\n                )\n            )\n    };\n};\n\nexport const CompanyFormComponentContainer = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(CompanyFormComponent);\n","import React, { Component } from \"react\";\n\n/** route */\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\n// REST API\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\nimport {\n    IObjectAction,\n    IObjectStore\n} from \"../../store/rest-api-redux-factory\";\nimport { CompanyActions, Company } from \"../../store/data-model/company\";\nimport { Address } from \"../../store/data-model/address\";\nimport { Link } from \"../../store/data-model/link\";\n\n/** Components */\n//mdc-react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc-react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n// mdc-react input\nimport \"@material/react-text-field/dist/text-field.css\";\nimport TextField, { HelperText, Input } from \"@material/react-text-field\";\n// formik\nimport { Formik, Form, Field } from \"formik\";\n// form factory\nimport {\n    FormFactory,\n    FormActionButtonProps,\n    IFormFactoryProps\n} from \"../../components/form-factory/form-factory\";\nimport {\n    FormInputFieldFactory,\n    FormInputFieldProps,\n    InputFieldType\n} from \"../../components/form-factory/form-field-factory\";\nimport { ErrorMessage, FormikValues, FormikErrors } from \"formik\";\nimport { CompanyFormComponentContainer } from \"../../components/company/company-form-component\";\n\ninterface IAddComPageParams {\n    uuid?: string;\n}\n\ninterface IAddComPageProps extends RouteComponentProps<IAddComPageParams> {\n    company: IObjectStore<Company>;\n}\n\nclass AddComPage extends Component<IAddComPageProps> {\n    render() {\n        const company: Company | undefined = (this.props.match.params.uuid && this.props.company.collection[this.props.match.params.uuid])\n            ? this.props.company.collection[this.props.match.params.uuid]\n            : undefined;\n        console.log(\n            \"com form page: params is\",\n            this.props.match.params.uuid,\n            \"company is\",\n            company\n        );\n        return (\n            <div className=\"AddComPage\">\n                <h1>{company ? \"Add a Company\" : `Update Company`}</h1>\n                <CompanyFormComponentContainer\n                    company={company}\n                    onSubmitSuccess={() => {\n                        console.log(\"com form page: onSubmitSuccess\");\n                        if (this.props.company.lastChangedObjectID) {\n                            let newCompany = this.props.company.collection[\n                                this.props.company.lastChangedObjectID\n                            ];\n                            console.log(\"new company:\", newCompany);\n                            this.props.history.push(\n                                `/com-app/${newCompany.uuid}/`\n                            );\n                        } else {\n                            console.error(\"store has no lastChangedObjectID\");\n                        }\n                    }}\n                    onCancel={event => {\n                        this.props.history.goBack()\n                    }}\n                />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: IRootState) => ({\n    // prop: state.prop\n    company: state.company\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<Company>>) => {\n    // actionName = (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {};\n};\n\nexport const AddComPageContainer = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(AddComPage)\n);\n","import React, { Component } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { RouteComponentProps } from \"react-router\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\n// rest api\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\nimport {\n    IObjectStore,\n    IObjectAction\n} from \"../../store/rest-api-redux-factory\";\nimport { Company } from \"../../store/data-model/company\";\nimport { Link } from \"../../store/data-model/link\";\nimport {\n    Application,\n    ApplicationActions\n} from \"../../store/data-model/application\";\n\n/** Components */\nimport { CompanyApplicationComponentContainer } from \"../../components/company-application/company-application-component\";\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n// mdc-react input\nimport \"@material/react-text-field/dist/text-field.css\";\nimport TextField, { HelperText, Input } from \"@material/react-text-field\";\n// form factory\nimport {\n    FormFactory,\n    FormActionButtonProps,\n    IFormFactoryProps\n} from \"../../components/form-factory/form-factory\";\n// formik\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\nimport {\n    FormInputFieldFactory,\n    FormInputFieldProps,\n    InputFieldType\n} from \"../../components/form-factory/form-field-factory\";\nimport { FormikValues, FormikErrors } from \"formik\";\nimport { ApplicationFormComponentContainer } from \"../../components/application/application-form-component\";\nimport { ApplicationComponentController } from \"../../components/application/application-component\";\n\ninterface IUserComAppPageParams {\n    uuid: string;\n}\n\ninterface IUserComAppPageProps\n    extends RouteComponentProps<IUserComAppPageParams> {\n    company: IObjectStore<Company>;\n    createApplication: (\n        applicationFormData: Application,\n        callback?: Function\n    ) => void;\n}\n\ninterface IUserComAppPageState {\n    companyUuid: string;\n    company: Company;\n}\n\nclass UserComAppPage extends Component<\n    IUserComAppPageProps,\n    IUserComAppPageState\n> {\n    readonly state: IUserComAppPageState = {\n        companyUuid: \"\",\n        company: new Company({})\n    };\n\n    componentDidMount() {\n        let companyUuid = this.props.match.params.uuid;\n        console.log(\"mount, got uuid from route?\", companyUuid);\n        if (\n            this.props.company.collection &&\n            companyUuid in this.props.company.collection\n        ) {\n            this.setState({\n                companyUuid,\n                company: new Company(this.props.company.collection[companyUuid])\n            });\n        }\n    }\n\n    renderAll() {\n        if (!this.state.company.uuid) {\n            return;\n        }\n\n        return (\n            <div className=\"user-com-app-page-content\">\n                <Button\n                    onClick={clickEvent => {\n                        this.props.history.push(\"/\");\n                    }}\n                >\n                    Back\n                </Button>\n                <h1>{this.state.company.name}</h1>\n                \n                {/* application form controller - always create form */}\n                <ApplicationComponentController \n                    company={this.state.company}\n                    isOnlyForm\n                />\n\n                <br />\n\n                {/* application list */}\n                {this.state.company.uuid && (\n                    <CompanyApplicationComponentContainer\n                        company={this.state.company}\n                        isShowApplicationStatuses\n                    />\n                )}\n            </div>\n        );\n    }\n\n    render() {\n        return (\n            <div className=\"UserComAppPage\">\n                {this.state.companyUuid &&\n                this.props.company.collection &&\n                this.state.companyUuid in this.props.company.collection ? (\n                    this.renderAll()\n                ) : this.state.companyUuid ? (\n                    <h1>No company found. Uuid={this.state.companyUuid}</h1>\n                ) : (\n                    <h1>Company uuid not specified</h1>\n                )}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => {\n    return {\n        // prop: store.prop\n        company: store.company,\n    };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<Application>>) => {\n    // actionName = (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {\n        createApplication: (\n            applicationFormData: Application,\n            callback?: Function\n        ) =>\n            dispatch(\n                ApplicationActions[CrudType.CREATE][\n                    RequestStatus.TRIGGERED\n                ].action(applicationFormData, callback)\n            )\n    };\n};\n\nexport const UserComAppPageContainer = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(UserComAppPage)\n);\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { IUpdateAuthState } from \"../../store/auth/types\";\n\ninterface UserInfoProps {\n    auth: IUpdateAuthState;\n}\n\nexport class UserInfo extends Component<UserInfoProps, any> {\n    render() {\n        return (\n            <div>\n                <div>\n                    Logged in:{\" \"}\n                    {(this.props.auth.isLogin &&\n                        this.props.auth.isLogin.toString()) ||\n                        \"undefine\"}\n                </div>\n                <div>User Name: {this.props.auth.userName || \"(empty)\"}</div>\n                <div>\n                    Token (for API): {this.props.auth.apiToken || \"(empty)\"}\n                </div>\n            </div>\n        );\n    }\n}\n","import React, { Component } from \"react\";\n\n/** redux */\nimport { connect } from \"react-redux\";\nimport { IRootState } from \"../../store/types\";\nimport { IUpdateAuthState } from \"../../store/auth/types\";\n\n/** Routes & pages */\nimport { UserInfo } from \"../../components/user-info/user-info\";\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\n\n/** Components */\nimport { SocialAuthButtonContainer } from \"../../components/social-auth/social-auth-button\";\n\ninterface IUserProfilePageProps extends RouteComponentProps {\n    auth: IUpdateAuthState;\n}\n\nclass UserProfilePage extends Component<IUserProfilePageProps, any> {\n    render() {\n        return (\n            <div>\n                <h1>My Profile</h1>\n                <UserInfo auth={this.props.auth} />\n                <SocialAuthButtonContainer />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => {\n    return {\n        auth: store.auth\n    };\n};\n\nexport const UserProfilePageContainer = withRouter(connect(mapStateToProps)(UserProfilePage));\n","import React, { Component } from \"react\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { IRootState } from \"../../store/types\";\nimport { IUpdateAuthState } from \"../../store/auth/types\";\n\n/** Routing & Pages */\nimport {\n    Route,\n    Redirect,\n    Switch,\n    Link,\n    withRouter,\n    RouteComponentProps\n} from \"react-router-dom\";\n// pages\nimport { LandingPageContainer } from \"../landing-page/landing-page\";\nimport { UserAppPageContainer } from \"../user-app-page/user-app-page\";\nimport { AddComPageContainer } from \"../add-com-page/add-com-page\";\nimport { UserComAppPageContainer } from \"../user-com-app-page/user-com-app-page\";\nimport { UserProfilePageContainer } from \"../user-profile-page/user-profile-page\";\n\n/** MDC React */\nimport TopAppBar, { TopAppBarFixedAdjust } from \"@material/react-top-app-bar\";\nimport \"@material/react-top-app-bar/dist/top-app-bar.css\";\n// import '@material/react-material-icon/dist/material-icon.css';\nimport MaterialIcon from \"@material/react-material-icon\";\n// style\nimport \"@material/react-ripple/dist/ripple.css\";\n\n// import {withRipple} from '@material/react-ripple';\n\ninterface IPageRoutesProps extends RouteComponentProps {\n    auth: IUpdateAuthState;\n}\n\nclass PageRoutes extends Component<IPageRoutesProps> {\n    render() {\n        return (\n            <div className=\"PageRoutesContainer\">\n                {this.props.location.pathname === \"/\" ? (\n                    <Route path=\"/\" exact component={LandingPageContainer} />\n                ) : (\n                    <div className=\"PrivateRoutesContainer\">\n                        {/** protect private routes */\n                        !this.props.auth.isLogin && <Redirect to=\"/\" />}\n\n                        <TopAppBar\n                            title=\"Appl Tracky\"\n                            actionItems={[\n                                <Link to=\"/home/\">\n                                    <MaterialIcon\n                                        hasRipple\n                                        key=\"itemHome\"\n                                        icon=\"home\"\n                                    />\n                                </Link>,\n\n                                <Link to=\"/profile/\">\n                                    {this.props.auth.avatarUrl === \"\" ? (\n                                        <MaterialIcon\n                                            hasRipple\n                                            key=\"itemProfile\"\n                                            icon=\"account_circle\"\n                                        />\n                                    ) : (\n                                        <img style={{\n                                            \"height\": \"100%\",\n                                            \"borderRadius\": \"50%\",\n                                        }} src={this.props.auth.avatarUrl} />\n                                    )}\n                                </Link>\n                            ]}\n                        />\n                        <TopAppBarFixedAdjust>\n                            <Switch>\n                                <Route\n                                    path=\"/home/\"\n                                    component={UserAppPageContainer}\n                                />\n                                <Route\n                                    path=\"/com-form/:uuid?/\"\n                                    component={AddComPageContainer}\n                                />\n                                <Route\n                                    path=\"/com-app/:uuid/\"\n                                    component={UserComAppPageContainer}\n                                />\n                                <Route\n                                    path=\"/com-app/\"\n                                    component={UserComAppPageContainer}\n                                />\n                                <Route\n                                    path=\"/profile/\"\n                                    component={UserProfilePageContainer}\n                                />\n                                {/** add more page routes here */}\n                            </Switch>\n                        </TopAppBarFixedAdjust>\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    auth: store.auth\n});\n\nconst mapDispatchToProps = {};\n\nexport const PageRoutesContainer = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(PageRoutes)\n);\n","/** React core */\nimport React, { Component } from \"react\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { IRootState } from \"./store/types\";\n\n/** Routes & pages */\nimport { PageRoutesContainer } from \"./pages/page-routes/page-routes\";\n\n/** Locals */\nimport \"./App.css\";\n\ninterface IAppProps {}\n\nclass App extends Component<IAppProps> {\n    componentDidMount() {}\n\n    render() {\n        return (\n            <div className=\"App\">\n                <PageRoutesContainer />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => {\n    return {};\n};\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { Action } from \"redux\";\nimport { IRootState } from \"./types\";\n\nexport enum RootActionNames {\n    ResetAllStore = \"RESET_ALL_STORE\"\n}\n\nexport const resetAllStoreAction = () => {\n    return {\n        type: RootActionNames.ResetAllStore,\n    }\n}","import { Reducer, Action } from 'redux';\n\nimport { \n    /** store */\n    IUpdateAuthState, \n    /** action */\n    AuthActionNames, TAuthActions \n} from \"./types\";\n\nimport { RequestStatus } from \"../../utils/rest-api\";\n\nconst initialAuthState: IUpdateAuthState = {\n    requestStatus: RequestStatus.SUCCESS,\n    isLogin: false,\n    socialAuthToken: \"\",\n    apiToken: \"\",\n    userName: \"\",\n    expireDateTime: \"\",\n    avatarUrl: \"\",\n}\n\n// authStore will be stored as a sub-entry in global store; this is defined in ./store/types.ts\nexport const authReducer: Reducer<IUpdateAuthState> = (authStore = initialAuthState, action: Action)  => {\n    // add reducer for new actions here\n    // ...\n\n    const authAction = action as TAuthActions;\n\n    return {\n        ...authStore,\n        ...authAction.payload\n    }\n}","/** redux */\nimport {\n    AuthActionNames,\n    IRequestedLoginAuthAction,\n    IRequestedLogoutAuthAction\n} from \"../../store/auth/types\";\nimport {\n    SuccessLoginAuth,\n    SuccessLogoutAuth,\n    FailureAuth\n} from \"../../store/auth/actions\";\nimport { resetAllStoreAction } from \"../../store/actions\";\nimport { CompanyActions, Company } from \"../../store/data-model/company\";\nimport { ApplicationActions, Application } from \"../../store/data-model/application\";\nimport { ApplicationStatusActions, ApplicationStatus } from \"../../store/data-model/application-status\";\n// redux-saga\nimport { takeEvery, call, put } from \"redux-saga/effects\";\n\n/** router */\nimport { push } from \"connected-react-router\";\n\n/** api */\nimport { AuthenticationService } from \"../../utils/auth\";\nimport { RestApiService, CrudType, RequestStatus } from \"../../utils/rest-api\";\n\nfunction* authLoginSagaHandler(\n    requestedLoginAuthAction: IRequestedLoginAuthAction\n) {\n    // RequestAuth action triggered & injecting side effects here...\n    console.log(\"auth saga: initialize\");\n    const { socialAuthToken } = requestedLoginAuthAction.payload;\n    console.log(\"auth saga: request fired\");\n    try {\n        // TODO: define interface typing for api response\n        const jsonResponse = yield call(AuthenticationService.serverLogin, socialAuthToken);\n        console.log(\"auth saga: server login using code from social button. server jsonRes=\", jsonResponse);\n        AuthenticationService.state.apiLoginToken = jsonResponse.token;\n        yield put(SuccessLoginAuth(\n            jsonResponse.email, \"\", \n            jsonResponse.token, \n            jsonResponse.avatar_url\n        ));\n        // yield put(push(\"/home/\"));\n\n        // initial fetch user data\n        yield put(ApplicationActions[CrudType.LIST][RequestStatus.TRIGGERED].action(new Application({})))\n        yield put(CompanyActions[CrudType.LIST][RequestStatus.TRIGGERED].action(new Company({})))\n        yield put(ApplicationStatusActions[CrudType.LIST][RequestStatus.TRIGGERED].action(new ApplicationStatus({})))\n    } catch (error) {\n        console.warn(\"auth saga: error\")\n        yield put(FailureAuth(error));\n        return;\n    }\n}\n\nexport function* authLoginSaga() {\n    yield takeEvery(AuthActionNames.REQUESTED_LOGIN_AUTH, authLoginSagaHandler);\n}\n\nfunction* authLogoutSagaHandler(\n    requestedLogoutAuthAction: IRequestedLogoutAuthAction\n) {\n    // RequestAuth action triggered & injecting side effects here...\n    console.log(\"auth logout saga: fired\");\n    try {\n        yield call(AuthenticationService.serverLogout);\n\n        // clear all store\n    } catch (error) {\n        yield put(FailureAuth(error));\n        return;\n    }\n\n    console.log(\"auth logout saga: navigating\");\n    yield put(SuccessLogoutAuth());\n    // yield put(push(\"/\"));\n\n    // clear all redux store\n    yield put(resetAllStoreAction());\n}\n\nexport function* authLogoutSaga() {\n    yield takeEvery(\n        AuthActionNames.REQUESTED_LOGOUT_AUTH,\n        authLogoutSagaHandler\n    );\n}\n\n// add new saga handler here && a `takeEvery` saga.\n// ...","import createSagaMiddleware from 'redux-saga';\nimport { all } from \"redux-saga/effects\";\nimport { authLoginSaga, authLogoutSaga } from \"./auth/sagas\";\n// rest api\nimport { CompanySagas } from \"../store/data-model/company\";\nimport { AddressSagas } from \"../store/data-model/address\";\nimport { ApplicationSagas } from \"../store/data-model/application\";\nimport { ApplicationStatusSagas } from \"../store/data-model/application-status\";\n\n/** setup saga */\nconst sagaMiddleware = createSagaMiddleware();\n\nexport {\n    sagaMiddleware\n};\n\nconst rootSaga = function*() {\n    yield all([\n        authLoginSaga(),\n        authLogoutSaga(),\n        ...CompanySagas.map((saga) => saga()),\n        ...AddressSagas.map((saga) => saga()),\n        ...ApplicationSagas.map((saga) => saga()),\n        ...ApplicationStatusSagas.map((saga) => saga()),\n        // add new saga here\n        // ...\n    ]);\n};\n\nexport const runSagaMiddleaware = () => {\n    sagaMiddleware.run(rootSaga)\n}\n\n","/** redux */\nimport { combineReducers, Reducer, AnyAction, Action } from \"redux\";\nimport { connectRouter, LocationChangeAction } from 'connected-react-router';\nimport { authReducer } from \"./auth/reducers\";\nimport { TAuthActions } from \"./auth/types\";\nimport { IRootState } from \"./types\";\nimport { RootActionNames } from \"./actions\";\n// rest api\nimport { CompanyReducer } from \"./data-model/company\";\nimport { AddressReducer } from \"./data-model/address\";\nimport { ApplicationReducer } from \"./data-model/application\";\nimport { ApplicationStatusReducer } from \"./data-model/application-status\";\n\n/** router */\nimport { History } from \"history\";\n\n// root reducer with router state\nexport const createRootReducer = (history: History<any>): Reducer<IRootState> => {\n    // return combineReducers<IRootState>({\n    //     router: connectRouter(history),\n    \n    //     // add more reducers here\n    //     auth: authReducer,\n    //     company: CompanyReducer,\n    //     address: AddressReducer,\n    //     application: ApplicationReducer,\n    //     // ...\n    // })\n\n    const rootReducer: Reducer<IRootState> = (rootState: IRootState | undefined, action: Action): IRootState  => {\n\n        let rootStateChecked: any = {}\n        if (!rootState) {\n            rootStateChecked.router = undefined;\n            rootStateChecked.auth = undefined;\n            rootStateChecked.company = undefined;\n            rootStateChecked.address = undefined;\n            rootStateChecked.application = undefined;\n            rootStateChecked.applicationStatus = undefined;\n            // add initial state for new sub-store here\n            // ...\n        } else if (action.type === RootActionNames.ResetAllStore) {\n            rootStateChecked = {\n                router: rootState.router\n            }\n        } else {\n            rootStateChecked = rootState;\n        }\n\n        console.log(\"beforeRootStore\", rootState);\n\n        const afterStore  = { \n            ...rootState,\n            router: connectRouter(history)(rootStateChecked.router, action as LocationChangeAction),\n            auth: authReducer(rootStateChecked.auth, action),\n            company: CompanyReducer(rootStateChecked.company, action),\n            address: AddressReducer(rootStateChecked.address, action),\n            application: ApplicationReducer(rootStateChecked.application, action),\n            applicationStatus: ApplicationStatusReducer(rootStateChecked.applicationStatus, action),\n            // add new reducer here\n            // ...\n        }\n        console.log(\"afterRootStore\", afterStore);\n\n        return afterStore;\n    }\n\n    return rootReducer;\n}","/** redux */\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport { IRootState } from \"../store/types\";\nimport { createRootReducer } from \"../store/reducers\";\n\n/** router */\nimport { createBrowserHistory } from 'history';\nimport { routerMiddleware } from 'connected-react-router';\n\n/** middleware */\n// saga\nimport { sagaMiddleware, runSagaMiddleaware } from \"../sagas/saga-config\";\n\n\n\nconst history = createBrowserHistory({\n    basename: (process.env.NODE_ENV === 'development') ?  \n    ``\n    :\n    `/appl-tracky-spa`\n});\n\nconst preloadedState = {\n\n};\n\n// generate the singleton store from redux\nexport const store = createStore<IRootState, any, any, any>(\n    createRootReducer(history),\n    preloadedState,\n    compose(\n        applyMiddleware(\n            routerMiddleware(history),\n            sagaMiddleware,\n            // ... add other middlewares ...\n        )\n    )\n);\n\n/** after mount saga middlewares to store, run them */\nrunSagaMiddleaware();\n\nexport {\n    history\n};","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n/** redux */\nimport { Provider } from \"react-redux\";\nimport { Store } from \"redux\";\n/** root store */\nimport { IRootState } from \"./store/types\";\nimport { store } from \"./store/store-config\";\n\n/** router */\nimport { ConnectedRouter } from \"connected-react-router\";\nimport { history } from \"./store/store-config\";\n\n/** types */\ninterface IRootProps {\n    store: Store<IRootState>;\n}\n\n/** root component - just to wrap the App into redux store */\nconst Root: React.SFC<IRootProps> = props => {\n    return (\n        <Provider store={props.store}>\n            <ConnectedRouter history={history} >\n                <App />\n            </ConnectedRouter>\n        </Provider>\n    );\n};\n\nReactDOM.render(<Root store={store} />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}