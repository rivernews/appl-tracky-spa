{"version":3,"sources":["store/auth/types.ts","utils/rest-api.ts","store/data-model/base-model.ts","utils/authentication.ts","store/auth/actions.ts","store/rest-api-redux-factory.ts","store/data-model/address.ts","store/data-model/link.ts","store/data-model/company.ts","store/data-model/application.ts","components/social-auth/social-auth-login-button.tsx","components/social-auth/social-auth-logout-button.tsx","components/social-auth/social-auth-button.tsx","components/form-factory/form-base-field/form-base-field-meta.tsx","pages/landing-page/landing-page.tsx","components/form-factory/form-input-field/form-input-field.tsx","components/form-factory/form-factory.tsx","components/form-factory/form-input-field/form-input-field-meta.tsx","components/social-auth/login-form.tsx","pages/login-page/local-login-page.tsx","components/company/company-component.tsx","store/data-model/application-status.ts","store/data-model/application-status-link.ts","components/form-factory/form-base-field/form-base-field.tsx","components/form-factory/form-link-field/form-link-field.tsx","components/form-factory/form-link-field/form-link-field-component.tsx","components/form-factory/form-link-field/form-link-field-meta.tsx","components/form-factory/form-application-status-link-field/form-application-status-link-field.tsx","components/form-factory/form-application-status-link-field/form-application-status-link-field-component.tsx","components/form-factory/form-application-status-link-field/form-application-status-link-field-meta.tsx","components/application-status/application-status-form-component.tsx","components/application-status/application-status-component.tsx","components/application/application-form-component.tsx","components/application/application-component.tsx","components/company-application/company-application-component.tsx","pages/user-app-page/user-app-page.tsx","components/form-factory/form-address-field/form-address-field.tsx","components/form-factory/form-address-field/form-address-field-component.tsx","components/form-factory/form-address-field/form-address-field-meta.tsx","components/company/company-form-component.tsx","pages/add-com-page/add-com-page.tsx","pages/user-com-app-page/user-com-app-page.tsx","components/user-info/user-info.tsx","pages/user-profile-page/user-profile-page.tsx","pages/page-routes/page-routes.tsx","App.tsx","serviceWorker.ts","store/actions.ts","store/auth/reducers.ts","sagas/auth/sagas.ts","sagas/saga-config.ts","store/reducers.ts","store/store-config.ts","index.tsx"],"names":["AuthActionNames","RequestStatus","CrudType","RestMethod","BaseModel","_ref","_ref$uuid","uuid","_ref$created_at","created_at","_ref$modified_at","modified_at","Object","classCallCheck","this","createClass","key","value","Yup","shape","RefreshObject","_this","_ref$token","token","args","objectWithoutProperties","possibleConstructorReturn","getPrototypeOf","call","LoginObject","_ref2","_this2","_ref2$code","code","_ref2$provider","provider","_ref2$redirect_uri","redirect_uri","AuthenticationService","state","clientID","redirectUri","apiSocialLoginUrl","apiLocalLoginUrl","apiLoginRefreshUrl","socialAuthProvider","userEmail","apiLoginToken","userFirstName","userLastName","objectID","serverLogin","socialLoginCode","loginObject","_this3","RestApiService","post","data","endpointUrl","refreshToken","refreshObject","serverLogout","_callee","regenerator_default","a","wrap","_context","prev","next","console","log","abrupt","stop","CrudMapToRest","crudType","CREATE","POST","READ","LIST","GET","UPDATE","PATCH","DELETE","RestApi","apiBaseUrl","get","absoluteUrl","objectName","fetch","getRelativeUrl","objectSpread","method","setApiAuthHeaders","then","res","json","body","JSON","stringify","patch","_ref3","delete","_ref4","_ref5","url","concat","undefined","mode","credentials","headers","Authorization","Content-Type","RequestedLoginAuth","socialAuthToken","type","REQUESTED_LOGIN_AUTH","payload","requestStatus","REQUESTING","RequestedLogoutAuth","REQUESTED_LOGOUT_AUTH","SuccessLoginAuth","userName","expireDateTime","apiToken","avatarUrl","isLocal","SUCCESS_AUTH","SUCCESS","isLogin","SuccessLogoutAuth","FailureAuth","error","FAILURE_AUTH","FAILURE","RestApiReduxFactory","initialObjectInstance","crudKeywords","values","ObjectRestApiRedux","_loop","crudKeyword","_i","_arr","_i2","length","actionTypeName","action","toUpperCase","TRIGGERED","objectClassInstance","successCallback","failureCallback","finalCallback","formData","jsonResponse","triggerFormData","newState","lastChangedObjectID","results","sagaHandler","mark","triggerAction","put","sent","status","Error","t0","saga","objectTriggerActionChannel","objectTriggerAction","_context2","actionChannel","take","initialState","collection","sagas","map","actions","storeReducer","objectStore","arguments","objectAction","split","newObject","defineProperty","resObjectList","newObjects","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","done","object","err","return","afterStore","targetDeleteObject","omit","Address","_BaseModel","_ref$place_name","place_name","_ref$country","country","_ref$state","_ref$city","city","_ref$street","street","_ref$full_address","full_address","_ref$zipcode","zipcode","inherits","max","Link","_ref$text","text","_ref$user","user","_ref$url","_ref$order","order","default","when","is","required","Company","_ref$labels","labels","_ref$name","name","_ref$hq_location","hq_location","_ref$home_page","home_page","_ref$ratings","ratings","_ref$applications","applications","schema","CompanyRestApiRedux","CompanyActions","CompanyReducer","CompanySagas","Application","_ref$user_company","user_company","_ref$position_title","position_title","_ref$job_description_","job_description_page","_ref$job_source","job_source","ApplicationRestApiRedux","ApplicationActions","ApplicationReducer","ApplicationSagas","SocialAuthLoginButton","_Component","_getPrototypeOf2","_len","Array","_key","apply","onLoginButtonClicked","clickEvent","renderProps","onClick","onAuthSuccess","authResponse","props","onSuccess","onAuthFailure","onFailure","react_default","createElement","className","google_login","render","react_button_dist_default","unelevated","icon","dist_default","hasRipple","disabled","clientId","responseType","Component","SocialAuthLogoutButton","onClickWhenIsLocal","onLogoutSuccess","SocialAuthButton","onSocialLoginSuccess","googleOauthResponse","setState","requestedLoginAuth","onSocialLoginFailure","onSocialLogoutSuccess","requestedLogoutAuth","auth","social_auth_logout_button_SocialAuthLogoutButton","social_auth_login_button_SocialAuthLoginButton","InputFieldType","SocialAuthButtonContainer","withRouter","connect","store","dispatch","styles","backgroundColor","color","LandingPage","formFactoryProps","onStaffLoginClick","history","push","style","react_router","to","href","target","LandingPageContainer","registerLocalLoginSuccess","listApplication","listCompany","FormInputField","formik_esm","fieldName","field","form","react_text_field_dist_default","label","onTrailingIconSelect","trailingIcon","role","react_text_field_dist","assign","TEXT","inputType","ActionButtonType","FormBaseFieldMeta","model","formField","isDynamic","dynamicLimit","getInstanceDataFromFormikValues","isArray","alert","instanceData","FormInputFieldMeta","_FormBaseFieldMeta","FormActionButtonProps","FormFactory","initialInstance","validationSchema","onSubmit","setSubmitting","formFieldPropsList","fieldProps","getInstance","createInstanceTriggerAction","updateInstanceTriggerAction","instance","enforcedInstanceData","onSubmitSuccess","initialValues","isSubmitting","formFieldMeta","index","formikValues","actionButtonPropsList","actionButtonProps","BUTTON","children","LoginForm","PASSWORD","SUBMIT","onCancel","onSubmitLoginForm","asyncToGenerator","parsedJsonResponse","ok","statusText","registerLoginSuccess","username","avatar_url","onLoginSuccess","_x","_x2","password","form_factory_FormFactory","LocalLoginPage","onLoginFormCancel","login_form_LoginForm","LocalLoginPageContainer","CompanyComponent","company","react_router_dom","react_icon_button_dist_default","onEditIconClicked","onDeleteIconClicked","includes","ApplicationStatus","_ref$application","application","_ref$applicationstatu","applicationstatuslink_set","_ref$date","date","utcNowDateString","matches","now","Date","UTC","getUTCFullYear","getUTCMonth","getUTCDate","toISOString","ApplicationStatusRestApiRedux","ApplicationStatusActions","ApplicationStatusReducer","ApplicationStatusSagas","ApplicationStatusLink","_ref$application_stat","application_status","_ref$link","link","FormBaseDynamicFieldControlls","formikArrayHelpers","remove","BaseDynamicFieldAddButton","withFormBaseField","FormFieldComponent","form_base_field_FormBaseDynamicFieldControlls","form_base_field_BaseDynamicFieldAddButton","FormLinkField","FormLinkFieldComponent","textInputFieldMeta","urlInputFieldMeta","form_input_field_FormInputField","FormLinkFieldMeta","FormApplicationStatusLinkField","FormApplicationStatusLinkFieldComponent","linkFieldProps","FormApplicationStatusLinkFieldMeta","ApplicationStatusFormComponent","DATE","applicationStatus","createApplicationStatus","updateApplicationStatus","ApplicationStatusFormComponentContainer","applicationStatusStore","applicationStatusFormData","ApplicationStatusComponent","isFormOpened","renderDisplay","deleteApplicationStatus","applicationStatusLink","renderFormController","isOnlyForm","ApplicationStatusComponentContainer","applicationStatusToDelete","callback","ApplicationFormComponent","createApplication","updateApplication","ApplicationFormComponentContainer","applicationStore","applicationFormData","ApplicationComponent","renderApplicationFormController","event","renderApplicationDisplay","applicationStatusList","deleteApplication","isShowApplicationStatuses","ApplicationComponentController","applicationToDelete","CompanyApplicationComponent","onDeleteClick","deleteCompany","company_component_CompanyComponent","filter","CompanyApplicationComponentContainer","companyToDelete","updateCompany","companyToUpdate","UserAppPage","UserAppPageContainer","FormAddressField","FormAddressFieldComponent","fullAddressInputFieldMeta","placeNameInputFieldMeta","FormAddressFieldMeta","CompanyFormComponent","createCompany","CompanyFormComponentContainer","companyFormData","AddComPage","match","params","newCompany","goBack","AddComPageContainer","UserComAppPage","companyUuid","renderAll","UserComAppPageContainer","UserInfo","toString","UserProfilePage","user_info_UserInfo","UserProfilePageContainer","PageRoutes","location","pathname","path","exact","component","react_top_app_bar_dist_default","title","actionItems","height","borderRadius","src","react_top_app_bar_dist","PageRoutesContainer","App","Boolean","window","hostname","RootActionNames","initialAuthState","authReducer","authStore","authAction","resetAllStoreAction","ResetAllStore","authLoginSagaHandler","authLoginSaga","authLogoutSagaHandler","authLogoutSaga","requestedLoginAuthAction","email","warn","_marked","takeEvery","_marked2","requestedLogoutAuthAction","_context3","_marked3","_context4","_marked4","sagaMiddleware","createSagaMiddleware","rootSaga","all","toConsumableArray","createBrowserHistory","basename","createStore","rootState","rootStateChecked","router","connectRouter","compose","applyMiddleware","routerMiddleware","run","ReactDOM","es","esm","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.34391393.chunk.js","sourcesContent":["import { Action } from \"redux\";\n\nimport { RequestStatus } from \"../../utils/rest-api\";\n\n/**\n * Store Types\n */\n\n// complete store type\nexport interface IUpdateAuthState {\n    requestStatus: RequestStatus\n    isLogin: boolean\n    isLocal: boolean\n    userName: string\n    socialAuthToken: string\n    apiToken: string\n    expireDateTime: string\n    avatarUrl: string\n}\n\n// async partial store types\nexport interface IRequestedLoginAuthState {\n    requestStatus: RequestStatus\n    socialAuthToken: string\n}\n\nexport interface IRequestedLogoutAuthState {\n    requestStatus: RequestStatus\n}\n\nexport interface ISuccessAuthState {\n    requestStatus: RequestStatus\n    isLogin: boolean\n    isLocal: boolean\n    userName: string\n    expireDateTime: string\n    apiToken: string\n    avatarUrl: string\n}\n\nexport interface IFailureAuthState {\n    requestStatus: RequestStatus,\n    error: any\n}\n\n// add more state types for this reducer - auth reducer\n// ...\n\n\n\n\n\n/**\n * Action Types\n */\n\nexport enum AuthActionNames {\n    UPDATE_AUTH = \"Update auth\",\n    REQUESTED_LOGIN_AUTH = \"Requested login auth\",\n    REQUESTED_LOGOUT_AUTH = \"Requested logout auth\",\n    SUCCESS_AUTH = \"Success auth\",\n    FAILURE_AUTH = \"Failure auth\",\n\n    // 1. add more action for this reducer - auth reducer\n    // 2. write the type interface for the action below\n    // ...\n}\n\nexport interface IUpdateAuthAction extends Action<AuthActionNames.UPDATE_AUTH> {\n    type: typeof AuthActionNames.UPDATE_AUTH;\n    payload: IUpdateAuthState;\n}\n\nexport interface IRequestedLoginAuthAction extends Action<AuthActionNames.REQUESTED_LOGIN_AUTH> {\n    type: typeof AuthActionNames.REQUESTED_LOGIN_AUTH;\n    payload: IRequestedLoginAuthState;\n}\n\nexport interface IRequestedLogoutAuthAction extends Action<AuthActionNames.REQUESTED_LOGOUT_AUTH> {\n    type: typeof AuthActionNames.REQUESTED_LOGOUT_AUTH;\n    payload: IRequestedLogoutAuthState;\n}\n\nexport interface ISuccessAuthAction extends Action<AuthActionNames.SUCCESS_AUTH> {\n    type: typeof AuthActionNames.SUCCESS_AUTH;\n    payload: ISuccessAuthState;\n}\n\nexport interface IFailureAuthAction extends Action<AuthActionNames.FAILURE_AUTH> {\n    type: typeof AuthActionNames.FAILURE_AUTH;\n    payload: IFailureAuthState;\n}\n\n// use union | ... | ... to add more action types\nexport type TAuthActions = IUpdateAuthAction | IRequestedLoginAuthAction | IRequestedLogoutAuthAction | ISuccessAuthAction | IFailureAuthAction","import React from \"react\";\nimport { TObject, IObjectBase } from \"../store/rest-api-redux-factory\";\nimport { BaseModel } from \"../store/data-model/base-model\";\nimport { AuthenticationService } from \"./authentication\";\n\nexport enum RequestStatus {\n    TRIGGERED = \"triggered\",\n    REQUESTING = \"requesting\",\n    SUCCESS = \"success\",\n    FAILURE = \"failre\"\n}\n\nexport enum CrudType {\n    CREATE = \"create\",\n    READ = \"read\",\n    LIST = \"list\",\n    UPDATE = \"update\",\n    DELETE = \"delete\"\n}\n\nexport enum RestMethod {\n    POST = \"post\",\n    GET = \"get\",\n    PATCH = \"patch\",\n    DELETE = \"delete\"\n}\n\nexport const CrudMapToRest = (crudType: CrudType): RestMethod => {\n    switch (crudType) {\n        case CrudType.CREATE:\n            return RestMethod.POST;\n        case CrudType.READ:\n            return RestMethod.GET;\n        case CrudType.LIST:\n            return RestMethod.GET;\n        case CrudType.UPDATE:\n            return RestMethod.PATCH;\n        case CrudType.DELETE:\n            return RestMethod.DELETE;\n\n        default:\n            return RestMethod.GET;\n    }\n};\n\nexport interface IRequestParams<Schema> {\n    endpointUrl?: string;\n    absoluteUrl?: string;\n    objectName?: string;\n    data?: TObject<Schema> | Array<TObject<Schema>>;\n}\n\nexport interface IListRestApiResponse<Schema> {\n    count: number;\n    next: any;\n    previous: any;\n    results: Array<TObject<Schema>>;\n}\n\nexport type ISingleRestApiResponse<Schema> = TObject<Schema>;\n\nexport function IsSingleRestApiResponseTypeGuard<Schema>(\n    response: ISingleRestApiResponse<Schema> | IListRestApiResponse<Schema>\n): response is ISingleRestApiResponse<Schema> {\n    return (<ISingleRestApiResponse<Schema>>response).uuid !== undefined;\n}\n\nfunction IsSingleFormDataTypeGuard<Schema>(\n    formData: TObject<Schema> | Array<TObject<Schema>>\n): formData is TObject<Schema> {\n    return (<TObject<Schema>>formData).uuid !== undefined;\n}\n\nexport class RestApi {\n    state = {\n        clientID: `732988498848-vuhd6g61bnlqe372i3l5pbpnerteu6na.apps.googleusercontent.com`,\n        code: ``,\n        redirectUri: `postmessage`,\n        apiBaseUrl: (process.env.NODE_ENV === 'development') ? \n        `http://localhost:8000/api/`\n        :\n        `https://appl-tracky.api.shaungc.com/api/`\n        ,\n        socialAuthProvider: `google-oauth2`,\n\n        userEmail: ``,\n        userFirstName: ``,\n        userLastName: ``,\n\n        objectID: ``\n    };\n\n    get = <Schema>({ endpointUrl, absoluteUrl, objectName, data }: IRequestParams<Schema>) => {\n        return fetch(\n            this.getRelativeUrl({\n                endpointUrl,\n                absoluteUrl,\n                objectName,\n                data\n            }),\n            {\n                method: \"GET\",\n                ...this.setApiAuthHeaders()\n            }\n        ).then(res => res.json());\n    };\n\n    post = <Schema>({ data, objectName, endpointUrl }: IRequestParams<Schema>) => {\n        console.log(`restapi:post fired`);\n        return fetch(\n            this.getRelativeUrl({\n                endpointUrl,\n                objectName,\n                data\n            }),\n            {\n                method: \"POST\",\n                ...this.setApiAuthHeaders(),\n                body: JSON.stringify(data)\n            }\n        ).then(res => res.json());\n        // let caller handle error in their own .catch()\n    };\n\n    patch = <Schema>({ data, objectName, endpointUrl }: IRequestParams<Schema>) => {\n        return fetch(\n            this.getRelativeUrl({\n                endpointUrl,\n                objectName,\n                data\n            }),\n            {\n                method: \"PATCH\",\n                ...this.setApiAuthHeaders(),\n                body: JSON.stringify(data)\n            }\n        ).then(res => res.json());\n    };\n\n    delete = <Schema>({ data, objectName, endpointUrl }: IRequestParams<Schema>) => {\n        return fetch(\n            this.getRelativeUrl({\n                endpointUrl,\n                objectName,\n                data\n            }),\n            {\n                method: \"DELETE\",\n                ...this.setApiAuthHeaders(),\n                body: JSON.stringify(data)\n            }\n        );\n    };\n\n    /** helper */\n    private getRelativeUrl = <Schema>({\n        objectName,\n        data,\n        endpointUrl,\n        absoluteUrl,\n    }: IRequestParams<Schema>) => {\n        let url = \"\";\n        if (absoluteUrl) {\n            url = absoluteUrl;\n        }\n        else if (endpointUrl) {\n            url = `${this.state.apiBaseUrl}${endpointUrl}`;\n        } else {\n            if (data && IsSingleFormDataTypeGuard(data) && data.uuid) {\n                url = `${this.state.apiBaseUrl}${objectName}/${data.uuid}/`;\n            } else {\n                url = `${this.state.apiBaseUrl}${objectName}/`;\n            }\n        }\n        console.log(`restapi: url: ${url}, objname=${objectName}`);\n        return url;\n    };\n\n    private setApiAuthHeaders = (): RequestInit => {\n\n        console.log(\"api: set header: got credentials?\", AuthenticationService.state.apiLoginToken);\n        return {\n            mode: \"cors\",\n            credentials: AuthenticationService.state.apiLoginToken ? \"include\" : \"omit\",\n            headers: {\n                Authorization: AuthenticationService.state.apiLoginToken\n                    ? `JWT ${AuthenticationService.state.apiLoginToken}`\n                    : ``,\n                \"Content-Type\": \"application/json\"\n            }\n        };\n    };\n}\n\n/** create restapi singleton */\nexport const RestApiService = new RestApi();\n","import * as Yup from \"yup\";\n\nexport type IRelationship = string;\n\nexport interface IBaseModelProps {\n    uuid?: IRelationship\n    created_at?: string\n    modified_at?: string\n}\n\nexport class BaseModel {\n    uuid: string\n    created_at: string\n    modified_at: string\n    \n    constructor({\n        uuid = \"\",\n        created_at = \"\",\n        modified_at = \"\",\n    }: IBaseModelProps) {\n        this.uuid = uuid;\n        this.created_at = created_at;\n        this.modified_at = modified_at;\n    }\n\n    static schema() {\n        return Yup.object<BaseModel>().shape({});\n    }\n}\n\n// for newing model class instance and access base class's assets\nexport type DataModelInstance<Model = BaseModel> = Model & BaseModel\n\nexport type DataModelClass<DataModel = any> = DataModelInstance<DataModel> & (new (props: any) => DataModel)","import { RestApiService } from \"./rest-api\";\nimport { BaseModel, IBaseModelProps } from \"../store/data-model/base-model\";\n\nexport interface ILoginObjectProps {\n    code?: string\n    provider?: string\n    redirect_uri?: string\n}\n\nexport interface IRefreshObjectProps {\n    token: string\n}\n\nclass RefreshObject extends BaseModel {\n    token: string\n\n    constructor({\n        token = \"\",\n        ...args\n    }: IRefreshObjectProps & IBaseModelProps) {\n        super(args);\n        this.token = token;\n    }\n}\n\nclass LoginObject extends BaseModel {\n    code: string\n    provider: string\n    redirect_uri: string\n\n    constructor({\n        code = \"\",\n        provider = \"\",\n        redirect_uri = \"\",\n        ...args\n    }: ILoginObjectProps & IBaseModelProps) {\n        super(args);\n        this.code = code;\n        this.provider = provider;\n        this.redirect_uri = redirect_uri;\n    }\n}\n\nclass Authentication {\n    state = {\n        clientID: `732988498848-vuhd6g61bnlqe372i3l5pbpnerteu6na.apps.googleusercontent.com`,\n\n        redirectUri: `postmessage`,\n        apiSocialLoginUrl: `login/social/`,\n        apiLocalLoginUrl: `api-token-auth/`,\n        apiLoginRefreshUrl: `api-token-refresh/`,\n        socialAuthProvider: `google-oauth2`,\n\n        userEmail: ``,\n        apiLoginToken: ``,\n        userFirstName: ``,\n        userLastName: ``,\n\n        objectID: ``\n    };\n\n    serverLogin = (socialLoginCode: string) => {\n        let loginObject = new LoginObject({\n            code: socialLoginCode,\n            provider: this.state.socialAuthProvider,\n            redirect_uri: this.state.redirectUri\n        })\n        return RestApiService\n            .post<LoginObject>({\n                data: loginObject,\n                endpointUrl: this.state.apiSocialLoginUrl\n            })\n    }\n\n    private refreshToken = () => {\n        let refreshObject = new RefreshObject({\n            token: this.state.apiLoginToken,\n        })\n        return RestApiService\n            .post<RefreshObject>({\n                data: refreshObject,\n                endpointUrl: this.state.apiLoginRefreshUrl\n            })\n    }\n\n    serverLogout = async () => {\n        console.log(\"server logout...\");\n        // no server-side invalidate implement at this point (a common case for JWT, however)\n        this.state.userEmail = \"\";\n        this.state.userFirstName = \"\"\n        this.state.userLastName = \"\"\n        this.state.apiLoginToken = \"\";\n        return;\n    }\n}\n\nexport const AuthenticationService = new Authentication();","import { ActionCreator } from \"redux\";\n\nimport {\n    /** state types */\n    IUpdateAuthState,\n    IRequestedLoginAuthState,\n    /** action types */\n    IUpdateAuthAction,\n    IRequestedLoginAuthAction,\n    IRequestedLogoutAuthAction,\n    ISuccessAuthAction,\n    IFailureAuthAction,\n    /** action names */\n    AuthActionNames\n} from \"./types\";\n\nimport { RequestStatus } from \"../../utils/rest-api\";\n\nexport const UpdateAuth = (newAuthState: IUpdateAuthState): IUpdateAuthAction => {\n    return {\n        type: AuthActionNames.UPDATE_AUTH,\n        payload: newAuthState\n    };\n};\n\nexport const RequestedLoginAuth = (socialAuthToken: string): IRequestedLoginAuthAction => {\n    return {\n        type: AuthActionNames.REQUESTED_LOGIN_AUTH,\n        payload: {\n            requestStatus: RequestStatus.REQUESTING,\n            socialAuthToken\n        }\n    };\n};\n\nexport const RequestedLogoutAuth = (): IRequestedLogoutAuthAction => {\n    return {\n        type: AuthActionNames.REQUESTED_LOGOUT_AUTH,\n        payload: {\n            requestStatus: RequestStatus.REQUESTING,\n        }\n    };\n};\n\nexport const SuccessLoginAuth = (userName: string, expireDateTime: string, apiToken: string, avatarUrl: string, isLocal: boolean): ISuccessAuthAction => {\n    console.log(\"action username:\", userName);\n    return {\n        type: AuthActionNames.SUCCESS_AUTH,\n        payload: {\n            requestStatus: RequestStatus.SUCCESS,\n            isLogin: true,\n            isLocal: isLocal ? true : false,\n            userName,\n            expireDateTime,\n            apiToken,\n            avatarUrl\n        }\n    };\n};\n\nexport const SuccessLogoutAuth = (): ISuccessAuthAction => {\n    return {\n        type: AuthActionNames.SUCCESS_AUTH,\n        payload: {\n            requestStatus: RequestStatus.SUCCESS,\n            isLogin: false,\n            isLocal: false,\n            userName: \"\",\n            expireDateTime: \"\",\n            apiToken: \"\",\n            avatarUrl: \"\",\n        }\n    };\n};\n\nexport const FailureAuth = (error: any): IFailureAuthAction => {\n    return {\n        type: AuthActionNames.FAILURE_AUTH,\n        payload: {\n            requestStatus: RequestStatus.FAILURE,\n            error\n        }\n    };\n};\n\n// write new actions here for this reducer - auth reducer\n// ...\n","import { Action, Reducer } from \"redux\";\nimport { takeEvery, take, call, put, actionChannel } from \"redux-saga/effects\";\nimport { SagaIterator } from \"redux-saga\";\nimport {\n    RequestStatus,\n    CrudType,\n    CrudMapToRest,\n    RestApiService,\n    IRequestParams,\n    ISingleRestApiResponse,\n    IListRestApiResponse,\n    IsSingleRestApiResponseTypeGuard\n} from \"../utils/rest-api\";\nimport omit from \"lodash/omit\";\n\n/** state & store */\n\nexport interface IObjectBase {\n    uuid: string;\n}\n\nexport type TObject<Schema> = IObjectBase & { [Property in keyof Schema]: Schema[Property] };\n\ninterface IObjectList<Schema> {\n    [uuid: string]: TObject<Schema>;\n}\n\nexport interface IObjectStore<Schema> {\n    lastChangedObjectID?: string;\n    requestStatus: RequestStatus;\n    error?: any;\n    collection: IObjectList<Schema>;\n}\n\n/** action */\n\ntype IObjectRestApiReduxFactoryActions = {\n    [restfulKeyword: string]: {\n        [asyncKeyword: string]: {\n            actionTypeName: string;\n            action: Function;\n            saga?: () => SagaIterator;\n        };\n    };\n};\n\nexport interface IObjectAction<Schema> extends Action {\n    type: string;\n    crudType: CrudType;\n\n    // for deleteAction or other actions to obtain the original instance obj passed into trigger action\n    triggerFormData?: TObject<Schema> | Array<TObject<Schema>>;\n\n    // for saga to perform additional side effect e.g. navigation\n    // only for triggerActions\n    successCallback?: Function;\n    failureCallback?: (error: any) => void;\n    finalCallback?: Function;\n\n    // for custumized api call\n    absoluteUrl?: string\n    \n    payload: {\n        formData?: TObject<Schema> | Array<TObject<Schema>>;\n        lastChangedObjectID?: string;\n        requestStatus: RequestStatus;\n        error?: any;\n    };\n}\n\n/** factory API */\n\ninterface IRestApiReduxFactory<Schema> {\n    actions: IObjectRestApiReduxFactoryActions;\n    storeReducer: Reducer<IObjectStore<Schema>>\n    sagas: Array<() => SagaIterator>;\n}\n\nexport const RestApiReduxFactory = <Schema extends IObjectBase>(\n    /** should have uuid */ objectName: string,\n    initialObjectInstance: TObject<Schema>\n): IRestApiReduxFactory<Schema> => {\n    type TObjectSchema = typeof initialObjectInstance;\n    const crudKeywords = Object.values(CrudType);\n\n    let ObjectRestApiRedux: IObjectRestApiReduxFactoryActions = {};\n    for (let crudKeyword of crudKeywords) {\n        ObjectRestApiRedux[crudKeyword] = {};\n        /** store */\n        // TODO?: action state\n\n        /** action */\n        // action type names\n        for (let requestStatus of Object.values(RequestStatus)) {\n            ObjectRestApiRedux[crudKeyword][requestStatus] = {\n                actionTypeName: \"\",\n                action: () => {}\n            };\n            ObjectRestApiRedux[crudKeyword][\n                requestStatus\n            ].actionTypeName = `${requestStatus.toUpperCase()}_${crudKeyword.toUpperCase()}_${objectName.toUpperCase()}`;\n        }\n\n        // async actions ( & state...)\n        ObjectRestApiRedux[crudKeyword][RequestStatus.TRIGGERED].action = (\n            objectClassInstance?: TObjectSchema,\n            successCallback?: Function,\n            failureCallback?: (error: any) => void,\n            finalCallback?: Function,\n            absoluteUrl?: string,\n        ): IObjectAction<TObjectSchema> => {\n            console.log(`action:fired, trigger, ${crudKeyword}`);\n            return {\n                type:\n                    ObjectRestApiRedux[crudKeyword][RequestStatus.TRIGGERED]\n                        .actionTypeName,\n                crudType: crudKeyword,\n                finalCallback,\n                successCallback,\n                failureCallback,\n                absoluteUrl,\n                payload: {\n                    requestStatus: RequestStatus.TRIGGERED,\n                    formData: objectClassInstance\n                }\n            };\n        };\n        ObjectRestApiRedux[crudKeyword][\n            RequestStatus.REQUESTING\n        ].action = (): IObjectAction<TObjectSchema> => {\n            return {\n                type:\n                    ObjectRestApiRedux[crudKeyword][RequestStatus.REQUESTING]\n                        .actionTypeName,\n                crudType: crudKeyword,\n                payload: {\n                    requestStatus: RequestStatus.REQUESTING\n                }\n            };\n        };\n        ObjectRestApiRedux[crudKeyword][RequestStatus.SUCCESS].action = (\n            /** api response */\n            jsonResponse:\n            | IListRestApiResponse<TObjectSchema>\n            | ISingleRestApiResponse<TObjectSchema>,\n            triggerFormData?: TObject<Schema> | Array<TObject<Schema>>\n        ): IObjectAction<TObjectSchema> => {\n            let newState = {\n                type:\n                    ObjectRestApiRedux[crudKeyword][RequestStatus.SUCCESS]\n                        .actionTypeName,\n                crudType: crudKeyword\n            };\n            // if is delete success, we don't need formData (& the server responds nothing for DELETE as well)\n            if (crudKeyword === CrudType.DELETE) {\n                return {\n                    ...newState,\n                    triggerFormData,\n                    payload: {\n                        requestStatus: RequestStatus.SUCCESS,\n                    }\n                }\n            }\n            else if (IsSingleRestApiResponseTypeGuard(jsonResponse)) {\n                return {\n                    ...newState,\n                    payload: {\n                        requestStatus: RequestStatus.SUCCESS,\n                        formData: <ISingleRestApiResponse<TObjectSchema>>(\n                            jsonResponse\n                        ),\n                        lastChangedObjectID: jsonResponse.uuid\n                    }\n                };\n            } else {\n                return {\n                    ...newState,\n                    payload: {\n                        requestStatus: RequestStatus.SUCCESS,\n                        formData: (<IListRestApiResponse<TObjectSchema>>(\n                            jsonResponse\n                        )).results\n                    }\n                };\n            }\n        };\n        ObjectRestApiRedux[crudKeyword][RequestStatus.FAILURE].action = (\n            error: any\n        ): IObjectAction<TObjectSchema> => {\n            return {\n                type:\n                    ObjectRestApiRedux[crudKeyword][RequestStatus.FAILURE]\n                        .actionTypeName,\n                crudType: crudKeyword,\n                payload: {\n                    requestStatus: RequestStatus.FAILURE,\n                    error\n                }\n            };\n        };\n\n        /** saga */\n        const sagaHandler = function*(\n            triggerAction: IObjectAction<TObjectSchema>\n        ) {\n            console.log(`Saga: action intercepted; aync=trigger, crud=${crudKeyword}, obj=${objectName}; ready to call api`);\n            const formData = triggerAction.payload.formData;\n            const absoluteUrl = triggerAction.absoluteUrl;\n\n            yield put(\n                ObjectRestApiRedux[crudKeyword][\n                    RequestStatus.REQUESTING\n                ].action()\n            );\n\n            try {\n                // api call\n                const jsonResponse:\n                    | IListRestApiResponse<TObjectSchema>\n                    | ISingleRestApiResponse<TObjectSchema> \n                    | any = yield call(\n                    (<(params: IRequestParams<TObjectSchema>) => void>RestApiService[CrudMapToRest(crudKeyword)]),\n                    {\n                        data: formData,\n                        objectName,\n                        absoluteUrl,\n                    }\n                );\n\n                console.log(\"Saga: res from server\", jsonResponse);\n\n                if (jsonResponse.status && jsonResponse.status >= 400) {\n                    console.error(\"Server error, see message in res.\");\n                    throw new Error(\"Server error, see message in res.\");\n                } \n\n                // if there is .next in res, then it's paginated data and we should perform a next request to next page data\n                if(jsonResponse.next) {\n                    console.log(\"Saga: res contains next url, so we will also trigger list request for next=\", jsonResponse.next);\n                    yield put(ObjectRestApiRedux[CrudType.LIST][RequestStatus.TRIGGERED].action(\n                        undefined, undefined, undefined, undefined, jsonResponse.next\n                    ));\n                }\n\n                // success state\n                if (crudKeyword === CrudType.DELETE) {\n                    yield put(\n                        ObjectRestApiRedux[CrudType.DELETE][\n                            RequestStatus.SUCCESS\n                        ].action(jsonResponse, formData)\n                    );\n                } else {\n                    console.log(\"Saga: ready to dispatch success action\")\n                    yield put(\n                        ObjectRestApiRedux[crudKeyword][\n                            RequestStatus.SUCCESS\n                        ].action(jsonResponse)\n                    );\n                }\n\n                if (triggerAction.successCallback) {\n                    triggerAction.successCallback();\n                }\n            } catch (error) {\n                // error state\n                yield put(\n                    ObjectRestApiRedux[crudKeyword][\n                        RequestStatus.FAILURE\n                    ].action(error)\n                );\n\n                if (triggerAction.failureCallback) {\n                    triggerAction.failureCallback(error);\n                }\n                return;\n            }\n\n            if (triggerAction.finalCallback) {\n                triggerAction.finalCallback();\n            }\n        };\n\n        ObjectRestApiRedux[crudKeyword][\n            RequestStatus.TRIGGERED\n        ].saga = function*() {\n            console.log(`Saga: action intercepted; async=trigger, crud=${crudKeyword}, obj=${objectName}`);\n            \n            // queue style \n            const objectTriggerActionChannel = yield actionChannel(\n                ObjectRestApiRedux[crudKeyword][RequestStatus.TRIGGERED]\n                    .actionTypeName\n            )\n\n            while (true) {\n                const objectTriggerAction = yield take(objectTriggerActionChannel);\n                yield call(sagaHandler, objectTriggerAction);\n            }\n        };\n    }\n\n    const initialState: IObjectStore<TObjectSchema> = {\n        collection: {},\n        requestStatus: RequestStatus.SUCCESS\n    };\n\n    const storeReducer: Reducer<IObjectStore<Schema>> = (\n        objectStore: IObjectStore<TObjectSchema> = initialState,\n        action: Action\n    ): IObjectStore<TObjectSchema> => {\n        \n        const objectAction = action as IObjectAction<TObjectSchema>;\n\n        if (\n            !(objectAction && objectAction.payload && objectAction.payload.requestStatus) ||\n            !(action.type.split(\"_\")[2] === objectName.toUpperCase())\n        ) {\n            return {\n                ...objectStore\n            };\n        }\n\n        // async success\n        if (objectAction.payload.requestStatus === RequestStatus.SUCCESS) {\n            // CREATE\n            if (objectAction.crudType === CrudType.CREATE) {\n                let newObject = <TObject<TObjectSchema>>objectAction.payload.formData;\n                return {\n                    collection: {\n                        ...objectStore.collection,\n                        [newObject.uuid]: newObject\n                    },\n                    requestStatus: objectAction.payload.requestStatus,\n                    lastChangedObjectID: objectAction.payload.lastChangedObjectID\n                };\n            }\n\n            // LIST\n            else if (objectAction.crudType === CrudType.LIST) {\n                const resObjectList = <Array<TObject<TObjectSchema>>>(\n                    objectAction.payload.formData\n                );\n                let newObjects: IObjectList<TObjectSchema> = {};\n                for (let object of resObjectList) {\n                    newObjects[object.uuid] = object;\n                }\n                console.log(\"Reducer: crud=list, action=\", objectAction)\n                console.log(\"initialState=\", initialState)\n                console.log(\"beforestore=\", objectStore)\n                console.log(\"newlistobjects=\", newObjects)\n\n                const afterStore: IObjectStore<TObjectSchema> = {\n                    collection: {\n                        ...objectStore.collection,\n                        ...newObjects\n                    },\n                    requestStatus: objectAction.payload.requestStatus\n                };\n                console.log(\"afterstore=\", afterStore)\n\n                return afterStore;\n            }\n\n            // UPDATE\n            else if (objectAction.crudType === CrudType.UPDATE) {\n                let newObject = <TObject<TObjectSchema>>objectAction.payload.formData;\n                return {\n                    collection: {\n                        ...objectStore.collection,\n                        [newObject.uuid]: newObject\n                    },\n                    requestStatus: objectAction.payload.requestStatus,\n                    lastChangedObjectID: objectAction.payload.lastChangedObjectID\n                };\n            }\n\n            // DELETE\n            else if (objectAction.crudType === CrudType.DELETE) {\n                let targetDeleteObject = <TObject<TObjectSchema>>objectAction.triggerFormData;\n                console.log(\"Reducer: delete, targetobj=\", targetDeleteObject)\n\n                console.log(\"Reducer: delete, beforestore=\", objectStore)\n                \n                const afterStore = {\n                    collection: omit(objectStore.collection, [targetDeleteObject.uuid]),\n                    requestStatus: objectAction.payload.requestStatus\n                }\n                console.log(\"Reducer: delete, afterstore\", afterStore)\n\n                return afterStore;\n            }\n        }\n\n        // async trigger\n        else if (objectAction.payload.requestStatus === RequestStatus.TRIGGERED) {\n            return {\n                ...objectStore,\n                requestStatus: objectAction.payload.requestStatus\n            };\n        }\n\n        // async requesting & failure\n        else {\n            return {\n                ...objectStore,\n                ...objectAction.payload\n            };\n        }\n\n        // no effect\n        return {\n            ...objectStore\n        };\n    };\n\n    const sagas = crudKeywords.map((crudKeyword) => \n        (<() => SagaIterator>ObjectRestApiRedux[crudKeyword][RequestStatus.TRIGGERED].saga)\n    );\n\n    return {\n        actions: ObjectRestApiRedux,\n        storeReducer,\n        sagas\n    };\n};\n","import { RestApiReduxFactory } from \"../rest-api-redux-factory\";\nimport { BaseModel, IBaseModelProps } from \"./base-model\";\nimport * as Yup from \"yup\";\n\nexport interface IAddressProps {\n    place_name?: string;\n    country?: string;\n    state?: string;\n    city?: string;\n    street?: string;\n    full_address?: string;\n    zipcode?: string;\n}\n\nexport class Address extends BaseModel {\n    place_name: string;\n    country: string;\n    state: string;\n    city: string;\n    street: string;\n    full_address: string;\n    zipcode: string;\n\n    constructor({\n        place_name = \"\",\n        country = \"\",\n        state = \"\",\n        city = \"\",\n        street = \"\",\n        full_address = \"\",\n        zipcode = \"\",\n        ...args\n    }: IAddressProps & IBaseModelProps) {\n        super(args);\n        this.place_name = place_name;\n        this.country = country;\n        this.state = state;\n        this.place_name = place_name;\n        this.city = city;\n        this.street = street;\n        this.full_address = full_address;\n        this.zipcode = zipcode;\n    }\n\n    static schema(){\n        return Yup.object<Address>().shape({\n            full_address: Yup.string().max(200),\n            street: Yup.string().max(150),\n            city: Yup.string().max(50),\n            state: Yup.string().max(50),\n            country: Yup.string().max(50),\n            place_name: Yup.string().max(50),\n            zipcode: Yup.string().max(20),\n        });\n    }\n\n}\n\nconst initialAddressInstance = new Address({});\nconst AddressRestApiRedux = RestApiReduxFactory<Address>(\n    \"addresses\",\n    initialAddressInstance\n);","import { BaseModel, IBaseModelProps } from \"./base-model\";\nimport * as Yup from \"yup\";\n\ninterface ILinkProps {\n    text?: string;\n    user?: any;\n    url?: string;\n    order?: number;\n}\n\nexport class Link extends BaseModel {\n    public text: string;\n    public user: any;\n    public url: string;\n    public order: number;\n\n    constructor({\n        text = \"\",\n        user = {},\n        url = \"\",\n        order = 0,\n        ...args\n    }: ILinkProps & IBaseModelProps) {\n        super(args);\n        this.text = text;\n        this.user = user;\n        this.url = url;\n        this.order = order;\n    }\n\n    static schema(){\n        return Yup.object<Link>().shape({\n            text:  Yup.string().max(200),\n            url: Yup.string().default(\"#\").when(\n                \"text\", {\n                    is: (text) => text,\n                    then: Yup.string().required(\"Since you gave the link some text, let's provide an url as well...!\").max(500, \"URL is too long, only less than 500 characters please\")\n                }\n            ),\n        });\n    }\n}\n","import { RestApiReduxFactory } from \"../rest-api-redux-factory\";\nimport { BaseModel, IBaseModelProps } from \"./base-model\";\nimport { Address } from \"./address\";\nimport { Link } from \"./link\";\nimport * as Yup from \"yup\";\n\ninterface ICompanyProps {\n    user?: string;\n    labels?: any;\n    name?: string;\n    hq_location?: Address;\n    home_page?: Link;\n    ratings?: any;\n    applications?: any;\n}\n\nexport class Company extends BaseModel {\n    public user: string;\n    public labels: any;\n    public name: string;\n    public hq_location: Address;\n    public home_page: Link;\n    public ratings: any;\n    public applications: any;\n\n    constructor({\n        user = \"\",\n        labels = [],\n        name = \"\",\n        hq_location = new Address({}),\n        home_page = new Link({}),\n        ratings = {},\n        applications = {},\n        ...args\n    }: ICompanyProps & IBaseModelProps) {\n        super(args);\n        this.user = user;\n        this.labels = labels;\n        this.name = name;\n        this.hq_location = hq_location;\n        this.home_page = home_page;\n        this.ratings = ratings;\n        this.applications = applications;\n    }\n\n    static schema(){\n        return Yup.object<Company>().shape({\n            name: Yup.string().required(\"Every company needs a name...!\").max(100),\n            home_page: Link.schema(),\n            hq_location: Address.schema()\n        });\n    }\n}\n\nconst initialCompanyInstance = new Company({});\nconst CompanyRestApiRedux = RestApiReduxFactory<Company>(\n    \"companies\",\n    initialCompanyInstance\n);\nexport const CompanyActions = CompanyRestApiRedux.actions;\nexport const CompanyReducer = CompanyRestApiRedux.storeReducer;\nexport const CompanySagas = CompanyRestApiRedux.sagas;\n","import { RestApiReduxFactory } from \"../rest-api-redux-factory\";\nimport { BaseModel, IBaseModelProps, IRelationship } from \"./base-model\";\nimport { Link } from \"./link\";\nimport * as Yup from \"yup\";\n\ninterface IApplicationProps {\n    user?: IRelationship;\n    user_company?: IRelationship;\n    position_title?: string;\n    job_description_page?: Link;\n    job_source?: Link;\n    labels?: any;\n}\n\nexport class Application extends BaseModel {\n    public user: string;\n    public user_company: IRelationship;\n    public position_title: string;\n    public job_description_page: Link;\n    public job_source: Link;\n    public labels: any;\n\n    constructor({\n        user = \"\",\n        user_company = \"\",\n        position_title = \"\",\n        job_description_page = new Link({}),\n        job_source = new Link({}),\n        labels = {},\n        ...args\n    }: IApplicationProps & IBaseModelProps) {\n        super(args);\n        this.user = user;\n        this.user_company = user_company;\n        this.position_title = position_title;\n        this.job_description_page = job_description_page;\n        this.job_source = job_source;\n        this.labels = labels;\n    }\n\n    static schema(){\n        return Yup.object<Application>().shape({\n            position_title: Yup.string().required(\"We need a title...!\").max(150, \"No more than 150 characters\"),\n            job_description_page: Link.schema(),\n            job_source: Link.schema(),\n        });\n    }\n}\n\nconst initialApplicationInstance = new Application({});\nconst ApplicationRestApiRedux = RestApiReduxFactory<Application>(\n    \"applications\",\n    initialApplicationInstance\n);\nexport const ApplicationActions = ApplicationRestApiRedux.actions;\nexport const ApplicationReducer = ApplicationRestApiRedux.storeReducer;\nexport const ApplicationSagas = ApplicationRestApiRedux.sagas;\n","import React, { Component } from \"react\";\n\n/** Components */\nimport { GoogleLogin } from \"react-google-login\";\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n\ninterface ISocialAuthLoginButtonProps {\n    clientID: string;\n    redirectUri?: string;\n    onSuccess(authResponse?: any): void;\n    onFailure?(error: any): void;\n    disabled?: boolean;\n}\n\nexport class SocialAuthLoginButton extends Component<\n    ISocialAuthLoginButtonProps\n> {\n    onLoginButtonClicked = (clickEvent: any, renderProps: any) => {\n        console.log(\"login button clicked\", clickEvent, renderProps);\n        renderProps.onClick(clickEvent);\n    };\n\n    onAuthSuccess = (authResponse?: any) => {\n        console.log(\"login button auth success\");\n        this.props.onSuccess(authResponse);\n    };\n\n    onAuthFailure = (error: any) => {\n        console.log(\"login button auth failed\");\n        if (this.props.onFailure) {\n            this.props.onFailure(error);\n        }\n    };\n\n    render() {\n        return (\n            <div className=\"UserAuthButton\">\n                <GoogleLogin\n                    render={(renderProps: any) => (\n                        <Button\n                            onClick={clickEvent =>\n                                this.onLoginButtonClicked(\n                                    clickEvent,\n                                    renderProps\n                                )\n                            }\n                            unelevated\n                            icon={\n                                <MaterialIcon hasRipple icon=\"account_circle\" />\n                            }\n                            disabled={this.props.disabled}\n                        >\n                            Google Login\n                        </Button>\n                    )}\n                    onSuccess={this.onAuthSuccess}\n                    onFailure={this.onAuthFailure}\n                    clientId={this.props.clientID}\n                    responseType=\"code\"\n                    redirectUri={this.props.redirectUri || \"postmessage\"}\n                />\n            </div>\n        );\n    }\n}\n","import React, { Component } from \"react\";\n\n/** Components */\nimport { GoogleLogout } from \"react-google-login\";\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n\ninterface ISocialAuthLogoutButtonProps {\n    isLocal: boolean\n    onClickWhenIsLocal?(): void\n    onSuccess(authResponse?: any): void;\n    disabled?: boolean\n}\n\nexport class SocialAuthLogoutButton extends Component<\n    ISocialAuthLogoutButtonProps\n> {\n    onAuthSuccess = (authResponse?: any) => {\n        this.props.onSuccess(authResponse);\n    };\n\n    render() {\n        return (\n            <div className=\"UserAuthButton\">\n                <GoogleLogout\n                    render={(renderProps: any) => (\n                        <Button\n                            onClick={(this.props.isLocal) ? this.props.onClickWhenIsLocal : renderProps.onClick}\n                            unelevated\n                            icon={<MaterialIcon hasRipple icon=\"eject\" />}\n                            disabled={this.props.disabled}\n                        >\n                            Logout\n                        </Button>\n                    )}\n                    onLogoutSuccess={this.onAuthSuccess}\n                />\n            </div>\n        );\n    }\n}\n","import React, { Component } from \"react\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\n\n/** Redux */\nimport { Dispatch } from \"redux\";\nimport { connect } from \"react-redux\";\nimport { IRootState } from \"../../store/types\";\nimport { IUpdateAuthAction, IRequestedLoginAuthAction, TAuthActions, IUpdateAuthState } from \"../../store/auth/types\";\nimport { UpdateAuth, RequestedLoginAuth, RequestedLogoutAuth } from \"../../store/auth/actions\";\n\n/** rest api */\nimport { RequestStatus } from \"../../utils/rest-api\";\n\n/** Components */\nimport { SocialAuthLoginButton } from \"./social-auth-login-button\";\nimport { SocialAuthLogoutButton } from \"./social-auth-logout-button\";\n\ninterface ISocialAuthButtonProps extends RouteComponentProps {\n    auth: IUpdateAuthState;\n    requestedLoginAuth: (socialAuthToken: string) => void;\n    requestedLogoutAuth: () => void;\n}\n\nclass SocialAuthButton extends Component<\n    ISocialAuthButtonProps\n> {\n    state = {\n        clientID: `732988498848-vuhd6g61bnlqe372i3l5pbpnerteu6na.apps.googleusercontent.com`,\n        \n        code: ``, // get `code` from social login button, then obtain token from django server\n        apiLoginToken: ``,\n\n        userEmail: ``,\n        userFirstName: ``,\n        userLastName: ``,\n\n        objectID: ``\n    };\n\n    onSocialLoginSuccess = (googleOauthResponse: any) => {\n        console.log(\"Google Oauth2 res:\", googleOauthResponse);\n        this.setState(\n            {\n                code: googleOauthResponse.code\n            },\n            () => {\n                // this.apiLogin();\n                console.log(\"social button: request auth...\");\n                this.props.requestedLoginAuth(this.state.code);\n            }\n        );\n    };\n\n    onSocialLoginFailure = (error: any) => {\n        console.error(\"Social login failed:\", error);\n    };\n\n    onSocialLogoutSuccess = () => {\n        console.log(\"Social logout success, now our web app logout\");\n        this.props.requestedLogoutAuth();\n    };\n\n    render() {\n        return (\n            <div className=\"SocialAuth\">\n                auth requestStatus: {this.props.auth.requestStatus} <br></br>\n                {!this.props.auth.isLogin ? (\n                    <SocialAuthLoginButton\n                        clientID={this.state.clientID}\n                        onSuccess={this.onSocialLoginSuccess}\n                        onFailure={this.onSocialLoginFailure}\n                        disabled={this.props.auth.requestStatus === RequestStatus.REQUESTING}\n                    />\n                ) : (\n                    <SocialAuthLogoutButton\n                        isLocal={this.props.auth.isLocal}\n\n                        onClickWhenIsLocal={this.onSocialLogoutSuccess}\n                        onSuccess={this.onSocialLogoutSuccess}\n                        \n                        disabled={this.props.auth.requestStatus === RequestStatus.REQUESTING}\n                    />\n                )}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => {\n    return {\n        auth: store.auth\n    };\n};\n\nfunction mapDispatchToProps(dispatch: Dispatch<TAuthActions>) {\n    return {\n        requestedLoginAuth: (socialAuthToken: string) => {\n            dispatch(\n                RequestedLoginAuth(socialAuthToken)\n            );\n        },\n        requestedLogoutAuth: () => {\n            dispatch(\n                RequestedLogoutAuth()\n            );\n        }\n    };\n}\n\nexport const SocialAuthButtonContainer = withRouter(connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(SocialAuthButton));\n","import React from \"react\";\nimport { FormikValues } from \"formik\";\nimport { DataModelClass } from \"../../../store/data-model/base-model\";\nimport { FormInputField } from \"../form-input-field/form-input-field\";\n\nexport enum InputFieldType {\n    // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input\n    TEXT = \"text\",\n    PASSWORD = \"password\",\n    EMAIL = \"email\",\n    URL = \"url\",\n    DATE = \"date\"\n}\n\n// API for caller to new meta class\nexport interface IFieldBaseMetaProps {\n    fieldName: string\n    label: string;\n\n    isDynamic?: boolean;\n    dynamicLimit?: number;\n    getInstanceDataFromFormikValues?: (formikValues: FormikValues) => any // has to be optional since we want to let caller just use `fieldName` by default to access formik's values\n}\n\n// for form field props\nexport interface IFormBaseFieldProps extends IFieldBaseMetaProps {\n    model?: DataModelClass\n    formikValues?: FormikValues // for form field to load data (e.g. initial value) at a specific position in formik's `values`\n    // getInstanceDataFromFormikValues?: // when it's dynamic field, will use this to render dynamic fields\n}\n\n// for the base meta class\ninterface IFormBaseFieldMeta extends IFieldBaseMetaProps {\n    model?: DataModelClass\n    formField?: React.ComponentType<IFormBaseFieldProps>\n\n    getInstance: (values: FormikValues) => any // for form factory to loop over fieldmeta and obtain field's data instance\n    getInstanceDataFromFormikValues: (formikValues: FormikValues) => any // required because getInstance() depends on it\n}\n\nexport class FormBaseFieldMeta implements IFormBaseFieldMeta {\n    fieldName: string\n    label: string\n\n    model?: DataModelClass\n    formField: React.ComponentType<IFormBaseFieldProps>\n\n    isDynamic?: boolean;\n    dynamicLimit?: number;\n    getInstanceDataFromFormikValues: (formikValues: FormikValues) => any\n\n    constructor(props: IFieldBaseMetaProps) {\n        this.fieldName = props.fieldName;\n        this.label = props.label;\n\n        this.isDynamic = props.isDynamic;\n        this.dynamicLimit = props.dynamicLimit;\n\n        if (props.getInstanceDataFromFormikValues) {\n            this.getInstanceDataFromFormikValues = props.getInstanceDataFromFormikValues;\n        }\n        else {\n            this.getInstanceDataFromFormikValues = (values: FormikValues) => {\n                if (!(values && values[this.fieldName])) {\n                    alert(\"Oops! Something might go wrong. Info: at class FormBaseFieldMeta.\")\n                    console.error(\"values =\", values, \" this.fieldName =\", this.fieldName);\n                    return (this.isDynamic) ? [] : \"\";\n                }\n                else {\n                    if (this.isDynamic && !Array.isArray(values[this.fieldName])) {\n                        alert(\"Oops! Something might go wrong. Info: at class FormBaseFieldMeta.\")\n                        console.error(\"isDynamic=true, but the value is not an array:\");\n                        console.error(\"values =\", values, \" this.fieldName =\", this.fieldName);\n                    }\n                    return values[this.fieldName];\n                }\n            }\n        }\n\n        this.formField = FormInputField;\n    }\n\n    getInstance(values: FormikValues) {\n        const model = this.model;\n        if (model) {\n            if (this.isDynamic) {\n\n                return this.getInstanceDataFromFormikValues(values).map((instanceData: any) => new model(instanceData))\n            }\n            else {\n                return new model(values[this.fieldName]);\n            }\n        }\n\n        // assume field values are plain string/num or other basic types\n        return values[this.fieldName];\n    }\n}","import React, { Component } from \"react\";\nimport { withRouter, RouteComponentProps, Redirect } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch, AnyAction } from \"redux\";\nimport { IRootState } from \"../../store/types\";\nimport { IUpdateAuthState } from \"../../store/auth/types\";\nimport { SuccessLoginAuth } from \"../../store/auth/actions\";\nimport { CompanyActions, Company } from \"../../store/data-model/company\";\nimport {\n    ApplicationActions,\n    Application\n} from \"../../store/data-model/application\";\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\n\n/** Components */\nimport { SocialAuthButtonContainer } from \"../../components/social-auth/social-auth-button\";\n// form\nimport {\n    FormFactory,\n    FormActionButtonProps,\n    IFormFactoryProps,\n    ActionButtonType\n} from \"../../components/form-factory/form-factory\";\nimport { FormInputFieldMeta } from \"../../components/form-factory/form-input-field/form-input-field-meta\";\nimport { InputFieldType } from \"../../components/form-factory/form-base-field/form-base-field-meta\";\nimport { ErrorMessage, FormikValues, FormikErrors } from \"formik\";\n    import { LoginForm } from \"../../components/social-auth/login-form\";\n// api\nimport { AuthenticationService } from \"../../utils/authentication\";\nimport { RestApiService } from \"../../utils/rest-api\";\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n\n\nlet styles = {\n    backgroundColor: \"purple\",\n    color: \"white\"\n};\n\ninterface ILandingPageProps extends RouteComponentProps {\n    auth: IUpdateAuthState;\n\n    /** redux */\n    registerLocalLoginSuccess: (userName: string, apiToken: string, avatarUrl: string) => void;\n    listApplication: () => void\n    listCompany: () => void\n}\n\nclass LandingPage extends Component<ILandingPageProps> {\n    formFactoryProps: any;\n\n    constructor(props: ILandingPageProps) {\n        super(props);\n    }\n\n    onStaffLoginClick = () => {\n        // request com & app list (dispatch)\n        // this.props.listApplication();\n        // this.props.listCompany();\n        this.props.history.push(\"/login/\");\n    }\n\n    render() {\n        return (\n            <div className=\"LandingPage\" style={styles}>\n                {/** redirect logged in user to private routes */\n                this.props.auth.isLogin && <Redirect to=\"/home/\" />}\n                \n                <h1>Appl Tracky</h1>\n\n                <SocialAuthButtonContainer />\n\n                <Button\n                    onClick={this.onStaffLoginClick}\n                    unelevated\n                    icon={\n                        <MaterialIcon hasRipple icon=\"warning\" />\n                    }\n                >\n                    Staff Only\n                </Button>\n\n                <hr />\n                \n                <Button\n                    href=\"https://github.com/rivernews/appl-tracky-spa\"\n                    target=\"_blank\"\n                    unelevated\n                    icon={\n                        <MaterialIcon hasRipple icon=\"code\" />\n                    }\n                >\n                    Github Repository\n                </Button>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: IRootState) => ({\n    auth: state.auth\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>) => {\n    // actionName = (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {\n        registerLocalLoginSuccess: (userName: string, apiToken: string, avatarUrl: string) =>\n            dispatch(SuccessLoginAuth(userName, \"\", apiToken, avatarUrl, true)),\n        listApplication: () =>\n            dispatch(\n                ApplicationActions[CrudType.LIST][\n                    RequestStatus.TRIGGERED\n                ].action(new Application({}))\n            ),\n        listCompany: () =>\n            dispatch(\n                CompanyActions[CrudType.LIST][\n                    RequestStatus.TRIGGERED\n                ].action(new Company({}))\n            )\n    };\n};\n\nexport const LandingPageContainer = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(LandingPage)\n);\n","import React, { Component } from \"react\";\n\n/** Components */\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\n// mdc-react input\nimport \"@material/react-text-field/dist/text-field.css\";\nimport TextField, { Input } from \"@material/react-text-field\";\n// formik\nimport {\n    Field, FieldProps,\n    ErrorMessage,\n} from \"formik\";\n// input field\nimport { IFormInputFieldProps } from \"./form-input-field-meta\";\nimport { InputFieldType } from \"../form-base-field/form-base-field-meta\";\n\nexport class FormInputField extends Component<IFormInputFieldProps> {\n    render() {\n        return (\n            <div className=\"FormInputField\">\n                <Field\n                    name={this.props.fieldName}\n                    render={({ field, form }: FieldProps<number | string>) => (\n                        <TextField\n                            label={this.props.label}\n                            onTrailingIconSelect={this.props.onTrailingIconSelect}\n                            trailingIcon={this.props.onTrailingIconSelect && <MaterialIcon role=\"button\" icon=\"clear\" />}\n                        >\n                            <Input\n                                type={this.props.type || InputFieldType.TEXT}\n                                inputType=\"input\"\n                                {...field}\n                            />\n                        </TextField>\n                    )}\n                />\n                <ErrorMessage name={this.props.fieldName} />\n            </div>\n        );\n    }\n}","import React, { Component } from \"react\";\n\n/** Components */\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n// data model\nimport { DataModelClass, DataModelInstance, BaseModel } from \"../../store/data-model/base-model\";\n// formik\nimport {\n    Formik,\n    Form,\n    FormikValues,\n    FormikErrors,\n    FormikTouched\n} from \"formik\";\n// yup\nimport * as Yup from 'yup';\n// base field\nimport { FormBaseFieldMeta } from \"./form-base-field/form-base-field-meta\";\n\nexport enum ActionButtonType {\n    SUBMIT = \"submit\",\n    BUTTON = \"button\"\n}\n\nexport class FormActionButtonProps {\n    constructor(\n        public text: string = \"\",\n        public onClick?: (event: any) => void,\n        public type?: ActionButtonType\n    ) { }\n}\n\nexport interface IFormFactoryProps<IDataModel> {\n    onSubmitSuccess?: () => void;\n\n    // pass in either `initialValues` or `initialInstance`, this is important for yup to render error message. If no initial info at all, yup will not display errors properly.\n    // `initialValues` should be used only for customize form; for data model forms please use `initialInstance` so update & create form can be handled together\n    initialValues?: any\n    initialInstance?: DataModelInstance<IDataModel>;\n    enforcedInstanceData?: any;\n\n    model?: DataModelClass;\n    actionButtonPropsList: Array<FormActionButtonProps>;\n    formFieldPropsList: Array<FormBaseFieldMeta>\n    \n    validationSchema?: Yup.Schema<IDataModel>\n\n    onSubmit?: (\n        values: FormikValues,\n        { setSubmitting }: { setSubmitting: Function }\n    ) => void;\n    \n    createInstanceTriggerAction?: (\n        instance: IDataModel,\n        successCallback?: Function,\n        finalCallback?: Function,\n    ) => void;\n    updateInstanceTriggerAction?: (\n        instance: IDataModel,\n        successCallback?: Function,\n        finalCallback?: Function,\n    ) => void;\n}\n\nexport class FormFactory<DataModel> extends Component<\n    IFormFactoryProps<DataModel>\n    > {\n\n    initialInstance?: DataModelInstance<any>;\n    validationSchema?: Yup.Schema<DataModel>;\n\n    constructor(props: IFormFactoryProps<DataModel>) {\n        super(props);\n\n        // guarantee this.initialInstance\n        if (this.props.model && !this.props.initialInstance) {\n            // for create form\n            const model = this.props.model;\n            this.initialInstance = new model({});\n        }\n        else {\n            // for update form\n            this.initialInstance = this.props.initialInstance;\n        }\n\n        // form behavior integrity check\n        if (!this.initialInstance) {\n            if (!this.props.initialValues || !this.props.onSubmit) {\n                throw Error(\"ERROR: form factory has no initialInstance - seems like you're building a custom form that does not use data model. Please pass in initialValues and onSubmit in props to handle the behavior manually.\");\n            }\n        }\n\n        this.validationSchema = this.props.validationSchema || this.props.model.schema;\n        console.log(\"this.validationSchema =\", this.validationSchema);\n    }\n\n    onSubmit = (\n        values: FormikValues,\n        { setSubmitting }: { setSubmitting: Function }\n    ) => {\n        console.log(\"submit values =\", values); setSubmitting(false);\n\n        setSubmitting(true);\n        let instanceData: any = {};\n        for (let fieldProps of this.props.formFieldPropsList) {\n            const keyName = fieldProps.fieldName;\n            instanceData[keyName] = fieldProps.getInstance(values);\n        }\n\n        // packaging\n        const model = this.props.model;\n        if (\n            model && this.props.createInstanceTriggerAction && this.props.updateInstanceTriggerAction &&\n            this.initialInstance\n        ) {\n            // a create / update form is assumed\n\n            const instance = new model({\n                uuid: this.initialInstance.uuid,\n                ...instanceData,\n                ...this.props.enforcedInstanceData\n            })\n            console.log(\"instanceData =\", instanceData);\n            console.log(\"instance =\", instance);\n\n            // dispatch API request\n            if (!instance.uuid) {\n                console.log(\"ready to send create instance\");\n                this.props.createInstanceTriggerAction(instance, this.props.onSubmitSuccess, () => setSubmitting(false));\n            } else {\n                console.log(\"ready to send update instance\");\n                this.props.updateInstanceTriggerAction(instance, this.props.onSubmitSuccess, () => setSubmitting(false));\n            }\n        }\n        else if (this.props.onSubmit) {\n            // if caller has customize onSubmit, then use it instead\n            this.props.onSubmit(values, { setSubmitting });\n        }\n        else {\n            console.log(\"this.props.initialInstance =\", this.props.initialInstance);\n            console.log(\"this.props.onSubmit =\", this.props.onSubmit);\n            console.log(\"this.props.model =\", this.props.model);\n            alert(\"Something is wrong with the form...!\")\n            throw Error(\"ERROR: form factory props not properly configured. See above props.\")\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"FormFactory\">\n                <Formik\n                    initialValues={this.initialInstance || this.props.initialValues}\n                    validationSchema={this.validationSchema}\n                    onSubmit={this.onSubmit}\n                >\n                    {({\n                        values,\n                        isSubmitting\n                    }: {\n                        values: FormikValues,\n                        touched: FormikTouched<FormikValues>,\n                        [props: string]: any\n                    }) => (\n                            <Form>\n                                {this.props.formFieldPropsList.map((formFieldMeta: FormBaseFieldMeta, index: number) => (\n                                    <formFieldMeta.formField \n                                        key={index}\n                                        {...formFieldMeta}\n                                        formikValues={values}\n                                    />\n                                ) )}\n                                {this.props.actionButtonPropsList.map(\n                                    (actionButtonProps: FormActionButtonProps, index) => (\n                                        <Button\n                                            key={index}\n                                            type={actionButtonProps.type || ActionButtonType.BUTTON}\n                                            disabled={isSubmitting}\n                                            unelevated\n                                            onClick={actionButtonProps.onClick}\n                                            children={actionButtonProps.text}\n                                        />\n                                    )\n                                )}\n                            </Form>\n                        )}\n                </Formik>\n            </div>\n        );\n    }\n}\n","// base field\nimport { InputFieldType, FormBaseFieldMeta, IFormBaseFieldProps, IFieldBaseMetaProps } from \"../form-base-field/form-base-field-meta\";\n// input field\nimport { FormInputField } from \"./form-input-field\";\n\n\n// API for caller to new props for input field\nexport interface IFormInputFieldProps extends IFormBaseFieldProps {\n    type?: InputFieldType\n    onTrailingIconSelect?: () => void\n}\n\n// for defining meta\nexport interface IFormInputFieldMetaProps extends IFieldBaseMetaProps {\n    type?: InputFieldType\n    onTrailingIconSelect?: () => void\n}\n\nexport class FormInputFieldMeta extends FormBaseFieldMeta {\n    type?: InputFieldType\n    onTrailingIconSelect?: () => void\n\n    constructor({\n        type,\n        onTrailingIconSelect,\n        ...props\n    }: IFormInputFieldMetaProps) {\n        super(props)\n        this.type = type;\n        this.onTrailingIconSelect = onTrailingIconSelect;\n\n        this.formField = FormInputField;\n    }\n}","import React from \"react\";\n\nimport { FormikValues } from \"formik\";\nimport { RestApiService } from \"../../utils/rest-api\";\nimport { AuthenticationService } from \"../../utils/authentication\";\nimport { FormBaseFieldMeta, InputFieldType } from \"../form-factory/form-base-field/form-base-field-meta\";\nimport { FormInputFieldMeta } from \"../form-factory/form-input-field/form-input-field-meta\";\nimport { FormActionButtonProps, ActionButtonType, FormFactory } from \"../form-factory/form-factory\";\n// yup\nimport * as Yup from 'yup';\n\ninterface ILoginFormProps {\n    registerLoginSuccess: (userName: string, apiToken: string, avatarUrl: string) => void;\n    onLoginSuccess: () => void\n    onCancel: () => void\n}\n\nexport const LoginForm = (props: ILoginFormProps) => {\n\n    const formFieldPropsList: Array<FormBaseFieldMeta> = [\n        new FormInputFieldMeta({\n            fieldName: \"username\",\n            label: \"Username\"\n        }),\n        new FormInputFieldMeta({\n            fieldName: \"password\",\n            label: \"Password\",\n            type: InputFieldType.PASSWORD\n        }),\n    ];\n    const actionButtonPropsList: Array<FormActionButtonProps> = [\n        new FormActionButtonProps(\"Login\", undefined, ActionButtonType.SUBMIT),\n        new FormActionButtonProps(\"Cancel\", props.onCancel)\n    ];\n\n    const onSubmitLoginForm = async (\n        values: FormikValues,\n        { setSubmitting }: { setSubmitting: Function }\n    ) => {\n        setSubmitting(false);\n        console.log(\"values =\", values);\n\n        try {\n            // post to get login token\n            const res = await fetch(`${RestApiService.state.apiBaseUrl}${AuthenticationService.state.apiLocalLoginUrl}`, {\n                method: \"POST\",\n                mode: \"cors\",\n                credentials: \"omit\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify(values)\n            });\n\n            if (!res.ok) {\n                console.log(\"INFO: server res =\", res);\n                throw Error(res.statusText)\n            }\n\n            const parsedJsonResponse = await res.json();\n            // set login token\n            AuthenticationService.state.apiLoginToken = parsedJsonResponse.token;\n            // set redux auth store isLogin state --- have to write action and reducer.\n            props.registerLoginSuccess(values.username, parsedJsonResponse.token, parsedJsonResponse.avatar_url);\n\n            props.onLoginSuccess();\n        }\n        catch (err) {\n            alert(\"Oops! Wrong username or password.\");\n            console.error(\"ERROR: login failed. See error message:\");\n            console.error(err);\n        }\n    };\n\n    // validation\n    const loginFormInitialValues = {\n        username: \"\",\n        password: \"\"\n    }\n    type ILoginFormShape = typeof loginFormInitialValues;\n    const validationSchema: Yup.Schema<ILoginFormShape> = Yup.object<ILoginFormShape>().shape({\n        username: Yup.string().required(\"Forgot to type username...?\"),\n        password: Yup.string().required(\"Password please...!\")\n    })\n\n\n    return (\n        <div className=\"loginForm\">\n            <FormFactory\n                initialValues={loginFormInitialValues}\n    \n                formFieldPropsList={formFieldPropsList}\n                actionButtonPropsList={actionButtonPropsList}\n\n                validationSchema={validationSchema}\n    \n                onSubmit={onSubmitLoginForm}\n            />\n        </div>\n    )\n}","import React, { Component } from \"react\";\nimport { withRouter, RouteComponentProps, Redirect } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch, AnyAction } from \"redux\";\nimport { IRootState } from \"../../store/types\";\nimport { IUpdateAuthState } from \"../../store/auth/types\";\nimport { SuccessLoginAuth } from \"../../store/auth/actions\";\nimport { CompanyActions, Company } from \"../../store/data-model/company\";\nimport {\n    ApplicationActions,\n    Application\n} from \"../../store/data-model/application\";\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\n\n/** Components */\nimport { SocialAuthButtonContainer } from \"../../components/social-auth/social-auth-button\";\n// form\nimport {\n    FormFactory,\n    FormActionButtonProps,\n    IFormFactoryProps,\n    ActionButtonType\n} from \"../../components/form-factory/form-factory\";\nimport { FormInputFieldMeta } from \"../../components/form-factory/form-input-field/form-input-field-meta\";\nimport { InputFieldType } from \"../../components/form-factory/form-base-field/form-base-field-meta\";\nimport { ErrorMessage, FormikValues, FormikErrors } from \"formik\";\n    import { LoginForm } from \"../../components/social-auth/login-form\";\n// api\nimport { AuthenticationService } from \"../../utils/authentication\";\nimport { RestApiService } from \"../../utils/rest-api\";\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n/** Components */\n\ninterface ILocalLoginPageProps extends RouteComponentProps {\n\n\n    /** redux */\n    auth: IUpdateAuthState;\n    registerLocalLoginSuccess: (userName: string, apiToken: string, avatarUrl: string) => void;\n    listApplication: () => void\n    listCompany: () => void\n}\n\nclass LocalLoginPage extends Component<ILocalLoginPageProps> {\n\n    onLoginFormCancel = () => {\n        this.props.history.push(\"/\");\n    }\n\n    onLoginSuccess = () => {\n        // request com & app list (dispatch)\n        this.props.listApplication();\n        this.props.listCompany();\n    }\n\n    render() {\n        return (\n            <div className=\"LocalLoginPage\">\n                {/** redirect logged in user to private routes */\n                this.props.auth.isLogin && <Redirect to=\"/home/\" />}\n\n                <h1>Login Portal for Staff</h1>\n                <LoginForm \n                    registerLoginSuccess={this.props.registerLocalLoginSuccess}\n                    onLoginSuccess={this.onLoginSuccess}\n                    onCancel={this.onLoginFormCancel}\n                />\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    auth: store.auth\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>) => {\n    // actionName: (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {\n        registerLocalLoginSuccess: (userName: string, apiToken: string, avatarUrl: string) =>\n            dispatch(SuccessLoginAuth(userName, \"\", apiToken, avatarUrl, true)),\n        listApplication: () =>\n            dispatch(\n                ApplicationActions[CrudType.LIST][\n                    RequestStatus.TRIGGERED\n                ].action(new Application({}))\n            ),\n        listCompany: () =>\n            dispatch(\n                CompanyActions[CrudType.LIST][\n                    RequestStatus.TRIGGERED\n                ].action(new Company({}))\n            )\n    }\n};\n\nexport const LocalLoginPageContainer = withRouter(connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(LocalLoginPage));\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\n\n/** Redux */\nimport { Company } from \"../../store/data-model/company\";\n\n/** Components */\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc-react icon button\nimport '@material/react-icon-button/dist/icon-button.css';\nimport IconButton from '@material/react-icon-button';\n\ninterface ICompanyComponentProps {\n    company: Company;\n    onDeleteIconClicked?: (event: any) => void\n    onEditIconClicked?: (event: any) => void\n}\n\nexport class CompanyComponent extends Component<ICompanyComponentProps> {\n    render() {\n        const company = this.props.company;\n        return (\n            <div className=\"CompanyComponent\">\n                <p>\n                    <Link to={`/com-app/${company.uuid}/`}>\n                        {company.name}\n                    </Link>\n                    <IconButton onClick={this.props.onEditIconClicked}>\n                        <MaterialIcon hasRipple icon=\"edit\" />\n                    </IconButton>\n                    <IconButton onClick={this.props.onDeleteIconClicked}>\n                        <MaterialIcon hasRipple icon=\"delete\" />\n                    </IconButton>\n\n                    <br />\n\n                    {(company.hq_location.full_address) && <span>\n                        <strong>{company.hq_location.place_name || \"Location\"}:</strong> {company.hq_location.full_address}\n                    </span>}\n\n                    <br />\n                    \n                    {(company.home_page.url) && <span>\n                        <strong>Company Website: </strong>\n                        {(company.home_page.url) && <a target=\"_blank\" href={\n                            (company.home_page.url && company.home_page.url.includes(\"//\")) ?\n                                company.home_page.url :\n                                `//${company.home_page.url}`\n                        }>\n                            {company.home_page.text || \"Link\"}\n                        </a>}\n                    </span>}\n                    \n                    <br />\n                </p>\n            </div>\n        );\n    }\n}\n","import { RestApiReduxFactory } from \"../rest-api-redux-factory\";\nimport { BaseModel, IBaseModelProps, IRelationship } from \"./base-model\";\nimport { ApplicationStatusLink } from \"./application-status-link\";\nimport * as Yup from \"yup\";\n\ninterface IApplicationStatusProps {\n    text?: string;\n    application?: IRelationship;\n    applicationstatuslink_set?: Array<ApplicationStatusLink>\n    date?: string;\n    order?: number\n}\n\nexport class ApplicationStatus extends BaseModel {\n    public text: string;\n    public application: IRelationship;\n    // public applicationstatuslink_set: Array<ApplicationStatusLink>\n    public applicationstatuslink_set: Array<ApplicationStatusLink>\n    public date: string;\n    public order: number;\n\n    constructor({\n        text = \"\",\n        application = \"\",\n        // applicationstatuslink_set = [],\n        applicationstatuslink_set = [],\n        date = ApplicationStatus.utcNowDateString(),\n        order = 0,\n        ...args\n    }: IApplicationStatusProps & IBaseModelProps) {\n        super(args);\n        this.text = text;\n        this.application = application;\n        this.applicationstatuslink_set = applicationstatuslink_set;\n        this.date = date;\n        this.order = order;\n    }\n\n    static schema(){\n        return Yup.object<ApplicationStatus>().shape({\n            text: Yup.string().required(\"Give a quick one or two words for the status\").max(50, \"No more than 50 characters\"),\n            date: Yup.string().matches(/\\d{4}-0{0,1}\\d{1}-\\d{2}/),\n            order: Yup.number()\n        });\n    }\n\n    static utcNowDateString() {\n        const now = new Date();\n        const utcNow = new Date(Date.UTC(now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate() ));\n        const utcNowTimeString = utcNow.toISOString().split(\"T\")[0]\n        return utcNowTimeString;\n    }\n}\n\nconst initialApplicationStatusInstance = new ApplicationStatus({});\nconst ApplicationStatusRestApiRedux = RestApiReduxFactory<ApplicationStatus>(\n    \"application-statuses\",\n    initialApplicationStatusInstance\n);\nexport const ApplicationStatusActions = ApplicationStatusRestApiRedux.actions;\nexport const ApplicationStatusReducer = ApplicationStatusRestApiRedux.storeReducer;\nexport const ApplicationStatusSagas = ApplicationStatusRestApiRedux.sagas;\n","import { RestApiReduxFactory } from \"../rest-api-redux-factory\";\nimport { BaseModel, IBaseModelProps, IRelationship } from \"./base-model\";\nimport { Link } from \"./link\";\n\ninterface IApplicationStatusLinkProps {\n    application_status?: IRelationship;\n    link?: Link;\n}\n\nexport class ApplicationStatusLink extends BaseModel {\n    public application_status: IRelationship;\n    public link: Link;\n\n    constructor({\n        application_status = \"\",\n        link = new Link({}),\n        ...args\n    }: IApplicationStatusLinkProps & IBaseModelProps) {\n        super(args);\n        this.application_status = application_status;\n        this.link = link;\n    }\n}","import React from \"react\";\n\n/** Components */\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n// mdc-react icon button\nimport '@material/react-icon-button/dist/icon-button.css';\nimport IconButton from '@material/react-icon-button';\n// data model\nimport { DataModelClass } from \"../../../store/data-model/base-model\";\n// formik\nimport {\n    FieldArray,\n    ArrayHelpers,\n} from \"formik\";\n// base field\nimport { IFormBaseFieldProps } from \"./form-base-field-meta\";\n\ninterface IFormBaseDyanmicFieldControllsProps {\n    index: number\n    formikArrayHelpers: ArrayHelpers\n}\n\nconst FormBaseDynamicFieldControlls = (props: IFormBaseDyanmicFieldControllsProps) => {\n\n    const deleteField = () => {\n        props.formikArrayHelpers.remove(props.index);\n    }\n\n    return (\n        <div className=\"FormBaseDynamicFieldControlls\">\n            <IconButton onClick={deleteField}>\n                <MaterialIcon hasRipple icon=\"delete\" />\n            </IconButton>\n        </div>\n    )\n}\n\nconst BaseDynamicFieldAddButton = (props: {\n    formikArrayHelpers: ArrayHelpers\n    model?: DataModelClass\n    label: string\n}) => {\n\n    const onAddClick = () => {\n        if (props.model) {\n            const model = props.model;\n            props.formikArrayHelpers.push(new model({}));\n        } else {\n            props.formikArrayHelpers.push({});\n        }\n    }\n\n    return (\n        <Button type=\"button\" onClick={onAddClick} children={`New ${props.label}`} />\n    )\n}\n\nexport const withFormBaseField = (FormFieldComponent: React.ComponentType<IFormBaseFieldProps>) => (props: IFormBaseFieldProps) => {\n\n    if (props.isDynamic && !props.formikValues) {\n        alert(\"Oops! Something's wrong.\");\n        throw Error(\"When `isDynamic` is true, you need to pass over `formikValues`.\");\n    }\n\n    const formikValues = props.formikValues;\n    const getInstanceDataFromFormikValues = props.getInstanceDataFromFormikValues;\n\n    return (\n        (props.isDynamic && getInstanceDataFromFormikValues && formikValues) ?\n            (<FieldArray\n                name={props.fieldName}\n                render={formikArrayHelpers => (\n                    <div className=\"FormApplicationStatusLinkFieldsContainer\">\n                        {getInstanceDataFromFormikValues(formikValues).map((instanceData: any, index: number) => (\n                            <div key={index} className=\"FormBaseDynamicField\">\n                                <FormFieldComponent\n                                    fieldName={`${props.fieldName}[${index}]`}\n                                    label={`${props.label} ${index}`}\n                                    formikValues={props.formikValues}\n                                    getInstanceDataFromFormikValues={props.getInstanceDataFromFormikValues}\n                                />\n                                <FormBaseDynamicFieldControlls\n                                    index={index}\n                                    formikArrayHelpers={formikArrayHelpers}\n                                />\n                            </div>\n                        ))}\n\n                        <BaseDynamicFieldAddButton\n                            formikArrayHelpers={formikArrayHelpers}\n                            label={props.label}\n                            model={props.model}\n                        />\n                    </div>\n                )}\n            />)\n            :\n            (<FormFieldComponent\n                fieldName={props.fieldName}\n                label={props.label}\n                formikValues={props.formikValues}\n                getInstanceDataFromFormikValues={props.getInstanceDataFromFormikValues}\n            />)\n    )\n}","/** Components */\n// base field\nimport { withFormBaseField } from \"../form-base-field/form-base-field\";\n// link field\nimport { FormLinkFieldComponent } from \"./form-link-field-component\";\n\nexport const FormLinkField = withFormBaseField(FormLinkFieldComponent);\n","import React, { Component } from \"react\";\n\n/** Components */\n// mdc-react input\nimport \"@material/react-text-field/dist/text-field.css\";\n\nimport { FormInputFieldMeta } from \"../form-input-field/form-input-field-meta\";\nimport { FormInputField } from \"../form-input-field/form-input-field\";\nimport { IFormBaseFieldProps } from \"../form-base-field/form-base-field-meta\";\n\nexport interface IFormLinkFieldComponentProps extends IFormBaseFieldProps {\n}\n\nexport class FormLinkFieldComponent extends Component<IFormLinkFieldComponentProps> {\n\n    textInputFieldMeta: FormInputFieldMeta;\n    urlInputFieldMeta: FormInputFieldMeta;\n\n    constructor(props: IFormLinkFieldComponentProps) {\n        super(props)\n\n        this.textInputFieldMeta = new FormInputFieldMeta({\n            fieldName: `${this.props.fieldName}.text`,\n            label: \"Description\"\n        });\n        this.urlInputFieldMeta = new FormInputFieldMeta({\n            fieldName: `${this.props.fieldName}.url`,\n            label: \"Link url\"\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"FormLinkField\">\n                {this.props.label && <h4>{this.props.label}</h4>}\n                <FormInputField\n                    {...this.textInputFieldMeta}\n                />\n\n                <FormInputField\n                    {...this.urlInputFieldMeta}\n                />\n            </div>\n        );\n    }\n}","// data model\nimport { Link } from \"../../../store/data-model/link\";\n\n/** Components */\n// base field\nimport { IFieldBaseMetaProps, FormBaseFieldMeta } from \"../form-base-field/form-base-field-meta\";\nimport { FormLinkField } from \"./form-link-field\";\n\nexport class FormLinkFieldMeta extends FormBaseFieldMeta {\n\n    constructor(props: IFieldBaseMetaProps) {\n        super(props)\n        this.model = Link;\n        this.formField = FormLinkField;\n    }\n}\n","/** Components */\n// link field\nimport { FormApplicationStatusLinkFieldComponent } from \"./form-application-status-link-field-component\";\n// base dynamic field\nimport { withFormBaseField } from \"../form-base-field/form-base-field\";\n\nexport const FormApplicationStatusLinkField = withFormBaseField(FormApplicationStatusLinkFieldComponent);","import React, { Component } from \"react\";\n\n/** Components */\n// mdc-react input\nimport \"@material/react-text-field/dist/text-field.css\";\n// link form\nimport { FormLinkFieldMeta } from \"../form-link-field/form-link-field-meta\";\nimport { FormLinkField } from \"../form-link-field/form-link-field\";\nimport { IFormBaseFieldProps } from \"../form-base-field/form-base-field-meta\";\n\nexport interface IFormApplicationStatusLinkFieldComponentProps extends IFormBaseFieldProps {\n}\n\nexport class FormApplicationStatusLinkFieldComponent extends Component<IFormApplicationStatusLinkFieldComponentProps> {\n\n    linkFieldProps: FormLinkFieldMeta;\n\n    constructor(props: IFormApplicationStatusLinkFieldComponentProps) {\n        super(props)\n\n        this.linkFieldProps = new FormLinkFieldMeta({\n            fieldName: `${this.props.fieldName}.link`,\n            label: ``,\n            isDynamic: false, // Link is a one-to-one field in application status link model\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"FormApplicationStatusLinkField\">\n                {this.props.label && <h4>{this.props.label}</h4>}\n                <FormLinkField\n                    {...this.linkFieldProps}\n                    formikValues={this.props.formikValues}\n                    getInstanceDataFromFormikValues={this.props.getInstanceDataFromFormikValues}\n                />\n            </div>\n        );\n    }\n}","// data model\nimport { ApplicationStatusLink } from \"../../../store/data-model/application-status-link\";\n\n/** Components */\nimport { FormBaseFieldMeta, IFieldBaseMetaProps } from \"../form-base-field/form-base-field-meta\";\nimport { FormApplicationStatusLinkField } from \"./form-application-status-link-field\";\n\nexport class FormApplicationStatusLinkFieldMeta extends FormBaseFieldMeta {\n\n    constructor(props: IFieldBaseMetaProps) {\n        super(props)\n        this.model = ApplicationStatusLink;\n        this.formField = FormApplicationStatusLinkField;\n    }\n}\n","import React, { Component } from \"react\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\nimport { IObjectStore, IObjectAction } from \"../../store/rest-api-redux-factory\";\n// data models\nimport {\n    ApplicationStatus,\n    ApplicationStatusActions\n} from \"../../store/data-model/application-status\";\nimport {\n    ApplicationStatusLink,\n} from \"../../store/data-model/application-status-link\";\nimport { Application } from \"../../store/data-model/application\";\n\n/** Rest API */\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\n\n/** Components */\nimport {\n    FormFactory,\n    FormActionButtonProps,\n    IFormFactoryProps,\n    ActionButtonType\n} from \"../form-factory/form-factory\";\nimport {FormInputFieldMeta } from \"../form-factory/form-input-field/form-input-field-meta\";\nimport { InputFieldType, FormBaseFieldMeta } from \"../form-factory/form-base-field/form-base-field-meta\";\n// form fields\nimport { FormApplicationStatusLinkFieldMeta } from \"../form-factory/form-application-status-link-field/form-application-status-link-field-meta\";\n\ninterface IApplicationStatusFormComponentProps extends RouteComponentProps {\n    applicationStatus?: ApplicationStatus; // for update form\n    onSubmitSuccess?: () => void;\n    onCancel: () => void;\n\n    /** redux */\n    application: Application;\n    applicationStatusStore: IObjectStore<ApplicationStatus>\n    createApplicationStatus: (\n        applicationStatusFormData: ApplicationStatus,\n        successCallback?: Function,\n        finalCallback?: Function,\n    ) => void;\n    updateApplicationStatus: (\n        applicationStatusFormData: ApplicationStatus,\n        successCallback?: Function,\n        finalCallback?: Function,\n    ) => void;\n}\n\nclass ApplicationStatusFormComponent extends Component<\n    IApplicationStatusFormComponentProps\n> {\n    formFieldPropsList: Array<FormBaseFieldMeta>;\n    actionButtonPropsList: Array<FormActionButtonProps>;\n\n    constructor(props: IApplicationStatusFormComponentProps) {\n        super(props);\n\n        this.formFieldPropsList = [\n            new FormInputFieldMeta({\n                fieldName: \"text\",\n                label: \"Status*\",\n            }),\n            new FormInputFieldMeta({\n                fieldName: \"date\",\n                label: \"Date\",\n                type: InputFieldType.DATE\n            }),\n            new FormApplicationStatusLinkFieldMeta({\n                fieldName: `applicationstatuslink_set`,\n                label: `Status Link`,\n                isDynamic: true,\n            }),\n        ];\n\n        this.actionButtonPropsList = [\n            new FormActionButtonProps(\n                this.props.applicationStatus ?\n                \"Save Status\":\n                \"Create Status\",\n                undefined,\n                ActionButtonType.SUBMIT\n            ),\n            new FormActionButtonProps(\"Cancel\", this.props.onCancel)\n        ];\n    }\n\n    render() {\n        return (\n            <div className=\"ApplicationStatusFormComponent\">\n                <FormFactory\n                    model={ApplicationStatus}\n                    initialInstance={new ApplicationStatus({\n                        ...this.props.applicationStatus,\n                    })}\n                    enforcedInstanceData={{\n                        application: this.props.application.uuid\n                    }}\n        \n                    formFieldPropsList={this.formFieldPropsList}\n                    actionButtonPropsList={this.actionButtonPropsList}\n        \n                    createInstanceTriggerAction={this.props.createApplicationStatus}\n                    updateInstanceTriggerAction={this.props.updateApplicationStatus}\n\n                    onSubmitSuccess={this.props.onSubmitSuccess}\n                />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    // prop: store.prop\n    applicationStatusStore: store.applicationStatus\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<ApplicationStatus> | IObjectAction<ApplicationStatusLink>>) => {\n    // actionName: (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {\n        createApplicationStatus: (\n            applicationStatusFormData: ApplicationStatus,\n            successCallback?: Function,\n            failureCallback?: Function,\n        ) =>\n            dispatch(\n                ApplicationStatusActions[CrudType.CREATE][\n                    RequestStatus.TRIGGERED\n                ].action(applicationStatusFormData, successCallback, undefined, failureCallback)\n            )\n        ,\n        updateApplicationStatus: (\n            applicationStatusFormData: ApplicationStatus,\n            successCallback?: Function,\n            failureCallback?: Function,\n        ) =>\n            dispatch(\n                ApplicationStatusActions[CrudType.UPDATE][\n                    RequestStatus.TRIGGERED\n                ].action(applicationStatusFormData, successCallback, undefined, failureCallback)\n            )\n        ,\n    };\n};\n\nexport const ApplicationStatusFormComponentContainer = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(ApplicationStatusFormComponent)\n);\n","import React, { Component } from \"react\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\nimport {\n    IObjectAction,\n} from \"../../store/rest-api-redux-factory\";\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\n\n/** data model */\nimport {\n    ApplicationStatus,\n    ApplicationStatusActions\n} from \"../../store/data-model/application-status\";\nimport { Application } from \"../../store/data-model/application\";\n\n/** Components */\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc-react icon button\nimport \"@material/react-icon-button/dist/icon-button.css\";\nimport IconButton from \"@material/react-icon-button\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\nimport { ApplicationStatusFormComponentContainer } from \"./application-status-form-component\";\n\ninterface IApplicationStatusComponentProps extends RouteComponentProps {\n    applicationStatus?: ApplicationStatus;\n    application?: Application; // needed by form\n    isOnlyForm?: boolean; // needed by add-button\n    deleteApplicationStatus: (\n        applicationStatusToDelete: ApplicationStatus,\n        callback?: Function\n    ) => void;\n}\n\ninterface IApplicationStatusComponentState {\n    isFormOpened: boolean;\n}\n\nclass ApplicationStatusComponent extends Component<\n    IApplicationStatusComponentProps,\n    IApplicationStatusComponentState\n> {\n    state = {\n        isFormOpened: false\n    };\n\n    render() {\n        return (\n            <div className=\"ApplicationStatusComponent\">\n                {(this.state.isFormOpened || this.props.isOnlyForm) && this.props.application ? (\n                    this.renderFormController(\n                        this.props.application,\n                        this.props.applicationStatus\n                    )\n                ) : this.props.applicationStatus ? (\n                    this.renderDisplay(this.props.applicationStatus)\n                ) : (\n                    <span>\n                        Nothing to render: no application status provided so\n                        cannot display; no application provided so form for\n                        create/update are not allowed.\n                    </span>\n                )}\n            </div>\n        );\n    }\n\n    renderDisplay = (applicationStatus: ApplicationStatus) => {\n        return (\n            <div className=\"ApplicationStatusComponent\">\n                <p>\n                    <span>Status: {applicationStatus.text}</span>\n                    <IconButton\n                        onClick={() => {\n                            console.log(\"application status component: edit button clicked.\")\n                            this.setState({isFormOpened: true});\n                        }}\n                    >\n                        <MaterialIcon hasRipple icon=\"edit\" />\n                    </IconButton>\n                    <IconButton\n                        onClick={() =>\n                            this.props.deleteApplicationStatus(\n                                applicationStatus\n                            )\n                        }\n                    >\n                        <MaterialIcon hasRipple icon=\"delete\" />\n                    </IconButton>\n                    <br />\n                    <span>{applicationStatus.date}</span>\n                    <br />\n                    {applicationStatus.applicationstatuslink_set.map(\n                        applicationStatusLink => {\n                            return (\n                                applicationStatusLink &&\n                                applicationStatusLink.link && (\n                                    <span key={applicationStatusLink.uuid}>\n                                        <a\n                                            href={\n                                                (\n                                                    applicationStatusLink.link.url && \n                                                    applicationStatusLink.link.url.includes(\"//\")\n                                                ) ?\n                                                applicationStatusLink.link.url :\n                                                `//${applicationStatusLink.link.url}`\n                                            }\n                                            target=\"_blank\"\n                                        >\n                                            {applicationStatusLink.link.text}\n                                        </a>{\" \"}\n                                        |{\" \"}\n                                    </span>\n                                )\n                            );\n                        }\n                    )}\n                </p>\n            </div>\n        );\n    };\n\n    renderFormController = (\n        application: Application,\n        applicationStatus?: ApplicationStatus\n    ) => {\n        return (\n            <div className=\"application-status-form-controller\">\n                {/* new application status form */}\n                {!this.state.isFormOpened ? (\n                    <Button\n                        onClick={clickEvent => {\n                            this.setState({\n                                isFormOpened: true\n                            });\n                        }}\n                        unelevated\n                        icon={<MaterialIcon hasRipple icon=\"add\" />}\n                    >\n                        Add New Status\n                    </Button>\n                ) : (\n                    <div className=\"application-component__status-form\">\n                        <h3>\n                            Add new status to application for{\" \"}\n                            {application.position_title}{\" \"}\n                        </h3>\n                        <ApplicationStatusFormComponentContainer\n                            application={application}\n                            applicationStatus={applicationStatus}\n                            onCancel={() => {\n                                this.setState({\n                                    isFormOpened: false\n                                });\n                            }}\n                            onSubmitSuccess={() => {\n                                this.setState({\n                                    isFormOpened: false\n                                });\n                            }}\n                        />\n                    </div>\n                )}\n            </div>\n        );\n    };\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    // prop: store.prop\n});\n\nconst mapDispatchToProps = (\n    dispatch: Dispatch<IObjectAction<ApplicationStatus>>\n) => {\n    // actionName: (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {\n        deleteApplicationStatus: (\n            applicationStatusToDelete: ApplicationStatus,\n            callback?: Function\n        ) =>\n            dispatch(\n                ApplicationStatusActions[CrudType.DELETE][\n                    RequestStatus.TRIGGERED\n                ].action(applicationStatusToDelete, callback)\n            )\n    };\n};\n\nexport const ApplicationStatusComponentContainer = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(ApplicationStatusComponent)\n);\n","import React, { Component } from \"react\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\nimport {\n    IObjectStore,\n    IObjectAction\n} from \"../../store/rest-api-redux-factory\";\n// data models\nimport { Company } from \"../../store/data-model/company\";\nimport {\n    Application,\n    ApplicationActions\n} from \"../../store/data-model/application\";\n\n/** Components */\nimport {\n    FormFactory,\n    FormActionButtonProps,\n    ActionButtonType\n} from \"../form-factory/form-factory\";\n// form field\nimport { FormBaseFieldMeta } from \"../form-factory/form-base-field/form-base-field-meta\";\nimport { FormInputFieldMeta } from \"../form-factory/form-input-field/form-input-field-meta\";\nimport { FormLinkFieldMeta } from \"../form-factory/form-link-field/form-link-field-meta\";\n\ninterface IApplicationFormComponentProps {\n    application?: Application;\n    onCancel: (event: any) => void;\n    onSubmitSuccess?: () => void;\n\n    company: Company;\n    /** redux */\n    applicationStore: IObjectStore<Application>;\n    createApplication: (\n        applicationFormData: Application,\n        successCallback?: Function,\n        finalCallback?: Function,\n    ) => void;\n    updateApplication: (\n        applicationFormData: Application,\n        successCallback?: Function,\n        finalCallback?: Function,\n    ) => void;\n}\n\nclass ApplicationFormComponent extends Component<\n    IApplicationFormComponentProps\n> {\n\n    formFieldPropsList: Array<FormBaseFieldMeta>;\n    actionButtonPropsList: Array<FormActionButtonProps>;\n\n    constructor(props: IApplicationFormComponentProps) {\n        super(props);\n\n        this.formFieldPropsList = [\n            new FormInputFieldMeta({\n                fieldName: \"position_title\",\n                label: \"Position Title*\"\n            }),\n            new FormLinkFieldMeta({\n                fieldName: \"job_description_page\",\n                label: \"Job Description Link\",\n            }),\n            new FormLinkFieldMeta({\n                fieldName: \"job_source\",\n                label: \"Job Source Link\",\n            }),\n        ];\n        this.actionButtonPropsList = [\n            new FormActionButtonProps(\n                this.props.company ? \"Save Application\" : \"Create Application\",\n                undefined,\n                ActionButtonType.SUBMIT\n            ),\n            new FormActionButtonProps(\"Cancel\", this.props.onCancel)\n        ]\n    }\n\n    render() {\n        return (\n            <div className=\"ApplicationFormComponent\">\n                {/* <FormFactory {...this.formFactoryProps} /> */}\n                <FormFactory\n                    model={Application}\n                    initialInstance={new Application({\n                        ...this.props.application,\n                    })}\n                    enforcedInstanceData={{\n                        user_company: this.props.company.uuid\n                    }}\n        \n                    formFieldPropsList={this.formFieldPropsList}\n                    actionButtonPropsList={this.actionButtonPropsList}\n        \n                    createInstanceTriggerAction={this.props.createApplication}\n                    updateInstanceTriggerAction={this.props.updateApplication}\n\n                    onSubmitSuccess={this.props.onSubmitSuccess}\n                />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    applicationStore: store.application\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<Application>>) => {\n    return {\n        createApplication: (\n            applicationFormData: Application,\n            successCallback?: Function,\n            finalCallback?: Function,\n        ) =>\n            dispatch(\n                ApplicationActions[CrudType.CREATE][\n                    RequestStatus.TRIGGERED\n                ].action(applicationFormData, successCallback, undefined, finalCallback)\n            )\n        ,\n        updateApplication: (\n            applicationFormData: Application,\n            successCallback?: Function,\n            finalCallback?: Function,\n        ) =>\n            dispatch(\n                ApplicationActions[CrudType.UPDATE][\n                    RequestStatus.TRIGGERED\n                ].action(applicationFormData, successCallback, undefined, finalCallback)\n            )\n        ,\n    };\n};\n\nexport const ApplicationFormComponentContainer = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ApplicationFormComponent);\n","import React, { Component } from \"react\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport {\n    Application,\n    ApplicationActions\n} from \"../../store/data-model/application\";\nimport { IRootState } from \"../../store/types\";\nimport { IObjectAction } from \"../../store/rest-api-redux-factory\";\nimport { Dispatch } from \"redux\";\n\n/** data model */\nimport { ApplicationStatus } from \"../../store/data-model/application-status\";\nimport { Company } from \"../../store/data-model/company\";\n\n/** rest api */\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\n\n/** Components */\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\nimport IconButton from \"@material/react-icon-button\";\nimport { ApplicationStatusComponentContainer } from \"../application-status/application-status-component\";\nimport { ApplicationFormComponentContainer } from \"./application-form-component\";\n\n/** Types */\ninterface IApplicationComponentProps {\n    application?: Application;\n\n    /** application form */\n    company?: Company;\n\n    isOnlyForm?: boolean;\n\n    applicationStatusList?: Array<ApplicationStatus>;\n    isShowApplicationStatuses?: boolean;\n\n    /** redux */\n    deleteApplication: (\n        applicationToDelete: Application,\n        callback?: Function\n    ) => void;\n}\n\ninterface IApplicationComponentState {\n    isFormOpened: boolean;\n}\n\n/** Main Class */\nexport class ApplicationComponent extends Component<\n    IApplicationComponentProps,\n    IApplicationComponentState\n> {\n    state = {\n        isFormOpened: false\n    };\n\n    render() {\n        return (\n            <div className=\"application-component\">\n                {this.state.isFormOpened || this.props.isOnlyForm\n                    ? this.renderApplicationFormController()\n                    : this.props.application &&\n                      Array.isArray(this.props.applicationStatusList) &&\n                      this.renderApplicationDisplay(\n                          this.props.application,\n                          this.props.applicationStatusList\n                      )}\n            </div>\n        );\n    }\n\n    renderApplicationFormController = () => {\n        return (\n            this.props.company && ( // application create or udpate must have company associate with it.\n                <div className=\"application-form-controller\">\n                    {!this.state.isFormOpened ? (\n                        <Button\n                            onClick={clickEvent => {\n                                this.setState({\n                                    isFormOpened: true\n                                });\n                            }}\n                            unelevated\n                            icon={<MaterialIcon hasRipple icon=\"add\" />}\n                        >\n                            Add Application\n                        </Button>\n                    ) : (\n                        <ApplicationFormComponentContainer\n                            onCancel={event => {\n                                console.log(\"onCancel clicked\");\n                                this.setState({\n                                    isFormOpened: false\n                                });\n                            }}\n                            onSubmitSuccess={() =>\n                                this.setState({\n                                    isFormOpened: false\n                                })\n                            }\n                            company={this.props.company}\n                            application={this.props.application}\n                        />\n                    )}\n                </div>\n            )\n        );\n    };\n\n    renderApplicationDisplay = (\n        application: Application,\n        applicationStatusList: Array<ApplicationStatus>\n    ) => {\n        return (\n            <div className=\"application-component-display\">\n                {/* application display view */}\n                <h3>Application</h3>\n                <p>\n                    <span>\n                        <strong>Position:</strong> {application.position_title}\n                    </span>\n\n                    <IconButton\n                        onClick={() => {\n                            this.setState({\n                                isFormOpened: true // open form and close display\n                            });\n                        }}\n                    >\n                        <MaterialIcon hasRipple icon=\"edit\" />\n                    </IconButton>\n                    <IconButton\n                        onClick={() =>\n                            this.props.deleteApplication(application)\n                        }\n                    >\n                        <MaterialIcon hasRipple icon=\"delete\" />\n                    </IconButton>\n                    <br />\n                    <span>Application UUID: {application.uuid}</span>\n                    <br />\n                    {application.job_description_page.url && (\n                        <span>\n                            <strong>JD Page: </strong>\n                            <a\n                                target=\"_blank\"\n                                href={\n                                    application.job_description_page.url && application.job_description_page.url.includes(\"//\") ?\n                                    application.job_description_page.url :\n                                    `//${application.job_description_page.url}`\n                                }\n                            >\n                                {application.job_description_page.text || \"Link\"}\n                            </a>\n                        </span> \n                    )}\n\n                    <br />\n                    {application.job_source.url && (\n                        <span>\n                            <strong>Job Source: </strong>\n                            <a target=\"_blank\" href={\n                                (application.job_source.url && application.job_source.url.includes(\"//\")) ?\n                                application.job_source.url :\n                                `//${application.job_source.url}`\n                            }>\n                                {application.job_source.text || \"Link\"}\n                            </a>\n                        </span>\n                    )}\n                </p>\n\n                {/* application statuses list */}\n                {this.props.isShowApplicationStatuses &&\n                    applicationStatusList.map(status => {\n                        return (\n                            <ApplicationStatusComponentContainer\n                                key={status.uuid}\n                                applicationStatus={status}\n                                application={application}\n                            />\n                        );\n                    })}\n\n                {/* application status form controller */}\n                <ApplicationStatusComponentContainer\n                    application={application}\n                    isOnlyForm\n                />\n            </div>\n        );\n    };\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<Application>>) => {\n    // actionName: (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {\n        deleteApplication: (\n            applicationToDelete: Application,\n            callback?: Function\n        ) =>\n            dispatch(\n                ApplicationActions[CrudType.DELETE][\n                    RequestStatus.TRIGGERED\n                ].action(applicationToDelete, callback)\n            )\n    };\n};\n\nexport const ApplicationComponentController = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ApplicationComponent);\n","import React, { Component } from \"react\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\nimport {\n    IObjectAction,\n    IObjectStore\n} from \"../../store/rest-api-redux-factory\";\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\n// data models\nimport { CompanyActions, Company } from \"../../store/data-model/company\";\nimport {\n    ApplicationActions,\n    Application\n} from \"../../store/data-model/application\";\nimport { ApplicationStatus } from \"../../store/data-model/application-status\";\n\n/** Components */\n// objects\nimport { CompanyComponent } from \"../company/company-component\";\nimport { ApplicationComponentController } from \"../application/application-component\";\n\ninterface ICompanyApplicationComponentProps extends RouteComponentProps {\n    company: Company;\n    applicationStore: IObjectStore<Application>;\n    applicationStatusStore: IObjectStore<ApplicationStatus>;\n    isShowApplicationStatuses?: boolean;\n    deleteCompany: (companyToDelete: Company, callback?: Function) => void;\n    updateCompany: (companyToUpdate: Company, callback?: Function) => void;\n}\n\nclass CompanyApplicationComponent extends Component<\n    ICompanyApplicationComponentProps\n> {\n    onDeleteClick = (event: any) => {\n        if (this.props.company.uuid) {\n            this.props.deleteCompany(this.props.company);\n        } else {\n            console.error(\"Attempted to delete but company obj has no uuid\");\n        }\n    };\n\n    render() {\n        return (\n            <div className=\"CompanyApplicationContainer\">\n                <CompanyComponent\n                    company={this.props.company}\n                    onDeleteIconClicked={this.onDeleteClick}\n                    onEditIconClicked={() => {\n                        this.props.history.push(`/com-form/${this.props.company.uuid}/`);\n                    }}\n                />\n                {Object.values(this.props.applicationStore.collection)\n                    .filter(\n                        application =>\n                            application.user_company === this.props.company.uuid\n                    )\n                    .map(application => {\n                        const applicationStatusList =\n                            this.props.isShowApplicationStatuses || false\n                                ? Object.values(\n                                      this.props.applicationStatusStore\n                                          .collection\n                                  ).filter(\n                                      applicationStatus =>\n                                          applicationStatus.application ===\n                                          application.uuid\n                                  )\n                                : [];\n                        return (\n                            <ApplicationComponentController\n                                key={application.uuid}\n                                application={application}\n                                company={this.props.company}\n                                applicationStatusList={applicationStatusList}\n                                isShowApplicationStatuses={\n                                    this.props.isShowApplicationStatuses\n                                }\n                            />\n                        );\n                    })}\n                {!this.props.isShowApplicationStatuses && <hr />}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    // prop: store.prop\n    applicationStore: store.application,\n    applicationStatusStore: store.applicationStatus\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<Application>>) => {\n    // actionName: (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {\n        deleteCompany: (companyToDelete: Company, callback?: Function) =>\n            dispatch(\n                CompanyActions[CrudType.DELETE][RequestStatus.TRIGGERED].action(\n                    companyToDelete,\n                    callback\n                )\n            ),\n        updateCompany: (companyToUpdate: Company, callback?: Function) =>\n            dispatch(\n                CompanyActions[CrudType.UPDATE][RequestStatus.TRIGGERED].action(\n                    companyToUpdate,\n                    callback\n                )\n            )\n    };\n};\n\nexport const CompanyApplicationComponentContainer = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(CompanyApplicationComponent)\n);\n","import React, { Component } from \"react\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\nimport { IObjectAction, IObjectStore } from \"../../store/rest-api-redux-factory\";\n// data models\nimport { Company } from \"../../store/data-model/company\";\nimport { Application } from \"../../store/data-model/application\";\n\n/** Components */\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n// objects\nimport { CompanyApplicationComponentContainer } from \"../../components/company-application/company-application-component\";\n\ninterface IUserAppPageProps extends RouteComponentProps {\n    company: IObjectStore<Company>\n    application: IObjectStore<Application>\n}\n\nclass UserAppPage extends Component<IUserAppPageProps> {\n\n    componentDidMount() {\n    }\n\n    render() {\n        return (\n            <div className=\"UserAppPage\">\n                <h1>Your Applications</h1>\n                <Button\n                    onClick={()=>{ this.props.history.push(\"/com-form/\") }}\n                    unelevated\n                    icon={<MaterialIcon hasRipple icon=\"add\" />}\n                    children=\"Add Company\"\n                />\n                <br></br>\n                {\n                    (this.props.company.collection !== {}) && Object.values(this.props.company.collection).map((company) => {\n                        return (\n                            <CompanyApplicationComponentContainer key={company.uuid} company={company} />\n                        )\n                    })\n                }\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    // prop: store.prop\n    company: store.company,\n    application: store.application,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<{}>>) => {\n    // actionName = (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n\n    return {\n        // listObject: (callback?: Function) =>\n        //     dispatch(\n        //         ObjectActions[CrudType.LIST][RequestStatus.TRIGGERED].action(\n        //             new Object({}),\n        //             callback\n        //         )\n        //     ),\n    }\n};\n\nexport const UserAppPageContainer = withRouter(connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(UserAppPage));\n","/** Components */\n// base field\nimport { withFormBaseField } from \"../form-base-field/form-base-field\";\n// link field\nimport { FormAddressFieldComponent } from \"./form-address-field-component\";\n\nexport const FormAddressField = withFormBaseField(FormAddressFieldComponent);\n","import React, { Component } from \"react\";\n\n/** Components */\n// mdc-react input\nimport \"@material/react-text-field/dist/text-field.css\";\n\nimport { FormInputFieldMeta } from \"../form-input-field/form-input-field-meta\";\nimport { FormInputField } from \"../form-input-field/form-input-field\";\nimport { IFormBaseFieldProps } from \"../form-base-field/form-base-field-meta\";\n\nexport interface IFormAddressFieldComponentProps extends IFormBaseFieldProps {\n}\n\nexport class FormAddressFieldComponent extends Component<IFormAddressFieldComponentProps> {\n\n    fullAddressInputFieldMeta: FormInputFieldMeta;\n    placeNameInputFieldMeta: FormInputFieldMeta;\n\n    constructor(props: IFormAddressFieldComponentProps) {\n        super(props)\n\n        this.fullAddressInputFieldMeta = new FormInputFieldMeta({\n            fieldName: `${this.props.fieldName}.full_address`,\n            label: `Full Address`\n        });\n        this.placeNameInputFieldMeta = new FormInputFieldMeta({\n            fieldName: `${this.props.fieldName}.place_name`,\n            label: `Place Name`\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"FormAddressField\">\n                {this.props.label && <h4>{this.props.label}</h4>}\n                \n                <FormInputField\n                    {...this.placeNameInputFieldMeta}\n                />\n\n                <FormInputField\n                    {...this.fullAddressInputFieldMeta}\n                />\n                \n            </div>\n        );\n    }\n}","// data model\nimport { Address } from \"../../../store/data-model/address\";\n\n/** Components */\n// base field\nimport { IFieldBaseMetaProps, FormBaseFieldMeta } from \"../form-base-field/form-base-field-meta\";\nimport { FormAddressField } from \"./form-address-field\";\n\nexport class FormAddressFieldMeta extends FormBaseFieldMeta {\n\n    constructor(props: IFieldBaseMetaProps) {\n        super(props)\n        this.model = Address;\n        this.formField = FormAddressField;\n    }\n}\n","import React, { Component } from \"react\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\nimport {\n    IObjectAction\n} from \"../../store/rest-api-redux-factory\";\n// data models\nimport { Company, CompanyActions } from \"../../store/data-model/company\";\n\n/** Components */\nimport {\n    FormFactory,\n    FormActionButtonProps,\n    ActionButtonType\n} from \"../form-factory/form-factory\";\n// form field\nimport { FormBaseFieldMeta } from \"../form-factory/form-base-field/form-base-field-meta\";\nimport { FormInputFieldMeta } from \"../form-factory/form-input-field/form-input-field-meta\";\nimport { FormLinkFieldMeta } from \"../form-factory/form-link-field/form-link-field-meta\";\nimport { FormAddressFieldMeta } from \"../form-factory/form-address-field/form-address-field-meta\";\n\ninterface ICompanyFormComponentProps {\n    company?: Company;\n    onCancel: (event: any) => void;\n    onSubmitSuccess?: () => void;\n\n    /** redux */\n    createCompany: (companyFormData: Company, successCallback?: Function, finalCallback?: Function) => void;\n    updateCompany: (companyFormData: Company, successCallback?: Function, finalCallback?: Function) => void;\n}\n\nclass CompanyFormComponent extends Component<ICompanyFormComponentProps> {\n\n    formFieldPropsList: Array<FormBaseFieldMeta>;\n    actionButtonPropsList: Array<FormActionButtonProps>;\n\n    constructor(props: ICompanyFormComponentProps) {\n        super(props);\n\n        this.formFieldPropsList = [\n            new FormInputFieldMeta({\n                fieldName: \"name\",\n                label: \"Company Name*\"\n            }),\n\n            new FormAddressFieldMeta({\n                fieldName: \"hq_location\",\n                label: \"Headquarter Location\"\n            }),\n\n            new FormLinkFieldMeta({\n                fieldName: \"home_page\",\n                label: \"Company Website\"\n            }),\n        ];\n\n        this.actionButtonPropsList = [\n            new FormActionButtonProps(\n                !this.props.company ? \"Create Company\" : \"Save Company\",\n                undefined,\n                ActionButtonType.SUBMIT\n            ),\n            new FormActionButtonProps(\"Cancel\", this.props.onCancel)\n        ]\n\n    }\n\n    render() {\n        return (\n            <div className=\"CompanyFormComponent\">\n                <FormFactory\n                    model={Company}\n                    initialInstance={this.props.company}\n        \n                    formFieldPropsList={this.formFieldPropsList}\n                    actionButtonPropsList={this.actionButtonPropsList}\n        \n                    createInstanceTriggerAction={this.props.createCompany}\n                    updateInstanceTriggerAction={this.props.updateCompany}\n\n                    onSubmitSuccess={this.props.onSubmitSuccess}\n                />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => ({});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<Company>>) => {\n    return {\n        createCompany: (companyFormData: Company, successCallback?: Function, finalCallback?: Function) =>\n            dispatch(\n                CompanyActions[CrudType.CREATE][RequestStatus.TRIGGERED].action(\n                    companyFormData,\n                    successCallback,\n                    undefined,\n                    finalCallback,\n                )\n            ),\n        updateCompany: (companyFormData: Company, successCallback?: Function, finalCallback?: Function) =>\n            dispatch(\n                CompanyActions[CrudType.UPDATE][RequestStatus.TRIGGERED].action(\n                    companyFormData,\n                    successCallback,\n                    undefined,\n                    finalCallback,\n                )\n            )\n    };\n};\n\nexport const CompanyFormComponentContainer = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(CompanyFormComponent);\n","import React, { Component } from \"react\";\n\n/** route */\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\n// REST API\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\nimport {\n    IObjectAction,\n    IObjectStore\n} from \"../../store/rest-api-redux-factory\";\nimport { CompanyActions, Company } from \"../../store/data-model/company\";\nimport { Address } from \"../../store/data-model/address\";\nimport { Link } from \"../../store/data-model/link\";\n\n/** Components */\n//mdc-react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc-react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n// mdc-react input\nimport \"@material/react-text-field/dist/text-field.css\";\nimport TextField, { HelperText, Input } from \"@material/react-text-field\";\nimport { CompanyFormComponentContainer } from \"../../components/company/company-form-component\";\n\ninterface IAddComPageParams {\n    uuid?: string;\n}\n\ninterface IAddComPageProps extends RouteComponentProps<IAddComPageParams> {\n    company: IObjectStore<Company>;\n}\n\nclass AddComPage extends Component<IAddComPageProps> {\n    render() {\n        const company: Company | undefined = (this.props.match.params.uuid && this.props.company.collection[this.props.match.params.uuid])\n            ? this.props.company.collection[this.props.match.params.uuid]\n            : undefined;\n        console.log(\n            \"com form page: params is\",\n            this.props.match.params.uuid,\n            \"company is\",\n            company\n        );\n        return (\n            <div className=\"AddComPage\">\n                <h1>{!company ? \"Add a Company\" : `Update Company`}</h1>\n                <CompanyFormComponentContainer\n                    company={company}\n                    onSubmitSuccess={() => {\n                        console.log(\"com form page: onSubmitSuccess\");\n                        if (this.props.company.lastChangedObjectID) {\n                            let newCompany = this.props.company.collection[\n                                this.props.company.lastChangedObjectID\n                            ];\n                            console.log(\"new company:\", newCompany);\n                            this.props.history.push(\n                                `/com-app/${newCompany.uuid}/`\n                            );\n                        } else {\n                            console.error(\"store has no lastChangedObjectID\");\n                        }\n                    }}\n                    onCancel={event => {\n                        this.props.history.goBack()\n                    }}\n                />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: IRootState) => ({\n    // prop: state.prop\n    company: state.company\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<Company>>) => {\n    // actionName = (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {};\n};\n\nexport const AddComPageContainer = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(AddComPage)\n);\n","import React, { Component } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { RouteComponentProps } from \"react-router\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\n// rest api\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\nimport {\n    IObjectStore,\n    IObjectAction\n} from \"../../store/rest-api-redux-factory\";\nimport { Company } from \"../../store/data-model/company\";\nimport { Link } from \"../../store/data-model/link\";\nimport {\n    Application,\n    ApplicationActions\n} from \"../../store/data-model/application\";\n\n/** Components */\nimport { CompanyApplicationComponentContainer } from \"../../components/company-application/company-application-component\";\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n// mdc-react input\nimport \"@material/react-text-field/dist/text-field.css\";\nimport { ApplicationComponentController } from \"../../components/application/application-component\";\n\ninterface IUserComAppPageParams {\n    uuid: string;\n}\n\ninterface IUserComAppPageProps\n    extends RouteComponentProps<IUserComAppPageParams> {\n    company: IObjectStore<Company>;\n    createApplication: (\n        applicationFormData: Application,\n        callback?: Function\n    ) => void;\n}\n\ninterface IUserComAppPageState {\n    companyUuid: string;\n    company: Company;\n}\n\nclass UserComAppPage extends Component<\n    IUserComAppPageProps,\n    IUserComAppPageState\n> {\n    readonly state: IUserComAppPageState = {\n        companyUuid: \"\",\n        company: new Company({})\n    };\n\n    componentDidMount() {\n        let companyUuid = this.props.match.params.uuid;\n        console.log(\"mount, got uuid from route?\", companyUuid);\n        if (\n            this.props.company.collection &&\n            companyUuid in this.props.company.collection\n        ) {\n            this.setState({\n                companyUuid,\n                company: new Company(this.props.company.collection[companyUuid])\n            });\n        }\n    }\n\n    renderAll() {\n        if (!this.state.company.uuid) {\n            return;\n        }\n\n        return (\n            <div className=\"user-com-app-page-content\">\n                <Button\n                    onClick={clickEvent => {\n                        this.props.history.push(\"/\");\n                    }}\n                >\n                    Back\n                </Button>\n                <h1>{this.state.company.name}</h1>\n                \n                {/* application form controller - always create form */}\n                <ApplicationComponentController \n                    company={this.state.company}\n                    isOnlyForm\n                />\n\n                <br />\n\n                {/* application list */}\n                {this.state.company.uuid && (\n                    <CompanyApplicationComponentContainer\n                        company={this.state.company}\n                        isShowApplicationStatuses\n                    />\n                )}\n            </div>\n        );\n    }\n\n    render() {\n        return (\n            <div className=\"UserComAppPage\">\n                {this.state.companyUuid &&\n                this.props.company.collection &&\n                this.state.companyUuid in this.props.company.collection ? (\n                    this.renderAll()\n                ) : this.state.companyUuid ? (\n                    <h1>No company found. Uuid={this.state.companyUuid}</h1>\n                ) : (\n                    <h1>Company uuid not specified</h1>\n                )}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => {\n    return {\n        // prop: store.prop\n        company: store.company,\n    };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<Application>>) => {\n    // actionName = (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {\n        createApplication: (\n            applicationFormData: Application,\n            callback?: Function\n        ) =>\n            dispatch(\n                ApplicationActions[CrudType.CREATE][\n                    RequestStatus.TRIGGERED\n                ].action(applicationFormData, callback)\n            )\n    };\n};\n\nexport const UserComAppPageContainer = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(UserComAppPage)\n);\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { IUpdateAuthState } from \"../../store/auth/types\";\n\ninterface UserInfoProps {\n    auth: IUpdateAuthState;\n}\n\nexport class UserInfo extends Component<UserInfoProps, any> {\n    render() {\n        return (\n            <div>\n                <div>\n                    Logged in:{\" \"}\n                    {(this.props.auth.isLogin &&\n                        this.props.auth.isLogin.toString()) ||\n                        \"undefine\"}\n                </div>\n                <div>User Name: {this.props.auth.userName || \"(empty)\"}</div>\n                <div>\n                    Token (for API): {this.props.auth.apiToken || \"(empty)\"}\n                </div>\n            </div>\n        );\n    }\n}\n","import React, { Component } from \"react\";\n\n/** redux */\nimport { connect } from \"react-redux\";\nimport { IRootState } from \"../../store/types\";\nimport { IUpdateAuthState } from \"../../store/auth/types\";\n\n/** Routes & pages */\nimport { UserInfo } from \"../../components/user-info/user-info\";\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\n\n/** Components */\nimport { SocialAuthButtonContainer } from \"../../components/social-auth/social-auth-button\";\n\ninterface IUserProfilePageProps extends RouteComponentProps {\n    auth: IUpdateAuthState;\n}\n\nclass UserProfilePage extends Component<IUserProfilePageProps, any> {\n    render() {\n        return (\n            <div>\n                <h1>My Profile</h1>\n                <UserInfo auth={this.props.auth} />\n                <SocialAuthButtonContainer />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => {\n    return {\n        auth: store.auth\n    };\n};\n\nexport const UserProfilePageContainer = withRouter(connect(mapStateToProps)(UserProfilePage));\n","import React, { Component } from \"react\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { IRootState } from \"../../store/types\";\nimport { IUpdateAuthState } from \"../../store/auth/types\";\n\n/** Routing & Pages */\nimport {\n    Route,\n    Redirect,\n    Switch,\n    Link,\n    withRouter,\n    RouteComponentProps\n} from \"react-router-dom\";\n// pages\nimport { LandingPageContainer } from \"../landing-page/landing-page\";\nimport { LocalLoginPageContainer } from \"../login-page/local-login-page\";\nimport { UserAppPageContainer } from \"../user-app-page/user-app-page\";\nimport { AddComPageContainer } from \"../add-com-page/add-com-page\";\nimport { UserComAppPageContainer } from \"../user-com-app-page/user-com-app-page\";\nimport { UserProfilePageContainer } from \"../user-profile-page/user-profile-page\";\n\n/** MDC React */\nimport TopAppBar, { TopAppBarFixedAdjust } from \"@material/react-top-app-bar\";\nimport \"@material/react-top-app-bar/dist/top-app-bar.css\";\n// import '@material/react-material-icon/dist/material-icon.css';\nimport MaterialIcon from \"@material/react-material-icon\";\n// style\nimport \"@material/react-ripple/dist/ripple.css\";\n\n// import {withRipple} from '@material/react-ripple';\n\ninterface IPageRoutesProps extends RouteComponentProps {\n    auth: IUpdateAuthState;\n}\n\nclass PageRoutes extends Component<IPageRoutesProps> {\n    render() {\n        return (\n            <div className=\"PageRoutesContainer\">\n                {(\n                    this.props.location.pathname === \"/\" ||\n                    this.props.location.pathname === \"/login/\"\n                    // add more public page routres here\n                    // ...\n                ) ? (\n                    <Switch>\n                        <Route path=\"/\" exact component={LandingPageContainer} />\n                        <Route path=\"/login/\" exact component={LocalLoginPageContainer} />\n                        {\n                            /** add more public page routes here */\n                            // ...\n                        }\n                    </Switch>\n                ) : (\n                    <div className=\"PrivateRoutesContainer\">\n                        {/** protect private routes */\n                        !this.props.auth.isLogin && <Redirect to=\"/\" />}\n\n                        <TopAppBar\n                            title=\"Appl Tracky\"\n                            actionItems={[\n                                <Link to=\"/home/\">\n                                    <MaterialIcon\n                                        hasRipple\n                                        key=\"itemHome\"\n                                        icon=\"home\"\n                                    />\n                                </Link>,\n\n                                <Link to=\"/profile/\">\n                                    {this.props.auth.avatarUrl === \"\" ? (\n                                        <MaterialIcon\n                                            hasRipple\n                                            key=\"itemProfile\"\n                                            icon=\"account_circle\"\n                                        />\n                                    ) : (\n                                        <img style={{\n                                            \"height\": \"100%\",\n                                            \"borderRadius\": \"50%\",\n                                        }} src={this.props.auth.avatarUrl} />\n                                    )}\n                                </Link>\n                            ]}\n                        />\n                        <TopAppBarFixedAdjust>\n                            <Switch>\n                                <Route\n                                    path=\"/home/\"\n                                    component={UserAppPageContainer}\n                                />\n                                <Route\n                                    path=\"/com-form/:uuid?/\"\n                                    component={AddComPageContainer}\n                                />\n                                <Route\n                                    path=\"/com-app/:uuid/\"\n                                    component={UserComAppPageContainer}\n                                />\n                                <Route\n                                    path=\"/com-app/\"\n                                    component={UserComAppPageContainer}\n                                />\n                                <Route\n                                    path=\"/profile/\"\n                                    component={UserProfilePageContainer}\n                                />\n                                {/** add more private page routes here */}\n                            </Switch>\n                        </TopAppBarFixedAdjust>\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    auth: store.auth\n});\n\nconst mapDispatchToProps = {};\n\nexport const PageRoutesContainer = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(PageRoutes)\n);\n","/** React core */\nimport React, { Component } from \"react\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { IRootState } from \"./store/types\";\n\n/** Routes & pages */\nimport { PageRoutesContainer } from \"./pages/page-routes/page-routes\";\n\n/** Locals */\nimport \"./App.css\";\n\ninterface IAppProps {}\n\nclass App extends Component<IAppProps> {\n    componentDidMount() {}\n\n    render() {\n        return (\n            <div className=\"App\">\n                <PageRoutesContainer />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => {\n    return {};\n};\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export enum RootActionNames {\n    ResetAllStore = \"RESET_ALL_STORE\"\n}\n\nexport const resetAllStoreAction = () => {\n    return {\n        type: RootActionNames.ResetAllStore,\n    }\n}","import { Reducer, Action } from 'redux';\n\nimport { \n    /** store */\n    IUpdateAuthState, \n    /** action */\n    AuthActionNames, TAuthActions \n} from \"./types\";\n\nimport { RequestStatus } from \"../../utils/rest-api\";\n\nconst initialAuthState: IUpdateAuthState = {\n    requestStatus: RequestStatus.SUCCESS,\n    isLogin: false,\n    isLocal: false,\n    socialAuthToken: \"\",\n    apiToken: \"\",\n    userName: \"\",\n    expireDateTime: \"\",\n    avatarUrl: \"\",\n}\n\n// authStore will be stored as a sub-entry in global store; this is defined in ./store/types.ts\nexport const authReducer: Reducer<IUpdateAuthState> = (authStore = initialAuthState, action: Action)  => {\n    // add reducer for new actions here\n    // ...\n\n    const authAction = action as TAuthActions;\n\n    return {\n        ...authStore,\n        ...authAction.payload\n    }\n}","/** redux */\nimport {\n    AuthActionNames,\n    IRequestedLoginAuthAction,\n    IRequestedLogoutAuthAction\n} from \"../../store/auth/types\";\nimport {\n    SuccessLoginAuth,\n    SuccessLogoutAuth,\n    FailureAuth\n} from \"../../store/auth/actions\";\nimport { resetAllStoreAction } from \"../../store/actions\";\nimport { CompanyActions, Company } from \"../../store/data-model/company\";\nimport { ApplicationActions, Application } from \"../../store/data-model/application\";\nimport { ApplicationStatusActions, ApplicationStatus } from \"../../store/data-model/application-status\";\n// redux-saga\nimport { takeEvery, call, put } from \"redux-saga/effects\";\n\n/** router */\nimport { push } from \"connected-react-router\";\n\n/** api */\nimport { AuthenticationService } from \"../../utils/authentication\";\nimport { RestApiService, CrudType, RequestStatus } from \"../../utils/rest-api\";\n\nfunction* authLoginSagaHandler(\n    requestedLoginAuthAction: IRequestedLoginAuthAction\n) {\n    // RequestAuth action triggered & injecting side effects here...\n    console.log(\"auth saga: initialize\");\n    const { socialAuthToken } = requestedLoginAuthAction.payload;\n    console.log(\"auth saga: request fired\");\n    try {\n        // TODO: define interface typing for api response\n        const jsonResponse = yield call(AuthenticationService.serverLogin, socialAuthToken);\n        console.log(\"auth saga: server login using code from social button. server jsonRes=\", jsonResponse);\n        AuthenticationService.state.apiLoginToken = jsonResponse.token;\n        yield put(SuccessLoginAuth(\n            jsonResponse.email, \"\", \n            jsonResponse.token, \n            jsonResponse.avatar_url,\n            false // is not local login, is social login\n        ));\n        // yield put(push(\"/home/\"));\n\n        // initial fetch user data\n        yield put(ApplicationActions[CrudType.LIST][RequestStatus.TRIGGERED].action(new Application({})))\n        yield put(CompanyActions[CrudType.LIST][RequestStatus.TRIGGERED].action(new Company({})))\n        yield put(ApplicationStatusActions[CrudType.LIST][RequestStatus.TRIGGERED].action(new ApplicationStatus({})))\n    } catch (error) {\n        console.warn(\"auth saga: error\")\n        yield put(FailureAuth(error));\n        return;\n    }\n}\n\nexport function* authLoginSaga() {\n    yield takeEvery(AuthActionNames.REQUESTED_LOGIN_AUTH, authLoginSagaHandler);\n}\n\nfunction* authLogoutSagaHandler(\n    requestedLogoutAuthAction: IRequestedLogoutAuthAction\n) {\n    // RequestAuth action triggered & injecting side effects here...\n    console.log(\"auth logout saga: fired\");\n    try {\n        yield call(AuthenticationService.serverLogout);\n\n        // clear all store\n    } catch (error) {\n        yield put(FailureAuth(error));\n        return;\n    }\n\n    console.log(\"auth logout saga: navigating\");\n    yield put(SuccessLogoutAuth());\n    // yield put(push(\"/\"));\n\n    // clear all redux store\n    yield put(resetAllStoreAction());\n}\n\nexport function* authLogoutSaga() {\n    yield takeEvery(\n        AuthActionNames.REQUESTED_LOGOUT_AUTH,\n        authLogoutSagaHandler\n    );\n}\n\n// add new saga handler here && a `takeEvery` saga.\n// ...","import createSagaMiddleware from 'redux-saga';\nimport { all } from \"redux-saga/effects\";\nimport { authLoginSaga, authLogoutSaga } from \"./auth/sagas\";\n// rest api\nimport { CompanySagas } from \"../store/data-model/company\";\nimport { ApplicationSagas } from \"../store/data-model/application\";\nimport { ApplicationStatusSagas } from \"../store/data-model/application-status\";\n\n/** setup saga */\nconst sagaMiddleware = createSagaMiddleware();\n\nexport {\n    sagaMiddleware\n};\n\nconst rootSaga = function*() {\n    yield all([\n        authLoginSaga(),\n        authLogoutSaga(),\n        ...CompanySagas.map((saga) => saga()),\n        ...ApplicationSagas.map((saga) => saga()),\n        ...ApplicationStatusSagas.map((saga) => saga()),\n        // add new saga here\n        // ...\n    ]);\n};\n\nexport const runSagaMiddleaware = () => {\n    sagaMiddleware.run(rootSaga)\n}\n\n","/** redux */\nimport { combineReducers, Reducer, AnyAction, Action } from \"redux\";\nimport { connectRouter, LocationChangeAction } from 'connected-react-router';\nimport { authReducer } from \"./auth/reducers\";\nimport { TAuthActions } from \"./auth/types\";\nimport { IRootState } from \"./types\";\nimport { RootActionNames } from \"./actions\";\n// rest api\nimport { CompanyReducer } from \"./data-model/company\";\nimport { ApplicationReducer } from \"./data-model/application\";\nimport { ApplicationStatusReducer } from \"./data-model/application-status\";\n\n/** router */\nimport { History } from \"history\";\n\n// root reducer with router state\nexport const createRootReducer = (history: History<any>): Reducer<IRootState> => {\n    // return combineReducers<IRootState>({\n    //     router: connectRouter(history),\n    \n    //     // add more reducers here\n    //     auth: authReducer,\n    //     company: CompanyReducer,\n    //     address: AddressReducer,\n    //     application: ApplicationReducer,\n    //     // ...\n    // })\n\n    const rootReducer: Reducer<IRootState> = (rootState: IRootState | undefined, action: Action): IRootState  => {\n\n        let rootStateChecked: any = {}\n        if (!rootState) {\n            rootStateChecked.router = undefined;\n            rootStateChecked.auth = undefined;\n            rootStateChecked.company = undefined;\n            rootStateChecked.application = undefined;\n            rootStateChecked.applicationStatus = undefined;\n            // add initial state for new sub-store here\n            // ...\n        } else if (action.type === RootActionNames.ResetAllStore) {\n            rootStateChecked = {\n                router: rootState.router\n            }\n        } else {\n            rootStateChecked = rootState;\n        }\n\n        console.log(\"beforeRootStore\", rootState);\n\n        const afterStore  = { \n            ...rootState,\n            router: connectRouter(history)(rootStateChecked.router, action as LocationChangeAction),\n            auth: authReducer(rootStateChecked.auth, action),\n            company: CompanyReducer(rootStateChecked.company, action),\n            application: ApplicationReducer(rootStateChecked.application, action),\n            applicationStatus: ApplicationStatusReducer(rootStateChecked.applicationStatus, action),\n            // add new reducer here\n            // ...\n        }\n        console.log(\"afterRootStore\", afterStore);\n\n        return afterStore;\n    }\n\n    return rootReducer;\n}","/** redux */\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport { IRootState } from \"../store/types\";\nimport { createRootReducer } from \"../store/reducers\";\n\n/** router */\nimport { createBrowserHistory } from 'history';\nimport { routerMiddleware } from 'connected-react-router';\n\n/** middleware */\n// saga\nimport { sagaMiddleware, runSagaMiddleaware } from \"../sagas/saga-config\";\n\n\n\nconst history = createBrowserHistory({\n    basename: (process.env.NODE_ENV === 'development') ?  \n    ``\n    :\n    `/appl-tracky-spa`\n});\n\nconst preloadedState = {\n\n};\n\n// generate the singleton store from redux\nexport const store = createStore<IRootState, any, any, any>(\n    createRootReducer(history),\n    preloadedState,\n    compose(\n        applyMiddleware(\n            routerMiddleware(history),\n            sagaMiddleware,\n            // ... add other middlewares ...\n        )\n    )\n);\n\n/** after mount saga middlewares to store, run them */\nrunSagaMiddleaware();\n\nexport {\n    history\n};","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n/** redux */\nimport { Provider } from \"react-redux\";\nimport { Store } from \"redux\";\n/** root store */\nimport { IRootState } from \"./store/types\";\nimport { store } from \"./store/store-config\";\n\n/** router */\nimport { ConnectedRouter } from \"connected-react-router\";\nimport { history } from \"./store/store-config\";\n\n/** types */\ninterface IRootProps {\n    store: Store<IRootState>;\n}\n\n/** root component - just to wrap the App into redux store */\nconst Root: React.SFC<IRootProps> = props => {\n    return (\n        <Provider store={props.store}>\n            <ConnectedRouter history={history} >\n                <App />\n            </ConnectedRouter>\n        </Provider>\n    );\n};\n\nReactDOM.render(<Root store={store} />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}