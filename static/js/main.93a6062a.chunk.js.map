{"version":3,"sources":["store/auth/types.ts","utils/rest-api.ts","store/data-model/base-model.ts","utils/auth.ts","store/auth/actions.ts","store/rest-api-redux-factory.ts","store/data-model/address.ts","store/data-model/link.ts","store/data-model/company.ts","store/data-model/application.ts","components/social-auth/social-auth-login-button.tsx","components/social-auth/social-auth-logout-button.tsx","components/social-auth/social-auth-button.tsx","components/form-factory/form-field-factory.tsx","components/form-factory/form-factory.tsx","pages/landing-page/landing-page.tsx","components/company/company-component.tsx","store/data-model/application-status.ts","store/data-model/application-status-link.ts","components/application-status/application-status-form-component.tsx","components/application-status/application-status-component.tsx","components/application/application-component.tsx","components/company-application/company-application-component.tsx","pages/user-app-page/user-app-page.tsx","components/company/company-form-component.tsx","pages/add-com-page/add-com-page.tsx","components/application/application-form-component.tsx","pages/user-com-app-page/user-com-app-page.tsx","components/user-info/user-info.tsx","pages/user-profile-page/user-profile-page.tsx","pages/page-routes/page-routes.tsx","App.tsx","serviceWorker.ts","store/actions.ts","store/auth/reducers.ts","sagas/auth/sagas.ts","sagas/saga-config.ts","store/reducers.ts","store/store-config.ts","index.tsx"],"names":["AuthActionNames","RequestStatus","CrudType","RestMethod","BaseModel","_ref","_ref$uuid","uuid","_ref$created_at","created_at","_ref$modified_at","modified_at","Object","classCallCheck","this","AuthObject","_BaseModel","_this","_ref$code","code","_ref$provider","provider","_ref$redirect_uri","redirect_uri","args","objectWithoutProperties","possibleConstructorReturn","getPrototypeOf","call","inherits","AuthenticationService","state","clientID","redirectUri","apiLoginUrl","socialAuthProvider","userEmail","apiLoginToken","userFirstName","userLastName","objectID","serverLogin","socialLoginCode","authFormData","_this2","RestApiService","post","data","endpointUrl","serverLogout","_callee","regenerator_default","a","wrap","_context","prev","next","console","log","abrupt","stop","CrudMapToRest","crudType","CREATE","POST","READ","LIST","GET","UPDATE","PATCH","DELETE","RestApi","apiBaseUrl","React","createElement","get","objectName","fetch","getRelativeUrl","objectSpread","method","setApiAuthHeaders","then","res","json","_ref2","body","JSON","stringify","patch","_ref3","delete","_ref4","_ref5","url","concat","undefined","mode","credentials","headers","Authorization","Content-Type","RequestedLoginAuth","socialAuthToken","type","REQUESTED_LOGIN_AUTH","payload","requestStatus","REQUESTING","RequestedLogoutAuth","REQUESTED_LOGOUT_AUTH","SuccessLoginAuth","userName","expireDateTime","apiToken","SUCCESS_AUTH","SUCCESS","isLogin","SuccessLogoutAuth","FailureAuth","error","FAILURE_AUTH","FAILURE","RestApiReduxFactory","initialObjectInstance","crudKeywords","values","ObjectRestApiRedux","_loop","crudKeyword","_i","_arr","_i2","length","actionTypeName","action","toUpperCase","TRIGGERED","objectClassInstance","callback","formData","jsonResponse","triggerFormData","newState","lastChangedObjectID","results","sagaHandler","mark","triggerAction","put","sent","t0","saga","_context2","takeEvery","initialState","collection","sagas","map","actions","storeReducer","objectStore","arguments","objectAction","split","newObject","defineProperty","resObjectList","newObjects","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","done","object","value","err","return","afterStore","targetDeleteObject","omit","Address","_ref$place_name","place_name","_ref$country","country","_ref$state","_ref$city","city","_ref$street","street","_ref$full_address","full_address","_ref$zipcode","zipcode","AddressRestApiRedux","AddressReducer","AddressSagas","Link","_ref$text","text","_ref$user","user","_ref$url","_ref$order","order","Company","_ref$labels","labels","_ref$name","name","_ref$hq_location","hq_location","_ref$home_page","home_page","_ref$ratings","ratings","_ref$applications","applications","CompanyRestApiRedux","CompanyActions","CompanyReducer","CompanySagas","Application","_ref$user_company","user_company","_ref$position_title","position_title","_ref$job_description_","job_description_page","_ref$job_source","job_source","ApplicationRestApiRedux","ApplicationActions","ApplicationReducer","ApplicationSagas","SocialAuthLoginButton","_Component","_getPrototypeOf2","_len","Array","_key","apply","onLoginButtonClicked","clickEvent","renderProps","onClick","onAuthSuccess","authResponse","props","onSuccess","onAuthFailure","onFailure","createClass","key","react_default","className","google_login","render","react_button_dist_default","unelevated","icon","dist_default","hasRipple","clientId","responseType","Component","SocialAuthLogoutButton","onLogoutSuccess","SocialAuthButton","onSocialLoginSuccess","googleOauthResponse","setState","requestedLoginAuth","onSocialLoginFailure","onSocialLogoutSuccess","requestedLogoutAuth","auth","social_auth_logout_button_SocialAuthLogoutButton","social_auth_login_button_SocialAuthLoginButton","InputFieldType","SocialAuthButtonContainer","withRouter","connect","store","dispatch","ActionButtonType","FormInputFieldProps","fieldName","label","onTrailingIconSelect","FormInputFieldFactory","react_text_field_dist_default","react_text_field_dist","TEXT","inputType","onChange","onBlur","formik_esm","FormActionButtonProps","FormFactory","initialValues","validate","onSubmit","errors","touched","handleChange","handleBlur","isSubmitting","handleSubmit","formInputFieldPropsList","formInputFieldProps","index","form_field_factory_FormInputFieldFactory","assign","actionButtonPropsList","actionButtonProps","BUTTON","disabled","children","styles","backgroundColor","color","LandingPage","formFactoryProps","validateLoginForm","onSubmitLoginForm","setSubmitting","token","loginSuccess","username","listApplication","listCompany","catch","prepareLoginForm","password","PASSWORD","SUBMIT","style","react_router","to","form_factory_FormFactory","LandingPageContainer","CompanyComponent","company","react_router_dom","react_icon_button_dist_default","onDeleteIconClicked","target","href","ApplicationStatus","_ref$application","application","_ref$application_stat","application_status_links","_ref$date","date","ApplicationStatusRestApiRedux","ApplicationStatusActions","ApplicationStatusReducer","ApplicationStatusSagas","ApplicationStatusLink","application_status","_ref$link","link","ApplicationStatusLinkRestApiRedux","ApplicationStatusLinkActions","ApplicationStatusLinkReducer","ApplicationStatusLinkSagas","ApplicationStatusFormComponent","application_status__text","application_status__date","application__id","applicationStatus","createApplicationStatus","newApplicationStatusID","applicationStatusStore","newApplicationStatus","links","indexes","push","statusLink","createApplicationStatusLink","application_status__link0__url","application_status__link0__text","application_status__link1__url","application_status__link1__text","DATE","onCancel","ApplicationStatusFormComponentContainer","applicationStatusFormData","applicationStatusLinkFormData","ApplicationStatusComponent","applicationStatusLinkID","applicationStatusLink","applicationStatusLinkStore","ApplicationStatusComponentContainer","ApplicationComponent","isApplicationStatusFormOpened","isShowApplicationStatuses","applicationStatusList","status","CompanyApplicationComponent","onDeleteClick","event","deleteObject","company_component_CompanyComponent","applicationStore","filter","application_component_ApplicationComponent","CompanyApplicationComponentContainer","companyToDelete","UserAppPage","history","UserAppPageContainer","CompanyFormComponent","validateAppForm","company__name","test","company__home_page__url","onSubmitAppForm","company__hq_location__full_address","createCompany","onSubmitSuccess","CompanyFormComponentContainer","companyFormData","AddComPage","newCompany","AddComPageContainer","ApplicationFormComponent","application__position_title","application__job_description_page__url","application__job_source__url","application__user_company__id","createApplication","newApplication","ApplicationFormComponentContainer","applicationFormData","UserComAppPage","isApplicationFormOpened","companyUuid","match","params","renderAll","UserComAppPageContainer","UserInfo","toString","UserProfilePage","user_info_UserInfo","UserProfilePageContainer","PageRoutes","location","pathname","path","exact","component","react_top_app_bar_dist_default","title","actionItems","react_top_app_bar_dist","PageRoutesContainer","App","Boolean","window","hostname","RootActionNames","initialAuthState","authReducer","authStore","authAction","resetAllStoreAction","ResetAllStore","authLoginSagaHandler","authLoginSaga","authLogoutSagaHandler","authLogoutSaga","requestedLoginAuthAction","email","warn","_marked","_marked2","requestedLogoutAuthAction","_context3","_marked3","_context4","_marked4","sagaMiddleware","createSagaMiddleware","rootSaga","all","toConsumableArray","createBrowserHistory","createStore","rootState","rootStateChecked","router","address","connectRouter","compose","applyMiddleware","routerMiddleware","run","ReactDOM","es","esm","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.93a6062a.chunk.js","sourcesContent":["import { Action } from \"redux\";\n\nimport { RequestStatus } from \"../../utils/rest-api\";\n\n/**\n * Store Types\n */\n\n// complete store type\nexport interface IUpdateAuthState {\n    requestStatus: RequestStatus\n    isLogin: boolean\n    userName: string\n    socialAuthToken: string\n    apiToken: string\n    expireDateTime: string,\n}\n\n// async partial store types\nexport interface IRequestedLoginAuthState {\n    requestStatus: RequestStatus\n    socialAuthToken: string\n}\n\nexport interface IRequestedLogoutAuthState {\n    requestStatus: RequestStatus\n}\n\nexport interface ISuccessAuthState {\n    requestStatus: RequestStatus\n    isLogin: boolean\n    userName: string\n    expireDateTime: string\n    apiToken: string\n}\n\nexport interface IFailureAuthState {\n    requestStatus: RequestStatus,\n    error: any\n}\n\n// add more state types for this reducer - auth reducer\n// ...\n\n\n\n\n\n/**\n * Action Types\n */\n\nexport enum AuthActionNames {\n    UPDATE_AUTH = \"Update auth\",\n    REQUESTED_LOGIN_AUTH = \"Requested login auth\",\n    REQUESTED_LOGOUT_AUTH = \"Requested logout auth\",\n    SUCCESS_AUTH = \"Success auth\",\n    FAILURE_AUTH = \"Failure auth\",\n\n    // 1. add more action for this reducer - auth reducer\n    // 2. write the type interface for the action below\n    // ...\n}\n\nexport interface IUpdateAuthAction extends Action<AuthActionNames.UPDATE_AUTH> {\n    type: typeof AuthActionNames.UPDATE_AUTH;\n    payload: IUpdateAuthState;\n}\n\nexport interface IRequestedLoginAuthAction extends Action<AuthActionNames.REQUESTED_LOGIN_AUTH> {\n    type: typeof AuthActionNames.REQUESTED_LOGIN_AUTH;\n    payload: IRequestedLoginAuthState;\n}\n\nexport interface IRequestedLogoutAuthAction extends Action<AuthActionNames.REQUESTED_LOGOUT_AUTH> {\n    type: typeof AuthActionNames.REQUESTED_LOGOUT_AUTH;\n    payload: IRequestedLogoutAuthState;\n}\n\nexport interface ISuccessAuthAction extends Action<AuthActionNames.SUCCESS_AUTH> {\n    type: typeof AuthActionNames.SUCCESS_AUTH;\n    payload: ISuccessAuthState;\n}\n\nexport interface IFailureAuthAction extends Action<AuthActionNames.FAILURE_AUTH> {\n    type: typeof AuthActionNames.FAILURE_AUTH;\n    payload: IFailureAuthState;\n}\n\n// use union | ... | ... to add more action types\nexport type TAuthActions = IUpdateAuthAction | IRequestedLoginAuthAction | IRequestedLogoutAuthAction | ISuccessAuthAction | IFailureAuthAction","import React from \"react\";\nimport { TObject, IObjectBase } from \"../store/rest-api-redux-factory\";\nimport { BaseModel } from \"../store/data-model/base-model\";\nimport { AuthenticationService } from \"./auth\";\n\nexport enum RequestStatus {\n    TRIGGERED = \"triggered\",\n    REQUESTING = \"requesting\",\n    SUCCESS = \"success\",\n    FAILURE = \"failre\"\n}\n\nexport enum CrudType {\n    CREATE = \"create\",\n    READ = \"read\",\n    LIST = \"list\",\n    UPDATE = \"update\",\n    DELETE = \"delete\"\n}\n\nexport enum RestMethod {\n    POST = \"post\",\n    GET = \"get\",\n    PATCH = \"patch\",\n    DELETE = \"delete\"\n}\n\nexport const CrudMapToRest = (crudType: CrudType): RestMethod => {\n    switch (crudType) {\n        case CrudType.CREATE:\n            return RestMethod.POST;\n        case CrudType.READ:\n            return RestMethod.GET;\n        case CrudType.LIST:\n            return RestMethod.GET;\n        case CrudType.UPDATE:\n            return RestMethod.PATCH;\n        case CrudType.DELETE:\n            return RestMethod.DELETE;\n\n        default:\n            return RestMethod.GET;\n    }\n};\n\nexport interface IRequestParams<Schema> {\n    endpointUrl?: string;\n    objectName?: string;\n    data?: TObject<Schema> | Array<TObject<Schema>>;\n}\n\nexport interface IListRestApiResponse<Schema> {\n    count: number;\n    next: any;\n    previous: any;\n    results: Array<TObject<Schema>>;\n}\n\nexport type ISingleRestApiResponse<Schema> = TObject<Schema>;\n\nexport function IsSingleRestApiResponseTypeGuard<Schema>(\n    response: ISingleRestApiResponse<Schema> | IListRestApiResponse<Schema>\n): response is ISingleRestApiResponse<Schema> {\n    return (<ISingleRestApiResponse<Schema>>response).uuid !== undefined;\n}\n\nfunction IsSingleFormDataTypeGuard<Schema>(\n    formData: TObject<Schema> | Array<TObject<Schema>>\n): formData is TObject<Schema> {\n    return (<TObject<Schema>>formData).uuid !== undefined;\n}\n\nexport class RestApi {\n    state = {\n        clientID: `732988498848-vuhd6g61bnlqe372i3l5pbpnerteu6na.apps.googleusercontent.com`,\n        code: ``,\n        redirectUri: `postmessage`,\n        apiBaseUrl: ('_self' in React.createElement('div')) ? \n            `http://localhost:8000/api/`: \n            `https://appl-tracky-api-https.shaungc.com/api/`,\n        apiLoginUrl: `login/social/`,\n        socialAuthProvider: `google-oauth2`,\n\n        userEmail: ``,\n        apiLoginToken: ``,\n        userFirstName: ``,\n        userLastName: ``,\n\n        objectID: ``\n    };\n\n    get = <Schema>({ endpointUrl, objectName, data }: IRequestParams<Schema>) => {\n        return fetch(\n            this.getRelativeUrl({\n                endpointUrl,\n                objectName,\n                data\n            }),\n            {\n                method: \"GET\",\n                ...this.setApiAuthHeaders()\n            }\n        ).then(res => res.json());\n    };\n\n    post = <Schema>({ data, objectName, endpointUrl }: IRequestParams<Schema>) => {\n        console.log(`restapi:post fired`);\n        return fetch(\n            this.getRelativeUrl({\n                endpointUrl,\n                objectName,\n                data\n            }),\n            {\n                method: \"POST\",\n                ...this.setApiAuthHeaders(),\n                body: JSON.stringify(data)\n            }\n        ).then(res => res.json());\n        // let caller handle error in their own .catch()\n    };\n\n    patch = <Schema>({ data, objectName, endpointUrl }: IRequestParams<Schema>) => {\n        return fetch(\n            this.getRelativeUrl({\n                endpointUrl,\n                objectName,\n                data\n            }),\n            {\n                method: \"PATCH\",\n                ...this.setApiAuthHeaders(),\n                body: JSON.stringify(data)\n            }\n        );\n    };\n\n    delete = <Schema>({ data, objectName, endpointUrl }: IRequestParams<Schema>) => {\n        return fetch(\n            this.getRelativeUrl({\n                endpointUrl,\n                objectName,\n                data\n            }),\n            {\n                method: \"DELETE\",\n                ...this.setApiAuthHeaders(),\n                body: JSON.stringify(data)\n            }\n        );\n    };\n\n    /** helper */\n    private getRelativeUrl = <Schema>({\n        objectName,\n        data,\n        endpointUrl\n    }: IRequestParams<Schema>) => {\n        let url = \"\";\n        if (endpointUrl) {\n            url = `${this.state.apiBaseUrl}${endpointUrl}`;\n        } else {\n            if (data && IsSingleFormDataTypeGuard(data) && data.uuid) {\n                url = `${this.state.apiBaseUrl}${objectName}/${data.uuid}/`;\n            } else {\n                url = `${this.state.apiBaseUrl}${objectName}/`;\n            }\n        }\n        console.log(`restapi: url: ${url}, objname=${objectName}`);\n        return url;\n    };\n\n    private setApiAuthHeaders = (): RequestInit => {\n\n        this.state.apiLoginToken = (\n            AuthenticationService.state.apiLoginToken\n        ) ? AuthenticationService.state.apiLoginToken : this.state.apiLoginToken;\n\n        console.log(\"api: set header: got credentials?\", this.state.apiLoginToken);\n        return {\n            mode: \"cors\",\n            credentials: this.state.apiLoginToken ? \"include\" : \"omit\",\n            headers: {\n                Authorization: this.state.apiLoginToken\n                    ? `JWT ${this.state.apiLoginToken}`\n                    : ``,\n                \"Content-Type\": \"application/json\"\n            }\n        };\n    };\n}\n\n/** create restapi singleton */\nexport const RestApiService = new RestApi();\n","export type IRelationship = string;\n\nexport interface IBaseModelProps {\n    uuid?: IRelationship\n    created_at?: string\n    modified_at?: string\n}\n\nexport class BaseModel {\n    uuid: string\n    created_at: string\n    modified_at: string\n    \n    constructor({\n        uuid = \"\",\n        created_at = \"\",\n        modified_at = \"\",\n    }: IBaseModelProps) {\n        this.uuid = uuid;\n        this.created_at = created_at;\n        this.modified_at = modified_at;\n    }\n}","import { RestApiService } from \"./rest-api\";\nimport { BaseModel, IBaseModelProps } from \"../store/data-model/base-model\";\n\nexport interface IAuthObjectProps {\n    code?: string\n    provider?: string\n    redirect_uri?: string\n}\n\nexport class AuthObject extends BaseModel {\n    code: string\n    provider: string\n    redirect_uri: string\n\n    constructor({\n        code = \"\",\n        provider = \"\",\n        redirect_uri = \"\",\n        ...args\n    }: IAuthObjectProps & IBaseModelProps) {\n        super(args);\n        this.code = code;\n        this.provider = provider;\n        this.redirect_uri = redirect_uri;\n    }\n}\n\nclass Authentication {\n    state = {\n        clientID: `732988498848-vuhd6g61bnlqe372i3l5pbpnerteu6na.apps.googleusercontent.com`,\n\n        redirectUri: `postmessage`,\n        apiLoginUrl: `login/social/`,\n        socialAuthProvider: `google-oauth2`,\n\n        userEmail: ``,\n        apiLoginToken: ``,\n        userFirstName: ``,\n        userLastName: ``,\n\n        objectID: ``\n    };\n\n    serverLogin = (socialLoginCode: string) => {\n        let authFormData = new AuthObject({\n            code: socialLoginCode,\n            provider: this.state.socialAuthProvider,\n            redirect_uri: this.state.redirectUri\n        })\n        return RestApiService\n            .post<AuthObject>({\n                data: authFormData,\n                endpointUrl: this.state.apiLoginUrl\n            })\n\n            // .then(jsonData => {\n            //     console.log(\"API login res:\", JSON.stringify(jsonData));\n            //     if (jsonData.email) {\n            //         console.log(\"API login success.\");\n            //         this.state.userEmail = jsonData.email;\n            //         this.state.userFirstName = jsonData.userFirstName;\n            //         this.state.userLastName = jsonData.userLastName;\n            //         this.state.apiLoginToken = restApi.state.apiLoginToken = jsonData.apiLoginToken;\n\n            //         return jsonData;\n            //     } else {\n            //         console.warn(\"API server login failure.\");\n            //         return Error(\"API server login failure.\")\n            //     }\n            // })\n\n            // .catch(error => {\n            //     console.error(\"API login error:\", error);\n            //     return Error(`API login error: ${error}`);\n            // });\n    }\n\n    serverLogout = async () => {\n        console.log(\"server logout...\");\n        // no server-side invalidate implement at this point (a common case for JWT, however)\n        this.state.userEmail = \"\";\n        this.state.userFirstName = \"\"\n        this.state.userLastName = \"\"\n        this.state.apiLoginToken = RestApiService.state.apiLoginToken = \"\";\n        return;\n    }\n}\n\nexport const AuthenticationService = new Authentication();","import { ActionCreator } from \"redux\";\n\nimport {\n    /** state types */\n    IUpdateAuthState,\n    IRequestedLoginAuthState,\n    /** action types */\n    IUpdateAuthAction,\n    IRequestedLoginAuthAction,\n    IRequestedLogoutAuthAction,\n    ISuccessAuthAction,\n    IFailureAuthAction,\n    /** action names */\n    AuthActionNames\n} from \"./types\";\n\nimport { RequestStatus } from \"../../utils/rest-api\";\n\nexport const UpdateAuth = (newAuthState: IUpdateAuthState): IUpdateAuthAction => {\n    return {\n        type: AuthActionNames.UPDATE_AUTH,\n        payload: newAuthState\n    };\n};\n\nexport const RequestedLoginAuth = (socialAuthToken: string): IRequestedLoginAuthAction => {\n    return {\n        type: AuthActionNames.REQUESTED_LOGIN_AUTH,\n        payload: {\n            requestStatus: RequestStatus.REQUESTING,\n            socialAuthToken\n        }\n    };\n};\n\nexport const RequestedLogoutAuth = (): IRequestedLogoutAuthAction => {\n    return {\n        type: AuthActionNames.REQUESTED_LOGOUT_AUTH,\n        payload: {\n            requestStatus: RequestStatus.REQUESTING,\n        }\n    };\n};\n\nexport const SuccessLoginAuth = (userName: string, expireDateTime: string, apiToken: string): ISuccessAuthAction => {\n    console.log(\"action username:\", userName);\n    return {\n        type: AuthActionNames.SUCCESS_AUTH,\n        payload: {\n            requestStatus: RequestStatus.SUCCESS,\n            isLogin: true,\n            userName,\n            expireDateTime,\n            apiToken\n        }\n    };\n};\n\nexport const SuccessLogoutAuth = (): ISuccessAuthAction => {\n    return {\n        type: AuthActionNames.SUCCESS_AUTH,\n        payload: {\n            requestStatus: RequestStatus.SUCCESS,\n            isLogin: false,\n            userName: \"\",\n            expireDateTime: \"\",\n            apiToken: \"\",\n        }\n    };\n};\n\nexport const FailureAuth = (error: any): IFailureAuthAction => {\n    return {\n        type: AuthActionNames.FAILURE_AUTH,\n        payload: {\n            requestStatus: RequestStatus.FAILURE,\n            error\n        }\n    };\n};\n\n// write new actions here for this reducer - auth reducer\n// ...\n","import { Action, Reducer } from \"redux\";\nimport { takeEvery, call, put } from \"redux-saga/effects\";\nimport { SagaIterator } from \"redux-saga\";\nimport {\n    RequestStatus,\n    CrudType,\n    CrudMapToRest,\n    RestApiService,\n    IRequestParams,\n    ISingleRestApiResponse,\n    IListRestApiResponse,\n    IsSingleRestApiResponseTypeGuard\n} from \"../utils/rest-api\";\nimport omit from \"lodash/omit\";\n\n/** state & store */\n\nexport interface IObjectBase {\n    uuid: string;\n}\n\nexport type TObject<Schema> = IObjectBase & { [Property in keyof Schema]: Schema[Property] };\n\ninterface IObjectList<Schema> {\n    [uuid: string]: TObject<Schema>;\n}\n\nexport interface IObjectStore<Schema> {\n    lastChangedObjectID?: string;\n    requestStatus: RequestStatus;\n    error?: any;\n    collection: IObjectList<Schema>;\n}\n\n/** action */\n\ntype IObjectRestApiReduxFactoryActions = {\n    [restfulKeyword: string]: {\n        [asyncKeyword: string]: {\n            actionTypeName: string;\n            action: Function;\n            saga?: () => SagaIterator;\n        };\n    };\n};\n\nexport interface IObjectAction<Schema> extends Action {\n    type: string;\n    crudType: CrudType;\n\n    // for deleteAction or other actions to obtain the original instance obj passed into trigger action\n    triggerFormData?: TObject<Schema> | Array<TObject<Schema>>;\n\n    // for saga to perform additional side effect e.g. navigation\n    callback?: Function;\n    \n    payload: {\n        formData?: TObject<Schema> | Array<TObject<Schema>>;\n        lastChangedObjectID?: string;\n        requestStatus: RequestStatus;\n        error?: any;\n    };\n}\n\n/** factory API */\n\ninterface IRestApiReduxFactory<Schema> {\n    actions: IObjectRestApiReduxFactoryActions;\n    storeReducer: Reducer<IObjectStore<Schema>>\n    sagas: Array<() => SagaIterator>;\n}\n\nexport const RestApiReduxFactory = <Schema extends IObjectBase>(\n    /** should have uuid */ objectName: string,\n    initialObjectInstance: TObject<Schema>\n): IRestApiReduxFactory<Schema> => {\n    type TObjectSchema = typeof initialObjectInstance;\n    const crudKeywords = Object.values(CrudType);\n\n    let ObjectRestApiRedux: IObjectRestApiReduxFactoryActions = {};\n    for (let crudKeyword of crudKeywords) {\n        ObjectRestApiRedux[crudKeyword] = {};\n        /** store */\n        // TODO?: action state\n\n        /** action */\n        // action type names\n        for (let requestStatus of Object.values(RequestStatus)) {\n            ObjectRestApiRedux[crudKeyword][requestStatus] = {\n                actionTypeName: \"\",\n                action: () => {}\n            };\n            ObjectRestApiRedux[crudKeyword][\n                requestStatus\n            ].actionTypeName = `${requestStatus.toUpperCase()}_${crudKeyword.toUpperCase()}_${objectName.toUpperCase()}`;\n        }\n\n        // async actions ( & state...)\n        ObjectRestApiRedux[crudKeyword][RequestStatus.TRIGGERED].action = (\n            objectClassInstance: TObjectSchema,\n            callback?: Function\n        ): IObjectAction<TObjectSchema> => {\n            console.log(`action:fired, trigger, ${crudKeyword}`);\n            return {\n                type:\n                    ObjectRestApiRedux[crudKeyword][RequestStatus.TRIGGERED]\n                        .actionTypeName,\n                crudType: crudKeyword,\n                callback: callback,\n                payload: {\n                    requestStatus: RequestStatus.TRIGGERED,\n                    formData: objectClassInstance\n                }\n            };\n        };\n        ObjectRestApiRedux[crudKeyword][\n            RequestStatus.REQUESTING\n        ].action = (): IObjectAction<TObjectSchema> => {\n            return {\n                type:\n                    ObjectRestApiRedux[crudKeyword][RequestStatus.REQUESTING]\n                        .actionTypeName,\n                crudType: crudKeyword,\n                payload: {\n                    requestStatus: RequestStatus.REQUESTING\n                }\n            };\n        };\n        ObjectRestApiRedux[crudKeyword][RequestStatus.SUCCESS].action = (\n            /** api response */\n            jsonResponse:\n            | IListRestApiResponse<TObjectSchema>\n            | ISingleRestApiResponse<TObjectSchema>,\n            triggerFormData?: TObject<Schema> | Array<TObject<Schema>>\n        ): IObjectAction<TObjectSchema> => {\n            let newState = {\n                type:\n                    ObjectRestApiRedux[crudKeyword][RequestStatus.SUCCESS]\n                        .actionTypeName,\n                crudType: crudKeyword\n            };\n            // if is delete success, we don't need formData (& the server responds nothing for DELETE as well)\n            if (crudKeyword === CrudType.DELETE) {\n                return {\n                    ...newState,\n                    triggerFormData,\n                    payload: {\n                        requestStatus: RequestStatus.SUCCESS,\n                    }\n                }\n            }\n            else if (IsSingleRestApiResponseTypeGuard(jsonResponse)) {\n                return {\n                    ...newState,\n                    payload: {\n                        requestStatus: RequestStatus.SUCCESS,\n                        formData: <ISingleRestApiResponse<TObjectSchema>>(\n                            jsonResponse\n                        ),\n                        lastChangedObjectID: jsonResponse.uuid\n                    }\n                };\n            } else {\n                return {\n                    ...newState,\n                    payload: {\n                        requestStatus: RequestStatus.SUCCESS,\n                        formData: (<IListRestApiResponse<TObjectSchema>>(\n                            jsonResponse\n                        )).results\n                    }\n                };\n            }\n        };\n        ObjectRestApiRedux[crudKeyword][RequestStatus.FAILURE].action = (\n            error: any\n        ): IObjectAction<TObjectSchema> => {\n            return {\n                type:\n                    ObjectRestApiRedux[crudKeyword][RequestStatus.FAILURE]\n                        .actionTypeName,\n                crudType: crudKeyword,\n                payload: {\n                    requestStatus: RequestStatus.FAILURE,\n                    error\n                }\n            };\n        };\n\n        /** saga */\n        const sagaHandler = function*(\n            triggerAction: IObjectAction<TObjectSchema>\n        ) {\n            console.log(`Saga: action intercepted; aync=trigger, crud=${crudKeyword}, obj=${objectName}; ready to call api`);\n            const formData = triggerAction.payload.formData;\n            yield put(\n                ObjectRestApiRedux[crudKeyword][\n                    RequestStatus.REQUESTING\n                ].action()\n            );\n            try {\n                // api call\n                const jsonResponse:\n                    | IListRestApiResponse<TObjectSchema>\n                    | ISingleRestApiResponse<TObjectSchema> = yield call(\n                    (<(params: IRequestParams<TObjectSchema>) => void>RestApiService[CrudMapToRest(crudKeyword)]),\n                    {\n                        data: formData,\n                        objectName\n                    }\n                );\n\n                console.log(\"Saga: res from server\", jsonResponse);\n\n                // success state\n                if (crudKeyword === CrudType.DELETE) {\n                    yield put(\n                        ObjectRestApiRedux[CrudType.DELETE][\n                            RequestStatus.SUCCESS\n                        ].action(jsonResponse, formData)\n                    );\n                } else {\n                    yield put(\n                        ObjectRestApiRedux[crudKeyword][\n                            RequestStatus.SUCCESS\n                        ].action(jsonResponse)\n                    );\n                }\n\n                if (triggerAction.callback) {\n                    triggerAction.callback();\n                }\n            } catch (error) {\n                // error state\n                yield put(\n                    ObjectRestApiRedux[crudKeyword][\n                        RequestStatus.FAILURE\n                    ].action(error)\n                );\n                return;\n            }\n        };\n\n        ObjectRestApiRedux[crudKeyword][\n            RequestStatus.TRIGGERED\n        ].saga = function*() {\n            console.log(`Saga: action intercepted; async=trigger, crud=${crudKeyword}, obj=${objectName}`);\n            yield takeEvery(\n                ObjectRestApiRedux[crudKeyword][RequestStatus.TRIGGERED]\n                    .actionTypeName,\n                sagaHandler\n            );\n        };\n    }\n\n    const initialState: IObjectStore<TObjectSchema> = {\n        collection: {},\n        requestStatus: RequestStatus.SUCCESS\n    };\n\n    const storeReducer: Reducer<IObjectStore<Schema>> = (\n        objectStore: IObjectStore<TObjectSchema> = initialState,\n        action: Action\n    ): IObjectStore<TObjectSchema> => {\n        \n        const objectAction = action as IObjectAction<TObjectSchema>;\n\n        if (\n            !(objectAction && objectAction.payload && objectAction.payload.requestStatus) ||\n            !(action.type.split(\"_\")[2] === objectName.toUpperCase())\n        ) {\n            return {\n                ...objectStore\n            };\n        }\n\n        // async success\n        if (objectAction.payload.requestStatus === RequestStatus.SUCCESS) {\n            // CREATE\n            if (objectAction.crudType === CrudType.CREATE) {\n                let newObject = <TObject<TObjectSchema>>objectAction.payload.formData;\n                return {\n                    collection: {\n                        ...objectStore.collection,\n                        [newObject.uuid]: newObject\n                    },\n                    requestStatus: objectAction.payload.requestStatus,\n                    lastChangedObjectID: objectAction.payload.lastChangedObjectID\n                };\n            }\n\n            // LIST\n            else if (objectAction.crudType === CrudType.LIST) {\n                const resObjectList = <Array<TObject<TObjectSchema>>>(\n                    objectAction.payload.formData\n                );\n                let newObjects: IObjectList<TObjectSchema> = {};\n                for (let object of resObjectList) {\n                    newObjects[object.uuid] = object;\n                }\n                console.log(\"Reducer: crud=list, action=\", objectAction)\n                console.log(\"initialState=\", initialState)\n                console.log(\"beforestore=\", objectStore)\n                console.log(\"newlistobjects=\", newObjects)\n\n                const afterStore: IObjectStore<TObjectSchema> = {\n                    collection: {\n                        ...objectStore.collection,\n                        ...newObjects\n                    },\n                    requestStatus: objectAction.payload.requestStatus\n                };\n                console.log(\"afterstore=\", afterStore)\n\n                return afterStore;\n            }\n\n            // UPDATE\n            else if (objectAction.crudType === CrudType.UPDATE) {\n                let newObject = <TObject<TObjectSchema>>objectAction.payload.formData;\n                return {\n                    collection: {\n                        ...objectStore.collection,\n                        [newObject.uuid]: newObject\n                    },\n                    requestStatus: objectAction.payload.requestStatus,\n                    lastChangedObjectID: objectAction.payload.lastChangedObjectID\n                };\n            }\n\n            // DELETE\n            else if (objectAction.crudType === CrudType.DELETE) {\n                let targetDeleteObject = <TObject<TObjectSchema>>objectAction.triggerFormData;\n                console.log(\"Reducer: delete, targetobj=\", targetDeleteObject)\n\n                console.log(\"Reducer: delete, beforestore=\", objectStore)\n                \n                const afterStore = {\n                    collection: omit(objectStore.collection, [targetDeleteObject.uuid]),\n                    requestStatus: objectAction.payload.requestStatus\n                }\n                console.log(\"Reducer: delete, afterstore\", afterStore)\n\n                return afterStore;\n            }\n        }\n\n        // async trigger\n        else if (objectAction.payload.requestStatus === RequestStatus.TRIGGERED) {\n            return {\n                ...objectStore,\n                requestStatus: objectAction.payload.requestStatus\n            };\n        }\n\n        // async requesting & failure\n        else {\n            return {\n                ...objectStore,\n                ...objectAction.payload\n            };\n        }\n\n        // no effect\n        return {\n            ...objectStore\n        };\n    };\n\n    const sagas = crudKeywords.map((crudKeyword) => \n        (<() => SagaIterator>ObjectRestApiRedux[crudKeyword][RequestStatus.TRIGGERED].saga)\n    );\n\n    return {\n        actions: ObjectRestApiRedux,\n        storeReducer,\n        sagas\n    };\n};\n","import { RestApiReduxFactory } from \"../rest-api-redux-factory\";\nimport { BaseModel, IBaseModelProps } from \"./base-model\";\n\nexport interface IAddressProps {\n    place_name?: string;\n    country?: string;\n    state?: string;\n    city?: string;\n    street?: string;\n    full_address?: string;\n    zipcode?: string;\n}\n\nexport class Address extends BaseModel {\n    place_name: string;\n    country: string;\n    state: string;\n    city: string;\n    street: string;\n    full_address: string;\n    zipcode: string;\n\n    constructor({\n        place_name = \"\",\n        country = \"\",\n        state = \"\",\n        city = \"\",\n        street = \"\",\n        full_address = \"\",\n        zipcode = \"\",\n        ...args\n    }: IAddressProps & IBaseModelProps) {\n        super(args);\n        this.place_name = place_name;\n        this.country = country;\n        this.state = state;\n        this.place_name = place_name;\n        this.city = city;\n        this.street = street;\n        this.full_address = full_address;\n        this.zipcode = zipcode;\n    }\n}\n\nconst initialAddressInstance = new Address({});\nconst AddressRestApiRedux = RestApiReduxFactory<Address>(\n    \"addresses\",\n    initialAddressInstance\n);\nexport const AddressActions = AddressRestApiRedux.actions;\nexport const AddressReducer = AddressRestApiRedux.storeReducer;\nexport const AddressSagas = AddressRestApiRedux.sagas;\n","import { BaseModel, IBaseModelProps } from \"./base-model\";\n\ninterface ILinkProps {\n    text?: string;\n    user?: any;\n    url?: string;\n    order?: number;\n}\n\nexport class Link extends BaseModel {\n    public text: string;\n    public user: any;\n    public url: string;\n    public order: number;\n\n    constructor({\n        text = \"\",\n        user = {},\n        url = \"\",\n        order = 0,\n        ...args\n    }: ILinkProps & IBaseModelProps) {\n        super(args);\n        this.text = text;\n        this.user = user;\n        this.url = url;\n        this.order = order;\n    }\n}\n","import { RestApiReduxFactory } from \"../rest-api-redux-factory\";\nimport { BaseModel, IBaseModelProps } from \"./base-model\";\nimport { Address } from \"./address\";\nimport { Link } from \"./link\";\n\ninterface ICompanyProps {\n    user?: string;\n    labels?: any;\n    name?: string;\n    hq_location?: Address;\n    home_page?: Link;\n    ratings?: any;\n    applications?: any;\n}\n\nexport class Company extends BaseModel {\n    public user: string;\n    public labels: any;\n    public name: string;\n    public hq_location: Address;\n    public home_page: Link;\n    public ratings: any;\n    public applications: any;\n\n    constructor({\n        user = \"\",\n        labels = [],\n        name = \"\",\n        hq_location = new Address({}),\n        home_page = new Link({}),\n        ratings = {},\n        applications = {},\n        ...args\n    }: ICompanyProps & IBaseModelProps) {\n        super(args);\n        this.user = user;\n        this.labels = labels;\n        this.name = name;\n        this.hq_location = hq_location;\n        this.home_page = home_page;\n        this.ratings = ratings;\n        this.applications = applications;\n    }\n}\n\nconst initialCompanyInstance = new Company({});\nconst CompanyRestApiRedux = RestApiReduxFactory<Company>(\n    \"companies\",\n    initialCompanyInstance\n);\nexport const CompanyActions = CompanyRestApiRedux.actions;\nexport const CompanyReducer = CompanyRestApiRedux.storeReducer;\nexport const CompanySagas = CompanyRestApiRedux.sagas;\n","import { RestApiReduxFactory } from \"../rest-api-redux-factory\";\nimport { BaseModel, IBaseModelProps, IRelationship } from \"./base-model\";\nimport { Link } from \"./link\";\n\ninterface IApplicationProps {\n    user?: IRelationship;\n    user_company?: IRelationship;\n    position_title?: string;\n    job_description_page?: Link;\n    job_source?: Link;\n    labels?: any;\n}\n\nexport class Application extends BaseModel {\n    public user: string;\n    public user_company: IRelationship;\n    public position_title: string;\n    public job_description_page: Link;\n    public job_source: Link;\n    public labels: any;\n\n    constructor({\n        user = \"\",\n        user_company = \"\",\n        position_title = \"\",\n        job_description_page = new Link({}),\n        job_source = new Link({}),\n        labels = {},\n        ...args\n    }: IApplicationProps & IBaseModelProps) {\n        super(args);\n        this.user = user;\n        this.user_company = user_company;\n        this.position_title = position_title;\n        this.job_description_page = job_description_page;\n        this.job_source = job_source;\n        this.labels = labels;\n    }\n}\n\nconst initialApplicationInstance = new Application({});\nconst ApplicationRestApiRedux = RestApiReduxFactory<Application>(\n    \"applications\",\n    initialApplicationInstance\n);\nexport const ApplicationActions = ApplicationRestApiRedux.actions;\nexport const ApplicationReducer = ApplicationRestApiRedux.storeReducer;\nexport const ApplicationSagas = ApplicationRestApiRedux.sagas;\n","import React, { Component } from \"react\";\n\n/** Components */\nimport { GoogleLogin } from \"react-google-login\";\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n\ninterface ISocialAuthLoginButtonProps {\n    clientID: string;\n    redirectUri?: string;\n    onSuccess(authResponse?: any): void;\n    onFailure?(error: any): void;\n}\n\nexport class SocialAuthLoginButton extends Component<\n    ISocialAuthLoginButtonProps\n> {\n    onLoginButtonClicked = (clickEvent: any, renderProps: any) => {\n        console.log(\"login button clicked\", clickEvent, renderProps);\n        renderProps.onClick(clickEvent);\n    };\n\n    onAuthSuccess = (authResponse?: any) => {\n        console.log(\"login button auth success\");\n        this.props.onSuccess(authResponse);\n    };\n\n    onAuthFailure = (error: any) => {\n        console.log(\"login button auth failed\");\n        if (this.props.onFailure) {\n            this.props.onFailure(error);\n        }\n    };\n\n    render() {\n        return (\n            <div className=\"UserAuthButton\">\n                <GoogleLogin\n                    render={(renderProps: any) => (\n                        <Button\n                            onClick={clickEvent =>\n                                this.onLoginButtonClicked(\n                                    clickEvent,\n                                    renderProps\n                                )\n                            }\n                            unelevated\n                            icon={\n                                <MaterialIcon hasRipple icon=\"account_circle\" />\n                            }\n                        >\n                            Google Login\n                        </Button>\n                    )}\n                    onSuccess={this.onAuthSuccess}\n                    onFailure={this.onAuthFailure}\n                    clientId={this.props.clientID}\n                    responseType=\"code\"\n                    redirectUri={this.props.redirectUri || \"postmessage\"}\n                />\n            </div>\n        );\n    }\n}\n","import React, { Component } from \"react\";\n\n/** Components */\nimport { GoogleLogout } from \"react-google-login\";\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n\ninterface ISocialAuthLogoutButtonProps {\n    onSuccess(authResponse?: any): void;\n}\n\nexport class SocialAuthLogoutButton extends Component<\n    ISocialAuthLogoutButtonProps\n> {\n    onAuthSuccess = (authResponse?: any) => {\n        this.props.onSuccess(authResponse);\n    };\n\n    render() {\n        return (\n            <div className=\"UserAuthButton\">\n                <GoogleLogout\n                    render={(renderProps: any) => (\n                        <Button\n                            onClick={renderProps.onClick}\n                            unelevated\n                            icon={<MaterialIcon hasRipple icon=\"eject\" />}\n                        >\n                            Logout\n                        </Button>\n                    )}\n                    onLogoutSuccess={this.onAuthSuccess}\n                />\n            </div>\n        );\n    }\n}\n","import React, { Component } from \"react\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\n\n/** Redux */\nimport { Dispatch } from \"redux\";\nimport { connect } from \"react-redux\";\nimport { IRootState } from \"../../store/types\";\nimport { IUpdateAuthAction, IRequestedLoginAuthAction, TAuthActions, IUpdateAuthState } from \"../../store/auth/types\";\nimport { UpdateAuth, RequestedLoginAuth, RequestedLogoutAuth } from \"../../store/auth/actions\";\n\n/** Components */\nimport { SocialAuthLoginButton } from \"./social-auth-login-button\";\nimport { SocialAuthLogoutButton } from \"./social-auth-logout-button\";\n\ninterface ISocialAuthButtonProps extends RouteComponentProps {\n    auth: IUpdateAuthState;\n    requestedLoginAuth: (socialAuthToken: string) => void;\n    requestedLogoutAuth: () => void;\n}\n\nclass SocialAuthButton extends Component<\n    ISocialAuthButtonProps\n> {\n    state = {\n        clientID: `732988498848-vuhd6g61bnlqe372i3l5pbpnerteu6na.apps.googleusercontent.com`,\n        code: ``,\n        redirectUri: `postmessage`,\n        apiBaseUrl: `http://localhost:8000/`,\n        apiLoginUrl: `login/social/`,\n        socialAuthProvider: `google-oauth2`,\n\n        userEmail: ``,\n        apiLoginToken: ``,\n        userFirstName: ``,\n        userLastName: ``,\n\n        objectID: ``\n    };\n\n    onSocialLoginSuccess = (googleOauthResponse: any) => {\n        console.log(\"Google Oauth2 res:\", googleOauthResponse);\n        this.setState(\n            {\n                code: googleOauthResponse.code\n            },\n            () => {\n                // this.apiLogin();\n                console.log(\"social button: request auth...\");\n                this.props.requestedLoginAuth(this.state.code);\n            }\n        );\n    };\n\n    onSocialLoginFailure = (error: any) => {\n        console.error(\"Social login failed:\", error);\n    };\n\n    onSocialLogoutSuccess = () => {\n        console.log(\"Social logout success, now our web app logout\");\n        this.props.requestedLogoutAuth();\n    };\n\n    render() {\n        return (\n            <div className=\"SocialAuth\">\n                auth requestStatus: {this.props.auth.requestStatus} <br></br>\n                {!this.props.auth.isLogin ? (\n                    <SocialAuthLoginButton\n                        clientID={this.state.clientID}\n                        onSuccess={this.onSocialLoginSuccess}\n                        onFailure={this.onSocialLoginFailure}\n                    />\n                ) : (\n                    <SocialAuthLogoutButton\n                        onSuccess={this.onSocialLogoutSuccess}\n                    />\n                )}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => {\n    return {\n        auth: store.auth\n    };\n};\n\nfunction mapDispatchToProps(dispatch: Dispatch<TAuthActions>) {\n    return {\n        requestedLoginAuth: (socialAuthToken: string) => {\n            dispatch(\n                RequestedLoginAuth(socialAuthToken)\n            );\n        },\n        requestedLogoutAuth: () => {\n            dispatch(\n                RequestedLogoutAuth()\n            );\n        }\n    };\n}\n\nexport const SocialAuthButtonContainer = withRouter(connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(SocialAuthButton));\n","import React, { Component } from \"react\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\n\n/** Components */\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n// mdc-react input\nimport \"@material/react-text-field/dist/text-field.css\";\nimport TextField, { HelperText, Input } from \"@material/react-text-field\";\n// formik\nimport {\n    Formik,\n    Form,\n    Field,\n    ErrorMessage,\n    FormikValues,\n    FormikTouched,\n    FormikErrors,\n} from \"formik\";\n\nexport enum InputFieldType {\n    // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input\n    TEXT = \"text\",\n    PASSWORD = \"password\",\n    EMAIL = \"email\",\n    URL = \"url\",\n    DATE = \"date\"\n}\n\nexport class FormInputFieldProps {\n    constructor(\n        public fieldName: string = \"\",\n        public label: string = \"\",\n        public type?: InputFieldType,\n        public onTrailingIconSelect?: () => void\n    ) {}\n}\n\ninterface IFormInputFieldFactoryProps extends FormInputFieldProps {\n    /* formik */\n    onChange: (event: any) => void\n    onBlur: (event: any) => void\n    values: FormikValues\n    errors: FormikErrors<FormikValues>\n    touched: FormikTouched<FormikValues>\n}\n\nexport class FormInputFieldFactory extends Component<IFormInputFieldFactoryProps> {\n    render() {\n        return (\n            <div className=\"FormFieldFactory\">\n                <TextField\n                    label={this.props.label}\n                    onTrailingIconSelect={this.props.onTrailingIconSelect}\n                    // trailingIcon={<MaterialIcon role=\"button\" icon=\"clear\" />}\n                >\n                    <Input\n                        type={this.props.type || InputFieldType.TEXT}\n                        name={this.props.fieldName}\n                        inputType=\"input\"\n                        onChange={this.props.onChange}\n                        onBlur={this.props.onBlur}\n                        value={this.props.values[this.props.fieldName]}\n                    />\n                </TextField>\n                <ErrorMessage name={this.props.fieldName} />\n            </div>\n        );\n    }\n}","import React, { Component } from \"react\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\n\n/** Components */\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n// mdc-react input\nimport \"@material/react-text-field/dist/text-field.css\";\nimport TextField, { HelperText, Input } from \"@material/react-text-field\";\n// formik\nimport {\n    Formik,\n    Form,\n    Field,\n    ErrorMessage,\n    FormikValues,\n    FormikErrors,\n    FormikTouched\n} from \"formik\";\nimport { FormInputFieldFactory, FormInputFieldProps } from \"./form-field-factory\";\n\nexport enum ActionButtonType {\n    SUBMIT = \"submit\",\n    BUTTON = \"button\"\n}\n\nexport class FormActionButtonProps {\n    constructor(\n        public text: string = \"\", \n        public onClick?: (event: any) => void, \n        public type?: ActionButtonType\n    ) {}\n}\n\nexport interface IFormFactoryProps<DataModel> {\n    initialValues: DataModel;\n\n    validate: (values: FormikValues) => FormikErrors<FormikValues>;\n    onSubmit: (\n        values: FormikValues,\n        { setSubmitting }: { setSubmitting: Function }\n    ) => void;\n\n    actionButtonPropsList: Array<FormActionButtonProps>;\n    formInputFieldPropsList: Array<FormInputFieldProps>\n}\n\nexport class FormFactory<DataModel> extends Component<\n    IFormFactoryProps<DataModel>\n> {\n    render() {\n        return (\n            <div className=\"FormFactory\">\n                <Formik\n                    initialValues={this.props.initialValues}\n                    validate={this.props.validate}\n                    onSubmit={this.props.onSubmit}\n                >\n                    {({\n                        values,\n                        errors,\n                        touched,\n                        handleChange,\n                        handleBlur,\n                        handleSubmit,\n                        isSubmitting\n                    }: {\n                        values: FormikValues,\n                        touched: FormikTouched<FormikValues>,\n                        [props: string]: any\n                    }) => (\n                        <Form>\n                            {this.props.formInputFieldPropsList.map((formInputFieldProps: FormInputFieldProps, index) => (\n                                <FormInputFieldFactory \n                                    key={index}\n                                    {...formInputFieldProps} \n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    values={values}\n                                    errors={errors}\n                                    touched={touched}\n                                />\n                            ))}\n                            {this.props.actionButtonPropsList.map(\n                                (actionButtonProps: FormActionButtonProps, index) => (\n                                    <Button\n                                        key={index}\n                                        type={actionButtonProps.type || ActionButtonType.BUTTON}\n                                        disabled={isSubmitting}\n                                        unelevated\n                                        onClick={actionButtonProps.onClick}\n                                        children={actionButtonProps.text}\n                                    />\n                                )\n                            )}\n                        </Form>\n                    )}\n                </Formik>\n            </div>\n        );\n    }\n}\n","import React, { Component } from \"react\";\nimport { withRouter, RouteComponentProps, Redirect } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch, AnyAction } from \"redux\";\nimport { IRootState } from \"../../store/types\";\nimport { IUpdateAuthState } from \"../../store/auth/types\";\nimport { SuccessLoginAuth } from \"../../store/auth/actions\";\nimport { CompanyActions, Company } from \"../../store/data-model/company\";\nimport {\n    ApplicationActions,\n    Application\n} from \"../../store/data-model/application\";\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\n\n/** Components */\nimport { SocialAuthButtonContainer } from \"../../components/social-auth/social-auth-button\";\n// form\nimport {\n    FormFactory,\n    FormActionButtonProps,\n    IFormFactoryProps,\n    ActionButtonType\n} from \"../../components/form-factory/form-factory\";\nimport {\n    FormInputFieldFactory,\n    FormInputFieldProps,\n    InputFieldType\n} from \"../../components/form-factory/form-field-factory\";\nimport { ErrorMessage, FormikValues, FormikErrors } from \"formik\";\nimport { AuthenticationService } from \"../../utils/auth\";\nimport { RestApiService } from \"../../utils/rest-api\";\n\n\nlet styles = {\n    backgroundColor: \"purple\",\n    color: \"white\"\n};\n\ninterface ILandingPageProps extends RouteComponentProps {\n    auth: IUpdateAuthState;\n    loginSuccess: (userName: string, apiToken: string) => void;\n    listApplication: () => void\n    listCompany: () => void\n}\n\nclass LandingPage extends Component<ILandingPageProps> {\n    formFactoryProps: any;\n\n    constructor(props: ILandingPageProps) {\n        super(props);\n        this.prepareLoginForm();\n    }\n\n    validateLoginForm = (values: FormikValues) => {\n        let errors: FormikErrors<any> = {};\n        return errors;\n    };\n\n    onSubmitLoginForm = (\n        values: FormikValues,\n        { setSubmitting }: { setSubmitting: Function }\n    ) => {\n        setSubmitting(false);\n        console.log(\"values=\", values);\n\n        // post to get login token\n\n        fetch(`http://localhost:8000/api-token-auth/`, {\n            method: \"POST\",\n            mode: \"cors\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(values)\n        })\n            .then(res => res.json())\n            .then(res => {\n                console.log(\"res=\", res);\n                // set login token\n                AuthenticationService.state.apiLoginToken = res.token;\n\n                // set redux auth store isLogin state --- have to write action and reducer.\n                this.props.loginSuccess(values.username, res.token);\n\n                // request com & app list (dispatch)\n                this.props.listApplication();\n                this.props.listCompany();\n            })\n            .catch(err => {\n                console.error(\"login error~~\", err);\n            });\n    };\n\n    prepareLoginForm = () => {\n        const initialValues = {\n            username: \"\",\n            password: \"\"\n        };\n\n        this.formFactoryProps = {\n            initialValues: initialValues,\n            validate: this.validateLoginForm,\n            onSubmit: this.onSubmitLoginForm,\n            formInputFieldPropsList: [\n                new FormInputFieldProps(\"username\", \"Username\"),\n                new FormInputFieldProps(\n                    \"password\",\n                    \"Password\",\n                    InputFieldType.PASSWORD\n                )\n            ],\n            actionButtonPropsList: [\n                new FormActionButtonProps(\"Login\", undefined, ActionButtonType.SUBMIT)\n            ]\n        };\n    };\n\n    render() {\n        return (\n            <div className=\"LandingPage\" style={styles}>\n                {/** redirect logged in user to private routes */\n                this.props.auth.isLogin && <Redirect to=\"/home/\" />}\n                <h1>LandingPage Works!</h1>\n                <SocialAuthButtonContainer />\n                <h2>Or login by username and password:</h2>\n                <FormFactory {...this.formFactoryProps} />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: IRootState) => ({\n    auth: state.auth\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>) => {\n    // actionName = (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {\n        loginSuccess: (userName: string, apiToken: string) =>\n            dispatch(SuccessLoginAuth(userName, \"\", apiToken)),\n        listApplication: () =>\n            dispatch(\n                ApplicationActions[CrudType.LIST][\n                    RequestStatus.TRIGGERED\n                ].action(new Application({}))\n            ),\n        listCompany: () =>\n            dispatch(\n                CompanyActions[CrudType.LIST][\n                    RequestStatus.TRIGGERED\n                ].action(new Company({}))\n            )\n    };\n};\n\nexport const LandingPageContainer = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(LandingPage)\n);\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\n\n/** Redux */\nimport { Company } from \"../../store/data-model/company\";\n\n/** Components */\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc-react icon button\nimport '@material/react-icon-button/dist/icon-button.css';\nimport IconButton from '@material/react-icon-button';\n\ninterface ICompanyComponentProps {\n    company: Company;\n    onDeleteIconClicked?: (event: any) => void\n}\n\nexport class CompanyComponent extends Component<ICompanyComponentProps> {\n    render() {\n        const company = this.props.company;\n        return (\n            <div className=\"CompanyComponent\">\n                <p>\n                    <Link to={`/com-app/${company.uuid}/`}>\n                        {company.name}\n                    </Link>\n                    <IconButton onClick={this.props.onDeleteIconClicked}>\n                        <MaterialIcon hasRipple icon=\"delete\"/>\n                    </IconButton>\n                    <br />\n                    <span>\n                        <strong>UUID:</strong> {company.uuid}\n                    </span>\n                    <br />\n                    <span>\n                        <strong>HQ:</strong> {company.hq_location.full_address}\n                    </span>\n                    <br />\n                    <a target=\"_blank\" href={company.home_page.url}>\n                        <strong>Homepage</strong>\n                    </a>\n                    <br />\n                </p>\n            </div>\n        );\n    }\n}\n","import { RestApiReduxFactory } from \"../rest-api-redux-factory\";\nimport { BaseModel, IBaseModelProps, IRelationship } from \"./base-model\";\nimport { Link } from \"./link\";\n\ninterface IApplicationStatusProps {\n    text?: string;\n    application?: IRelationship;\n    application_status_links?: Array<IRelationship>\n    date?: string;\n    order?: number\n}\n\nexport class ApplicationStatus extends BaseModel {\n    public text: string;\n    public application: IRelationship;\n    public application_status_links: Array<IRelationship>\n    public date: string;\n    public order: number;\n\n    constructor({\n        text = \"\",\n        application = \"\",\n        application_status_links = [],\n        date = \"\",\n        order = 0,\n        ...args\n    }: IApplicationStatusProps & IBaseModelProps) {\n        super(args);\n        this.text = text;\n        this.application = application;\n        this.application_status_links = application_status_links;\n        this.date = date;\n        this.order = order;\n    }\n}\n\nconst initialApplicationStatusInstance = new ApplicationStatus({});\nconst ApplicationStatusRestApiRedux = RestApiReduxFactory<ApplicationStatus>(\n    \"application-statuses\",\n    initialApplicationStatusInstance\n);\nexport const ApplicationStatusActions = ApplicationStatusRestApiRedux.actions;\nexport const ApplicationStatusReducer = ApplicationStatusRestApiRedux.storeReducer;\nexport const ApplicationStatusSagas = ApplicationStatusRestApiRedux.sagas;\n","import { RestApiReduxFactory } from \"../rest-api-redux-factory\";\nimport { BaseModel, IBaseModelProps, IRelationship } from \"./base-model\";\nimport { Link } from \"./link\";\n\ninterface IApplicationStatusLinkProps {\n    application_status?: IRelationship;\n    link?: Link;\n}\n\nexport class ApplicationStatusLink extends BaseModel {\n    public application_status: IRelationship;\n    public link: Link;\n\n    constructor({\n        application_status = \"\",\n        link = new Link({}),\n        ...args\n    }: IApplicationStatusLinkProps & IBaseModelProps) {\n        super(args);\n        this.application_status = application_status;\n        this.link = link;\n    }\n}\n\nconst initialApplicationStatusLinkInstance = new ApplicationStatusLink({});\nconst ApplicationStatusLinkRestApiRedux = RestApiReduxFactory<ApplicationStatusLink>(\n    \"application-status-links\",\n    initialApplicationStatusLinkInstance\n);\nexport const ApplicationStatusLinkActions = ApplicationStatusLinkRestApiRedux.actions;\nexport const ApplicationStatusLinkReducer = ApplicationStatusLinkRestApiRedux.storeReducer;\nexport const ApplicationStatusLinkSagas = ApplicationStatusLinkRestApiRedux.sagas;\n","import React, { Component } from \"react\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\nimport { IObjectStore, IObjectAction } from \"../../store/rest-api-redux-factory\";\n// data models\nimport {\n    ApplicationStatus,\n    ApplicationStatusActions\n} from \"../../store/data-model/application-status\";\nimport {\n    ApplicationStatusLink,\n    ApplicationStatusLinkActions\n} from \"../../store/data-model/application-status-link\";\nimport { Application } from \"../../store/data-model/application\";\nimport { Link } from \"../../store/data-model/link\";\n\n/** Rest API */\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\n\n/** Components */\nimport {\n    FormFactory,\n    FormActionButtonProps,\n    IFormFactoryProps,\n    ActionButtonType\n} from \"../form-factory/form-factory\";\nimport {\n    FormInputFieldFactory,\n    FormInputFieldProps,\n    InputFieldType\n} from \"../form-factory/form-field-factory\";\nimport { ErrorMessage, FormikValues, FormikErrors } from \"formik\";\n\ninterface IApplicationStatusFormComponentProps extends RouteComponentProps {\n    onCancel: (event: any) => void;\n\n    /** redux */\n    application: Application;\n    applicationStatusStore: IObjectStore<ApplicationStatus>\n    createApplicationStatus: (\n        applicationStatusFormData: ApplicationStatus,\n        callback?: Function\n    ) => void;\n    createApplicationStatusLink: (\n        applicationStatusLinkFormData: ApplicationStatusLink,\n        callback?: Function\n    ) => void;\n}\n\nclass ApplicationStatusFormComponent extends Component<\n    IApplicationStatusFormComponentProps\n> {\n    formFactoryProps: IFormFactoryProps<any>;\n\n    constructor(props: IApplicationStatusFormComponentProps) {\n        super(props);\n\n        const initialValues = {\n            application_status__text: \"\",\n            application_status__date: \"\",\n            application_status__link0__url: \"\",\n            application_status__link0__text: \"\",\n            application_status__link1__url: \"\",\n            application_status__link1__text: \"\",\n        }\n\n        this.formFactoryProps = {\n            initialValues: initialValues,\n            validate: this.validate,\n            onSubmit: this.onSubmit,\n            formInputFieldPropsList: [\n                new FormInputFieldProps(\"application_status__text\", \"Status*\"),\n                new FormInputFieldProps(\n                    \"application_status__date\",\n                    \"Date\",\n                    InputFieldType.DATE\n                ),\n                new FormInputFieldProps(\"application_status__link0__url\", \"Link 0 URL\"),\n                new FormInputFieldProps(\"application_status__link0__text\", \"Link 0 Text\"),\n                new FormInputFieldProps(\"application_status__link1__url\", \"Link 1 URL\"),\n                new FormInputFieldProps(\"application_status__link1__text\", \"Link 1 Text\"),\n            ],\n            actionButtonPropsList: [\n                new FormActionButtonProps(\n                    \"Add\",\n                    undefined,\n                    ActionButtonType.SUBMIT\n                ),\n                new FormActionButtonProps(\"Cancel\", this.props.onCancel)\n            ]\n        };\n    }\n\n    validate = (values: FormikValues) => {\n        let errors: FormikErrors<any> = {};\n        if (!values.application_status__text) {\n            errors.application_status__text = \"Required\";\n        }\n        if (!values.application_status__date) {\n            errors.application_status__date = \"Please give a valid date\";\n        }\n        return errors;\n    };\n\n    onSubmit = (\n        values: FormikValues,\n        { setSubmitting }: { setSubmitting: Function }\n    ) => {\n        setSubmitting(false);\n        console.log(\"values=\", values);\n\n        // prepare relational objects\n        const application__id = this.props.application.uuid;\n        if (!application__id) {\n            console.error(\n                \"Application object has no uuid so cannot submit form.\"\n            );\n            return;\n        }\n\n        // create main object for application status\n        const applicationStatus = new ApplicationStatus({\n            text: values.application_status__text,\n            application: application__id,\n            date: values.application_status__date\n        });\n\n        // dispatch for application status\n        this.props.createApplicationStatus(applicationStatus, () => {\n            // get application status uuid\n            const newApplicationStatusID = this.props.applicationStatusStore.lastChangedObjectID;\n            if (!newApplicationStatusID) {\n                console.error(\"AppStatusForm: application status store has no lastChangedObjectID, so we cannot create the associated AppStatusLinks.\")\n                return\n            }\n\n            const newApplicationStatus = this.props.applicationStatusStore.collection[\n                newApplicationStatusID\n            ];\n\n            if (!newApplicationStatus.uuid) {\n                console.error(\"AppStatusForm: newApplicationStatus has no uuid.\")\n                return \n            }\n\n            // create link(s)\n            let links = [];\n            const indexes = [0, 1];\n            for (let index of indexes) {\n                if (values[`application_status__link${index}__url`]) {\n                    links.push(new Link({\n                        url: values[`application_status__link${index}__url`],\n                        text: values[`application_status__link${index}__text`] || `Link of status`,\n                    }))\n                }\n            }\n\n            // create main object for applicationStatusLink(s)\n            const applicationStatusLinks = links.map(link => {\n                return new ApplicationStatusLink({\n                    link,\n                    application_status: newApplicationStatus.uuid,\n                });\n            });\n\n            // dispatch\n            applicationStatusLinks.map(statusLink => {\n                this.props.createApplicationStatusLink(statusLink);\n            });\n        });\n    };\n\n    render() {\n        return (\n            <div className=\"ApplicationStatusFormComponent\">\n                <FormFactory {...this.formFactoryProps} />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    // prop: store.prop\n    applicationStatusStore: store.applicationStatus\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<ApplicationStatus> | IObjectAction<ApplicationStatusLink>>) => {\n    // actionName: (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {\n        createApplicationStatus: (\n            applicationStatusFormData: ApplicationStatus,\n            callback?: Function\n        ) =>\n            dispatch(\n                ApplicationStatusActions[CrudType.CREATE][\n                    RequestStatus.TRIGGERED\n                ].action(applicationStatusFormData, callback)\n            ),\n        createApplicationStatusLink: (\n            applicationStatusLinkFormData: ApplicationStatusLink,\n            callback?: Function\n        ) =>\n            dispatch(\n                ApplicationStatusLinkActions[CrudType.CREATE][\n                    RequestStatus.TRIGGERED\n                ].action(applicationStatusLinkFormData, callback)\n            )\n    };\n};\n\nexport const ApplicationStatusFormComponentContainer = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(ApplicationStatusFormComponent)\n);\n","import React, { Component } from \"react\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\nimport {\n    IObjectAction,\n    IObjectStore\n} from \"../../store/rest-api-redux-factory\";\n\n/** data model */\nimport { ApplicationStatus } from \"../../store/data-model/application-status\";\nimport { ApplicationStatusLink } from \"../../store/data-model/application-status-link\";\n\n/** Components */\n\ninterface IApplicationStatusComponentProps extends RouteComponentProps {\n    applicationStatus: ApplicationStatus;\n    applicationStatusLinkStore: IObjectStore<ApplicationStatusLink>;\n}\n\nclass ApplicationStatusComponent extends Component<\n    IApplicationStatusComponentProps\n> {\n    render() {\n        return (\n            <div className=\"ApplicationStatusComponent\">\n                <p>\n                    <span>Status: {this.props.applicationStatus.text}</span>\n                    <br />\n                    <span>{this.props.applicationStatus.date}</span>\n                    <br />\n                    {this.props.applicationStatus.application_status_links.map(\n                        applicationStatusLinkID => {\n                            console.log(\"applicationStatusLinkID=\", applicationStatusLinkID)\n                            const applicationStatusLink: ApplicationStatusLink = this\n                                .props.applicationStatusLinkStore.collection[\n                                applicationStatusLinkID\n                            ];\n                            console.log(\"applicationStatusLinkID Obj=\", applicationStatusLink);\n                            return (\n                                (applicationStatusLink && applicationStatusLink.link) && <span key={applicationStatusLink.uuid}>\n                                    <a\n                                        href={applicationStatusLink.link.url}\n                                        target=\"_blank\"\n                                    >\n                                        {applicationStatusLink.link.text}\n                                    </a>{\" \"}\n                                    |\n                                </span>\n                            );\n                        }\n                    )}\n                </p>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    // prop: store.prop\n    applicationStatusLinkStore: store.applicationStatusLink\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<any>>) => {\n    // actionName: (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {\n        // listObjectName: (callback?: Function) =>\n        // \tdispatch(\n        // \t\tObjectNameActions[CrudType.LIST][RequestStatus.TRIGGERED].action(\n        // \t\t\tnew ObjectName({}),\n        // \t\t\tcallback\n        // \t\t)\n        // \t),\n    };\n};\n\nexport const ApplicationStatusComponentContainer = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(ApplicationStatusComponent)\n);\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\n\n/** Redux */\nimport { Application } from \"../../store/data-model/application\";\n\n/** data model */\nimport { ApplicationStatus } from \"../../store/data-model/application-status\";\n\n/** Components */\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\nimport { ApplicationStatusFormComponentContainer } from \"../../components/application-status/application-status-form-component\";\nimport { ApplicationStatusComponentContainer } from \"../application-status/application-status-component\";\n\n/** Types */\ninterface IApplicationComponentProps {\n    application: Application;\n    applicationStatusList: Array<ApplicationStatus>;\n    isShowApplicationStatuses?: boolean\n}\n\ninterface IApplicationComponentState {\n    isApplicationStatusFormOpened: boolean;\n}\n\n/** Main Class */\nexport class ApplicationComponent extends Component<\n    IApplicationComponentProps,\n    IApplicationComponentState\n> {\n    state = {\n        isApplicationStatusFormOpened: false\n    };\n\n    render() {\n        const application = this.props.application;\n        return application.uuid ? (\n            <div className=\"ApplicationComponent\">\n                {/* application info */}\n                <p>\n                    <span>\n                        <strong>Position:</strong> {application.position_title}\n                    </span>\n                    <br />\n                    <span>Application UUID: {application.uuid}</span>\n                    <br />\n                    {application.job_description_page.url ? (\n                        <a\n                            target=\"_blank\"\n                            href={application.job_description_page.url}\n                        >\n                            <strong>JD Page</strong>\n                        </a>\n                    ) : (\n                        <span>JD Page</span>\n                    )}\n\n                    <br />\n                    {application.job_source.url ? (\n                        <a target=\"_blank\" href={application.job_source.url}>\n                            <strong>Job Source</strong>\n                        </a>\n                    ) : (\n                        <span>Job Source</span>\n                    )}\n                </p>\n\n                {/* application statuses list */}\n                {this.props.isShowApplicationStatuses && this.props.applicationStatusList.map(status => {\n                    return (\n                        <ApplicationStatusComponentContainer\n                            key={status.uuid}\n                            applicationStatus={status}\n                        />\n                    );\n                })}\n\n                {/* new application status form */}\n                {this.props.isShowApplicationStatuses && (!this.state.isApplicationStatusFormOpened ? (\n                    <Button\n                        onClick={clickEvent => {\n                            this.setState({\n                                isApplicationStatusFormOpened: true\n                            });\n                        }}\n                        unelevated\n                        icon={<MaterialIcon hasRipple icon=\"add\" />}\n                    >\n                        Add New Status\n                    </Button>\n                ) : (\n                    <div className=\"application-component__status-form\">\n                        <h3>\n                            Add new status to application for{\" \"}\n                            {this.props.application.position_title}{\" \"}\n                        </h3>\n                        <ApplicationStatusFormComponentContainer\n                            application={this.props.application}\n                            onCancel={clickEvent => {\n                                this.setState({\n                                    isApplicationStatusFormOpened: false\n                                });\n                            }}\n                        />\n                    </div>\n                ))}\n            </div>\n        ) : (\n            <span>application object has no uuid.</span>\n        );\n    }\n}\n","import React, { Component } from \"react\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\nimport { IObjectAction, IObjectStore } from \"../../store/rest-api-redux-factory\";\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\n// data models\nimport { CompanyActions, Company } from \"../../store/data-model/company\";\nimport {\n    ApplicationActions,\n    Application\n} from \"../../store/data-model/application\";\nimport { ApplicationStatus } from \"../../store/data-model/application-status\";\n\n/** Components */\n// objects\nimport { CompanyComponent } from \"../company/company-component\";\nimport { ApplicationComponent } from \"../application/application-component\";\n\n\ninterface ICompanyApplicationComponentProps {\n    company: Company;\n    applicationStore: IObjectStore<Application>\n    applicationStatusStore: IObjectStore<ApplicationStatus>\n    isShowApplicationStatuses?: boolean\n    deleteObject: (companyToDelete: Company, callback?: Function) => void\n}\n\nclass CompanyApplicationComponent extends Component<ICompanyApplicationComponentProps> {\n\n    onDeleteClick = (event: any) => {\n        if (this.props.company.uuid) {\n            this.props.deleteObject(this.props.company);\n        } else {\n            console.error(\"Attempted to delete but company obj has no uuid\");\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"CompanyApplicationContainer\">\n                <CompanyComponent company={this.props.company} onDeleteIconClicked={this.onDeleteClick} />\n                {Object.values(this.props.applicationStore.collection)\n                    .filter(\n                        application => application.user_company === this.props.company.uuid\n                    )\n                    .map(application => {\n                        const applicationStatusList = (\n                            this.props.isShowApplicationStatuses || false\n                        ) ? Object.values(this.props.applicationStatusStore.collection).filter(\n                            (applicationStatus) => applicationStatus.application === application.uuid\n                        ) : [];\n                        return (\n                            <ApplicationComponent\n                                key={application.uuid}\n                                application={application}\n                                applicationStatusList={applicationStatusList}\n                                isShowApplicationStatuses={this.props.isShowApplicationStatuses}\n                            />\n                        );\n                    })}\n                {(!this.props.isShowApplicationStatuses) && <hr />}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    // prop: store.prop\n    applicationStore: store.application,\n    applicationStatusStore: store.applicationStatus,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<Application>>) => {\n    // actionName: (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {\n        deleteObject: (companyToDelete: Company, callback?: Function) =>\n        \tdispatch(\n        \t\tCompanyActions[CrudType.DELETE][RequestStatus.TRIGGERED].action(\n        \t\t\tcompanyToDelete,\n        \t\t\tcallback\n        \t\t)\n        \t),\n    };\n};\n\nexport const CompanyApplicationComponentContainer = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(CompanyApplicationComponent);\n","import React, { Component } from \"react\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\nimport { IObjectAction, IObjectStore } from \"../../store/rest-api-redux-factory\";\n// data models\nimport { Company } from \"../../store/data-model/company\";\nimport { Application } from \"../../store/data-model/application\";\n\n/** Components */\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n// objects\nimport { CompanyApplicationComponentContainer } from \"../../components/company-application/company-application-component\";\n\ninterface IUserAppPageProps extends RouteComponentProps {\n    company: IObjectStore<Company>\n    application: IObjectStore<Application>\n}\n\nclass UserAppPage extends Component<IUserAppPageProps> {\n\n    componentDidMount() {\n    }\n\n    render() {\n        return (\n            <div className=\"UserAppPage\">\n                <h1>UserAppPage Works!</h1>\n                <Button\n                    onClick={()=>{ this.props.history.push(\"/add-com/\") }}\n                    unelevated\n                    icon={<MaterialIcon hasRipple icon=\"add\" />}\n                    children=\"Add Company\"\n                />\n                <br></br>\n                {\n                    (this.props.company.collection !== {}) && Object.values(this.props.company.collection).map((company) => {\n                        return (\n                            <CompanyApplicationComponentContainer key={company.uuid} company={company} />\n                        )\n                    })\n                }\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    // prop: store.prop\n    company: store.company,\n    application: store.application,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<{}>>) => {\n    // actionName = (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n\n    return {\n        // listObject: (callback?: Function) =>\n        //     dispatch(\n        //         ObjectActions[CrudType.LIST][RequestStatus.TRIGGERED].action(\n        //             new Object({}),\n        //             callback\n        //         )\n        //     ),\n    }\n};\n\nexport const UserAppPageContainer = withRouter(connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(UserAppPage));\n","import React, { Component } from \"react\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\nimport {\n    IObjectStore,\n    IObjectAction\n} from \"../../store/rest-api-redux-factory\";\n// data models\nimport {\n    Company,\n    CompanyActions\n} from \"../../store/data-model/company\";\nimport { Link } from \"../../store/data-model/link\";\nimport { Address } from \"../../store/data-model/address\";\n\n/** Components */\nimport {\n    FormFactory,\n    FormActionButtonProps,\n    IFormFactoryProps,\n    ActionButtonType,\n} from \"../form-factory/form-factory\";\nimport {\n    FormInputFieldFactory,\n    FormInputFieldProps,\n    InputFieldType\n} from \"../form-factory/form-field-factory\";\nimport { ErrorMessage, FormikValues, FormikErrors } from \"formik\";\n\ninterface ICompanyFormComponentProps {\n    onCancel: (event: any) => void;\n    onSubmitSuccess?: (event: any) => void;\n\n    /** redux */\n    createCompany: (\n        companyFormData: Company,\n        callback?: Function\n    ) => void;\n}\n\nclass CompanyFormComponent extends Component<\n    ICompanyFormComponentProps\n> {\n    formFactoryProps: IFormFactoryProps<any>;\n\n    constructor(props: ICompanyFormComponentProps) {\n        super(props);\n\n        // prepare for new company form\n        const initialValues = {\n            company__name: \"\",\n            company__hq_location__full_address: \"\",\n            company__home_page__url: \"\"\n        };\n\n        this.formFactoryProps = {\n            initialValues: initialValues,\n            validate: this.validateAppForm,\n            onSubmit: this.onSubmitAppForm,\n            formInputFieldPropsList: [\n                new FormInputFieldProps(\n                    \"company__name\",\n                    \"Company Name*\"\n                ),\n                new FormInputFieldProps(\n                    \"company__hq_location__full_address\",\n                    \"HQ Address or Location\"\n                ),\n                new FormInputFieldProps(\n                    \"company__home_page__url\",\n                    \"Company Home Page URL\"\n                )\n            ],\n            actionButtonPropsList: [\n                new FormActionButtonProps(\"Create\", undefined, ActionButtonType.SUBMIT),\n                new FormActionButtonProps(\"Cancel\", this.props.onCancel)\n            ]\n        };\n    }\n\n    validateAppForm = (values: FormikValues) => {\n        let errors: FormikErrors<any> = {};\n        if (!values.company__name) {\n            errors.company__name = \"Required\";\n        }\n        if (!/^https*\\:\\/\\/.+$/i.test(values.company__home_page__url)) {\n            errors.company__home_page__url =\n                \"Please start by http:// or https://\";\n        }\n        return errors;\n    };\n\n    onSubmitAppForm = (\n        values: FormikValues,\n        { setSubmitting }: { setSubmitting: Function }\n    ) => {\n        setSubmitting(false);\n        console.log(\"values=\", values);\n\n        // prep relationship object by data model\n        const hq_location = new Address({\n            full_address: values.company__hq_location__full_address,\n            place_name: `HQ of ${values.company__name}`\n        });\n        const home_page = new Link({\n            url: values.company__home_page__url,\n            text: `Home page of ${values.company__name}`\n        });\n        // create main object\n        const company = new Company({\n            name: values.company__name,\n            hq_location,\n            home_page\n        });\n\n        // dispatch\n        this.props.createCompany(company, this.props.onSubmitSuccess);\n    };\n\n    render() {\n        return (\n            <div className=\"CompanyFormComponent\">\n                <FormFactory {...this.formFactoryProps} />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<Company>>) => {\n    return {\n        createCompany: (\n            companyFormData: Company,\n            callback?: Function\n        ) =>\n            dispatch(\n                CompanyActions[CrudType.CREATE][\n                    RequestStatus.TRIGGERED\n                ].action(companyFormData, callback)\n            )\n    };\n};\n\nexport const CompanyFormComponentContainer = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(CompanyFormComponent);\n","import React, { Component } from \"react\";\n\n/** route */\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\n// REST API\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\nimport {\n    IObjectAction,\n    IObjectStore\n} from \"../../store/rest-api-redux-factory\";\nimport { CompanyActions, Company } from \"../../store/data-model/company\";\nimport { Address } from \"../../store/data-model/address\";\nimport { Link } from \"../../store/data-model/link\";\n\n/** Components */\n//mdc-react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc-react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n// mdc-react input\nimport \"@material/react-text-field/dist/text-field.css\";\nimport TextField, { HelperText, Input } from \"@material/react-text-field\";\n// formik\nimport { Formik, Form, Field } from \"formik\";\n// form factory\nimport {\n    FormFactory,\n    FormActionButtonProps,\n    IFormFactoryProps\n} from \"../../components/form-factory/form-factory\";\nimport {\n    FormInputFieldFactory,\n    FormInputFieldProps,\n    InputFieldType\n} from \"../../components/form-factory/form-field-factory\";\nimport { ErrorMessage, FormikValues, FormikErrors } from \"formik\";\nimport { CompanyFormComponentContainer } from \"../../components/company/company-form-component\";\n\ninterface IAddComPageProps extends RouteComponentProps {\n    company: IObjectStore<Company>;\n}\n\nclass AddComPage extends Component<IAddComPageProps> {\n    \n    render() {\n        return (\n            <div className=\"AddComPage\">\n                <h1>AddComPage Works!</h1>\n                <CompanyFormComponentContainer \n                    onSubmitSuccess={() => {\n                        if (this.props.company.lastChangedObjectID) {\n                            let newCompany = this.props.company.collection[\n                                this.props.company.lastChangedObjectID\n                            ];\n                            console.log(\"new company:\", newCompany);\n                            this.props.history.push(\n                                `/com-app/${newCompany.uuid}/`\n                            );\n                        } else {\n                            console.error(\"store has no lastChangedObjectID\");\n                        }\n                    }}\n                    onCancel={(event) => {\n                        this.props.history.push(`/`);\n                    }}\n                />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: IRootState) => ({\n    // prop: state.prop\n    company: state.company,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<Company>>) => {\n    // actionName = (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {\n    };\n};\n\nexport const AddComPageContainer = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(AddComPage)\n);\n","import React, { Component } from \"react\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\nimport {\n    IObjectStore,\n    IObjectAction\n} from \"../../store/rest-api-redux-factory\";\n// data models\nimport { Company } from \"../../store/data-model/company\";\nimport {\n    Application,\n    ApplicationActions\n} from \"../../store/data-model/application\";\nimport { Link } from \"../../store/data-model/link\";\n\n/** Components */\nimport {\n    FormFactory,\n    FormActionButtonProps,\n    IFormFactoryProps,\n    ActionButtonType,\n} from \"../form-factory/form-factory\";\nimport {\n    FormInputFieldFactory,\n    FormInputFieldProps,\n    InputFieldType\n} from \"../form-factory/form-field-factory\";\nimport { ErrorMessage, FormikValues, FormikErrors } from \"formik\";\n\ninterface IApplicationFormComponentProps {\n    company: Company;\n    onCancel: (event: any) => void;\n\n    /** redux */\n    application: IObjectStore<Application>;\n    createApplication: (\n        applicationFormData: Application,\n        callback?: Function\n    ) => void;\n}\n\nclass ApplicationFormComponent extends Component<\n    IApplicationFormComponentProps\n> {\n    formFactoryProps: IFormFactoryProps<any>;\n\n    constructor(props: IApplicationFormComponentProps) {\n        super(props);\n\n        // prepare for new application form\n        const initialValues = {\n            application__position_title: \"\",\n            application__job_description_page__url: \"\",\n            application__job_source__url: \"\"\n        };\n\n        this.formFactoryProps = {\n            initialValues: initialValues,\n            validate: this.validateAppForm,\n            onSubmit: this.onSubmitAppForm,\n            formInputFieldPropsList: [\n                new FormInputFieldProps(\n                    \"application__position_title\",\n                    \"Position Title*\"\n                ),\n                new FormInputFieldProps(\n                    \"application__job_description_page__url\",\n                    \"Job Description URL\"\n                ),\n                new FormInputFieldProps(\n                    \"application__job_source__url\",\n                    \"Job Source URL\"\n                )\n            ],\n            actionButtonPropsList: [\n                new FormActionButtonProps(\"Create\", undefined, ActionButtonType.SUBMIT),\n                new FormActionButtonProps(\"Cancel\", this.props.onCancel)\n            ]\n        };\n    }\n\n    validateAppForm = (values: FormikValues) => {\n        let errors: FormikErrors<any> = {};\n        if (!values.application__position_title) {\n            errors.application__position_title = \"Required\";\n        }\n        if (\n            !/^https*\\:\\/\\/.+$/i.test(\n                values.application__job_description_page__url\n            )\n        ) {\n            errors.application__job_description_page__url =\n                \"Please start by http:// or https://\";\n        }\n        if (!/^https*\\:\\/\\/.+$/i.test(values.application__job_source__url)) {\n            errors.application__job_source__url =\n                \"Please start by http:// or https://\";\n        }\n        return errors;\n    };\n\n    onSubmitAppForm = (\n        values: FormikValues,\n        { setSubmitting }: { setSubmitting: Function }\n    ) => {\n        setSubmitting(false);\n\n        // prep relationship object by data model\n        const job_description_page = new Link({\n            url: values.application__job_description_page__url,\n            text: `Job description URL for application ${\n                values.application__position_title\n            } at company ${this.props.company.name}`\n        });\n        const job_source = new Link({\n            url: values.application__job_source__url,\n            text: `Job source URL for application ${\n                values.application__position_title\n            } at company ${this.props.company.name}`\n        });\n        const application__user_company__id = this.props.company.uuid;\n\n        // create main object\n        const application = new Application({\n            position_title: values.application__position_title,\n            job_description_page,\n            job_source,\n            user_company: application__user_company__id\n        });\n\n        // dispatch\n        this.props.createApplication(application, () => {\n            // log print newly created application\n            if (this.props.application.lastChangedObjectID) {\n                const newApplication = this.props.application.collection[\n                    this.props.application.lastChangedObjectID\n                ];\n                console.log(\"new application:\", newApplication);\n            } else {\n                console.error(\"application store has no lastChangedObjectID\");\n            }\n        });\n    };\n\n    render() {\n        return (\n            <div className=\"ApplicationFormComponent\">\n                <FormFactory {...this.formFactoryProps} />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    application: store.application\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<Application>>) => {\n    return {\n        createApplication: (\n            applicationFormData: Application,\n            callback?: Function\n        ) =>\n            dispatch(\n                ApplicationActions[CrudType.CREATE][\n                    RequestStatus.TRIGGERED\n                ].action(applicationFormData, callback)\n            )\n    };\n};\n\nexport const ApplicationFormComponentContainer = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ApplicationFormComponent);\n","import React, { Component } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { RouteComponentProps } from \"react-router\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\n// rest api\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\nimport {\n    IObjectStore,\n    IObjectAction\n} from \"../../store/rest-api-redux-factory\";\nimport { Company } from \"../../store/data-model/company\";\nimport { Link } from \"../../store/data-model/link\";\nimport {\n    Application,\n    ApplicationActions\n} from \"../../store/data-model/application\";\n\n/** Components */\nimport { CompanyApplicationComponentContainer } from \"../../components/company-application/company-application-component\";\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n// mdc-react input\nimport \"@material/react-text-field/dist/text-field.css\";\nimport TextField, { HelperText, Input } from \"@material/react-text-field\";\n// form factory\nimport {\n    FormFactory,\n    FormActionButtonProps,\n    IFormFactoryProps\n} from \"../../components/form-factory/form-factory\";\n// formik\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\nimport {\n    FormInputFieldFactory,\n    FormInputFieldProps,\n    InputFieldType\n} from \"../../components/form-factory/form-field-factory\";\nimport { FormikValues, FormikErrors } from \"formik\";\nimport { ApplicationFormComponentContainer } from \"../../components/application/application-form-component\";\n\ninterface IUserComAppPageParams {\n    uuid: string;\n}\n\ninterface IUserComAppPageProps\n    extends RouteComponentProps<IUserComAppPageParams> {\n    company: IObjectStore<Company>;\n    application: IObjectStore<Application>;\n    createApplication: (\n        applicationFormData: Application,\n        callback?: Function\n    ) => void;\n}\n\ninterface IUserComAppPageState {\n    isApplicationFormOpened: boolean;\n    companyUuid: string;\n    company: Company;\n}\n\nclass UserComAppPage extends Component<\n    IUserComAppPageProps,\n    IUserComAppPageState\n> {\n    readonly state: IUserComAppPageState = {\n        isApplicationFormOpened: false,\n        companyUuid: \"\",\n        company: new Company({})\n    };\n\n    componentDidMount() {\n        let companyUuid = this.props.match.params.uuid;\n        console.log(\"mount, got uuid from route?\", companyUuid);\n        if (\n            this.props.company.collection &&\n            companyUuid in this.props.company.collection\n        ) {\n            this.setState({\n                companyUuid,\n                company: new Company(this.props.company.collection[companyUuid])\n            });\n        }\n    }\n\n    renderAll() {\n        if (!this.state.company.uuid) {\n            return;\n        }\n\n        return (\n            <div className=\"user-com-app-page-content\">\n                <Button\n                    onClick={clickEvent => {\n                        this.props.history.push(\"/\");\n                    }}\n                >\n                    Back\n                </Button>\n                <h1>{this.state.company.name}</h1>\n\n                {/* application form */}\n                {(!this.state.isApplicationFormOpened) ? (\n                    <Button\n                        onClick={clickEvent => {\n                            this.setState({ isApplicationFormOpened: true });\n                        }}\n                        unelevated\n                        icon={<MaterialIcon hasRipple icon=\"add\" />}\n                    >\n                        Add Application\n                    </Button>\n                ) : (\n                    <ApplicationFormComponentContainer\n                        onCancel={event => {\n                            console.log(\"onCancel clicked\");\n                            this.setState({ isApplicationFormOpened: false })\n                        }}\n                        company={this.state.company}\n                    />\n                )}\n\n                <br />\n\n                {/* application list */}\n                {this.state.company.uuid && (\n                    <CompanyApplicationComponentContainer\n                        company={this.state.company}\n                        isShowApplicationStatuses\n                    />\n                )}\n            </div>\n        );\n    }\n\n    render() {\n        return (\n            <div className=\"UserComAppPage\">\n                {this.state.companyUuid &&\n                this.props.company.collection &&\n                this.state.companyUuid in this.props.company.collection ? (\n                    this.renderAll()\n                ) : this.state.companyUuid ? (\n                    <h1>No company found. Uuid={this.state.companyUuid}</h1>\n                ) : (\n                    <h1>Company uuid not specified</h1>\n                )}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => {\n    return {\n        // prop: store.prop\n        company: store.company,\n        application: store.application\n    };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<Application>>) => {\n    // actionName = (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {\n        createApplication: (\n            applicationFormData: Application,\n            callback?: Function\n        ) =>\n            dispatch(\n                ApplicationActions[CrudType.CREATE][\n                    RequestStatus.TRIGGERED\n                ].action(applicationFormData, callback)\n            )\n    };\n};\n\nexport const UserComAppPageContainer = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(UserComAppPage)\n);\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nimport { IUpdateAuthState } from \"../../store/auth/types\";\n\ninterface UserInfoProps {\n    auth: IUpdateAuthState\n}\n\nexport class UserInfo extends Component<UserInfoProps, any> {\n\n  render() {\n    return (\n      <div>\n        <h1>User Info</h1>\n        <div>Logged in: {this.props.auth.isLogin && this.props.auth.isLogin.toString() || \"undefine\"}</div>\n        <div>User Name: {this.props.auth.userName || \"(empty)\"}</div>\n        <div>Token (for API): {this.props.auth.apiToken || \"(empty)\"}</div>\n      </div>\n    )\n  }\n}\n","import React, { Component } from \"react\";\n\n/** redux */\nimport { connect } from \"react-redux\";\nimport { IRootState } from \"../../store/types\";\nimport { IUpdateAuthState } from \"../../store/auth/types\";\n\n/** Routes & pages */\nimport { UserInfo } from \"../../components/user-info/user-info\";\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\n\n/** Components */\nimport { SocialAuthButtonContainer } from \"../../components/social-auth/social-auth-button\";\n\ninterface IUserProfilePageProps extends RouteComponentProps {\n    auth: IUpdateAuthState;\n}\n\nclass UserProfilePage extends Component<IUserProfilePageProps, any> {\n    render() {\n        return (\n            <div>\n                <h1>(Internal Page) User Profile Page works!</h1>\n                <UserInfo auth={this.props.auth} />\n                <SocialAuthButtonContainer />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => {\n    return {\n        auth: store.auth\n    };\n};\n\nexport const UserProfilePageContainer = withRouter(connect(mapStateToProps)(UserProfilePage));\n","import React, { Component } from \"react\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { IRootState } from \"../../store/types\";\nimport { IUpdateAuthState } from \"../../store/auth/types\";\n\n/** Routing & Pages */\nimport {\n    Route,\n    Redirect,\n    Switch,\n    Link,\n    withRouter,\n    RouteComponentProps\n} from \"react-router-dom\";\n// pages\nimport { LandingPageContainer } from \"../landing-page/landing-page\";\nimport { UserAppPageContainer } from \"../user-app-page/user-app-page\";\nimport { AddComPageContainer } from \"../add-com-page/add-com-page\";\nimport { UserComAppPageContainer } from \"../user-com-app-page/user-com-app-page\";\nimport { UserProfilePageContainer } from \"../user-profile-page/user-profile-page\";\n\n/** MDC React */\nimport TopAppBar, { TopAppBarFixedAdjust } from \"@material/react-top-app-bar\";\nimport \"@material/react-top-app-bar/dist/top-app-bar.css\";\n// import '@material/react-material-icon/dist/material-icon.css';\nimport MaterialIcon from \"@material/react-material-icon\";\n// style\nimport \"@material/react-ripple/dist/ripple.css\";\n\n// import {withRipple} from '@material/react-ripple';\n\ninterface IPageRoutesProps extends RouteComponentProps {\n    auth: IUpdateAuthState;\n}\n\nclass PageRoutes extends Component<IPageRoutesProps> {\n    render() {\n        return (\n            <div className=\"PageRoutesContainer\">\n                {this.props.location.pathname === \"/\" ? (\n                    <Route path=\"/\" exact component={LandingPageContainer} />\n                ) : (\n                    <div className=\"PrivateRoutesContainer\">\n\n                        {\n                            /** protect private routes */\n                            (!this.props.auth.isLogin) && (\n                                <Redirect to=\"/\" />\n                            )\n                        }\n\n                        <TopAppBar\n                            title=\"Appl Tracky\"\n                            actionItems={[\n                                <Link to=\"/home/\">\n                                    <MaterialIcon\n                                        hasRipple\n                                        key=\"itemHome\"\n                                        icon=\"home\"\n                                    />\n                                </Link>,\n                                <Link to=\"/profile/\">\n                                    <MaterialIcon\n                                        hasRipple\n                                        key=\"itemProfile\"\n                                        icon=\"account_circle\"\n                                    />\n                                </Link>\n                            ]}\n                        />\n                        <TopAppBarFixedAdjust>\n                            <Switch>\n                                <Route\n                                    path=\"/home/\"\n                                    component={UserAppPageContainer}\n                                />\n                                <Route\n                                    path=\"/add-com/\"\n                                    component={AddComPageContainer}\n                                />\n                                <Route\n                                    path=\"/com-app/:uuid/\"\n                                    component={UserComAppPageContainer}\n                                />\n                                <Route\n                                    path=\"/com-app/\"\n                                    component={UserComAppPageContainer}\n                                />\n                                <Route\n                                    path=\"/profile/\"\n                                    component={UserProfilePageContainer}\n                                />\n                                {/** add more page routes here */}\n                            </Switch>\n                        </TopAppBarFixedAdjust>\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    auth: store.auth\n});\n\nconst mapDispatchToProps = {};\n\nexport const PageRoutesContainer = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(PageRoutes)\n);\n","/** React core */\nimport React, { Component } from \"react\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { IRootState } from \"./store/types\";\n\n/** Routes & pages */\nimport { PageRoutesContainer } from \"./pages/page-routes/page-routes\";\n\n/** Locals */\nimport \"./App.css\";\n\ninterface IAppProps {}\n\nclass App extends Component<IAppProps> {\n    componentDidMount() {}\n\n    render() {\n        return (\n            <div className=\"App\">\n                <PageRoutesContainer />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => {\n    return {};\n};\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { Action } from \"redux\";\nimport { IRootState } from \"./types\";\n\nexport enum RootActionNames {\n    ResetAllStore = \"RESET_ALL_STORE\"\n}\n\nexport const resetAllStoreAction = () => {\n    return {\n        type: RootActionNames.ResetAllStore,\n    }\n}","import { Reducer, Action } from 'redux';\n\nimport { \n    /** store */\n    IUpdateAuthState, \n    /** action */\n    AuthActionNames, TAuthActions \n} from \"./types\";\n\nimport { RequestStatus } from \"../../utils/rest-api\";\n\nconst initialAuthState: IUpdateAuthState = {\n    requestStatus: RequestStatus.SUCCESS,\n    isLogin: false,\n    socialAuthToken: \"\",\n    apiToken: \"\",\n    userName: \"\",\n    expireDateTime: \"\",\n}\n\n// authStore will be stored as a sub-entry in global store; this is defined in ./store/types.ts\nexport const authReducer: Reducer<IUpdateAuthState> = (authStore = initialAuthState, action: Action)  => {\n    // add reducer for new actions here\n    // ...\n\n    const authAction = action as TAuthActions;\n\n    return {\n        ...authStore,\n        ...authAction.payload\n    }\n}","/** redux */\nimport {\n    AuthActionNames,\n    IRequestedLoginAuthAction,\n    IRequestedLogoutAuthAction\n} from \"../../store/auth/types\";\nimport {\n    SuccessLoginAuth,\n    SuccessLogoutAuth,\n    FailureAuth\n} from \"../../store/auth/actions\";\nimport { resetAllStoreAction } from \"../../store/actions\";\nimport { CompanyActions, Company } from \"../../store/data-model/company\";\nimport { ApplicationActions, Application } from \"../../store/data-model/application\";\nimport { ApplicationStatusActions, ApplicationStatus } from \"../../store/data-model/application-status\";\nimport { ApplicationStatusLinkActions, ApplicationStatusLink } from \"../../store/data-model/application-status-link\";\n// redux-saga\nimport { takeEvery, call, put } from \"redux-saga/effects\";\n\n/** router */\nimport { push } from \"connected-react-router\";\n\n/** api */\nimport { AuthenticationService } from \"../../utils/auth\";\nimport { RestApiService, CrudType, RequestStatus } from \"../../utils/rest-api\";\n\nfunction* authLoginSagaHandler(\n    requestedLoginAuthAction: IRequestedLoginAuthAction\n) {\n    // RequestAuth action triggered & injecting side effects here...\n    console.log(\"auth saga: initialize\");\n    const { socialAuthToken } = requestedLoginAuthAction.payload;\n    console.log(\"auth saga: request fired\");\n    try {\n        // TODO: define interface typing for api response\n        const jsonResponse = yield call(AuthenticationService.serverLogin, socialAuthToken);\n        console.log(\"auth saga: navigating. jsonRes:\", jsonResponse);\n        AuthenticationService.state.apiLoginToken = jsonResponse.token;\n        yield put(SuccessLoginAuth(jsonResponse.email, \"\", jsonResponse.token));\n        // yield put(push(\"/home/\"));\n\n        // initial fetch user data\n        yield put(ApplicationActions[CrudType.LIST][RequestStatus.TRIGGERED].action(new Application({})))\n        yield put(CompanyActions[CrudType.LIST][RequestStatus.TRIGGERED].action(new Company({})))\n        yield put(ApplicationStatusActions[CrudType.LIST][RequestStatus.TRIGGERED].action(new ApplicationStatus({})))\n        yield put(ApplicationStatusLinkActions[CrudType.LIST][RequestStatus.TRIGGERED].action(new ApplicationStatusLink({})))\n    } catch (error) {\n        console.warn(\"auth saga: error\")\n        yield put(FailureAuth(error));\n        return;\n    }\n}\n\nexport function* authLoginSaga() {\n    yield takeEvery(AuthActionNames.REQUESTED_LOGIN_AUTH, authLoginSagaHandler);\n}\n\nfunction* authLogoutSagaHandler(\n    requestedLogoutAuthAction: IRequestedLogoutAuthAction\n) {\n    // RequestAuth action triggered & injecting side effects here...\n    console.log(\"auth logout saga: fired\");\n    try {\n        yield call(AuthenticationService.serverLogout);\n\n        // clear all store\n    } catch (error) {\n        yield put(FailureAuth(error));\n        return;\n    }\n\n    console.log(\"auth logout saga: navigating\");\n    yield put(SuccessLogoutAuth());\n    // yield put(push(\"/\"));\n\n    // clear all redux store\n    yield put(resetAllStoreAction());\n}\n\nexport function* authLogoutSaga() {\n    yield takeEvery(\n        AuthActionNames.REQUESTED_LOGOUT_AUTH,\n        authLogoutSagaHandler\n    );\n}\n\n// add new saga handler here && a `takeEvery` saga.\n// ...","import createSagaMiddleware from 'redux-saga';\nimport { all } from \"redux-saga/effects\";\nimport { authLoginSaga, authLogoutSaga } from \"./auth/sagas\";\n// rest api\nimport { CompanySagas } from \"../store/data-model/company\";\nimport { AddressSagas } from \"../store/data-model/address\";\nimport { ApplicationSagas } from \"../store/data-model/application\";\nimport { ApplicationStatusSagas } from \"../store/data-model/application-status\";\nimport { ApplicationStatusLinkSagas } from \"../store/data-model/application-status-link\";\n\n/** setup saga */\nconst sagaMiddleware = createSagaMiddleware();\n\nexport {\n    sagaMiddleware\n};\n\nconst rootSaga = function*() {\n    yield all([\n        authLoginSaga(),\n        authLogoutSaga(),\n        ...CompanySagas.map((saga) => saga()),\n        ...AddressSagas.map((saga) => saga()),\n        ...ApplicationSagas.map((saga) => saga()),\n        ...ApplicationStatusSagas.map((saga) => saga()),\n        ...ApplicationStatusLinkSagas.map((saga) => saga()),\n        // add new saga here\n        // ...\n    ]);\n};\n\nexport const runSagaMiddleaware = () => {\n    sagaMiddleware.run(rootSaga)\n}\n\n","/** redux */\nimport { combineReducers, Reducer, AnyAction, Action } from \"redux\";\nimport { connectRouter, LocationChangeAction } from 'connected-react-router';\nimport { authReducer } from \"./auth/reducers\";\nimport { TAuthActions } from \"./auth/types\";\nimport { IRootState } from \"./types\";\nimport { RootActionNames } from \"./actions\";\n// rest api\nimport { CompanyReducer } from \"./data-model/company\";\nimport { AddressReducer } from \"./data-model/address\";\nimport { ApplicationReducer } from \"./data-model/application\";\nimport { ApplicationStatusReducer } from \"./data-model/application-status\";\nimport { ApplicationStatusLinkReducer } from \"./data-model/application-status-link\";\n\n/** router */\nimport { History } from \"history\";\n\n// root reducer with router state\nexport const createRootReducer = (history: History<any>): Reducer<IRootState> => {\n    // return combineReducers<IRootState>({\n    //     router: connectRouter(history),\n    \n    //     // add more reducers here\n    //     auth: authReducer,\n    //     company: CompanyReducer,\n    //     address: AddressReducer,\n    //     application: ApplicationReducer,\n    //     // ...\n    // })\n\n    const rootReducer: Reducer<IRootState> = (rootState: IRootState | undefined, action: Action): IRootState  => {\n\n        let rootStateChecked: any = {}\n        if (!rootState) {\n            rootStateChecked.router = undefined;\n            rootStateChecked.auth = undefined;\n            rootStateChecked.company = undefined;\n            rootStateChecked.address = undefined;\n            rootStateChecked.application = undefined;\n            rootStateChecked.applicationStatus = undefined;\n            rootStateChecked.applicationStatusLink = undefined;\n            // add initial state for new sub-store here\n            // ...\n        } else if (action.type === RootActionNames.ResetAllStore) {\n            rootStateChecked = {\n                router: rootState.router\n            }\n        } else {\n            rootStateChecked = rootState;\n        }\n\n        console.log(\"beforeRootStore\", rootState);\n\n        const afterStore  = { \n            ...rootState,\n            router: connectRouter(history)(rootStateChecked.router, action as LocationChangeAction),\n            auth: authReducer(rootStateChecked.auth, action),\n            company: CompanyReducer(rootStateChecked.company, action),\n            address: AddressReducer(rootStateChecked.address, action),\n            application: ApplicationReducer(rootStateChecked.application, action),\n            applicationStatus: ApplicationStatusReducer(rootStateChecked.applicationStatus, action),\n            applicationStatusLink: ApplicationStatusLinkReducer(rootStateChecked.applicationStatusLink, action),\n            // add new reducer here\n            // ...\n        }\n        console.log(\"afterRootStore\", afterStore);\n\n        return afterStore;\n    }\n\n    return rootReducer;\n}","/** redux */\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport { IRootState } from \"../store/types\";\nimport { createRootReducer } from \"../store/reducers\";\n\n/** router */\nimport { createBrowserHistory } from 'history';\nimport { routerMiddleware } from 'connected-react-router';\n\n/** middleware */\n// saga\nimport { sagaMiddleware, runSagaMiddleaware } from \"../sagas/saga-config\";\n\n\n\nconst history = createBrowserHistory();\n\nconst preloadedState = {\n\n};\n\n// generate the singleton store from redux\nexport const store = createStore<IRootState, any, any, any>(\n    createRootReducer(history),\n    preloadedState,\n    compose(\n        applyMiddleware(\n            routerMiddleware(history),\n            sagaMiddleware,\n            // ... add other middlewares ...\n        )\n    )\n);\n\n/** after mount saga middlewares to store, run them */\nrunSagaMiddleaware();\n\nexport {\n    history\n};","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n/** redux */\nimport { Provider } from \"react-redux\";\nimport { Store } from \"redux\";\n/** root store */\nimport { IRootState } from \"./store/types\";\nimport { store } from \"./store/store-config\";\n\n/** router */\nimport { ConnectedRouter } from \"connected-react-router\";\nimport { history } from \"./store/store-config\";\n\n/** types */\ninterface IRootProps {\n    store: Store<IRootState>;\n}\n\n/** root component - just to wrap the App into redux store */\nconst Root: React.SFC<IRootProps> = props => {\n    return (\n        <Provider store={props.store}>\n            <ConnectedRouter history={history}>\n                <App />\n            </ConnectedRouter>\n        </Provider>\n    );\n};\n\nReactDOM.render(<Root store={store} />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}