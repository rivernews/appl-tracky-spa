{"version":3,"sources":["components/application/application-component.module.css","components/company/company-component.module.css","components/form-factory/form-input-field/form-input-field.module.css","pages/user-com-app-page/user-com-app-page.module.css","pages/page-routes/page-routes.module.css","store/auth/types.ts","utils/rest-api.ts","store/data-model/base-model.ts","utils/authentication.ts","store/auth/actions.ts","components/login/social-auth-login-button.tsx","components/login/social-auth-logout-button.tsx","components/login/social-auth-button.tsx","components/form-factory/form-base-field/form-base-field-meta.tsx","pages/landing-page/landing-page.tsx","components/form-factory/form-input-field/form-input-field.tsx","components/form-factory/form-factory.tsx","components/form-factory/form-input-field/form-input-field-meta.tsx","components/login/local-login-form.tsx","pages/login-page/local-login-page.tsx","utils/utilities.ts","components/company/company-list-item.tsx","pages/user-app-page/user-app-page.tsx","store/rest-api-redux-factory.ts","store/data-model/address.ts","store/data-model/link.ts","store/data-model/company.ts","components/form-factory/form-base-field/form-base-field.tsx","components/form-factory/form-link-field/form-link-field.tsx","components/form-factory/form-link-field/form-link-field-component.tsx","components/form-factory/form-link-field/form-link-field-meta.tsx","components/form-factory/form-address-field/form-address-field.tsx","components/form-factory/form-address-field/form-address-field-component.tsx","components/form-factory/form-address-field/form-address-field-meta.tsx","components/company/company-form-component.tsx","pages/add-com-page/add-com-page.tsx","store/data-model/application.ts","store/data-model/application-status.ts","store/data-model/application-status-link.ts","components/form-factory/form-application-status-link-field/form-application-status-link-field.tsx","components/form-factory/form-application-status-link-field/form-application-status-link-field-component.tsx","components/form-factory/form-application-status-link-field/form-application-status-link-field-meta.tsx","components/application-status/application-status-form-component.tsx","components/application-status/application-status-component.tsx","components/form-factory/form-rich-text-field/form-rich-text-field.tsx","components/form-factory/form-rich-text-field/form-rich-text-field-meta.tsx","components/application/application-form-component.tsx","components/application/application-component.tsx","components/company/company-component.tsx","pages/user-com-app-page/user-com-app-page.tsx","components/user-info/user-info.tsx","components/login/local-logout-button.tsx","pages/user-profile-page/user-profile-page.tsx","pages/page-routes/page-routes.tsx","App.tsx","serviceWorker.ts","store/actions.ts","store/auth/reducers.ts","sagas/auth/sagas.ts","sagas/saga-config.ts","store/reducers.ts","store/store-config.ts","index.tsx","pages/landing-page/landing-page.module.css","pages/user-app-page/user-app-page.module.css"],"names":["module","exports","applicationCard","applicationCardContent","companyTitleContainer","companyTitleCaption","TextField","UserCompanyPage","topAppBarTitle","RequestedLoginMode","AuthActionNames","RequestStatus","CrudType","RestMethod","BaseModel","_ref","_ref$uuid","uuid","_ref$created_at","created_at","_ref$modified_at","modified_at","Object","classCallCheck","this","createClass","key","value","Yup","shape","RefreshObject","_this","_ref$token","token","args","objectWithoutProperties","possibleConstructorReturn","getPrototypeOf","call","LoginObject","_ref2","_this2","_ref2$code","code","_ref2$provider","provider","_ref2$redirect_uri","redirect_uri","AuthenticationService","state","clientID","redirectUri","apiSocialLoginUrl","apiLocalLoginUrl","apiLoginRefreshUrl","socialAuthProvider","apiLoginToken","serverLogin","_callee","loginMode","params","sessionAuthState","refreshTokenReponse","loginObject","resp","res","parsedJsonResponse","regenerator_default","a","wrap","_context","prev","next","PREFILL","localStorage","getItem","concat","JSON","parse","isLogin","_this3","apiCallToken","apiToken","refreshToken","sent","abrupt","email","userName","avatar_url","avatarUrl","isLocal","t0","SOCIAL_AUTH","socialAuthToken","RestApiService","post","data","endpointUrl","objectSpread","t1","Error","LOCAL","fetch","apiBaseUrl","method","mode","credentials","headers","Content-Type","body","stringify","username","password","ok","statusText","json","t2","stop","_callee2","refreshObject","_context2","serverLogout","_callee3","_context3","CrudMapToRest","crudType","CREATE","POST","READ","LIST","GET","UPDATE","PATCH","DELETE","RestApi","userEmail","userFirstName","userLastName","objectID","get","absoluteUrl","objectName","getRelativeUrl","setApiAuthHeaders","then","patch","_ref3","delete","_ref4","_ref5","undefined","Authorization","RequestedLoginAuth","onCompleteCallback","type","REQUESTED_LOGIN_AUTH","payload","requestStatus","REQUESTING","RequestedLogoutAuth","REQUESTED_LOGOUT_AUTH","SuccessLoginAuth","expireDateTime","SUCCESS_AUTH","SUCCESS","SuccessLogoutAuth","FailureAuth","error","FAILURE_AUTH","FAILURE","SocialAuthLoginButton","_Component","_getPrototypeOf2","_len","arguments","length","Array","_key","apply","onLoginButtonClicked","clickEvent","renderProps","onClick","onAuthSuccess","authResponse","props","onSuccess","onAuthFailure","onFailure","inherits","react_default","createElement","className","google_login","render","dist_default","unelevated","icon","index_es","faGoogle","disabled","clientId","responseType","Component","SocialAuthLogoutButton","react_material_icon_dist_default","hasRipple","onLogoutSuccess","SocialAuthButton","onSocialLoginSuccess","googleOauthResponse","setState","requestedLoginAuth","onSocialLoginFailure","console","onSocialLogoutSuccess","requestedLogoutAuth","auth","social_auth_logout_button_SocialAuthLogoutButton","social_auth_login_button_SocialAuthLoginButton","InputFieldType","SocialAuthButtonContainer","withRouter","connect","store","dispatch","LandingPage","formFactoryProps","onStaffLoginClick","history","push","styles","primaryPageContent","headlineContent","react_typography_dist","headlineText","headlineSubText","loginActionsContainer","divider","sideNoteContent","href","target","LandingPageContainer","FormInputField","formik_esm","name","fieldName","field","form","react_text_field_dist_default","label","onTrailingIconSelect","trailingIcon","role","react_text_field_dist","assign","TEXT","inputType","autoFocus","ActionButtonType","FormBaseFieldMeta","model","formField","isDynamic","dynamicLimit","getInstanceDataFromFormikValues","values","isArray","alert","map","instanceData","FormInputFieldMeta","_FormBaseFieldMeta","FormActionButtonProps","text","FormFactory","initialInstance","validationSchema","onSubmit","setSubmitting","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","formFieldPropsList","Symbol","iterator","done","fieldProps","getInstance","err","return","createInstanceTriggerAction","updateInstanceTriggerAction","instance","enforcedInstanceData","onSubmitSuccess","initialValues","schema","isSubmitting","submitForm","formFieldMeta","index","formikValues","onSaveKeystroke","actionButtonPropsList","actionButtonProps","BUTTON","children","LoginForm","PASSWORD","SUBMIT","onCancel","onSubmitLoginForm","asyncToGenerator","mark","_x","_x2","required","form_factory_FormFactory","LocalLoginPage","onLoginFormCancel","goBack","onLoginFormSubmit","local_login_form_LoginForm","LocalLoginPageContainer","Utilities","rawText","toLowerCase","trim","CompanyListItem","react_card_dist_default","event","company","react_card_dist","bundle_default","duration","width","react_list_dist_default","nonInteractive","applications","application","react_list_dist","primaryText","position_title","UserAppPage","searchText","isFiltering","filteredCompanyList","onCompanyClick","setTimeout","searchFieldTextIsEmpty","normalizeText","filterCompanyByName","filteringName","allCompanies","collection","filter","includes","onSearchFieldChange","currentTarget","onSearchFieldKeyDown","onSearchFieldClear","displayingCompanies","from","userAppPageHeader","searchField","outlined","leadingIcon","onKeyDown","onChange","userAppPageContent","company_list_item_CompanyListItem","user_company","UserAppPageContainer","RestApiReduxFactory","initialObjectInstance","crudKeywords","ObjectRestApiRedux","_loop","crudKeyword","_crudKeywords","_i","_i2","_Object$values","actionTypeName","action","toUpperCase","TRIGGERED","objectClassInstance","successCallback","failureCallback","finalCallback","formData","jsonResponse","triggerFormData","newState","lastChangedObjectID","results","sagaHandler","triggerAction","put","status","saga","objectTriggerActionChannel","objectTriggerAction","actionChannel","take","initialState","sagas","actions","storeReducer","objectStore","objectAction","split","newObject","defineProperty","resObjectList","newObjects","object","targetDeleteObject","omit","Address","_BaseModel","_ref$place_name","place_name","_ref$country","country","_ref$state","_ref$city","city","_ref$street","street","_ref$full_address","full_address","_ref$zipcode","zipcode","max","Link","_ref$text","_ref$user","user","_ref$url","url","_ref$order","order","default","when","is","Company","_ref$labels","labels","_ref$name","_ref$hq_location","hq_location","_ref$home_page","home_page","_ref$ratings","ratings","_ref$applications","CompanyRestApiRedux","CompanyActions","CompanyReducer","CompanySagas","FormBaseDynamicFieldControlls","react_icon_button_dist_default","formikArrayHelpers","remove","BaseDynamicFieldAddButton","withFormBaseField","FormFieldComponent","form_base_field_FormBaseDynamicFieldControlls","form_base_field_BaseDynamicFieldAddButton","FormLinkField","FormLinkFieldComponent","textInputFieldMeta","urlInputFieldMeta","form_input_field_FormInputField","FormLinkFieldMeta","FormAddressField","FormAddressFieldComponent","fullAddressInputFieldMeta","placeNameInputFieldMeta","FormAddressFieldMeta","CompanyFormComponent","createCompany","updateCompany","CompanyFormComponentContainer","companyFormData","AddComPage","match","newCompany","replace","AddComPageContainer","Application","_ref$user_company","_ref$position_title","_ref$job_description_","job_description_page","_ref$job_source","job_source","_ref$notes","notes","ApplicationRestApiRedux","ApplicationActions","ApplicationReducer","ApplicationSagas","ApplicationStatus","_ref$application","_ref$applicationstatu","applicationstatuslink_set","_ref$date","date","localeNowDateString","now","Date","UTC","getUTCFullYear","getUTCMonth","getDate","toISOString","ApplicationStatusRestApiRedux","ApplicationStatusActions","ApplicationStatusReducer","ApplicationStatusSagas","ApplicationStatusLink","_ref$application_stat","application_status","_ref$link","link","FormApplicationStatusLinkField","FormApplicationStatusLinkFieldComponent","linkFieldProps","FormApplicationStatusLinkFieldMeta","ApplicationStatusFormComponent","DATE","applicationStatus","createApplicationStatus","updateApplicationStatus","ApplicationStatusFormComponentContainer","applicationStatusStore","applicationStatusFormData","ApplicationStatusComponent","isFormOpened","renderDisplay","deleteApplicationStatus","applicationStatusLink","renderFormController","isOnlyForm","ApplicationStatusComponentContainer","applicationStatusToDelete","callback","FormRichTextField","ckeditor_default","editor","BalloonEditor","setFieldValue","getData","FormRichTextFieldMeta","ApplicationFormComponent","createApplication","updateApplication","ApplicationFormComponentContainer","applicationStore","applicationFormData","ApplicationComponent","renderApplicationFormController","renderApplicationDisplay","applicationStatusList","isLink","disableApplicationActionButtons","deleteApplication","ApplicationComponentController","applicationToDelete","CompanyComponent","actionButtonsDisabled","onEditIconClicked","onDeleteIconClicked","UserComAppPage","goBackToCompanyListPage","onCompanyDelete","companyStore","deleteCompany","onCompanyEdit","_","company_component_CompanyComponent","renderPage","renderController","UserComAppPageContainer","companyToDelete","companyToUpdate","UserInfo","toString","LocalLogoutButton","UserProfilePage","localLogoutButton","user_info_UserInfo","local_logout_button_LocalLogoutButton","UserProfilePageContainer","publicPageSet","Set","PageRoutes","goHome","location","pathname","goInternal","search","nextUrl","URLSearchParams","isCurrentPublicPage","has","react_router","to","path","exact","component","react_top_app_bar_dist_default","react_top_app_bar_dist","align","navIcon","tabIndex","react_router_dom","style","height","borderRadius","src","react_linear_progress_dist_default","indeterminate","buffer","bufferingDots","TransitionGroup","CSSTransition","classNames","timeout","PageRoutesContainer","App","retrieveLoginAuth","Boolean","window","hostname","RootActionNames","initialAuthState","authReducer","authStore","authAction","setItem","resetAllStoreAction","ResetAllStore","authLoginSagaHandler","authLoginSaga","authLogoutSagaHandler","authLogoutSaga","requestedLoginAuthAction","_requestedLoginAuthAc","warn","_marked","takeEvery","_marked2","requestedLogoutAuthAction","_marked3","_context4","_marked4","sagaMiddleware","createSagaMiddleware","rootSaga","all","toConsumableArray","createBrowserHistory","basename","createStore","rootState","rootStateChecked","router","connectRouter","compose","applyMiddleware","routerMiddleware","run","ReactDOM","es","esm","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a3e5ef4c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"applicationCard\":\"application-component_applicationCard__3GD6f\",\"applicationCardContent\":\"application-component_applicationCardContent__3DGDq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"companyTitleContainer\":\"company-component_companyTitleContainer__2em7z\",\"companyTitleCaption\":\"company-component_companyTitleCaption__1SZ8j\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TextField\":\"form-input-field_TextField__3eN8D\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"UserCompanyPage\":\"user-com-app-page_UserCompanyPage__3XW94\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"topAppBarTitle\":\"page-routes_topAppBarTitle__3oyst\"};","import { Action } from \"redux\";\n\nimport { RequestStatus } from \"../../utils/rest-api\";\n\n/**\n * Store Types\n */\n\n// complete store type\nexport interface IUpdateAuthState {\n    requestStatus: RequestStatus\n    isLogin: boolean\n    isLocal: boolean\n    userName: string\n    socialAuthToken: string\n    apiToken: string\n    expireDateTime: string\n    avatarUrl: string\n}\n\nexport enum RequestedLoginMode {\n    PREFILL = \"prefill\",\n    SOCIAL_AUTH = \"social_auth\",\n    LOCAL = \"local\"\n}\n\n// async partial store types\nexport interface IRequestedLoginAuthState {\n    requestStatus: RequestStatus\n}\n\nexport interface IRequestedLogoutAuthState {\n    requestStatus: RequestStatus\n}\n\nexport interface ISuccessAuthState {\n    requestStatus: RequestStatus\n    isLogin: boolean\n    isLocal: boolean\n    userName: string\n    expireDateTime: string\n    apiToken: string\n    avatarUrl: string\n}\n\nexport interface IFailureAuthState {\n    requestStatus: RequestStatus,\n    error: any\n}\n\n// add more state types for this reducer - auth reducer\n// ...\n\n\n\n\n\n/**\n * Action Types\n */\n\nexport enum AuthActionNames {\n    UPDATE_AUTH = \"Update auth\",\n    REQUESTED_LOGIN_AUTH = \"Requested login auth\",\n    REQUESTED_LOGOUT_AUTH = \"Requested logout auth\",\n    SUCCESS_AUTH = \"Success auth\",\n    FAILURE_AUTH = \"Failure auth\",\n\n    // 1. add more action for this reducer - auth reducer\n    // 2. write the type interface for the action below\n    // ...\n}\n\nexport interface IUpdateAuthAction extends Action<AuthActionNames.UPDATE_AUTH> {\n    type: typeof AuthActionNames.UPDATE_AUTH;\n    payload: IUpdateAuthState;\n}\n\nexport interface RequestedLoginAuthActionParams {\n    username?: string,\n    password?: string,\n    socialAuthToken?: string\n}\n\nexport interface IRequestedLoginAuthAction extends Action<AuthActionNames.REQUESTED_LOGIN_AUTH> {\n    type: typeof AuthActionNames.REQUESTED_LOGIN_AUTH;\n    loginMode: RequestedLoginMode;\n    params?: RequestedLoginAuthActionParams;\n    payload: IRequestedLoginAuthState;\n    onCompleteCallback?: () => void\n}\n\nexport interface IRequestedLogoutAuthAction extends Action<AuthActionNames.REQUESTED_LOGOUT_AUTH> {\n    type: typeof AuthActionNames.REQUESTED_LOGOUT_AUTH;\n    payload: IRequestedLogoutAuthState;\n}\n\nexport interface ISuccessAuthAction extends Action<AuthActionNames.SUCCESS_AUTH> {\n    type: typeof AuthActionNames.SUCCESS_AUTH;\n    payload: ISuccessAuthState;\n}\n\nexport interface IFailureAuthAction extends Action<AuthActionNames.FAILURE_AUTH> {\n    type: typeof AuthActionNames.FAILURE_AUTH;\n    payload: IFailureAuthState;\n}\n\n// use union | ... | ... to add more action types\nexport type TAuthActions = IUpdateAuthAction | IRequestedLoginAuthAction | IRequestedLogoutAuthAction | ISuccessAuthAction | IFailureAuthAction","import React from \"react\";\nimport { TObject, IObjectBase } from \"../store/rest-api-redux-factory\";\nimport { BaseModel } from \"../store/data-model/base-model\";\nimport { AuthenticationService } from \"./authentication\";\n\nexport enum RequestStatus {\n    TRIGGERED = \"triggered\",\n    REQUESTING = \"requesting\",\n    SUCCESS = \"success\",\n    FAILURE = \"failre\"\n}\n\nexport enum CrudType {\n    CREATE = \"create\",\n    READ = \"read\",\n    LIST = \"list\",\n    UPDATE = \"update\",\n    DELETE = \"delete\"\n}\n\nexport enum RestMethod {\n    POST = \"post\",\n    GET = \"get\",\n    PATCH = \"patch\",\n    DELETE = \"delete\"\n}\n\nexport const CrudMapToRest = (crudType: CrudType): RestMethod => {\n    switch (crudType) {\n        case CrudType.CREATE:\n            return RestMethod.POST;\n        case CrudType.READ:\n            return RestMethod.GET;\n        case CrudType.LIST:\n            return RestMethod.GET;\n        case CrudType.UPDATE:\n            return RestMethod.PATCH;\n        case CrudType.DELETE:\n            return RestMethod.DELETE;\n\n        default:\n            return RestMethod.GET;\n    }\n};\n\nexport interface IRequestParams<Schema> {\n    endpointUrl?: string;\n    absoluteUrl?: string;\n    objectName?: string;\n    data?: TObject<Schema> | Array<TObject<Schema>>;\n}\n\nexport interface IListRestApiResponse<Schema> {\n    count: number;\n    next: any;\n    previous: any;\n    results: Array<TObject<Schema>>;\n}\n\nexport type ISingleRestApiResponse<Schema> = TObject<Schema>;\n\nexport function IsSingleRestApiResponseTypeGuard<Schema>(\n    response: ISingleRestApiResponse<Schema> | IListRestApiResponse<Schema>\n): response is ISingleRestApiResponse<Schema> {\n    return (<ISingleRestApiResponse<Schema>>response).uuid !== undefined;\n}\n\nfunction IsSingleFormDataTypeGuard<Schema>(\n    formData: TObject<Schema> | Array<TObject<Schema>>\n): formData is TObject<Schema> {\n    return (<TObject<Schema>>formData).uuid !== undefined;\n}\n\nexport class RestApi {\n    state = {\n        clientID: `732988498848-vuhd6g61bnlqe372i3l5pbpnerteu6na.apps.googleusercontent.com`,\n        code: ``,\n        redirectUri: `postmessage`,\n        apiBaseUrl: (process.env.NODE_ENV === 'development') ? \n        `http://localhost:8000/api/`\n        :\n        `https://appl-tracky.api.shaungc.com/api/`\n        ,\n        socialAuthProvider: `google-oauth2`,\n\n        userEmail: ``,\n        userFirstName: ``,\n        userLastName: ``,\n\n        objectID: ``\n    };\n\n    get = <Schema>({ endpointUrl, absoluteUrl, objectName, data }: IRequestParams<Schema>) => {\n        return fetch(\n            this.getRelativeUrl({\n                endpointUrl,\n                absoluteUrl,\n                objectName,\n                data\n            }),\n            {\n                method: \"GET\",\n                ...this.setApiAuthHeaders()\n            }\n        ).then(res => res.json());\n    };\n\n    post = <Schema>({ data, objectName, endpointUrl }: IRequestParams<Schema>) => {\n        process.env.NODE_ENV === 'development' && console.log(`restapi:post fired`);\n        return fetch(\n            this.getRelativeUrl({\n                endpointUrl,\n                objectName,\n                data\n            }),\n            {\n                method: \"POST\",\n                ...this.setApiAuthHeaders(),\n                body: JSON.stringify(data)\n            }\n        ).then(res => res.json());\n        // let caller handle error in their own .catch()\n    };\n\n    patch = <Schema>({ data, objectName, endpointUrl }: IRequestParams<Schema>) => {\n        return fetch(\n            this.getRelativeUrl({\n                endpointUrl,\n                objectName,\n                data\n            }),\n            {\n                method: \"PATCH\",\n                ...this.setApiAuthHeaders(),\n                body: JSON.stringify(data)\n            }\n        ).then(res => res.json());\n    };\n\n    delete = <Schema>({ data, objectName, endpointUrl }: IRequestParams<Schema>) => {\n        return fetch(\n            this.getRelativeUrl({\n                endpointUrl,\n                objectName,\n                data\n            }),\n            {\n                method: \"DELETE\",\n                ...this.setApiAuthHeaders(),\n                body: JSON.stringify(data)\n            }\n        );\n    };\n\n    /** helper */\n    private getRelativeUrl = <Schema>({\n        objectName,\n        data,\n        endpointUrl,\n        absoluteUrl,\n    }: IRequestParams<Schema>) => {\n        let url = \"\";\n        if (absoluteUrl) {\n            url = absoluteUrl;\n        }\n        else if (endpointUrl) {\n            url = `${this.state.apiBaseUrl}${endpointUrl}`;\n        } else {\n            if (data && IsSingleFormDataTypeGuard(data) && data.uuid) {\n                url = `${this.state.apiBaseUrl}${objectName}/${data.uuid}/`;\n            } else {\n                url = `${this.state.apiBaseUrl}${objectName}/`;\n            }\n        }\n        process.env.NODE_ENV === 'development' && console.log(`restapi: url: ${url}, objname=${objectName}`);\n        return url;\n    };\n\n    private setApiAuthHeaders = (): RequestInit => {\n\n        process.env.NODE_ENV === 'development' && console.log(\"api: set header: got credentials?\", AuthenticationService.apiCallToken);\n        return {\n            mode: \"cors\",\n            credentials: AuthenticationService.apiCallToken ? \"include\" : \"omit\",\n            headers: {\n                Authorization: AuthenticationService.apiCallToken\n                    ? `JWT ${AuthenticationService.apiCallToken}`\n                    : ``,\n                \"Content-Type\": \"application/json\"\n            }\n        };\n    };\n}\n\n/** create restapi singleton */\nexport const RestApiService = new RestApi();\n","import * as Yup from \"yup\";\n\nexport type IRelationship = string;\n\nexport interface IBaseModelProps {\n    uuid?: IRelationship\n    created_at?: string\n    modified_at?: string\n}\n\nexport class BaseModel {\n    uuid: string\n    created_at: string\n    modified_at: string\n    \n    constructor({\n        uuid = \"\",\n        created_at = \"\",\n        modified_at = \"\",\n    }: IBaseModelProps) {\n        this.uuid = uuid;\n        this.created_at = created_at;\n        this.modified_at = modified_at;\n    }\n\n    static schema() {\n        return Yup.object<BaseModel>().shape({});\n    }\n}\n\n// for newing model class instance and access base class's assets\nexport type DataModelInstance<Model = BaseModel> = Model & BaseModel\n\nexport type DataModelClass<DataModel = any> = DataModelInstance<DataModel> & (new (props: any) => DataModel)","import { RestApiService } from \"./rest-api\";\nimport { BaseModel, IBaseModelProps } from \"../store/data-model/base-model\";\n\nimport { RequestedLoginMode, RequestedLoginAuthActionParams } from \"../store/auth/types\";\n\nexport interface ILoginObjectProps {\n    code?: string;\n    provider?: string;\n    redirect_uri?: string;\n}\n\nexport interface IRefreshObjectProps {\n    token: string;\n}\n\nclass RefreshObject extends BaseModel {\n    token: string;\n\n    constructor({\n        token = \"\",\n        ...args\n    }: IRefreshObjectProps & IBaseModelProps) {\n        super(args);\n        this.token = token;\n    }\n}\n\nclass LoginObject extends BaseModel {\n    code: string;\n    provider: string;\n    redirect_uri: string;\n\n    constructor({\n        code = \"\",\n        provider = \"\",\n        redirect_uri = \"\",\n        ...args\n    }: ILoginObjectProps & IBaseModelProps) {\n        super(args);\n        this.code = code;\n        this.provider = provider;\n        this.redirect_uri = redirect_uri;\n    }\n}\n\nclass Authentication {\n    state = {\n        clientID: `732988498848-vuhd6g61bnlqe372i3l5pbpnerteu6na.apps.googleusercontent.com`,\n        redirectUri: `postmessage`,\n        apiSocialLoginUrl: `login/social/`,\n        apiLocalLoginUrl: `api-token-auth/`,\n        apiLoginRefreshUrl: `api-token-refresh/`,\n        socialAuthProvider: `google-oauth2`,\n\n        apiLoginToken: ``,\n    };\n\n    serverLogin = async (loginMode: RequestedLoginMode, params: RequestedLoginAuthActionParams) => {\n        // prefill login\n        if (loginMode === RequestedLoginMode.PREFILL) {\n            // restore session login data\n            const sessionAuthState = localStorage.getItem(`${(process.env.NODE_ENV === \"development\") ? \"dev__\" : \"\"}applyTracky__authState`)\n                ? JSON.parse(localStorage.getItem(`${(process.env.NODE_ENV === \"development\") ? \"dev__\" : \"\"}applyTracky__authState`) || \"{}\")\n                : {};\n\n            if (sessionAuthState.isLogin) {\n                this.apiCallToken = sessionAuthState.apiToken;\n\n                try {\n                    const refreshTokenReponse = await this.refreshToken();\n\n                    return {\n                        email: sessionAuthState.userName,\n                        token: refreshTokenReponse.token,\n                        avatar_url: sessionAuthState.avatarUrl,\n                        isLocal: sessionAuthState.isLocal\n                    };\n                } catch (error) {\n                    // catch: refresh failed or data-fetching failed\n                    process.env.NODE_ENV === \"development\" &&\n                        console.error(\n                            `Error after refreshing token in Authentication service: ${error}`\n                        );\n                }\n            }\n            \n            // in case cannot restore login session,\n            // will let saga dispatch logout to reset authState in session storage\n            return {};\n        }\n\n        // social auth login\n        else if (loginMode === RequestedLoginMode.SOCIAL_AUTH) {\n            const loginObject = new LoginObject({\n                code: params.socialAuthToken,\n                provider: this.state.socialAuthProvider,\n                redirect_uri: this.state.redirectUri\n            });\n    \n            try {\n                const resp = await RestApiService.post<LoginObject>({\n                    data: loginObject,\n                    endpointUrl: this.state.apiSocialLoginUrl\n                });\n    \n                this.apiCallToken = resp.token;\n                return {\n                    ...resp,\n                    isLocal: false\n                };\n            }\n            catch (error) {\n                throw Error(error);\n            }\n        }\n\n        // local login\n        else if (loginMode === RequestedLoginMode.LOCAL) {\n            // post login form data to get login token\n            try {\n                const res = await fetch(`${RestApiService.state.apiBaseUrl}${this.state.apiLocalLoginUrl}`, {\n                    method: \"POST\",\n                    mode: \"cors\",\n                    credentials: \"omit\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    },\n                    body: JSON.stringify({\n                        username: params.username, password: params.password\n                    })\n                });\n    \n                if (!res.ok) {\n                    process.env.NODE_ENV === 'development' && console.log(\"INFO: server res =\", res);\n                    throw Error(res.statusText)\n                }\n    \n                const parsedJsonResponse = await res.json();\n                \n                this.apiCallToken = parsedJsonResponse.token;\n    \n                return {\n                    email: params.username,\n                    token: parsedJsonResponse.token,\n                    avatar_url: parsedJsonResponse.avatar_url,\n                    isLocal: true\n                }\n            }\n            catch (error) {\n                throw Error(error)\n            }\n        }\n    };\n\n    get apiCallToken() {\n        return this.state.apiLoginToken;\n    }\n\n    set apiCallToken(token) {\n        this.state.apiLoginToken = token;\n    }\n\n    refreshToken = async () => {\n        const refreshObject = new RefreshObject({\n            token: this.apiCallToken\n        });\n        try {\n            const resp = await RestApiService.post<RefreshObject>({\n                data: refreshObject,\n                endpointUrl: this.state.apiLoginRefreshUrl\n            });\n\n            this.apiCallToken = resp.token;\n\n            return resp;\n        } catch (error) {\n            throw Error(error);\n        }\n    };\n\n    serverLogout = async () => {\n        process.env.NODE_ENV === \"development\" &&\n            console.log(\"server logout...\");\n        \n        // no server-side invalidate implement at this point (a common case for JWT, however)\n\n        this.apiCallToken = \"\";\n        \n        // will let saga dispatch logout to reset authState in session storage\n        \n        return;\n    };\n}\n\nexport const AuthenticationService = new Authentication();\n","import {\n    /** state types */\n    IUpdateAuthState,\n    RequestedLoginMode,\n    /** action types */\n    IUpdateAuthAction,\n    IRequestedLoginAuthAction,\n    RequestedLoginAuthActionParams,\n    IRequestedLogoutAuthAction,\n    ISuccessAuthAction,\n    IFailureAuthAction,\n    /** action names */\n    AuthActionNames,\n} from \"./types\";\n\nimport { RequestStatus } from \"../../utils/rest-api\";\n\nexport const UpdateAuth = (newAuthState: IUpdateAuthState): IUpdateAuthAction => {\n    return {\n        type: AuthActionNames.UPDATE_AUTH,\n        payload: newAuthState\n    };\n};\n\nexport const RequestedLoginAuth = (loginMode: RequestedLoginMode, params?: RequestedLoginAuthActionParams, onCompleteCallback?: () => void): IRequestedLoginAuthAction => {\n    return {\n        type: AuthActionNames.REQUESTED_LOGIN_AUTH,\n        loginMode,\n        params,\n        payload: {\n            requestStatus: RequestStatus.REQUESTING,\n        },\n        onCompleteCallback\n    };\n};\n\nexport const RequestedLogoutAuth = (): IRequestedLogoutAuthAction => {\n    return {\n        type: AuthActionNames.REQUESTED_LOGOUT_AUTH,\n        payload: {\n            requestStatus: RequestStatus.REQUESTING,\n        }\n    };\n};\n\nexport const SuccessLoginAuth = (userName: string, expireDateTime: string, apiToken: string, avatarUrl: string, isLocal: boolean): ISuccessAuthAction => {\n    process.env.NODE_ENV === 'development' && console.log(\"action username:\", userName);\n\n    return {\n        type: AuthActionNames.SUCCESS_AUTH,\n        payload: {\n            requestStatus: RequestStatus.SUCCESS,\n            isLogin: true,\n            isLocal: isLocal ? true : false,\n            userName,\n            expireDateTime,\n            apiToken,\n            avatarUrl\n        }\n    };\n};\n\nexport const SuccessLogoutAuth = (): ISuccessAuthAction => {\n    return {\n        type: AuthActionNames.SUCCESS_AUTH,\n        payload: {\n            requestStatus: RequestStatus.SUCCESS,\n            isLogin: false,\n            isLocal: false,\n            userName: \"\",\n            expireDateTime: \"\",\n            apiToken: \"\",\n            avatarUrl: \"\",\n        }\n    };\n};\n\nexport const FailureAuth = (error: any): IFailureAuthAction => {\n    return {\n        type: AuthActionNames.FAILURE_AUTH,\n        payload: {\n            requestStatus: RequestStatus.FAILURE,\n            error\n        }\n    };\n};\n\n// write new actions here for this reducer - auth reducer\n// ...\n","import React, { Component } from \"react\";\n\n/** Components */\nimport { GoogleLogin } from \"react-google-login\";\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n// font awesome\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faGoogle } from '@fortawesome/free-brands-svg-icons'\n\ninterface ISocialAuthLoginButtonProps {\n    clientID: string;\n    redirectUri?: string;\n    onSuccess(authResponse?: any): void;\n    onFailure?(error: any): void;\n    disabled?: boolean;\n}\n\nexport class SocialAuthLoginButton extends Component<\n    ISocialAuthLoginButtonProps\n> {\n    onLoginButtonClicked = (clickEvent: any, renderProps: any) => {\n        process.env.NODE_ENV === 'development' && console.log(\"login button clicked\", clickEvent, renderProps);\n        renderProps.onClick(clickEvent);\n    };\n\n    onAuthSuccess = (authResponse?: any) => {\n        process.env.NODE_ENV === 'development' && console.log(\"login button auth success\");\n        this.props.onSuccess(authResponse);\n    };\n\n    onAuthFailure = (error: any) => {\n        process.env.NODE_ENV === 'development' && console.log(\"login button auth failed\");\n        if (this.props.onFailure) {\n            this.props.onFailure(error);\n        }\n    };\n\n    render() {\n        return (\n            <div className=\"UserAuthButton\">\n                <GoogleLogin\n                    render={(renderProps: any) => (\n                        <Button\n                            onClick={clickEvent =>\n                                this.onLoginButtonClicked(\n                                    clickEvent,\n                                    renderProps\n                                )\n                            }\n                            unelevated\n                            icon={\n                                // <MaterialIcon hasRipple icon=\"account_circle\" />\n                                <FontAwesomeIcon icon={faGoogle} />\n                            }\n                            disabled={this.props.disabled}\n                        >\n                            Google Login\n                        </Button>\n                    )}\n                    onSuccess={this.onAuthSuccess}\n                    onFailure={this.onAuthFailure}\n                    clientId={this.props.clientID}\n                    responseType=\"code\"\n                    redirectUri={this.props.redirectUri || \"postmessage\"}\n                    // cookiePolicy={'single_host_origin'}\n                    // hostedDomain=\"https://appl-tracky.shaungc.com\"\n                />\n            </div>\n        );\n    }\n}\n","import React, { Component } from \"react\";\n\nimport { AuthenticationService } from \"../../utils/authentication\";\n\n/** Components */\nimport { GoogleLogout } from \"react-google-login\";\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n\n\ninterface ISocialAuthLogoutButtonProps {\n    onSuccess(authResponse?: any): void;\n    onClick: () => void\n    disabled?: boolean\n}\n\nexport class SocialAuthLogoutButton extends Component<\n    ISocialAuthLogoutButtonProps\n> {\n    onAuthSuccess = (authResponse?: any) => {\n        this.props.onSuccess(authResponse);\n    };\n\n    render() {\n        return (\n            <div className=\"UserAuthButton\">\n                <GoogleLogout\n                    clientId={AuthenticationService.state.clientID}\n                    render={(renderProps: any) => (\n                        <Button\n                            onClick={this.props.onClick}\n                            unelevated\n                            icon={<MaterialIcon hasRipple icon=\"eject\" />}\n                            disabled={this.props.disabled}\n                        >\n                            Logout\n                        </Button>\n                    )}\n                    onLogoutSuccess={this.onAuthSuccess}\n                />\n            </div>\n        );\n    }\n}\n","import React, { Component } from \"react\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\n\n/** Redux */\nimport { Dispatch } from \"redux\";\nimport { connect } from \"react-redux\";\nimport { IRootState } from \"../../store/types\";\nimport { IUpdateAuthAction, IRequestedLoginAuthAction, TAuthActions, IUpdateAuthState, RequestedLoginMode } from \"../../store/auth/types\";\nimport { UpdateAuth, RequestedLoginAuth, RequestedLogoutAuth } from \"../../store/auth/actions\";\n\n/** rest api */\nimport { RequestStatus } from \"../../utils/rest-api\";\n\n/** Components */\nimport { SocialAuthLoginButton } from \"./social-auth-login-button\";\nimport { SocialAuthLogoutButton } from \"./social-auth-logout-button\";\n\ninterface ISocialAuthButtonProps extends RouteComponentProps {\n    auth: IUpdateAuthState;\n    requestedLoginAuth: (socialAuthToken: string) => void;\n    requestedLogoutAuth: () => void;\n}\n\nclass SocialAuthButton extends Component<\n    ISocialAuthButtonProps\n> {\n    state = {\n        clientID: `732988498848-vuhd6g61bnlqe372i3l5pbpnerteu6na.apps.googleusercontent.com`,\n        \n        code: ``, // get `code` from social login button, then obtain token from django server\n        apiLoginToken: ``,\n\n        userEmail: ``,\n        userFirstName: ``,\n        userLastName: ``,\n\n        objectID: ``\n    };\n\n    onSocialLoginSuccess = (googleOauthResponse: any) => {\n        process.env.NODE_ENV === 'development' && console.log(\"Google Oauth2 res:\", googleOauthResponse);\n        this.setState(\n            {\n                code: googleOauthResponse.code\n            },\n            () => {\n                // this.apiLogin();\n                process.env.NODE_ENV === 'development' && console.log(\"social button: request auth...\");\n                this.props.requestedLoginAuth(this.state.code);\n            }\n        );\n    };\n\n    onSocialLoginFailure = (error: any) => {\n        console.error(\"Social login failed:\", error);\n    };\n\n    onSocialLogoutSuccess = () => {\n        process.env.NODE_ENV === 'development' && console.log(\"Social logout success, now our web app logout\");\n        this.props.requestedLogoutAuth();\n    };\n\n    render() {\n        return (\n            <div className=\"SocialAuth\">\n                {!this.props.auth.isLogin ? (\n                    <SocialAuthLoginButton\n                        clientID={this.state.clientID}\n                        onSuccess={this.onSocialLoginSuccess}\n                        onFailure={this.onSocialLoginFailure}\n                        disabled={this.props.auth.requestStatus === RequestStatus.REQUESTING}\n                    />\n                ) : (\n                    <SocialAuthLogoutButton\n                        onSuccess={this.onSocialLogoutSuccess}\n                        onClick={this.onSocialLogoutSuccess}\n                        // TODO: logout - ideally no need to wait for request status, just interrupt existing requests\n                        // However, we'll have to cancel those ongoing sagas for data fetching\n                        // disabled={this.props.auth.requestStatus === RequestStatus.REQUESTING}\n                    />\n                )}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => {\n    return {\n        auth: store.auth\n    };\n};\n\nfunction mapDispatchToProps(dispatch: Dispatch<TAuthActions>) {\n    return {\n        requestedLoginAuth: (socialAuthToken: string) => {\n            dispatch(\n                RequestedLoginAuth(RequestedLoginMode.SOCIAL_AUTH, {\n                    socialAuthToken\n                })\n            );\n        },\n        requestedLogoutAuth: () => {\n            dispatch(\n                RequestedLogoutAuth()\n            );\n        }\n    };\n}\n\nexport const SocialAuthButtonContainer = withRouter(connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(SocialAuthButton));\n","import React from \"react\";\nimport { FormikValues } from \"formik\";\nimport { DataModelClass } from \"../../../store/data-model/base-model\";\nimport { FormInputField } from \"../form-input-field/form-input-field\";\n\nexport enum InputFieldType {\n    // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input\n    TEXT = \"text\",\n    PASSWORD = \"password\",\n    EMAIL = \"email\",\n    URL = \"url\",\n    DATE = \"date\"\n}\n\n// API for caller to new meta class\nexport interface IFieldBaseMetaProps {\n    fieldName: string\n    label: string;\n\n    isDynamic?: boolean;\n    dynamicLimit?: number;\n    getInstanceDataFromFormikValues?: (formikValues: FormikValues) => any // has to be optional since we want to let caller just use `fieldName` by default to access formik's values\n}\n\n// for form field props\nexport interface IFormBaseFieldProps extends IFieldBaseMetaProps {\n    model?: DataModelClass\n    formikValues?: FormikValues // for form field to load data (e.g. initial value) at a specific position in formik's `values`\n    // getInstanceDataFromFormikValues?: // when it's dynamic field, will use this to render dynamic fields\n    onSaveKeystroke?: () => void\n}\n\n// for the base meta class\ninterface IFormBaseFieldMeta extends IFieldBaseMetaProps {\n    model?: DataModelClass\n    formField?: React.ComponentType<IFormBaseFieldProps>\n\n    getInstance: (values: FormikValues) => any // for form factory to loop over fieldmeta and obtain field's data instance\n    getInstanceDataFromFormikValues: (formikValues: FormikValues) => any // required because getInstance() depends on it\n}\n\nexport class FormBaseFieldMeta implements IFormBaseFieldMeta {\n    fieldName: string\n    label: string\n\n    model?: DataModelClass\n    formField: React.ComponentType<IFormBaseFieldProps>\n\n    isDynamic?: boolean;\n    dynamicLimit?: number;\n    getInstanceDataFromFormikValues: (formikValues: FormikValues) => any\n\n    constructor(props: IFieldBaseMetaProps) {\n        this.fieldName = props.fieldName;\n        this.label = props.label;\n\n        this.isDynamic = props.isDynamic;\n        this.dynamicLimit = props.dynamicLimit;\n\n        if (props.getInstanceDataFromFormikValues) {\n            this.getInstanceDataFromFormikValues = props.getInstanceDataFromFormikValues;\n        }\n        else {\n            this.getInstanceDataFromFormikValues = (values: FormikValues) => {\n                if (!(values && values[this.fieldName])) {\n                    alert(\"Oops! Something might go wrong. Info: at class FormBaseFieldMeta.\")\n                    console.error(\"values =\", values, \" this.fieldName =\", this.fieldName);\n                    return (this.isDynamic) ? [] : \"\";\n                }\n                else {\n                    if (this.isDynamic && !Array.isArray(values[this.fieldName])) {\n                        alert(\"Oops! Something might go wrong. Info: at class FormBaseFieldMeta.\")\n                        console.error(\"isDynamic=true, but the value is not an array:\");\n                        console.error(\"values =\", values, \" this.fieldName =\", this.fieldName);\n                    }\n                    return values[this.fieldName];\n                }\n            }\n        }\n\n        this.formField = FormInputField;\n    }\n\n    getInstance(values: FormikValues) {\n        const model = this.model;\n        if (model) {\n            if (this.isDynamic) {\n\n                return this.getInstanceDataFromFormikValues(values).map((instanceData: any) => new model(instanceData))\n            }\n            else {\n                return new model(values[this.fieldName]);\n            }\n        }\n\n        // assume field values are plain string/num or other basic types\n        return values[this.fieldName];\n    }\n}","import React, { Component } from \"react\";\nimport { withRouter, RouteComponentProps, Redirect } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch, AnyAction } from \"redux\";\nimport { IRootState } from \"../../store/types\";\nimport { IUpdateAuthState } from \"../../store/auth/types\";\n\n/** Components */\nimport { SocialAuthButtonContainer } from \"../../components/login/social-auth-button\";\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n\nimport {\n    Body1,\n    Body2,\n    // Button,\n    Caption,\n    Headline1,\n    Headline2,\n    Headline3,\n    Headline4,\n    Headline5,\n    Headline6,\n    Overline,\n    Subtitle1,\n    Subtitle2,\n} from '@material/react-typography';\nimport '@material/react-typography/dist/typography.css';\n\nimport styles from './landing-page.module.css';\n\n\ninterface ILandingPageProps extends RouteComponentProps {\n    auth: IUpdateAuthState;\n}\n\n\nclass LandingPage extends Component<ILandingPageProps> {\n    formFactoryProps: any;\n\n    constructor(props: ILandingPageProps) {\n        super(props);\n    }\n\n    onStaffLoginClick = () => {\n        this.props.history.push(\"/local-login/\");\n    }\n\n    render() {\n        return (\n            <div className={styles.LandingPage} >\n                <div className={styles.primaryPageContent}>\n                    <div className={styles.headlineContent}>\n                        <Headline1 className={styles.headlineText}>Appl Tracky</Headline1>\n                        <Headline4 className={styles.headlineSubText}>Got crazy using speadsheet to keep track of your application progress? Try out Appl Tracky to ease your workflow!</Headline4>\n                        <Body1>\n                            Whether it is application for job, school program, scholarship or whatever process that lets you wait from a couple weeks to months, Appl Tracky has you covered. Keep track of every steps in the process, insert links, put down notes to get you more organized and prepared!\n                        </Body1>\n                    </div>\n\n                    <div className={styles.loginActionsContainer}>\n                        <Headline4>Sign up & login now to get organized</Headline4>\n                        <SocialAuthButtonContainer />\n                        <Body1>\n                            Just want to try things out and don't want to sign up yet? No problem, here's a guest account you can use:\n                        </Body1>\n                        <div>🦄 username: guest</div>\n                        <div>🦄 password: appltracky</div>\n                        <Button\n                            onClick={this.onStaffLoginClick}\n                            unelevated\n                            icon={\n                                <MaterialIcon hasRipple icon=\"account_circle\" />\n                            }\n                        >\n                            Sign in\n                    </Button>\n                    </div>\n\n                    <div className={styles.divider} />\n\n                    <div className={styles.sideNoteContent}>\n                        <Subtitle1>\n                            Take a look at the React code that fuels and powers all the goodies!\n                        </Subtitle1>\n                        <Button\n                            href=\"https://github.com/rivernews/appl-tracky-spa\"\n                            target=\"_blank\"\n                            unelevated\n                            icon={\n                                <MaterialIcon hasRipple icon=\"code\" />\n                            }\n                        >\n                            Github Repository\n                </Button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: IRootState) => ({\n    auth: state.auth\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>) => {\n    // actionName = (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {\n    };\n};\n\nexport const LandingPageContainer = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(LandingPage)\n);\n","import React, { Component } from \"react\";\n\n/** Components */\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\n// mdc-react input\nimport \"@material/react-text-field/dist/text-field.css\";\nimport TextField, { Input } from \"@material/react-text-field\";\n// formik\nimport {\n    Field, FieldProps,\n    ErrorMessage,\n} from \"formik\";\n// input field\nimport { IFormInputFieldProps } from \"./form-input-field-meta\";\nimport { InputFieldType } from \"../form-base-field/form-base-field-meta\";\n\nimport styles from \"./form-input-field.module.css\";\n\n\nexport class FormInputField extends Component<IFormInputFieldProps> {\n    render() {\n        return (\n            <div className=\"FormInputField\">\n                <Field\n                    name={this.props.fieldName}\n                    render={({ field, form }: FieldProps<number | string>) => (\n                        <TextField\n                            className={styles.TextField}\n                            label={this.props.label}\n                            onTrailingIconSelect={this.props.onTrailingIconSelect}\n                            trailingIcon={this.props.onTrailingIconSelect && <MaterialIcon role=\"button\" icon=\"clear\" />}\n                        >\n                            <Input\n                                type={this.props.type || InputFieldType.TEXT}\n                                inputType=\"input\"\n                                autoFocus={this.props.autoFocus}\n                                {...field}\n                            />\n                        </TextField>\n                    )}\n                />\n                <ErrorMessage name={this.props.fieldName} />\n            </div>\n        );\n    }\n}","import React, { Component } from \"react\";\n\n/** Components */\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n// data model\nimport { DataModelClass, DataModelInstance, BaseModel } from \"../../store/data-model/base-model\";\n// formik\nimport {\n    Formik,\n    Form,\n    FormikValues,\n    FormikErrors,\n    FormikTouched\n} from \"formik\";\n// yup\nimport * as Yup from 'yup';\n// base field\nimport { FormBaseFieldMeta } from \"./form-base-field/form-base-field-meta\";\n\nexport enum ActionButtonType {\n    SUBMIT = \"submit\",\n    BUTTON = \"button\"\n}\n\nexport class FormActionButtonProps {\n    constructor(\n        public text: string = \"\",\n        public onClick?: (event: any) => void,\n        public type?: ActionButtonType\n    ) { }\n}\n\nexport interface IFormFactoryProps<IDataModel> {\n    onSubmitSuccess?: () => void;\n\n    // pass in either `initialValues` or `initialInstance`, this is important for yup to render error message. If no initial info at all, yup will not display errors properly.\n    // `initialValues` should be used only for customize form; for data model forms please use `initialInstance` so update & create form can be handled together\n    initialValues?: any\n    initialInstance?: DataModelInstance<IDataModel>;\n    enforcedInstanceData?: any;\n\n    model?: DataModelClass;\n    actionButtonPropsList: Array<FormActionButtonProps>;\n    formFieldPropsList: Array<FormBaseFieldMeta>\n    \n    validationSchema?: Yup.Schema<IDataModel>\n\n    onSubmit?: (\n        values: FormikValues,\n        { setSubmitting }: { setSubmitting: Function }\n    ) => void;\n    \n    createInstanceTriggerAction?: (\n        instance: IDataModel,\n        successCallback?: Function,\n        finalCallback?: Function,\n    ) => void;\n    updateInstanceTriggerAction?: (\n        instance: IDataModel,\n        successCallback?: Function,\n        finalCallback?: Function,\n    ) => void;\n}\n\nexport class FormFactory<DataModel> extends Component<\n    IFormFactoryProps<DataModel>\n    > {\n\n    initialInstance?: DataModelInstance<any>;\n    validationSchema?: Yup.Schema<DataModel>;\n\n    constructor(props: IFormFactoryProps<DataModel>) {\n        super(props);\n\n        // guarantee this.initialInstance\n        if (this.props.model && !this.props.initialInstance) {\n            // for create form\n            const model = this.props.model;\n            this.initialInstance = new model({});\n        }\n        else {\n            // for update form\n            this.initialInstance = this.props.initialInstance;\n        }\n\n        // form behavior integrity check\n        if (!this.initialInstance) {\n            if (!this.props.initialValues || !this.props.onSubmit) {\n                throw Error(\"ERROR: form factory has no initialInstance - seems like you're building a custom form that does not use data model. Please pass in initialValues and onSubmit in props to handle the behavior manually.\");\n            }\n        }\n\n        this.validationSchema = this.props.validationSchema || this.props.model.schema;\n        process.env.NODE_ENV === 'development' && console.log(\"this.validationSchema =\", this.validationSchema);\n    }\n\n    onSubmit = (\n        values: FormikValues,\n        { setSubmitting }: { setSubmitting: Function }\n    ) => {\n        process.env.NODE_ENV === 'development' && console.log(\"submit values =\", values); setSubmitting(false);\n\n        setSubmitting(true);\n        let instanceData: any = {};\n        for (let fieldProps of this.props.formFieldPropsList) {\n            const keyName = fieldProps.fieldName;\n            instanceData[keyName] = fieldProps.getInstance(values);\n        }\n\n        // packaging\n        const model = this.props.model;\n        if (\n            model && this.props.createInstanceTriggerAction && this.props.updateInstanceTriggerAction &&\n            this.initialInstance\n        ) {\n            // a create / update form is assumed\n\n            const instance = new model({\n                uuid: this.initialInstance.uuid,\n                ...instanceData,\n                ...this.props.enforcedInstanceData\n            })\n            process.env.NODE_ENV === 'development' && console.log(\"instanceData =\", instanceData);\n            process.env.NODE_ENV === 'development' && console.log(\"instance =\", instance);\n\n            // dispatch API request\n            if (!instance.uuid) {\n                process.env.NODE_ENV === 'development' && console.log(\"ready to send create instance\");\n                this.props.createInstanceTriggerAction(instance, this.props.onSubmitSuccess, () => setSubmitting(false));\n            } else {\n                process.env.NODE_ENV === 'development' && console.log(\"ready to send update instance\");\n                this.props.updateInstanceTriggerAction(instance, this.props.onSubmitSuccess, () => setSubmitting(false));\n            }\n        }\n        else if (this.props.onSubmit) {\n            // if caller has customize onSubmit, then use it instead\n            this.props.onSubmit(values, { setSubmitting });\n        }\n        else {\n            process.env.NODE_ENV === 'development' && console.log(\"this.props.initialInstance =\", this.props.initialInstance);\n            process.env.NODE_ENV === 'development' && console.log(\"this.props.onSubmit =\", this.props.onSubmit);\n            process.env.NODE_ENV === 'development' && console.log(\"this.props.model =\", this.props.model);\n            alert(\"Something is wrong with the form...!\")\n            throw Error(\"ERROR: form factory props not properly configured. See above props.\")\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"FormFactory\">\n                <Formik\n                    initialValues={this.initialInstance || this.props.initialValues}\n                    validationSchema={this.validationSchema}\n                    onSubmit={this.onSubmit}\n                >\n                    {({\n                        values,\n                        isSubmitting,\n                        submitForm\n                    }) => (\n                            <Form>\n                                {this.props.formFieldPropsList.map((formFieldMeta: FormBaseFieldMeta, index: number) => (\n                                    <formFieldMeta.formField \n                                        key={index}\n                                        {...formFieldMeta}\n                                        formikValues={values}\n                                        onSaveKeystroke={submitForm}\n                                    />\n                                ) )}\n                                {this.props.actionButtonPropsList.map(\n                                    (actionButtonProps: FormActionButtonProps, index) => (\n                                        <Button\n                                            key={index}\n                                            type={actionButtonProps.type || ActionButtonType.BUTTON}\n                                            disabled={isSubmitting}\n                                            unelevated\n                                            onClick={actionButtonProps.onClick}\n                                            children={actionButtonProps.text}\n                                        />\n                                    )\n                                )}\n                            </Form>\n                        )}\n                </Formik>\n            </div>\n        );\n    }\n}\n","// base field\nimport { InputFieldType, FormBaseFieldMeta, IFormBaseFieldProps, IFieldBaseMetaProps } from \"../form-base-field/form-base-field-meta\";\n// input field\nimport { FormInputField } from \"./form-input-field\";\n\n\n// API for caller to new props for input field\nexport interface IFormInputFieldProps extends IFormBaseFieldProps {\n    type?: InputFieldType\n    onTrailingIconSelect?: () => void\n\n    autoFocus?: boolean\n}\n\n// for defining meta\nexport interface IFormInputFieldMetaProps extends IFieldBaseMetaProps {\n    type?: InputFieldType\n    onTrailingIconSelect?: () => void\n\n    autoFocus?: boolean\n}\n\nexport class FormInputFieldMeta extends FormBaseFieldMeta {\n    type?: InputFieldType\n    onTrailingIconSelect?: () => void\n\n    autoFocus?: boolean\n\n    constructor({\n        type,\n        onTrailingIconSelect,\n        autoFocus,\n        ...props\n    }: IFormInputFieldMetaProps) {\n        super(props)\n        this.type = type;\n        this.onTrailingIconSelect = onTrailingIconSelect;\n        this.autoFocus = autoFocus;\n\n        this.formField = FormInputField;\n    }\n}","import React from \"react\";\n\nimport { FormikValues } from \"formik\";\nimport { RestApiService } from \"../../utils/rest-api\";\nimport { AuthenticationService } from \"../../utils/authentication\";\nimport { FormBaseFieldMeta, InputFieldType } from \"../form-factory/form-base-field/form-base-field-meta\";\nimport { FormInputFieldMeta } from \"../form-factory/form-input-field/form-input-field-meta\";\nimport { FormActionButtonProps, ActionButtonType, FormFactory } from \"../form-factory/form-factory\";\n// yup\nimport * as Yup from 'yup';\n\ninterface ILoginFormProps {\n    onCancel: () => void\n    onSubmit: (values: FormikValues, setSubmitting: Function) => void\n}\n\nexport const LoginForm = (props: ILoginFormProps) => {\n\n    const formFieldPropsList: Array<FormBaseFieldMeta> = [\n        new FormInputFieldMeta({\n            fieldName: \"username\",\n            label: \"Username\",\n            autoFocus: true\n        }),\n        new FormInputFieldMeta({\n            fieldName: \"password\",\n            label: \"Password\",\n            type: InputFieldType.PASSWORD\n        }),\n    ];\n    const actionButtonPropsList: Array<FormActionButtonProps> = [\n        new FormActionButtonProps(\"Login\", undefined, ActionButtonType.SUBMIT),\n        new FormActionButtonProps(\"Cancel\", props.onCancel)\n    ];\n\n    const onSubmitLoginForm = async (\n        values: FormikValues,\n        { setSubmitting }: { setSubmitting: Function }\n    ) => {\n        setSubmitting(true);\n        process.env.NODE_ENV === 'development' && console.log(\"values =\", values);\n\n        props.onSubmit(values, setSubmitting);\n    };\n\n    // validation\n    const loginFormInitialValues = {\n        username: \"guest\",\n        password: \"appltracky\"\n    }\n    type ILoginFormShape = typeof loginFormInitialValues;\n    const validationSchema: Yup.Schema<ILoginFormShape> = Yup.object<ILoginFormShape>().shape({\n        username: Yup.string().required(\"Forgot to type username...?\"),\n        password: Yup.string().required(\"Password please...!\")\n    })\n\n\n    return (\n        <div className=\"loginForm\">\n            <FormFactory\n                initialValues={loginFormInitialValues}\n    \n                formFieldPropsList={formFieldPropsList}\n                actionButtonPropsList={actionButtonPropsList}\n\n                validationSchema={validationSchema}\n    \n                onSubmit={onSubmitLoginForm}\n            />\n        </div>\n    )\n}","import React, { Component } from \"react\";\nimport { withRouter, RouteComponentProps, Redirect } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch, AnyAction } from \"redux\";\nimport { IRootState } from \"../../store/types\";\nimport { IUpdateAuthState, RequestedLoginMode } from \"../../store/auth/types\";\nimport { RequestedLoginAuth } from \"../../store/auth/actions\";\nimport { FormikValues } from \"formik\";\n\n/** Components */\nimport { LoginForm } from \"../../components/login/local-login-form\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\n\n\ninterface ILocalLoginPageProps extends RouteComponentProps {\n    /** redux state */\n    auth: IUpdateAuthState;\n\n    /** dispatch action */\n    requestedLoginAuth: (username: string, password: string, onCompleteCallback: () => void) => void;\n}\n\nclass LocalLoginPage extends Component<ILocalLoginPageProps> {\n    onLoginFormCancel = () => {\n        this.props.history.goBack();\n    }\n\n    onLoginFormSubmit = (values: FormikValues, setSubmitting: Function) => {\n        this.props.requestedLoginAuth(values.username, values.password, () => {\n            setSubmitting(false);\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"LocalLoginPage\">\n                <h1>Login Portal for local sign in</h1>\n                <div>\n                    If you just want to try it out, you can use guest account:\n                    <div>\n                        username: guest\n                    </div>\n                    <div>\n                        password: appltracky\n                    </div>\n                </div>\n\n                <LoginForm\n                    onSubmit={this.onLoginFormSubmit}\n                    onCancel={this.onLoginFormCancel}\n                />\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    auth: store.auth\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>) => {\n    // actionName: (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {\n        requestedLoginAuth: (username: string, password: string, onCompleteCallback: () => void) => {\n            dispatch(\n                RequestedLoginAuth(RequestedLoginMode.LOCAL, {\n                    username, password\n                }, onCompleteCallback)\n            );\n        },\n    }\n};\n\nexport const LocalLoginPageContainer = withRouter(connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(LocalLoginPage));\n","class Utilities {\n    static normalizeText(rawText: string) {\n        return rawText.toLowerCase().trim()\n    }\n}\n\nexport {\n    Utilities\n};","import React, { Component } from \"react\";\n\n/** Redux & data models */\nimport { Company } from \"../../store/data-model/company\";\nimport { Application } from \"../../store/data-model/application\";\n\n/** Components */\nimport Card, { CardPrimaryContent } from \"@material/react-card\";\nimport '@material/react-card/dist/card.css';\nimport List, { ListItem, ListItemText } from \"@material/react-list\";\nimport '@material/react-list/dist/list.css';\n\nimport Skeleton from 'react-loading-skeleton';\n\ninterface ICompanyListItemProps {\n    company?: Company;\n    applications?: Array<Application>\n    onClick?: (uuid: string) => void\n}\n\nconst CompanyListItem = (props: ICompanyListItemProps) => {\n    const onClick = (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n        props.onClick && props.company && props.onClick(props.company.uuid);\n    }\n\n    return (<Card className=\"companyCard\" onClick={onClick}>\n    <CardPrimaryContent className=\"companyCardContent\">\n        <h1>{props.company ? props.company.name : <Skeleton duration={1.1} width={`50vmin`} />}</h1>\n        <List nonInteractive>\n            {\n                props.applications ? props.applications.map((application: Application) => (\n                    <ListItem key={application.uuid}>\n                        <ListItemText primaryText={application.position_title} />\n                    </ListItem>\n                )) : (\n                    <div className=\"skeletonGroup\">\n                        <div><Skeleton duration={1.1} width=\"40vmin\" /></div>\n                        <div><Skeleton duration={1.1} width=\"60vmin\" /></div>\n                        <div><Skeleton duration={1.1} width=\"50vmin\" /></div>\n                    </div>\n                )\n            }\n        </List>\n    </CardPrimaryContent>\n</Card>);\n}\n\nexport {\n    CompanyListItem\n};","import React, { Component } from \"react\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\nimport { Utilities } from \"../../utils/utilities\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\nimport { IObjectAction, IObjectStore } from \"../../store/rest-api-redux-factory\";\nimport { InputFieldType } from \"../../components/form-factory/form-base-field/form-base-field-meta\";\n// data models\nimport { Company } from \"../../store/data-model/company\";\nimport { Application } from \"../../store/data-model/application\";\n\n/** Components */\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n\n// mdc-react input\nimport \"@material/react-text-field/dist/text-field.css\";\nimport TextField, { Input } from \"@material/react-text-field\";\n\n// objects\n// import { CompanyApplicationComponentContainer } from \"../../components/company-application/company-application-component\";\nimport { CompanyListItem } from \"../../components/company/company-list-item\";\nimport { RequestStatus } from \"../../utils/rest-api\";\n\n// styling\nimport \"./user-app-page.css\";\nimport styles from \"./user-app-page.module.css\";\n\n\ninterface IUserAppPageProps extends RouteComponentProps {\n    company: IObjectStore<Company>\n    application: IObjectStore<Application>\n}\n\ninterface IUserAppPageState {\n    searchText: string\n    isFiltering: boolean\n    filteredCompanyList: Array<Company>\n}\n\nclass UserAppPage extends Component<IUserAppPageProps, IUserAppPageState> {\n    state = {\n        searchText: '',\n        isFiltering: false,\n        filteredCompanyList: []\n    };\n\n    onCompanyClick = (uuid: string) => {\n        setTimeout(() => this.props.history.push(`/com-app/${uuid}/`), 10);\n    }\n\n    searchFieldTextIsEmpty = () => {\n        return Utilities.normalizeText(this.state.searchText) === '';\n    }\n\n    filterCompanyByName = (name: string) => {\n        const filteringName = Utilities.normalizeText(name);\n        const allCompanies = Object.values(this.props.company.collection);\n\n        this.setState({\n            filteredCompanyList: allCompanies.filter((company: Company) => Utilities.normalizeText(company.name).includes(filteringName)),\n\n            // always switch on filering mode when filtering is triggered\n            isFiltering: true\n        })\n    }\n\n    onSearchFieldChange = (event: React.FormEvent<HTMLInputElement>) => {\n        this.setState({\n            searchText: event.currentTarget.value,\n        }, () => {\n            this.setState({\n                // switch off filtering mode if field becomes empty\n                isFiltering: this.searchFieldTextIsEmpty() ? false : this.state.isFiltering\n            })\n        });\n    }\n\n    onSearchFieldKeyDown = (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key.toLowerCase() === 'enter') {\n            !this.searchFieldTextIsEmpty() && this.filterCompanyByName(this.state.searchText);\n        }\n    }\n\n    onSearchFieldClear = () => {\n        this.setState({searchText: '', isFiltering: false});\n    }\n\n    render() {\n        const allCompanies = Object.values(this.props.company.collection);\n        const displayingCompanies = this.props.company.requestStatus !== RequestStatus.REQUESTING ? this.state.isFiltering ? this.state.filteredCompanyList : allCompanies : Array.from(Array(5));\n\n        return (\n            <div className=\"UserAppPage\">\n                <div className={styles.userAppPageHeader}>\n                    <h1>Organizations You're Applying</h1>\n                    <Button\n                        onClick={() => { this.props.history.push(\"/com-form/\") }}\n                        unelevated\n                        icon={<MaterialIcon hasRipple icon=\"add\" />}\n                        children=\"Add Organization\"\n                    />\n                    <TextField\n                        className={styles.searchField}\n                        label=\"Search Company Name\"\n                        outlined\n                        leadingIcon={<MaterialIcon role=\"button\" icon=\"search\" />}\n                        trailingIcon={this.state.searchText === '' ? undefined : <MaterialIcon role=\"button\" icon=\"clear\" />}\n                        onTrailingIconSelect={this.onSearchFieldClear}\n                    >\n                        <Input\n                            type={InputFieldType.TEXT}\n                            inputType=\"input\"\n                            onKeyDown={this.onSearchFieldKeyDown}\n                            onChange={this.onSearchFieldChange}\n                            value={this.state.searchText}\n                        />\n                    </TextField>\n                </div>\n                <div className={styles.userAppPageContent}>\n                    {\n                        displayingCompanies.map(\n                            (company, index) => \n                            <CompanyListItem \n                                key={company ? company.uuid : index}\n                                company={company}\n                                applications={company ? Object.values(this.props.application.collection).filter((application) => application.user_company === company.uuid) : undefined}\n                                onClick={company ? this.onCompanyClick : undefined}\n                            />\n                        )\n                    }\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    // prop: store.prop\n    company: store.company,\n    application: store.application,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<{}>>) => {\n    // actionName = (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n\n    return {\n        // listObject: (callback?: Function) =>\n        //     dispatch(\n        //         ObjectActions[CrudType.LIST][RequestStatus.TRIGGERED].action(\n        //             new Object({}),\n        //             callback\n        //         )\n        //     ),\n    }\n};\n\nexport const UserAppPageContainer = withRouter(connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(UserAppPage));\n","import { Action, Reducer } from \"redux\";\nimport { takeEvery, take, call, put, actionChannel } from \"redux-saga/effects\";\nimport { SagaIterator } from \"redux-saga\";\nimport {\n    RequestStatus,\n    CrudType,\n    CrudMapToRest,\n    RestApiService,\n    IRequestParams,\n    ISingleRestApiResponse,\n    IListRestApiResponse,\n    IsSingleRestApiResponseTypeGuard\n} from \"../utils/rest-api\";\nimport omit from \"lodash/omit\";\n\n/** state & store */\n\nexport interface IObjectBase {\n    uuid: string;\n}\n\nexport type TObject<Schema> = IObjectBase & { [Property in keyof Schema]: Schema[Property] };\n\ninterface IObjectList<Schema> {\n    [uuid: string]: TObject<Schema>;\n}\n\nexport interface IObjectStore<Schema> {\n    lastChangedObjectID?: string;\n    requestStatus: RequestStatus;\n    error?: any;\n    collection: IObjectList<Schema>;\n}\n\n/** action */\n\ntype IObjectRestApiReduxFactoryActions = {\n    [restfulKeyword: string]: {\n        [asyncKeyword: string]: {\n            actionTypeName: string;\n            action: Function;\n            saga?: () => SagaIterator;\n        };\n    };\n};\n\nexport interface IObjectAction<Schema> extends Action {\n    type: string;\n    crudType: CrudType;\n\n    // for deleteAction or other actions to obtain the original instance obj passed into trigger action\n    triggerFormData?: TObject<Schema> | Array<TObject<Schema>>;\n\n    // for saga to perform additional side effect e.g. navigation\n    // only for triggerActions\n    successCallback?: Function;\n    failureCallback?: (error: any) => void;\n    finalCallback?: Function;\n\n    // for custumized api call\n    absoluteUrl?: string\n    \n    payload: {\n        formData?: TObject<Schema> | Array<TObject<Schema>>;\n        lastChangedObjectID?: string;\n        requestStatus: RequestStatus;\n        error?: any;\n    };\n}\n\n/** factory API */\n\ninterface IRestApiReduxFactory<Schema> {\n    actions: IObjectRestApiReduxFactoryActions;\n    storeReducer: Reducer<IObjectStore<Schema>>\n    sagas: Array<() => SagaIterator>;\n}\n\nexport const RestApiReduxFactory = <Schema extends IObjectBase>(\n    /** should have uuid */ objectName: string,\n    initialObjectInstance: TObject<Schema>\n): IRestApiReduxFactory<Schema> => {\n    type TObjectSchema = typeof initialObjectInstance;\n    const crudKeywords = Object.values(CrudType);\n\n    let ObjectRestApiRedux: IObjectRestApiReduxFactoryActions = {};\n    for (let crudKeyword of crudKeywords) {\n        ObjectRestApiRedux[crudKeyword] = {};\n        /** store */\n        // TODO?: action state\n\n        /** action */\n        // action type names\n        for (let requestStatus of Object.values(RequestStatus)) {\n            ObjectRestApiRedux[crudKeyword][requestStatus] = {\n                actionTypeName: \"\",\n                action: () => {}\n            };\n            ObjectRestApiRedux[crudKeyword][\n                requestStatus\n            ].actionTypeName = `${requestStatus.toUpperCase()}_${crudKeyword.toUpperCase()}_${objectName.toUpperCase()}`;\n        }\n\n        // async actions ( & state...)\n        ObjectRestApiRedux[crudKeyword][RequestStatus.TRIGGERED].action = (\n            objectClassInstance?: TObjectSchema,\n            successCallback?: Function,\n            failureCallback?: (error: any) => void,\n            finalCallback?: Function,\n            absoluteUrl?: string,\n        ): IObjectAction<TObjectSchema> => {\n            process.env.NODE_ENV === 'development' && console.log(`action:fired, trigger, ${crudKeyword}`);\n            return {\n                type:\n                    ObjectRestApiRedux[crudKeyword][RequestStatus.TRIGGERED]\n                        .actionTypeName,\n                crudType: crudKeyword,\n                finalCallback,\n                successCallback,\n                failureCallback,\n                absoluteUrl,\n                payload: {\n                    requestStatus: RequestStatus.TRIGGERED,\n                    formData: objectClassInstance\n                }\n            };\n        };\n        ObjectRestApiRedux[crudKeyword][\n            RequestStatus.REQUESTING\n        ].action = (): IObjectAction<TObjectSchema> => {\n            return {\n                type:\n                    ObjectRestApiRedux[crudKeyword][RequestStatus.REQUESTING]\n                        .actionTypeName,\n                crudType: crudKeyword,\n                payload: {\n                    requestStatus: RequestStatus.REQUESTING\n                }\n            };\n        };\n        ObjectRestApiRedux[crudKeyword][RequestStatus.SUCCESS].action = (\n            /** api response */\n            jsonResponse:\n            | IListRestApiResponse<TObjectSchema>\n            | ISingleRestApiResponse<TObjectSchema>,\n            triggerFormData?: TObject<Schema> | Array<TObject<Schema>>\n        ): IObjectAction<TObjectSchema> => {\n            let newState = {\n                type:\n                    ObjectRestApiRedux[crudKeyword][RequestStatus.SUCCESS]\n                        .actionTypeName,\n                crudType: crudKeyword\n            };\n            // if is delete success, we don't need formData (& the server responds nothing for DELETE as well)\n            if (crudKeyword === CrudType.DELETE) {\n                return {\n                    ...newState,\n                    triggerFormData,\n                    payload: {\n                        requestStatus: RequestStatus.SUCCESS,\n                    }\n                }\n            }\n            else if (IsSingleRestApiResponseTypeGuard(jsonResponse)) {\n                return {\n                    ...newState,\n                    payload: {\n                        requestStatus: RequestStatus.SUCCESS,\n                        formData: <ISingleRestApiResponse<TObjectSchema>>(\n                            jsonResponse\n                        ),\n                        lastChangedObjectID: jsonResponse.uuid\n                    }\n                };\n            } else {\n                return {\n                    ...newState,\n                    payload: {\n                        requestStatus: RequestStatus.SUCCESS,\n                        formData: (<IListRestApiResponse<TObjectSchema>>(\n                            jsonResponse\n                        )).results\n                    }\n                };\n            }\n        };\n        ObjectRestApiRedux[crudKeyword][RequestStatus.FAILURE].action = (\n            error: any\n        ): IObjectAction<TObjectSchema> => {\n            return {\n                type:\n                    ObjectRestApiRedux[crudKeyword][RequestStatus.FAILURE]\n                        .actionTypeName,\n                crudType: crudKeyword,\n                payload: {\n                    requestStatus: RequestStatus.FAILURE,\n                    error\n                }\n            };\n        };\n\n        /** saga */\n        const sagaHandler = function*(\n            triggerAction: IObjectAction<TObjectSchema>\n        ) {\n            process.env.NODE_ENV === 'development' && console.log(`Saga: action intercepted; aync=trigger, crud=${crudKeyword}, obj=${objectName}; ready to call api`);\n            const formData = triggerAction.payload.formData;\n            const absoluteUrl = triggerAction.absoluteUrl;\n\n            yield put(\n                ObjectRestApiRedux[crudKeyword][\n                    RequestStatus.REQUESTING\n                ].action()\n            );\n\n            try {\n                // api call\n                const jsonResponse:\n                    | IListRestApiResponse<TObjectSchema>\n                    | ISingleRestApiResponse<TObjectSchema> \n                    | any = yield call(\n                    (<(params: IRequestParams<TObjectSchema>) => void>RestApiService[CrudMapToRest(crudKeyword)]),\n                    {\n                        data: formData,\n                        objectName,\n                        absoluteUrl,\n                    }\n                );\n\n                process.env.NODE_ENV === 'development' && console.log(\"Saga: res from server\", jsonResponse);\n\n                if (jsonResponse.status && jsonResponse.status >= 400) {\n                    console.error(\"Server error, see message in res.\");\n                    throw new Error(\"Server error, see message in res.\");\n                } \n\n                // if there is .next in res, then it's paginated data and we should perform a next request to next page data\n                if(jsonResponse.next) {\n                    process.env.NODE_ENV === 'development' && console.log(\"Saga: res contains next url, so we will also trigger list request for next=\", jsonResponse.next);\n                    yield put(ObjectRestApiRedux[CrudType.LIST][RequestStatus.TRIGGERED].action(\n                        undefined, undefined, undefined, undefined, jsonResponse.next\n                    ));\n                }\n\n                // success state\n                if (crudKeyword === CrudType.DELETE) {\n                    yield put(\n                        ObjectRestApiRedux[CrudType.DELETE][\n                            RequestStatus.SUCCESS\n                        ].action(jsonResponse, formData)\n                    );\n                } else {\n                    process.env.NODE_ENV === 'development' && console.log(\"Saga: ready to dispatch success action\")\n                    yield put(\n                        ObjectRestApiRedux[crudKeyword][\n                            RequestStatus.SUCCESS\n                        ].action(jsonResponse)\n                    );\n                }\n\n                if (triggerAction.successCallback) {\n                    triggerAction.successCallback();\n                }\n            } catch (error) {\n                // error state\n                yield put(\n                    ObjectRestApiRedux[crudKeyword][\n                        RequestStatus.FAILURE\n                    ].action(error)\n                );\n\n                if (triggerAction.failureCallback) {\n                    triggerAction.failureCallback(error);\n                }\n                return;\n            }\n\n            if (triggerAction.finalCallback) {\n                triggerAction.finalCallback();\n            }\n        };\n\n        ObjectRestApiRedux[crudKeyword][\n            RequestStatus.TRIGGERED\n        ].saga = function*() {\n            process.env.NODE_ENV === 'development' && console.log(`Saga: action intercepted; async=trigger, crud=${crudKeyword}, obj=${objectName}`);\n            \n            // queue style \n            const objectTriggerActionChannel = yield actionChannel(\n                ObjectRestApiRedux[crudKeyword][RequestStatus.TRIGGERED]\n                    .actionTypeName\n            )\n\n            while (true) {\n                const objectTriggerAction = yield take(objectTriggerActionChannel);\n                yield call(sagaHandler, objectTriggerAction);\n            }\n        };\n    }\n\n    const initialState: IObjectStore<TObjectSchema> = {\n        collection: {},\n        requestStatus: RequestStatus.SUCCESS\n    };\n\n    const storeReducer: Reducer<IObjectStore<Schema>> = (\n        objectStore: IObjectStore<TObjectSchema> = initialState,\n        action: Action\n    ): IObjectStore<TObjectSchema> => {\n        \n        const objectAction = action as IObjectAction<TObjectSchema>;\n\n        if (\n            !(objectAction && objectAction.payload && objectAction.payload.requestStatus) ||\n            !(action.type.split(\"_\")[2] === objectName.toUpperCase())\n        ) {\n            return {\n                ...objectStore\n            };\n        }\n\n        // async success\n        if (objectAction.payload.requestStatus === RequestStatus.SUCCESS) {\n            // CREATE\n            if (objectAction.crudType === CrudType.CREATE) {\n                let newObject = <TObject<TObjectSchema>>objectAction.payload.formData;\n                return {\n                    collection: {\n                        ...objectStore.collection,\n                        [newObject.uuid]: newObject\n                    },\n                    requestStatus: objectAction.payload.requestStatus,\n                    lastChangedObjectID: objectAction.payload.lastChangedObjectID\n                };\n            }\n\n            // LIST\n            else if (objectAction.crudType === CrudType.LIST) {\n                const resObjectList = <Array<TObject<TObjectSchema>>>(\n                    objectAction.payload.formData\n                );\n                let newObjects: IObjectList<TObjectSchema> = {};\n                for (let object of resObjectList) {\n                    newObjects[object.uuid] = object;\n                }\n                process.env.NODE_ENV === 'development' && console.log(\"Reducer: crud=list, action=\", objectAction)\n                process.env.NODE_ENV === 'development' && console.log(\"initialState=\", initialState)\n                process.env.NODE_ENV === 'development' && console.log(\"beforestore=\", objectStore)\n                process.env.NODE_ENV === 'development' && console.log(\"newlistobjects=\", newObjects)\n\n                const afterStore: IObjectStore<TObjectSchema> = {\n                    collection: {\n                        ...objectStore.collection,\n                        ...newObjects\n                    },\n                    requestStatus: objectAction.payload.requestStatus\n                };\n                process.env.NODE_ENV === 'development' && console.log(\"afterstore=\", afterStore)\n\n                return afterStore;\n            }\n\n            // UPDATE\n            else if (objectAction.crudType === CrudType.UPDATE) {\n                let newObject = <TObject<TObjectSchema>>objectAction.payload.formData;\n                return {\n                    collection: {\n                        ...objectStore.collection,\n                        [newObject.uuid]: newObject\n                    },\n                    requestStatus: objectAction.payload.requestStatus,\n                    lastChangedObjectID: objectAction.payload.lastChangedObjectID\n                };\n            }\n\n            // DELETE\n            else if (objectAction.crudType === CrudType.DELETE) {\n                let targetDeleteObject = <TObject<TObjectSchema>>objectAction.triggerFormData;\n                process.env.NODE_ENV === 'development' && console.log(\"Reducer: delete, targetobj=\", targetDeleteObject)\n\n                process.env.NODE_ENV === 'development' && console.log(\"Reducer: delete, beforestore=\", objectStore)\n                \n                const afterStore = {\n                    collection: omit(objectStore.collection, [targetDeleteObject.uuid]),\n                    requestStatus: objectAction.payload.requestStatus\n                }\n                process.env.NODE_ENV === 'development' && console.log(\"Reducer: delete, afterstore\", afterStore)\n\n                return afterStore;\n            }\n        }\n\n        // async trigger\n        else if (objectAction.payload.requestStatus === RequestStatus.TRIGGERED) {\n            return {\n                ...objectStore,\n                requestStatus: objectAction.payload.requestStatus\n            };\n        }\n\n        // async requesting & failure\n        else {\n            return {\n                ...objectStore,\n                ...objectAction.payload\n            };\n        }\n\n        // no effect\n        return {\n            ...objectStore\n        };\n    };\n\n    const sagas = crudKeywords.map((crudKeyword) => \n        (<() => SagaIterator>ObjectRestApiRedux[crudKeyword][RequestStatus.TRIGGERED].saga)\n    );\n\n    return {\n        actions: ObjectRestApiRedux,\n        storeReducer,\n        sagas\n    };\n};\n","import { RestApiReduxFactory } from \"../rest-api-redux-factory\";\nimport { BaseModel, IBaseModelProps } from \"./base-model\";\nimport * as Yup from \"yup\";\n\nexport interface IAddressProps {\n    place_name?: string;\n    country?: string;\n    state?: string;\n    city?: string;\n    street?: string;\n    full_address?: string;\n    zipcode?: string;\n}\n\nexport class Address extends BaseModel {\n    place_name: string;\n    country: string;\n    state: string;\n    city: string;\n    street: string;\n    full_address: string;\n    zipcode: string;\n\n    constructor({\n        place_name = \"\",\n        country = \"\",\n        state = \"\",\n        city = \"\",\n        street = \"\",\n        full_address = \"\",\n        zipcode = \"\",\n        ...args\n    }: IAddressProps & IBaseModelProps) {\n        super(args);\n        this.place_name = place_name;\n        this.country = country;\n        this.state = state;\n        this.place_name = place_name;\n        this.city = city;\n        this.street = street;\n        this.full_address = full_address;\n        this.zipcode = zipcode;\n    }\n\n    static schema(){\n        return Yup.object<Address>().shape({\n            full_address: Yup.string().max(200),\n            street: Yup.string().max(150),\n            city: Yup.string().max(50),\n            state: Yup.string().max(50),\n            country: Yup.string().max(50),\n            place_name: Yup.string().max(50),\n            zipcode: Yup.string().max(20),\n        });\n    }\n\n}\n\nconst initialAddressInstance = new Address({});\nconst AddressRestApiRedux = RestApiReduxFactory<Address>(\n    \"addresses\",\n    initialAddressInstance\n);","import { BaseModel, IBaseModelProps } from \"./base-model\";\nimport * as Yup from \"yup\";\n\ninterface ILinkProps {\n    text?: string;\n    user?: any;\n    url?: string;\n    order?: number;\n}\n\nexport class Link extends BaseModel {\n    public text: string;\n    public user: any;\n    public url: string;\n    public order: number;\n\n    constructor({\n        text = \"\",\n        user = {},\n        url = \"\",\n        order = 0,\n        ...args\n    }: ILinkProps & IBaseModelProps) {\n        super(args);\n        this.text = text;\n        this.user = user;\n        this.url = url;\n        this.order = order;\n    }\n\n    static schema(){\n        return Yup.object<Link>().shape({\n            text:  Yup.string().max(200),\n            url: Yup.string().default(\"#\").when(\n                \"text\", {\n                    is: (text) => text,\n                    then: Yup.string().required(\"Since you gave the link some text, let's provide an url as well...!\").max(500, \"URL is too long, only less than 500 characters please\")\n                }\n            ),\n        });\n    }\n}\n","import { RestApiReduxFactory } from \"../rest-api-redux-factory\";\nimport { BaseModel, IBaseModelProps } from \"./base-model\";\nimport { Address } from \"./address\";\nimport { Link } from \"./link\";\nimport * as Yup from \"yup\";\n\ninterface ICompanyProps {\n    user?: string;\n    labels?: any;\n    name?: string;\n    hq_location?: Address;\n    home_page?: Link;\n    ratings?: any;\n    applications?: any;\n}\n\nexport class Company extends BaseModel {\n    public user: string;\n    public labels: any;\n    public name: string;\n    public hq_location: Address;\n    public home_page: Link;\n    public ratings: any;\n    public applications: any;\n\n    constructor({\n        user = \"\",\n        labels = [],\n        name = \"\",\n        hq_location = new Address({}),\n        home_page = new Link({}),\n        ratings = {},\n        applications = {},\n        ...args\n    }: ICompanyProps & IBaseModelProps) {\n        super(args);\n        this.user = user;\n        this.labels = labels;\n        this.name = name;\n        this.hq_location = hq_location;\n        this.home_page = home_page;\n        this.ratings = ratings;\n        this.applications = applications;\n    }\n\n    static schema(){\n        return Yup.object<Company>().shape({\n            name: Yup.string().required(\"Every company needs a name...!\").max(100),\n            home_page: Link.schema(),\n            hq_location: Address.schema()\n        });\n    }\n}\n\nconst initialCompanyInstance = new Company({});\nconst CompanyRestApiRedux = RestApiReduxFactory<Company>(\n    \"companies\",\n    initialCompanyInstance\n);\nexport const CompanyActions = CompanyRestApiRedux.actions;\nexport const CompanyReducer = CompanyRestApiRedux.storeReducer;\nexport const CompanySagas = CompanyRestApiRedux.sagas;\n","import React from \"react\";\n\n/** Components */\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n// mdc-react icon button\nimport '@material/react-icon-button/dist/icon-button.css';\nimport IconButton from '@material/react-icon-button';\n// data model\nimport { DataModelClass } from \"../../../store/data-model/base-model\";\n// formik\nimport {\n    FieldArray,\n    ArrayHelpers,\n} from \"formik\";\n// base field\nimport { IFormBaseFieldProps } from \"./form-base-field-meta\";\n\ninterface IFormBaseDyanmicFieldControllsProps {\n    index: number\n    formikArrayHelpers: ArrayHelpers\n}\n\nconst FormBaseDynamicFieldControlls = (props: IFormBaseDyanmicFieldControllsProps) => {\n\n    const deleteField = () => {\n        props.formikArrayHelpers.remove(props.index);\n    }\n\n    return (\n        <div className=\"FormBaseDynamicFieldControlls\">\n            <IconButton onClick={deleteField}>\n                <MaterialIcon hasRipple icon=\"delete\" />\n            </IconButton>\n        </div>\n    )\n}\n\nconst BaseDynamicFieldAddButton = (props: {\n    formikArrayHelpers: ArrayHelpers\n    model?: DataModelClass\n    label: string\n}) => {\n\n    const onAddClick = () => {\n        if (props.model) {\n            const model = props.model;\n            props.formikArrayHelpers.push(new model({}));\n        } else {\n            props.formikArrayHelpers.push({});\n        }\n    }\n\n    return (\n        <Button type=\"button\" onClick={onAddClick} children={`New ${props.label}`} />\n    )\n}\n\nexport const withFormBaseField = (FormFieldComponent: React.ComponentType<IFormBaseFieldProps>) => (props: IFormBaseFieldProps) => {\n\n    if (props.isDynamic && !props.formikValues) {\n        alert(\"Oops! Something's wrong.\");\n        throw Error(\"When `isDynamic` is true, you need to pass over `formikValues`.\");\n    }\n\n    const formikValues = props.formikValues;\n    const getInstanceDataFromFormikValues = props.getInstanceDataFromFormikValues;\n\n    return (\n        (props.isDynamic && getInstanceDataFromFormikValues && formikValues) ?\n            (<FieldArray\n                name={props.fieldName}\n                render={formikArrayHelpers => (\n                    <div className=\"FormApplicationStatusLinkFieldsContainer\">\n                        {getInstanceDataFromFormikValues(formikValues).map((instanceData: any, index: number) => (\n                            <div key={index} className=\"FormBaseDynamicField\">\n                                <FormFieldComponent\n                                    fieldName={`${props.fieldName}[${index}]`}\n                                    label={`${props.label} ${index}`}\n                                    formikValues={props.formikValues}\n                                    getInstanceDataFromFormikValues={props.getInstanceDataFromFormikValues}\n                                />\n                                <FormBaseDynamicFieldControlls\n                                    index={index}\n                                    formikArrayHelpers={formikArrayHelpers}\n                                />\n                            </div>\n                        ))}\n\n                        <BaseDynamicFieldAddButton\n                            formikArrayHelpers={formikArrayHelpers}\n                            label={props.label}\n                            model={props.model}\n                        />\n                    </div>\n                )}\n            />)\n            :\n            (<FormFieldComponent\n                fieldName={props.fieldName}\n                label={props.label}\n                formikValues={props.formikValues}\n                getInstanceDataFromFormikValues={props.getInstanceDataFromFormikValues}\n            />)\n    )\n}","/** Components */\n// base field\nimport { withFormBaseField } from \"../form-base-field/form-base-field\";\n// link field\nimport { FormLinkFieldComponent } from \"./form-link-field-component\";\n\nexport const FormLinkField = withFormBaseField(FormLinkFieldComponent);\n","import React, { Component } from \"react\";\n\n/** Components */\n// mdc-react input\nimport \"@material/react-text-field/dist/text-field.css\";\n\nimport { FormInputFieldMeta } from \"../form-input-field/form-input-field-meta\";\nimport { FormInputField } from \"../form-input-field/form-input-field\";\nimport { IFormBaseFieldProps } from \"../form-base-field/form-base-field-meta\";\n\nexport interface IFormLinkFieldComponentProps extends IFormBaseFieldProps {\n}\n\nexport class FormLinkFieldComponent extends Component<IFormLinkFieldComponentProps> {\n\n    textInputFieldMeta: FormInputFieldMeta;\n    urlInputFieldMeta: FormInputFieldMeta;\n\n    constructor(props: IFormLinkFieldComponentProps) {\n        super(props)\n\n        this.textInputFieldMeta = new FormInputFieldMeta({\n            fieldName: `${this.props.fieldName}.text`,\n            label: \"Description\"\n        });\n        this.urlInputFieldMeta = new FormInputFieldMeta({\n            fieldName: `${this.props.fieldName}.url`,\n            label: \"Link url\"\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"FormLinkField\">\n                {this.props.label && <h4>{this.props.label}</h4>}\n                <FormInputField\n                    {...this.textInputFieldMeta}\n                />\n\n                <FormInputField\n                    {...this.urlInputFieldMeta}\n                />\n            </div>\n        );\n    }\n}","// data model\nimport { Link } from \"../../../store/data-model/link\";\n\n/** Components */\n// base field\nimport { IFieldBaseMetaProps, FormBaseFieldMeta } from \"../form-base-field/form-base-field-meta\";\nimport { FormLinkField } from \"./form-link-field\";\n\nexport class FormLinkFieldMeta extends FormBaseFieldMeta {\n\n    constructor(props: IFieldBaseMetaProps) {\n        super(props)\n        this.model = Link;\n        this.formField = FormLinkField;\n    }\n}\n","/** Components */\n// base field\nimport { withFormBaseField } from \"../form-base-field/form-base-field\";\n// link field\nimport { FormAddressFieldComponent } from \"./form-address-field-component\";\n\nexport const FormAddressField = withFormBaseField(FormAddressFieldComponent);\n","import React, { Component } from \"react\";\n\n/** Components */\n// mdc-react input\nimport \"@material/react-text-field/dist/text-field.css\";\n\nimport { FormInputFieldMeta } from \"../form-input-field/form-input-field-meta\";\nimport { FormInputField } from \"../form-input-field/form-input-field\";\nimport { IFormBaseFieldProps } from \"../form-base-field/form-base-field-meta\";\n\nexport interface IFormAddressFieldComponentProps extends IFormBaseFieldProps {\n}\n\nexport class FormAddressFieldComponent extends Component<IFormAddressFieldComponentProps> {\n\n    fullAddressInputFieldMeta: FormInputFieldMeta;\n    placeNameInputFieldMeta: FormInputFieldMeta;\n\n    constructor(props: IFormAddressFieldComponentProps) {\n        super(props)\n\n        this.fullAddressInputFieldMeta = new FormInputFieldMeta({\n            fieldName: `${this.props.fieldName}.full_address`,\n            label: `Full Address`\n        });\n        this.placeNameInputFieldMeta = new FormInputFieldMeta({\n            fieldName: `${this.props.fieldName}.place_name`,\n            label: `Place Name`\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"FormAddressField\">\n                {this.props.label && <h4>{this.props.label}</h4>}\n                \n                <FormInputField\n                    {...this.placeNameInputFieldMeta}\n                />\n\n                <FormInputField\n                    {...this.fullAddressInputFieldMeta}\n                />\n                \n            </div>\n        );\n    }\n}","// data model\nimport { Address } from \"../../../store/data-model/address\";\n\n/** Components */\n// base field\nimport { IFieldBaseMetaProps, FormBaseFieldMeta } from \"../form-base-field/form-base-field-meta\";\nimport { FormAddressField } from \"./form-address-field\";\n\nexport class FormAddressFieldMeta extends FormBaseFieldMeta {\n\n    constructor(props: IFieldBaseMetaProps) {\n        super(props)\n        this.model = Address;\n        this.formField = FormAddressField;\n    }\n}\n","import React, { Component } from \"react\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\nimport {\n    IObjectAction\n} from \"../../store/rest-api-redux-factory\";\n// data models\nimport { Company, CompanyActions } from \"../../store/data-model/company\";\n\n/** Components */\nimport {\n    FormFactory,\n    FormActionButtonProps,\n    ActionButtonType\n} from \"../form-factory/form-factory\";\n// form field\nimport { FormBaseFieldMeta } from \"../form-factory/form-base-field/form-base-field-meta\";\nimport { FormInputFieldMeta } from \"../form-factory/form-input-field/form-input-field-meta\";\nimport { FormLinkFieldMeta } from \"../form-factory/form-link-field/form-link-field-meta\";\nimport { FormAddressFieldMeta } from \"../form-factory/form-address-field/form-address-field-meta\";\n\ninterface ICompanyFormComponentProps {\n    company?: Company;\n    onCancel: (event: any) => void;\n    onSubmitSuccess?: () => void;\n\n    /** redux */\n    createCompany: (companyFormData: Company, successCallback?: Function, finalCallback?: Function) => void;\n    updateCompany: (companyFormData: Company, successCallback?: Function, finalCallback?: Function) => void;\n}\n\nclass CompanyFormComponent extends Component<ICompanyFormComponentProps> {\n\n    formFieldPropsList: Array<FormBaseFieldMeta>;\n    actionButtonPropsList: Array<FormActionButtonProps>;\n\n    constructor(props: ICompanyFormComponentProps) {\n        super(props);\n\n        this.formFieldPropsList = [\n            new FormInputFieldMeta({\n                fieldName: \"name\",\n                label: \"Organization Name*\",\n                autoFocus: true\n            }),\n\n            new FormAddressFieldMeta({\n                fieldName: \"hq_location\",\n                label: \"Headquarter Location\"\n            }),\n\n            new FormLinkFieldMeta({\n                fieldName: \"home_page\",\n                label: \"Organization Website\"\n            }),\n        ];\n\n        this.actionButtonPropsList = [\n            new FormActionButtonProps(\n                !this.props.company ? \"Create Company\" : \"Save Company\",\n                undefined,\n                ActionButtonType.SUBMIT\n            ),\n            new FormActionButtonProps(\"Cancel\", this.props.onCancel)\n        ]\n\n    }\n\n    render() {\n        return (\n            <div className=\"CompanyFormComponent\">\n                <FormFactory\n                    model={Company}\n                    initialInstance={this.props.company}\n        \n                    formFieldPropsList={this.formFieldPropsList}\n                    actionButtonPropsList={this.actionButtonPropsList}\n        \n                    createInstanceTriggerAction={this.props.createCompany}\n                    updateInstanceTriggerAction={this.props.updateCompany}\n\n                    onSubmitSuccess={this.props.onSubmitSuccess}\n                />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => ({});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<Company>>) => {\n    return {\n        createCompany: (companyFormData: Company, successCallback?: Function, finalCallback?: Function) =>\n            dispatch(\n                CompanyActions[CrudType.CREATE][RequestStatus.TRIGGERED].action(\n                    companyFormData,\n                    successCallback,\n                    undefined,\n                    finalCallback,\n                )\n            ),\n        updateCompany: (companyFormData: Company, successCallback?: Function, finalCallback?: Function) =>\n            dispatch(\n                CompanyActions[CrudType.UPDATE][RequestStatus.TRIGGERED].action(\n                    companyFormData,\n                    successCallback,\n                    undefined,\n                    finalCallback,\n                )\n            )\n    };\n};\n\nexport const CompanyFormComponentContainer = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(CompanyFormComponent);\n","import React, { Component } from \"react\";\n\n/** route */\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\n// REST API\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\nimport {\n    IObjectAction,\n    IObjectStore\n} from \"../../store/rest-api-redux-factory\";\nimport { CompanyActions, Company } from \"../../store/data-model/company\";\nimport { Address } from \"../../store/data-model/address\";\nimport { Link } from \"../../store/data-model/link\";\n\n/** Components */\nimport \"./add-com-page.css\"\n\n//mdc-react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc-react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n// mdc-react input\nimport \"@material/react-text-field/dist/text-field.css\";\nimport TextField, { HelperText, Input } from \"@material/react-text-field\";\nimport { CompanyFormComponentContainer } from \"../../components/company/company-form-component\";\n\ninterface IAddComPageParams {\n    uuid?: string;\n}\n\ninterface IAddComPageProps extends RouteComponentProps<IAddComPageParams> {\n    company: IObjectStore<Company>;\n}\n\nclass AddComPage extends Component<IAddComPageProps> {\n    render() {\n        const company: Company | undefined = (this.props.match.params.uuid && this.props.company.collection[this.props.match.params.uuid])\n            ? this.props.company.collection[this.props.match.params.uuid]\n            : undefined;\n        process.env.NODE_ENV === 'development' && console.log(\n            \"com form page: params is\",\n            this.props.match.params.uuid,\n            \"company is\",\n            company\n        );\n        return (\n            <div className=\"AddComPage\">\n                <h1>{!company ? \"Add an Organization\" : `Update Organization`}</h1>\n                <CompanyFormComponentContainer\n                    company={company}\n                    onSubmitSuccess={() => {\n                        process.env.NODE_ENV === 'development' && console.log(\"com form page: onSubmitSuccess\");\n                        \n                        if (this.props.company.lastChangedObjectID) {\n                            let newCompany = this.props.company.collection[\n                                this.props.company.lastChangedObjectID\n                            ];\n                            process.env.NODE_ENV === 'development' && console.log(\"new company:\", newCompany);\n\n                            company ? (\n                                // case: update company, let user be able to go back to update form\n                                this.props.history.push(`/com-app/${newCompany.uuid}/`)\n                            ) : (\n                                // case: create company, don't let user go back to form. If attempt to update company, user should click on edit; if attempt to create another company, should go to /home/ to do so\n                                this.props.history.replace(`/com-app/${newCompany.uuid}/`)\n                            );\n                        } else {\n                            console.error(\"store has no lastChangedObjectID\");\n                        }\n                    }}\n                    onCancel={event => {\n                        this.props.history.goBack()\n                    }}\n                />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: IRootState) => ({\n    // prop: state.prop\n    company: state.company\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<Company>>) => {\n    // actionName = (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {};\n};\n\nexport const AddComPageContainer = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(AddComPage)\n);\n","import { RestApiReduxFactory } from \"../rest-api-redux-factory\";\nimport { BaseModel, IBaseModelProps, IRelationship } from \"./base-model\";\nimport { Link } from \"./link\";\nimport * as Yup from \"yup\";\n\ninterface IApplicationProps {\n    user?: IRelationship;\n    user_company?: IRelationship;\n    position_title?: string;\n    job_description_page?: Link;\n    job_source?: Link;\n    labels?: any;\n    notes?: string;\n}\n\nexport class Application extends BaseModel {\n    public user: string;\n    public user_company: IRelationship;\n    public position_title: string;\n    public job_description_page: Link;\n    public job_source: Link;\n    public labels: any;\n    public notes: string;\n\n    constructor({\n        user = \"\",\n        user_company = \"\",\n        position_title = \"\",\n        job_description_page = new Link({}),\n        job_source = new Link({}),\n        labels = {},\n        notes = \"\",\n        ...args\n    }: IApplicationProps & IBaseModelProps) {\n        super(args);\n        this.user = user;\n        this.user_company = user_company;\n        this.position_title = position_title;\n        this.job_description_page = job_description_page;\n        this.job_source = job_source;\n        this.labels = labels;\n        this.notes = notes;\n    }\n\n    static schema(){\n        return Yup.object<Application>().shape({\n            position_title: Yup.string().required(\"We need a title...!\").max(150, \"No more than 150 characters\"),\n            job_description_page: Link.schema(),\n            job_source: Link.schema(),\n            notes: Yup.string(),\n        });\n    }\n}\n\nconst initialApplicationInstance = new Application({});\nconst ApplicationRestApiRedux = RestApiReduxFactory<Application>(\n    \"applications\",\n    initialApplicationInstance\n);\nexport const ApplicationActions = ApplicationRestApiRedux.actions;\nexport const ApplicationReducer = ApplicationRestApiRedux.storeReducer;\nexport const ApplicationSagas = ApplicationRestApiRedux.sagas;\n","import { RestApiReduxFactory } from \"../rest-api-redux-factory\";\nimport { BaseModel, IBaseModelProps, IRelationship } from \"./base-model\";\nimport { ApplicationStatusLink } from \"./application-status-link\";\nimport * as Yup from \"yup\";\n\ninterface IApplicationStatusProps {\n    text?: string;\n    application?: IRelationship;\n    applicationstatuslink_set?: Array<ApplicationStatusLink>\n    date?: string;\n    order?: number\n}\n\nexport class ApplicationStatus extends BaseModel {\n    public text: string;\n    public application: IRelationship;\n    // public applicationstatuslink_set: Array<ApplicationStatusLink>\n    public applicationstatuslink_set: Array<ApplicationStatusLink>\n    public date: string;\n    public order: number;\n\n    constructor({\n        text = \"\",\n        application = \"\",\n        // applicationstatuslink_set = [],\n        applicationstatuslink_set = [],\n        date = ApplicationStatus.localeNowDateString(),\n        order = 0,\n        ...args\n    }: IApplicationStatusProps & IBaseModelProps) {\n        super(args);\n        this.text = text;\n        this.application = application;\n        this.applicationstatuslink_set = applicationstatuslink_set;\n        this.date = date;\n        this.order = order;\n    }\n\n    static schema(){\n        return Yup.object<ApplicationStatus>().shape({\n            text: Yup.string().required(\"Give a quick one or two words for the status\").max(50, \"No more than 50 characters\"),\n\n            // date: Yup.string().matches(/[01]\\d{1}[-/][0123]\\d{1}[-/]\\d{4}/), // TODO: not working, always invalid, figure out why\n            date: Yup.string().length(10), // workaround\n            \n            order: Yup.number()\n        });\n    }\n\n    static localeNowDateString() {\n        const now = new Date();\n        const localeNow = new Date(Date.UTC(now.getUTCFullYear(), now.getUTCMonth(), now.getDate() ));\n        const localeNowTimeString = localeNow.toISOString().split(\"T\")[0]\n        return localeNowTimeString;\n    }\n}\n\nconst initialApplicationStatusInstance = new ApplicationStatus({});\nconst ApplicationStatusRestApiRedux = RestApiReduxFactory<ApplicationStatus>(\n    \"application-statuses\",\n    initialApplicationStatusInstance\n);\nexport const ApplicationStatusActions = ApplicationStatusRestApiRedux.actions;\nexport const ApplicationStatusReducer = ApplicationStatusRestApiRedux.storeReducer;\nexport const ApplicationStatusSagas = ApplicationStatusRestApiRedux.sagas;\n","import { RestApiReduxFactory } from \"../rest-api-redux-factory\";\nimport { BaseModel, IBaseModelProps, IRelationship } from \"./base-model\";\nimport { Link } from \"./link\";\n\ninterface IApplicationStatusLinkProps {\n    application_status?: IRelationship;\n    link?: Link;\n}\n\nexport class ApplicationStatusLink extends BaseModel {\n    public application_status: IRelationship;\n    public link: Link;\n\n    constructor({\n        application_status = \"\",\n        link = new Link({}),\n        ...args\n    }: IApplicationStatusLinkProps & IBaseModelProps) {\n        super(args);\n        this.application_status = application_status;\n        this.link = link;\n    }\n}","/** Components */\n// link field\nimport { FormApplicationStatusLinkFieldComponent } from \"./form-application-status-link-field-component\";\n// base dynamic field\nimport { withFormBaseField } from \"../form-base-field/form-base-field\";\n\nexport const FormApplicationStatusLinkField = withFormBaseField(FormApplicationStatusLinkFieldComponent);","import React, { Component } from \"react\";\n\n/** Components */\n// mdc-react input\nimport \"@material/react-text-field/dist/text-field.css\";\n// link form\nimport { FormLinkFieldMeta } from \"../form-link-field/form-link-field-meta\";\nimport { FormLinkField } from \"../form-link-field/form-link-field\";\nimport { IFormBaseFieldProps } from \"../form-base-field/form-base-field-meta\";\n\nexport interface IFormApplicationStatusLinkFieldComponentProps extends IFormBaseFieldProps {\n}\n\nexport class FormApplicationStatusLinkFieldComponent extends Component<IFormApplicationStatusLinkFieldComponentProps> {\n\n    linkFieldProps: FormLinkFieldMeta;\n\n    constructor(props: IFormApplicationStatusLinkFieldComponentProps) {\n        super(props)\n\n        this.linkFieldProps = new FormLinkFieldMeta({\n            fieldName: `${this.props.fieldName}.link`,\n            label: ``,\n            isDynamic: false, // Link is a one-to-one field in application status link model\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"FormApplicationStatusLinkField\">\n                {this.props.label && <h4>{this.props.label}</h4>}\n                <FormLinkField\n                    {...this.linkFieldProps}\n                    formikValues={this.props.formikValues}\n                    getInstanceDataFromFormikValues={this.props.getInstanceDataFromFormikValues}\n                />\n            </div>\n        );\n    }\n}","// data model\nimport { ApplicationStatusLink } from \"../../../store/data-model/application-status-link\";\n\n/** Components */\nimport { FormBaseFieldMeta, IFieldBaseMetaProps } from \"../form-base-field/form-base-field-meta\";\nimport { FormApplicationStatusLinkField } from \"./form-application-status-link-field\";\n\nexport class FormApplicationStatusLinkFieldMeta extends FormBaseFieldMeta {\n\n    constructor(props: IFieldBaseMetaProps) {\n        super(props)\n        this.model = ApplicationStatusLink;\n        this.formField = FormApplicationStatusLinkField;\n    }\n}\n","import React, { Component } from \"react\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\nimport { IObjectStore, IObjectAction } from \"../../store/rest-api-redux-factory\";\n// data models\nimport {\n    ApplicationStatus,\n    ApplicationStatusActions\n} from \"../../store/data-model/application-status\";\nimport {\n    ApplicationStatusLink,\n} from \"../../store/data-model/application-status-link\";\nimport { Application } from \"../../store/data-model/application\";\n\n/** Rest API */\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\n\n/** Components */\nimport {\n    FormFactory,\n    FormActionButtonProps,\n    IFormFactoryProps,\n    ActionButtonType\n} from \"../form-factory/form-factory\";\nimport {FormInputFieldMeta } from \"../form-factory/form-input-field/form-input-field-meta\";\nimport { InputFieldType, FormBaseFieldMeta } from \"../form-factory/form-base-field/form-base-field-meta\";\n// form fields\nimport { FormApplicationStatusLinkFieldMeta } from \"../form-factory/form-application-status-link-field/form-application-status-link-field-meta\";\n\ninterface IApplicationStatusFormComponentProps extends RouteComponentProps {\n    applicationStatus?: ApplicationStatus; // for update form\n    onSubmitSuccess?: () => void;\n    onCancel: () => void;\n\n    /** redux */\n    application: Application;\n    applicationStatusStore: IObjectStore<ApplicationStatus>\n    createApplicationStatus: (\n        applicationStatusFormData: ApplicationStatus,\n        successCallback?: Function,\n        finalCallback?: Function,\n    ) => void;\n    updateApplicationStatus: (\n        applicationStatusFormData: ApplicationStatus,\n        successCallback?: Function,\n        finalCallback?: Function,\n    ) => void;\n}\n\nclass ApplicationStatusFormComponent extends Component<\n    IApplicationStatusFormComponentProps\n> {\n    formFieldPropsList: Array<FormBaseFieldMeta>;\n    actionButtonPropsList: Array<FormActionButtonProps>;\n\n    constructor(props: IApplicationStatusFormComponentProps) {\n        super(props);\n\n        this.formFieldPropsList = [\n            new FormInputFieldMeta({\n                fieldName: \"text\",\n                label: \"Status*\",\n                autoFocus: true\n            }),\n            new FormInputFieldMeta({\n                fieldName: \"date\",\n                label: \"Date\",\n                type: InputFieldType.DATE\n            }),\n            new FormApplicationStatusLinkFieldMeta({\n                fieldName: `applicationstatuslink_set`,\n                label: `Status Link`,\n                isDynamic: true,\n            }),\n        ];\n\n        this.actionButtonPropsList = [\n            new FormActionButtonProps(\n                this.props.applicationStatus ?\n                \"Save Status\":\n                \"Create Status\",\n                undefined,\n                ActionButtonType.SUBMIT\n            ),\n            new FormActionButtonProps(\"Cancel\", this.props.onCancel)\n        ];\n    }\n\n    render() {\n        return (\n            <div className=\"ApplicationStatusFormComponent\">\n                <FormFactory\n                    model={ApplicationStatus}\n                    initialInstance={new ApplicationStatus({\n                        ...this.props.applicationStatus,\n                    })}\n                    enforcedInstanceData={{\n                        application: this.props.application.uuid\n                    }}\n        \n                    formFieldPropsList={this.formFieldPropsList}\n                    actionButtonPropsList={this.actionButtonPropsList}\n        \n                    createInstanceTriggerAction={this.props.createApplicationStatus}\n                    updateInstanceTriggerAction={this.props.updateApplicationStatus}\n\n                    onSubmitSuccess={this.props.onSubmitSuccess}\n                />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    // prop: store.prop\n    applicationStatusStore: store.applicationStatus\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<ApplicationStatus> | IObjectAction<ApplicationStatusLink>>) => {\n    // actionName: (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {\n        createApplicationStatus: (\n            applicationStatusFormData: ApplicationStatus,\n            successCallback?: Function,\n            failureCallback?: Function,\n        ) =>\n            dispatch(\n                ApplicationStatusActions[CrudType.CREATE][\n                    RequestStatus.TRIGGERED\n                ].action(applicationStatusFormData, successCallback, undefined, failureCallback)\n            )\n        ,\n        updateApplicationStatus: (\n            applicationStatusFormData: ApplicationStatus,\n            successCallback?: Function,\n            failureCallback?: Function,\n        ) =>\n            dispatch(\n                ApplicationStatusActions[CrudType.UPDATE][\n                    RequestStatus.TRIGGERED\n                ].action(applicationStatusFormData, successCallback, undefined, failureCallback)\n            )\n        ,\n    };\n};\n\nexport const ApplicationStatusFormComponentContainer = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(ApplicationStatusFormComponent)\n);\n","import React, { Component } from \"react\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\nimport {\n    IObjectAction, IObjectStore,\n} from \"../../store/rest-api-redux-factory\";\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\n\n/** data model */\nimport {\n    ApplicationStatus,\n    ApplicationStatusActions\n} from \"../../store/data-model/application-status\";\nimport { Application } from \"../../store/data-model/application\";\n\n/** Components */\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc-react icon button\nimport \"@material/react-icon-button/dist/icon-button.css\";\nimport IconButton from \"@material/react-icon-button\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\nimport { ApplicationStatusFormComponentContainer } from \"./application-status-form-component\";\n\nimport Skeleton from 'react-loading-skeleton';\n\n\ninterface IApplicationStatusComponentProps extends RouteComponentProps {\n    applicationStatus?: ApplicationStatus;\n    application?: Application; // needed by form\n    isOnlyForm?: boolean; // needed by add-button\n\n    applicationStatusStore: IObjectStore<ApplicationStatus>;\n    deleteApplicationStatus: (\n        applicationStatusToDelete: ApplicationStatus,\n        callback?: Function\n    ) => void;\n}\n\ninterface IApplicationStatusComponentState {\n    isFormOpened: boolean;\n}\n\nclass ApplicationStatusComponent extends Component<\n    IApplicationStatusComponentProps,\n    IApplicationStatusComponentState\n    > {\n    state = {\n        isFormOpened: false\n    };\n\n    render() {\n        // console.log(`\\n\\n\\n\\napp=${JSON.stringify(this.props.application)}, status=${JSON.stringify(this.props.applicationStatus)}`);\n        return (\n            <div className=\"ApplicationStatusComponent\">\n                {(this.state.isFormOpened || this.props.isOnlyForm) ? (\n                    this.renderFormController(\n                        this.props.application,\n                        this.props.applicationStatus\n                    )\n                ) : this.renderDisplay(this.props.applicationStatus)\n                }\n            </div>\n        );\n    }\n\n    renderDisplay = (applicationStatus?: ApplicationStatus) => {\n        return (\n            <div className=\"ApplicationStatusComponent\">\n                <span>Status: {applicationStatus ? applicationStatus.text : <Skeleton width=\"20vmin\" />}</span>\n\n                {/* edit button */}\n                {\n                    applicationStatus ? (\n                        <IconButton\n                            onClick={() => {\n                                process.env.NODE_ENV === 'development' && console.log(\"application status component: edit button clicked.\")\n                                this.setState({ isFormOpened: true });\n                            }}\n                        >\n                            <MaterialIcon hasRipple icon=\"edit\" />\n                        </IconButton>\n                    ) : (\n                            <IconButton disabled>\n                                <MaterialIcon hasRipple icon=\"edit\" />\n                            </IconButton>\n                        )\n                }\n\n                {/* delete button */}\n                {\n                    applicationStatus ? (\n                        <IconButton\n                            onClick={() =>\n                                this.props.deleteApplicationStatus(\n                                    applicationStatus\n                                )\n                            }\n                        >\n                            <MaterialIcon hasRipple icon=\"delete\" />\n                        </IconButton>\n                    ) : (\n                            <IconButton disabled>\n                                <MaterialIcon hasRipple icon=\"delete\" />\n                            </IconButton>\n                        )\n                }\n\n                <div>{applicationStatus ? applicationStatus.date : <Skeleton width=\"35vmin\" />}</div>\n\n                {applicationStatus ? applicationStatus.applicationstatuslink_set.map(\n                    applicationStatusLink => {\n                        return (\n                            applicationStatusLink &&\n                            applicationStatusLink.link && (\n                                <span key={applicationStatusLink.uuid}>\n                                    <a\n                                        href={\n                                            (\n                                                applicationStatusLink.link.url &&\n                                                applicationStatusLink.link.url.includes(\"//\")\n                                            ) ?\n                                                applicationStatusLink.link.url :\n                                                `//${applicationStatusLink.link.url}`\n                                        }\n                                        target=\"_blank\"\n                                    >\n                                        {applicationStatusLink.link.text}\n                                    </a>{\" \"}\n                                    |{\" \"}\n                                </span>\n                            )\n                        );\n                    }\n                ) : (\n                        <Skeleton width=\"10vmin\" />\n                    )}\n            </div>\n        );\n    };\n\n    renderFormController = (\n        application?: Application,\n        applicationStatus?: ApplicationStatus\n    ) => {\n        return (\n            <div className=\"application-status-form-controller\">\n                {/* new application status form */}\n                {(\n                    !this.state.isFormOpened ||\n                    !application // application may be still in requesting state\n                ) ? (\n                        <Button\n                            disabled={!application || this.props.applicationStatusStore.requestStatus === RequestStatus.REQUESTING} // disable action button \n                            onClick={clickEvent => {\n                                this.setState({\n                                    isFormOpened: true\n                                });\n                            }}\n                            unelevated\n                            icon={<MaterialIcon hasRipple icon=\"add\" />}\n                        >\n                            Add New Status\n                    </Button>\n                    ) : (\n                        <div className=\"application-component__status-form\">\n                            <h3>\n                                Add new status to application for{\" \"}\n                                {application.position_title}{\" \"}\n                            </h3>\n                            <ApplicationStatusFormComponentContainer\n                                application={application}\n                                applicationStatus={applicationStatus}\n                                onCancel={() => {\n                                    this.setState({\n                                        isFormOpened: false\n                                    });\n                                }}\n                                onSubmitSuccess={() => {\n                                    this.setState({\n                                        isFormOpened: false\n                                    });\n                                }}\n                            />\n                        </div>\n                    )}\n            </div>\n        );\n    };\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    // prop: store.prop\n    applicationStatusStore: store.applicationStatus\n});\n\nconst mapDispatchToProps = (\n    dispatch: Dispatch<IObjectAction<ApplicationStatus>>\n) => {\n    // actionName: (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {\n        deleteApplicationStatus: (\n            applicationStatusToDelete: ApplicationStatus,\n            callback?: Function\n        ) =>\n            dispatch(\n                ApplicationStatusActions[CrudType.DELETE][\n                    RequestStatus.TRIGGERED\n                ].action(applicationStatusToDelete, callback)\n            )\n    };\n};\n\nexport const ApplicationStatusComponentContainer = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(ApplicationStatusComponent)\n);\n","import React, { Component } from \"react\";\n\n/** Components */\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\n// mdc-react input\nimport \"@material/react-text-field/dist/text-field.css\";\nimport TextField, { Input } from \"@material/react-text-field\";\n// formik\nimport {\n    Field, FieldProps,\n    ErrorMessage,\n} from \"formik\";\n// input field\nimport { IFormRichTextFieldProps } from \"./form-rich-text-field-meta\";\n// ckeditor\n// import CKEditor from '@ckeditor/ckeditor5-react';\nimport CKEditor from '@shaungc/custom-ckeditor5-react';\n// import BalloonEditor from '@ckeditor/ckeditor5-build-balloon';\nimport BalloonEditor from '@shaungc/ckeditor5-custom-balloon';\n\nexport class FormRichTextField extends Component<IFormRichTextFieldProps> {\n    render() {\n        return (\n            <div className=\"FormRichTextField\">\n                <Field\n                    name={this.props.fieldName}\n                    render={({ field, form }: FieldProps<number | string>) => {\n                        return (\n                            <div className=\"RichTextFieldInput\">\n                                <div><strong>{this.props.label}</strong></div>\n                                <CKEditor\n                                    editor={BalloonEditor}\n                                    data={field.value}\n                                    onChange={(event: any, editor: any) => {\n                                        form.setFieldValue(field.name, editor.getData());\n                                    }}\n                                    onSaveKeystroke={this.props.onSaveKeystroke}\n                                />\n                            </div>\n                        )\n                    }}\n                />\n                <ErrorMessage name={this.props.fieldName} />\n            </div>\n        );\n    }\n}","// base field\nimport { FormBaseFieldMeta, IFormBaseFieldProps, IFieldBaseMetaProps } from \"../form-base-field/form-base-field-meta\";\n// input field\nimport { FormRichTextField } from \"./form-rich-text-field\";\n\n\n// API for caller to new props for input field\nexport interface IFormRichTextFieldProps extends IFormBaseFieldProps {\n    onSaveKeystroke?: () => void\n}\n\n// for defining meta\nexport interface IFormRichTextFieldMetaProps extends IFieldBaseMetaProps {\n}\n\nexport class FormRichTextFieldMeta extends FormBaseFieldMeta {\n\n    constructor(props: IFormRichTextFieldMetaProps) {\n        super(props)\n        this.formField = FormRichTextField;\n    }\n}","import React, { Component } from \"react\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\nimport {\n    IObjectStore,\n    IObjectAction\n} from \"../../store/rest-api-redux-factory\";\n// data models\nimport { Company } from \"../../store/data-model/company\";\nimport {\n    Application,\n    ApplicationActions\n} from \"../../store/data-model/application\";\n\n/** Components */\nimport {\n    FormFactory,\n    FormActionButtonProps,\n    ActionButtonType\n} from \"../form-factory/form-factory\";\n// form field\nimport { FormBaseFieldMeta } from \"../form-factory/form-base-field/form-base-field-meta\";\nimport { FormInputFieldMeta } from \"../form-factory/form-input-field/form-input-field-meta\";\nimport { FormLinkFieldMeta } from \"../form-factory/form-link-field/form-link-field-meta\";\nimport { FormRichTextFieldMeta } from \"../form-factory/form-rich-text-field/form-rich-text-field-meta\";\n\ninterface IApplicationFormComponentProps {\n    application?: Application;\n    onCancel: (event: any) => void;\n    onSubmitSuccess?: () => void;\n\n    company: Company;\n    /** redux */\n    applicationStore: IObjectStore<Application>;\n    createApplication: (\n        applicationFormData: Application,\n        successCallback?: Function,\n        finalCallback?: Function,\n    ) => void;\n    updateApplication: (\n        applicationFormData: Application,\n        successCallback?: Function,\n        finalCallback?: Function,\n    ) => void;\n}\n\nclass ApplicationFormComponent extends Component<\n    IApplicationFormComponentProps\n> {\n\n    formFieldPropsList: Array<FormBaseFieldMeta>;\n    actionButtonPropsList: Array<FormActionButtonProps>;\n\n    constructor(props: IApplicationFormComponentProps) {\n        super(props);\n\n        this.formFieldPropsList = [\n            new FormInputFieldMeta({\n                fieldName: \"position_title\",\n                label: \"Position Title*\",\n                autoFocus: true\n            }),\n            new FormLinkFieldMeta({\n                fieldName: \"job_description_page\",\n                label: \"Job Description Link\",\n            }),\n            new FormLinkFieldMeta({\n                fieldName: \"job_source\",\n                label: \"Job Source Link\",\n            }),\n            new FormRichTextFieldMeta({\n                fieldName: \"notes\",\n                label: \"Notes\",\n            }),\n        ];\n        this.actionButtonPropsList = [\n            new FormActionButtonProps(\n                this.props.company ? \"Save Application\" : \"Create Application\",\n                undefined,\n                ActionButtonType.SUBMIT\n            ),\n            new FormActionButtonProps(\"Cancel\", this.props.onCancel)\n        ]\n    }\n\n    render() {\n        return (\n            <div className=\"ApplicationFormComponent\">\n                {/* <FormFactory {...this.formFactoryProps} /> */}\n                <FormFactory\n                    model={Application}\n                    initialInstance={new Application({\n                        ...this.props.application,\n                    })}\n                    enforcedInstanceData={{\n                        user_company: this.props.company.uuid\n                    }}\n        \n                    formFieldPropsList={this.formFieldPropsList}\n                    actionButtonPropsList={this.actionButtonPropsList}\n        \n                    createInstanceTriggerAction={this.props.createApplication}\n                    updateInstanceTriggerAction={this.props.updateApplication}\n\n                    onSubmitSuccess={this.props.onSubmitSuccess}\n                />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    applicationStore: store.application\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<Application>>) => {\n    return {\n        createApplication: (\n            applicationFormData: Application,\n            successCallback?: Function,\n            finalCallback?: Function,\n        ) =>\n            dispatch(\n                ApplicationActions[CrudType.CREATE][\n                    RequestStatus.TRIGGERED\n                ].action(applicationFormData, successCallback, undefined, finalCallback)\n            )\n        ,\n        updateApplication: (\n            applicationFormData: Application,\n            successCallback?: Function,\n            finalCallback?: Function,\n        ) =>\n            dispatch(\n                ApplicationActions[CrudType.UPDATE][\n                    RequestStatus.TRIGGERED\n                ].action(applicationFormData, successCallback, undefined, finalCallback)\n            )\n        ,\n    };\n};\n\nexport const ApplicationFormComponentContainer = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ApplicationFormComponent);\n","import React, { Component } from \"react\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport {\n    Application,\n    ApplicationActions\n} from \"../../store/data-model/application\";\nimport { IRootState } from \"../../store/types\";\nimport { IObjectAction, IObjectStore } from \"../../store/rest-api-redux-factory\";\nimport { Dispatch } from \"redux\";\n\n/** data model */\nimport { ApplicationStatus } from \"../../store/data-model/application-status\";\nimport { Company } from \"../../store/data-model/company\";\n\n/** rest api */\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\n\n/** Components */\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\nimport IconButton from \"@material/react-icon-button\";\nimport { ApplicationStatusComponentContainer } from \"../application-status/application-status-component\";\nimport { ApplicationFormComponentContainer } from \"./application-form-component\";\nimport Card, { CardPrimaryContent } from \"@material/react-card\";\nimport List, { ListItem, ListItemText } from \"@material/react-list\";\nimport {\n    Headline6,\n} from '@material/react-typography';\n/** CKeditor */\n// import CKEditor from '@ckeditor/ckeditor5-react';\nimport CKEditor from '@shaungc/custom-ckeditor5-react';\n// import BalloonEditor from '@ckeditor/ckeditor5-build-balloon';\nimport BalloonEditor from '@shaungc/ckeditor5-custom-balloon';\n\nimport Skeleton from 'react-loading-skeleton';\n\nimport styles from './application-component.module.css';\n\n/** Types */\ninterface IApplicationComponentProps {\n    application?: Application;\n\n    disableApplicationActionButtons?: boolean\n\n    /** application form */\n    company?: Company;\n\n    isOnlyForm?: boolean;\n\n    applicationStatusList?: Array<ApplicationStatus>;\n\n    /** redux */\n    applicationStatusStore: IObjectStore<ApplicationStatus>;\n\n    deleteApplication: (\n        applicationToDelete: Application,\n        callback?: Function\n    ) => void;\n}\n\ninterface IApplicationComponentState {\n    isFormOpened: boolean;\n}\n\n/** Main Class */\nexport class ApplicationComponent extends Component<\n    IApplicationComponentProps,\n    IApplicationComponentState\n    > {\n    state = {\n        isFormOpened: false\n    };\n\n    render() {\n        if (!this.state.isFormOpened && this.props.isOnlyForm) {  // company may still be in requesting state, when attempt to render form\n            return (\n                <Button\n                    disabled={!this.props.company}\n                    onClick={clickEvent => {\n                        this.setState({\n                            isFormOpened: true\n                        });\n                    }}\n                    unelevated\n                    icon={<MaterialIcon hasRipple icon=\"add\" />}\n                >\n                    Add Application\n                </Button>\n            )\n        }\n\n        return (\n            <div className={styles.applicationCard}>\n                <div className={styles.applicationCardContent}>\n                    {(!this.state.isFormOpened && !this.props.isOnlyForm) ? (\n                        this.renderApplicationDisplay(\n                            this.props.application,\n                            this.props.applicationStatusList\n                        )\n                    ) : (\n                            this.renderApplicationFormController()\n                        )}\n                </div>\n            </div>\n\n        )\n    }\n\n    renderApplicationFormController = () => {\n        return this.props.company && (\n            // application create or udpate must have company associate with it.\n            <div className=\"application-form-controller\">\n                <h2>New Application</h2>\n                <ApplicationFormComponentContainer\n                    onCancel={event => {\n                        process.env.NODE_ENV === 'development' && console.log(\"onCancel clicked\");\n                        this.setState({\n                            isFormOpened: false\n                        });\n                    }}\n                    onSubmitSuccess={() =>\n                        this.setState({\n                            isFormOpened: false\n                        })\n                    }\n                    company={this.props.company}\n                    application={this.props.application}\n                />\n            </div>\n        );\n    };\n\n    renderApplicationDisplay = (\n        application?: Application,\n        applicationStatusList: Array<ApplicationStatus> = []\n    ) => {\n\n        return (\n            <div className=\"application-component-display\">\n                {/* application display view */}\n                <h3>{application ? application.position_title : <Skeleton />}\n                    {/* external link icon */}\n                    {\n                        application ? (\n                            <IconButton\n                                disabled={application.job_description_page.url == \"#\"}\n                                isLink={application.job_description_page.url != \"#\"} target=\"_blank\" href={application.job_description_page.url && application.job_description_page.url.includes(\"//\") ?\n                                    application.job_description_page.url :\n                                    `//${application.job_description_page.url}`}\n                            >\n                                <MaterialIcon hasRipple icon=\"launch\" />\n                            </IconButton>\n                        ) : (\n                                <IconButton disabled>\n                                    <MaterialIcon hasRipple icon=\"launch\" />\n                                </IconButton>\n                            )\n                    }\n\n                    {/* external link icon */}\n                    {\n                        application ? (\n                            <IconButton\n                                disabled={application.job_source.url == \"#\"}\n                                isLink={application.job_source.url != \"#\"} target=\"_blank\" href={application.job_source.url && application.job_source.url.includes(\"//\") ?\n                                    application.job_source.url :\n                                    `//${application.job_source.url}`}\n                            >\n                                <MaterialIcon hasRipple icon=\"language\" />\n                            </IconButton>\n                        ) : (\n                                <IconButton disabled>\n                                    <MaterialIcon hasRipple icon=\"language\" />\n                                </IconButton>\n                            )\n                    }\n\n                    {/* application actions */}\n                    {\n                        application ? (\n                            <IconButton\n                                disabled={this.props.disableApplicationActionButtons}\n                                onClick={() => {\n                                    this.setState({\n                                        isFormOpened: true // open form and close display\n                                    });\n                                }}\n                            >\n                                <MaterialIcon hasRipple icon=\"edit\" />\n                            </IconButton>\n                        ) : (\n                                <IconButton disabled>\n                                    <MaterialIcon hasRipple icon=\"edit\" />\n                                </IconButton>\n                            )\n                    }\n\n                    {\n                        application ? (\n                            <IconButton\n                                disabled={this.props.disableApplicationActionButtons}\n                                onClick={() =>\n                                    this.props.deleteApplication(application)\n                                }\n                            >\n                                <MaterialIcon hasRipple icon=\"delete\" />\n                            </IconButton>\n                        ) : (\n                                <IconButton disabled>\n                                    <MaterialIcon hasRipple icon=\"delete\" />\n                                </IconButton>\n                            )\n                    }\n                </h3>\n\n                <div className=\"applicationNotesRichText\">\n                    {application ? (application.notes ? (\n                        <CKEditor\n                            editor={BalloonEditor}\n                            disabled={true}\n                            data={application.notes}\n                        />\n\n                    ) : (\n                            <p>\n                                No notes yet.\n                            </p>\n                        )) : (\n                            <div>\n                                <div><Skeleton width=\"70vmin\" /></div>\n                                <div><Skeleton width=\"30vmin\" /></div>\n                                <div><Skeleton width=\"50vmin\" /></div>\n                            </div>\n                        )}\n                </div>\n\n                {/* application statuses list */}\n                <div className=\"statusContainer\">\n                    <Headline6>Status</Headline6>\n\n                    {\n                        (this.props.applicationStatusStore.requestStatus === RequestStatus.REQUESTING) && (\n                            <ApplicationStatusComponentContainer />\n                        )\n                    }\n\n                    {\n                        application && (\n                            applicationStatusList.map(applicationStatus => {\n                                return (\n                                    <ApplicationStatusComponentContainer\n                                        key={applicationStatus.uuid}\n                                        applicationStatus={applicationStatus}\n                                        application={application}\n                                    />\n                                );\n                            })\n                        )\n                    }\n\n                    {/* application status form controller */}\n                    {\n                        <ApplicationStatusComponentContainer\n                            application={application}\n                            isOnlyForm\n                        />\n                    }\n                </div>\n            </div>\n        );\n    };\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    applicationStatusStore: store.applicationStatus\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<Application>>) => {\n    // actionName: (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {\n        deleteApplication: (\n            applicationToDelete: Application,\n            callback?: Function\n        ) =>\n            dispatch(\n                ApplicationActions[CrudType.DELETE][\n                    RequestStatus.TRIGGERED\n                ].action(applicationToDelete, callback)\n            )\n    };\n};\n\nexport const ApplicationComponentController = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ApplicationComponent);\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\n\n/** Redux */\nimport { Company } from \"../../store/data-model/company\";\n\n/** Components */\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc-react icon button\nimport '@material/react-icon-button/dist/icon-button.css';\nimport IconButton from '@material/react-icon-button';\n\nimport Skeleton from 'react-loading-skeleton';\n\nimport styles from './company-component.module.css';\n\ninterface ICompanyComponentProps {\n    company: Company;\n    onDeleteIconClicked?: (event: any) => void\n    onEditIconClicked?: (event: any) => void\n    actionButtonsDisabled?: boolean\n}\n\nexport class CompanyComponent extends Component<ICompanyComponentProps> {\n    render() {\n        const company = this.props.company;\n\n        return (\n            <div className=\"CompanyComponent\">\n                <div className={styles.companyTitleContainer}>\n                    <h1>{company ? company.name : <Skeleton width=\"50vmin\" />}</h1>\n\n                    {/* company link */}\n                    {\n                        company ? (\n                            <IconButton\n                                disabled={company.home_page.url == \"#\"}\n                                isLink={company.home_page.url != \"#\"} // isLink=true will make `disabled` useless, a bug\n                                target=\"_blank\"\n                                href={company.home_page.url && company.home_page.url.includes('//') ? company.home_page.url : `//${company.home_page.url}`}>\n                                <MaterialIcon hasRipple icon=\"launch\" />\n                            </IconButton>\n                        ) : (\n                                <IconButton disabled>\n                                    <MaterialIcon hasRipple icon=\"launch\" />\n                                </IconButton>\n                            )\n                    }\n\n                    {/* company actions */}\n                    {\n                        <div className=\"CompanyActions\">\n                            <IconButton disabled={this.props.actionButtonsDisabled} onClick={this.props.onEditIconClicked}>\n                                <MaterialIcon hasRipple icon=\"edit\" />\n                            </IconButton>\n                            <IconButton disabled={this.props.actionButtonsDisabled} onClick={this.props.onDeleteIconClicked}>\n                                <MaterialIcon hasRipple icon=\"delete\" />\n                            </IconButton>\n                        </div>\n                    }\n                </div>\n                <div className={styles.companyTitleCaption}>{company ? company.hq_location.place_name : <Skeleton />}{company ? company.hq_location.full_address : <Skeleton />}</div>\n            </div>\n        );\n    }\n}\n","import React, { Component } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { RouteComponentProps } from \"react-router\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\n// rest api\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\nimport {\n    IObjectStore,\n    IObjectAction\n} from \"../../store/rest-api-redux-factory\";\nimport { Company, CompanyActions } from \"../../store/data-model/company\";\nimport { Link } from \"../../store/data-model/link\";\nimport {\n    Application,\n    ApplicationActions\n} from \"../../store/data-model/application\";\nimport { ApplicationStatus } from \"../../store/data-model/application-status\";\n\n/** Components */\n// import { CompanyApplicationComponentContainer } from \"../../components/company-application/company-application-component\";\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n// mdc-react input\nimport \"@material/react-text-field/dist/text-field.css\";\nimport { ApplicationComponentController } from \"../../components/application/application-component\";\nimport { CompanyComponent } from \"../../components/company/company-component\";\n\nimport styles from \"./user-com-app-page.module.css\";\n\ninterface IUserComAppPageParams {\n    uuid: string;\n}\n\ninterface IUserComAppPageProps\n    extends RouteComponentProps<IUserComAppPageParams> {\n    companyStore: IObjectStore<Company>;\n    applicationStore: IObjectStore<Application>;\n    applicationStatusStore: IObjectStore<ApplicationStatus>;\n\n    createApplication: (\n        applicationFormData: Application,\n        callback?: Function\n    ) => void;\n\n    deleteCompany: (companyToDelete: Company, callback?: Function) => void;\n    updateCompany: (companyToUpdate: Company, callback?: Function) => void;\n}\n\n\nclass UserComAppPage extends Component<IUserComAppPageProps> {\n    componentDidMount() {\n        let companyUuid = this.props.match.params.uuid;\n        process.env.NODE_ENV === 'development' && console.log(\"mount, got uuid from route?\", companyUuid);\n    }\n\n    goBackToCompanyListPage = () => {\n        this.props.history.replace('/home/');\n    }\n\n    onCompanyDelete = () => {\n        if (this.props.match.params.uuid) {\n            const company = this.props.companyStore.collection[this.props.match.params.uuid];\n            this.props.deleteCompany(company, this.goBackToCompanyListPage);\n            return;\n        }\n\n        console.error(\"Attempted to delete but company obj has no uuid\");\n    }\n\n    onCompanyEdit = () => {\n        if (this.props.match.params.uuid) {\n            const company = this.props.companyStore.collection[this.props.match.params.uuid];\n            this.props.history.push(`/com-form/${company.uuid}/`);\n        }\n\n        console.error(\"Attempted to edit but no company uuid provided\");\n    }\n\n    renderPage() {\n        if (!this.props.match.params.uuid) {\n            return;\n        }\n\n        const company = this.props.companyStore.collection[this.props.match.params.uuid];\n        const applications = company ? Object.values(this.props.applicationStore.collection).filter(\n            application =>\n                application.user_company === company.uuid\n        ) : [];\n\n        return (\n            <div className={styles.UserCompanyPage}>\n                <Button\n                    onClick={_ => {\n                        this.props.history.length > 1 ? this.props.history.goBack()  : this.props.history.push('/home/');\n                    }}\n                >\n                    Back\n                </Button>\n\n                <CompanyComponent\n                    company={company}\n                    onDeleteIconClicked={this.onCompanyDelete}\n                    onEditIconClicked={this.onCompanyEdit}\n                    actionButtonsDisabled={this.props.companyStore.requestStatus === RequestStatus.REQUESTING}\n                />\n\n                <h2>Your Applications</h2>\n                {/* add application button - application form controller - always create form */}\n                <div>\n                    <ApplicationComponentController\n                        company={company}\n                        isOnlyForm\n                    />\n                </div>\n\n                {/* application list */}\n                {/* {company.uuid && (\n                    <CompanyApplicationComponentContainer\n                        company={company}\n                        isShowApplicationStatuses\n                    />\n                )} */}\n                {company ? applications.map(application => {\n                    const applicationStatusList = application ? Object.values(\n                            this.props.applicationStatusStore\n                                .collection\n                        ).filter(\n                            applicationStatus =>\n                                applicationStatus.application ===\n                                application.uuid\n                        ) : [];\n                    return (\n                        <ApplicationComponentController\n                            key={application.uuid}\n                            application={application}\n                            company={company}\n                            applicationStatusList={applicationStatusList}\n                            disableApplicationActionButtons={this.props.applicationStore.requestStatus === RequestStatus.REQUESTING}\n                        />\n                    )\n                }) : (\n                    <ApplicationComponentController \n                        disableApplicationActionButtons\n                    />\n                )}\n\n            </div>\n        );\n    }\n\n    renderController() {\n        if (!this.props.match.params.uuid) {\n            return <h1>Company uuid not specified</h1>\n        }\n\n        if (this.props.companyStore.requestStatus === RequestStatus.REQUESTING) {\n            return this.renderPage();\n        }\n\n        if (!this.props.companyStore.collection) {\n            return <h1>You don't have any company yet</h1>\n        }\n\n        if (!(this.props.match.params.uuid in this.props.companyStore.collection)) {\n            return <h1>Company not found</h1>\n        }\n\n        return this.renderPage();\n    }\n\n    // handle invalid company uuid given in url\n    render() {\n        return (\n            <div className=\"UserComAppPageContainer\">\n                {this.renderController()}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => {\n    return {\n        // prop: store.prop\n        companyStore: store.company,\n        applicationStore: store.application,\n        applicationStatusStore: store.applicationStatus\n    };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<Application>>) => {\n    // actionName = (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {\n        createApplication: (\n            applicationFormData: Application,\n            callback?: Function\n        ) =>\n            dispatch(\n                ApplicationActions[CrudType.CREATE][\n                    RequestStatus.TRIGGERED\n                ].action(applicationFormData, callback)\n            )\n        ,\n        deleteCompany: (companyToDelete: Company, callback?: Function) =>\n            dispatch(\n                CompanyActions[CrudType.DELETE][RequestStatus.TRIGGERED].action(\n                    companyToDelete,\n                    callback\n                )\n            ),\n        updateCompany: (companyToUpdate: Company, callback?: Function) =>\n            dispatch(\n                CompanyActions[CrudType.UPDATE][RequestStatus.TRIGGERED].action(\n                    companyToUpdate,\n                    callback\n                )\n            )\n    };\n};\n\nexport const UserComAppPageContainer = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(UserComAppPage)\n);\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { IUpdateAuthState } from \"../../store/auth/types\";\n\ninterface UserInfoProps {\n    auth: IUpdateAuthState;\n}\n\nexport class UserInfo extends Component<UserInfoProps, any> {\n    render() {\n        return (\n            <div>\n                <div>\n                    Logged in:{\" \"}\n                    {(this.props.auth.isLogin &&\n                        this.props.auth.isLogin.toString()) ||\n                        \"undefine\"}\n                </div>\n                <div>User Name: {this.props.auth.userName || \"(empty)\"}</div>\n            </div>\n        );\n    }\n}\n","import React from \"react\";\n\n/** Components */\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n\ninterface ILocalLogoutButtonProps {\n    onClick: () => void;\n    disabled?: boolean;\n}\n\nconst LocalLogoutButton = (props: ILocalLogoutButtonProps) => {\n    return (\n        <div className=\"UserAuthButton\">\n            <Button\n                onClick={props.onClick}\n                unelevated\n                icon={\n                    <MaterialIcon hasRipple icon=\"account_circle\" />\n                }\n                disabled={props.disabled}\n            >\n                Local Logout\n                    </Button>\n        </div>\n    );\n}\n\nexport {\n    LocalLogoutButton\n};","import React, { Component, Dispatch } from \"react\";\n\n/** redux */\nimport { AnyAction } from \"redux\";\nimport { connect } from \"react-redux\";\nimport { IRootState } from \"../../store/types\";\nimport { IUpdateAuthState } from \"../../store/auth/types\";\nimport { RequestedLogoutAuth } from \"../../store/auth/actions\";\n\n/** Routes & pages */\nimport { UserInfo } from \"../../components/user-info/user-info\";\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\n\n/** Components */\nimport \"./user-profile-page.css\"\n\nimport { SocialAuthButtonContainer } from \"../../components/login/social-auth-button\";\nimport { LocalLogoutButton } from \"../../components/login/local-logout-button\";\n\n\ninterface IUserProfilePageProps extends RouteComponentProps {\n    /** redux store state */\n    auth: IUpdateAuthState;\n\n    /** action dispatcher */\n    requestedLogoutAuth: () => void;\n}\n\nclass UserProfilePage extends Component<IUserProfilePageProps, any> {\n    localLogoutButton = () => {\n        this.props.requestedLogoutAuth();\n    }\n\n    render() {\n        return (\n            <div className=\"UserProfilePage\">\n                <h1>{this.props.auth.userName}'s profile</h1>\n                <div>\n                    isLocal = {JSON.stringify(this.props.auth.isLocal)}\n                </div>\n                <UserInfo auth={this.props.auth} />\n                {\n                    !this.props.auth.isLocal ? (\n                        <SocialAuthButtonContainer />\n                    ) : (\n                        <LocalLogoutButton \n                            onClick={this.localLogoutButton}\n                        />\n                    )\n                }\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => {\n    return {\n        auth: store.auth\n    };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>) => { \n    return {\n        requestedLogoutAuth: () => {\n            dispatch(\n                RequestedLogoutAuth()\n            );\n        },\n    }\n}\n\nexport const UserProfilePageContainer = withRouter(connect(mapStateToProps, mapDispatchToProps)(UserProfilePage));\n","import React, { Component } from \"react\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { IRootState } from \"../../store/types\";\nimport { IUpdateAuthState } from \"../../store/auth/types\";\n\nimport { RequestStatus } from \"../../utils/rest-api\";\n\n/** Routing & Pages */\nimport {\n    Route,\n    Redirect,\n    Switch,\n    Link,\n    withRouter,\n    RouteComponentProps\n} from \"react-router-dom\";\n// pages\nimport { LandingPageContainer } from \"../landing-page/landing-page\";\nimport { LocalLoginPageContainer } from \"../login-page/local-login-page\";\nimport { UserAppPageContainer } from \"../user-app-page/user-app-page\";\nimport { AddComPageContainer } from \"../add-com-page/add-com-page\";\nimport { UserComAppPageContainer } from \"../user-com-app-page/user-com-app-page\";\nimport { UserProfilePageContainer } from \"../user-profile-page/user-profile-page\";\n// transition effects\nimport {\n    TransitionGroup,\n    CSSTransition\n} from \"react-transition-group\";\n\n/** MDC React */\nimport TopAppBar, {\n    TopAppBarFixedAdjust,\n    TopAppBarIcon,\n    TopAppBarRow,\n    TopAppBarSection,\n    TopAppBarTitle,\n} from '@material/react-top-app-bar';\nimport \"@material/react-top-app-bar/dist/top-app-bar.css\";\n\nimport LinearProgress from '@material/react-linear-progress';\nimport '@material/react-linear-progress/dist/linear-progress.css';\n\nimport '@material/react-material-icon/dist/material-icon.css';\nimport MaterialIcon from \"@material/react-material-icon\";\n\nimport \"@material/react-ripple/dist/ripple.css\";\n// import {withRipple} from '@material/react-ripple';\n\nimport \"./page-routes.css\";\nimport styles from \"./page-routes.module.css\";\n\n\nconst publicPageSet = new Set([\n    \"/\",\n    \"/local-login/\",\n    // add more public page routres here\n    // ...\n]);\n\n\ninterface IPageRoutesRouterParams {\n    next?: string;\n}\n\n\ninterface IPageRoutesProps extends RouteComponentProps<IPageRoutesRouterParams> {\n    auth: IUpdateAuthState;\n}\n\n\nclass PageRoutes extends Component<IPageRoutesProps> {\n    goHome = () => {\n        this.props.location.pathname === '/home/' ? this.props.history.replace('/home/') : this.props.history.push('/home/');\n    }\n\n    goInternal = (): string => {\n        if (!this.props.location.search) {\n            return \"/home/\";\n        }\n\n        const query = new URLSearchParams(this.props.location.search);\n        const nextUrl = query.get(\"next\");\n        if (!nextUrl) {\n            return \"\";\n        }\n\n        return nextUrl;\n    }\n \n    isCurrentPublicPage = () => {\n        return publicPageSet.has(this.props.location.pathname);\n    }\n\n    render() {\n        return (\n            <div className={`PageRoutesContainer`}>\n                {this.isCurrentPublicPage() ? (\n                        <div className=\"PublicRoutesContainer\">\n                            {/** direct user to internal page if logged in */\n                            this.props.auth.isLogin && <Redirect to={this.goInternal()} />}\n\n                            <Switch>\n                                <Route path=\"/\" exact component={LandingPageContainer} />\n                                <Route path=\"/local-login/\" exact component={LocalLoginPageContainer} />\n                                {\n                                    /** add more public page routes here */\n                                    // ...\n                                }\n                            </Switch>\n                        </div>\n                    ) : (\n                        <div className=\"PrivateRoutesContainer\">\n                            {/** protect private routes, but let people come back the internal page they want to access after they login */\n                                !this.props.auth.isLogin && <Redirect to={`/?next=${this.props.location.pathname}`} />}\n\n                            <TopAppBar>\n                                <TopAppBarRow>\n                                    <TopAppBarSection align=\"start\">\n                                        {/* <TopAppBarIcon>\n                                            <MaterialIcon hasRipple icon='menu' />\n                                        </TopAppBarIcon> */}\n                                        <TopAppBarTitle className={styles.topAppBarTitle} onClick={this.goHome}>Appl Tracky</TopAppBarTitle>\n                                    </TopAppBarSection>\n                                    <TopAppBarSection align='end' role='toolbar'>\n                                        <TopAppBarIcon navIcon tabIndex={0}>\n                                            <Link to=\"/home/\">\n                                                <MaterialIcon\n                                                    hasRipple\n                                                    key=\"itemHome\"\n                                                    icon=\"home\"\n                                                />\n                                            </Link>\n                                        </TopAppBarIcon>\n                                        <TopAppBarIcon navIcon tabIndex={1}>\n                                            <Link to=\"/profile/\">\n                                                {!this.props.auth.avatarUrl ? (\n                                                    <MaterialIcon\n                                                        hasRipple\n                                                        key=\"itemProfile\"\n                                                        icon=\"account_circle\"\n                                                    />\n                                                ) : (\n                                                        <img style={{\n                                                            \"height\": \"100%\",\n                                                            \"borderRadius\": \"50%\",\n                                                        }} src={this.props.auth.avatarUrl} />\n                                                    )}\n                                            </Link>\n                                        </TopAppBarIcon>\n                                    </TopAppBarSection>\n                                </TopAppBarRow>\n                            </TopAppBar>\n\n                            <TopAppBarFixedAdjust>\n\n                                <LinearProgress\n                                    indeterminate={this.props.auth.requestStatus === RequestStatus.REQUESTING}\n\n                                    // mdc's progress bar bug workaround\n                                    // when press back button, avoid showing dotted buffer animation\n                                    buffer={1}\n                                    bufferingDots={true}\n                                />\n\n                                <TransitionGroup>\n                                    <CSSTransition\n                                        key={this.props.location.key}\n                                        classNames=\"page\"\n                                        timeout={400}\n                                    >\n                                        <Switch location={this.props.location}>\n                                            <Route\n                                                path=\"/home/\"\n                                                component={UserAppPageContainer}\n                                            />\n                                            <Route\n                                                path=\"/com-form/:uuid?/\"\n                                                component={AddComPageContainer}\n                                            />\n                                            <Route\n                                                path=\"/com-app/:uuid/\"\n                                                component={UserComAppPageContainer}\n                                            />\n                                            <Route\n                                                path=\"/com-app/\"\n                                                component={UserComAppPageContainer}\n                                            />\n                                            <Route\n                                                path=\"/profile/\"\n                                                component={UserProfilePageContainer}\n                                            />\n                                            {/** add more private page routes here */}\n                                        </Switch>\n                                    </CSSTransition>\n                                </TransitionGroup>\n                            </TopAppBarFixedAdjust>\n                        </div>\n                    )}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    auth: store.auth\n});\n\nconst mapDispatchToProps = {};\n\nexport const PageRoutesContainer = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(PageRoutes)\n);\n","/** React core */\nimport React, { Component, Dispatch } from \"react\";\n\n/** Redux */\nimport { AnyAction } from \"redux\";\nimport { connect } from \"react-redux\";\nimport { IRootState } from \"./store/types\";\nimport { RequestedLoginAuth } from \"./store/auth/actions\";\nimport { RequestedLoginMode } from \"./store/auth/types\";\n\n/** Routes & pages */\nimport { PageRoutesContainer } from \"./pages/page-routes/page-routes\";\n\n/** Locals */\nimport \"./App.css\";\n\n\ninterface IAppProps {\n    retrieveLoginAuth: () => void;\n}\n\nclass App extends Component<IAppProps> {\n    componentDidMount() {\n        this.props.retrieveLoginAuth();\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <PageRoutesContainer />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => {\n    return {\n    };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>) => { \n    return {\n        retrieveLoginAuth: () => {\n            dispatch(\n                RequestedLoginAuth(RequestedLoginMode.PREFILL)\n            );\n        },\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          process.env.NODE_ENV === 'development' && console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              process.env.NODE_ENV === 'development' && console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              process.env.NODE_ENV === 'development' && console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      process.env.NODE_ENV === 'development' && console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export enum RootActionNames {\n    ResetAllStore = \"RESET_ALL_STORE\"\n}\n\nexport const resetAllStoreAction = () => {\n    return {\n        type: RootActionNames.ResetAllStore,\n    }\n}","import { Reducer, Action } from 'redux';\n\nimport { \n    /** store */\n    IUpdateAuthState, \n    /** action */\n    AuthActionNames, TAuthActions \n} from \"./types\";\n\nimport { RequestStatus } from \"../../utils/rest-api\";\n\nconst initialAuthState: IUpdateAuthState = {\n    requestStatus: RequestStatus.SUCCESS, // initial status just set to SUCCESS\n    isLogin: false,\n    isLocal: false,\n    socialAuthToken: \"\",\n    apiToken: \"\",\n    userName: \"\",\n    expireDateTime: \"\",\n    avatarUrl: \"\",\n}\n\n// authStore will be stored as a sub-entry in global store; this is defined in ./store/types.ts\nexport const authReducer: Reducer<IUpdateAuthState> = (authStore = initialAuthState, action: Action)  => {\n    // add reducer for new actions here\n    // ...\n\n    const authAction = action as TAuthActions;\n\n    if (authAction.type === AuthActionNames.SUCCESS_AUTH) {\n        localStorage.setItem(process.env.NODE_ENV === 'development' ? 'dev__applyTracky__authState' : 'applyTracky__authState', JSON.stringify(authAction.payload));\n    }\n\n    return {\n        ...authStore,\n        ...authAction.payload\n    }\n}","/** redux */\nimport {\n    AuthActionNames,\n    IRequestedLoginAuthAction,\n    IRequestedLogoutAuthAction\n} from \"../../store/auth/types\";\nimport {\n    SuccessLoginAuth,\n    SuccessLogoutAuth,\n    FailureAuth\n} from \"../../store/auth/actions\";\nimport { resetAllStoreAction } from \"../../store/actions\";\nimport { CompanyActions, Company } from \"../../store/data-model/company\";\nimport { ApplicationActions, Application } from \"../../store/data-model/application\";\nimport { ApplicationStatusActions, ApplicationStatus } from \"../../store/data-model/application-status\";\n// redux-saga\nimport { takeEvery, call, put } from \"redux-saga/effects\";\n\n/** router */\nimport { push } from \"connected-react-router\";\n\n/** api */\nimport { AuthenticationService } from \"../../utils/authentication\";\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\n\nfunction* authLoginSagaHandler(\n    requestedLoginAuthAction: IRequestedLoginAuthAction\n) {\n    // RequestAuth action triggered & injecting side effects here...\n    process.env.NODE_ENV === 'development' && console.log(\"auth saga: initialize\");\n    \n    const {\n        loginMode, \n        params={},\n        onCompleteCallback\n    } = requestedLoginAuthAction;\n    \n    try {\n        // TODO: define interface typing for api response\n\n        const jsonResponse = yield call(AuthenticationService.serverLogin, loginMode, params);\n\n        process.env.NODE_ENV === 'development' && console.log(\"auth saga: server login, jsonRes=\", jsonResponse);\n\n        // In prefill login case, if cannot restore/refresh login session\n        if (!jsonResponse.token) {\n            yield put(SuccessLogoutAuth());\n            return;\n        }\n\n        yield put(SuccessLoginAuth(\n            jsonResponse.email, \"\", \n            jsonResponse.token, \n            jsonResponse.avatar_url,\n            jsonResponse.isLocal\n        ));\n\n        // initial fetch user data\n        yield put(ApplicationActions[CrudType.LIST][RequestStatus.TRIGGERED].action(new Application({})))\n        yield put(CompanyActions[CrudType.LIST][RequestStatus.TRIGGERED].action(new Company({})))\n        yield put(ApplicationStatusActions[CrudType.LIST][RequestStatus.TRIGGERED].action(new ApplicationStatus({})))\n    } catch (error) {\n        console.warn(`auth saga error: ${JSON.stringify(error)}`);\n        yield put(FailureAuth(error));\n    }\n\n    onCompleteCallback && onCompleteCallback();\n}\n\nexport function* authLoginSaga() {\n    yield takeEvery(AuthActionNames.REQUESTED_LOGIN_AUTH, authLoginSagaHandler);\n}\n\nfunction* authLogoutSagaHandler(\n    requestedLogoutAuthAction: IRequestedLogoutAuthAction\n) {\n    // RequestAuth action triggered & injecting side effects here...\n    process.env.NODE_ENV === 'development' && console.log(\"auth logout saga: fired\");\n    try {\n        yield call(AuthenticationService.serverLogout);\n\n        // clear all store\n    } catch (error) {\n        yield put(FailureAuth(error));\n        return;\n    }\n\n    process.env.NODE_ENV === 'development' && console.log(\"auth logout saga: navigating\");\n    yield put(SuccessLogoutAuth());\n    // yield put(push(\"/\"));\n\n    // clear all redux store\n    yield put(resetAllStoreAction());\n}\n\nexport function* authLogoutSaga() {\n    yield takeEvery(\n        AuthActionNames.REQUESTED_LOGOUT_AUTH,\n        authLogoutSagaHandler\n    );\n}\n\n// add new saga handler here && a `takeEvery` saga.\n// ...","import createSagaMiddleware from 'redux-saga';\nimport { all } from \"redux-saga/effects\";\nimport { authLoginSaga, authLogoutSaga } from \"./auth/sagas\";\n// rest api\nimport { CompanySagas } from \"../store/data-model/company\";\nimport { ApplicationSagas } from \"../store/data-model/application\";\nimport { ApplicationStatusSagas } from \"../store/data-model/application-status\";\n\n/** setup saga */\nconst sagaMiddleware = createSagaMiddleware();\n\nexport {\n    sagaMiddleware\n};\n\nconst rootSaga = function*() {\n    yield all([\n        authLoginSaga(),\n        authLogoutSaga(),\n        ...CompanySagas.map((saga) => saga()),\n        ...ApplicationSagas.map((saga) => saga()),\n        ...ApplicationStatusSagas.map((saga) => saga()),\n        // add new saga here\n        // ...\n    ]);\n};\n\nexport const runSagaMiddleaware = () => {\n    sagaMiddleware.run(rootSaga)\n}\n\n","/** redux */\nimport { combineReducers, Reducer, AnyAction, Action } from \"redux\";\nimport { connectRouter, LocationChangeAction } from 'connected-react-router';\nimport { authReducer } from \"./auth/reducers\";\nimport { TAuthActions } from \"./auth/types\";\nimport { IRootState } from \"./types\";\nimport { RootActionNames } from \"./actions\";\n// rest api\nimport { CompanyReducer } from \"./data-model/company\";\nimport { ApplicationReducer } from \"./data-model/application\";\nimport { ApplicationStatusReducer } from \"./data-model/application-status\";\n\n/** router */\nimport { History } from \"history\";\n\n// root reducer with router state\nexport const createRootReducer = (history: History<any>): Reducer<IRootState> => {\n    // return combineReducers<IRootState>({\n    //     router: connectRouter(history),\n    \n    //     // add more reducers here\n    //     auth: authReducer,\n    //     company: CompanyReducer,\n    //     address: AddressReducer,\n    //     application: ApplicationReducer,\n    //     // ...\n    // })\n\n    const rootReducer: Reducer<IRootState> = (rootState: IRootState | undefined, action: Action): IRootState  => {\n\n        let rootStateChecked: any = {}\n        if (!rootState) {\n            rootStateChecked.router = undefined;\n            rootStateChecked.auth = undefined;\n            rootStateChecked.company = undefined;\n            rootStateChecked.application = undefined;\n            rootStateChecked.applicationStatus = undefined;\n            // add initial state for new sub-store here\n            // ...\n        } else if (action.type === RootActionNames.ResetAllStore) {\n            rootStateChecked = {\n                router: rootState.router\n            }\n        } else {\n            rootStateChecked = rootState;\n        }\n\n        process.env.NODE_ENV === 'development' && console.log(\"beforeRootStore\", rootState);\n\n        const afterStore  = { \n            ...rootState,\n            router: connectRouter(history)(rootStateChecked.router, action as LocationChangeAction),\n            auth: authReducer(rootStateChecked.auth, action),\n            company: CompanyReducer(rootStateChecked.company, action),\n            application: ApplicationReducer(rootStateChecked.application, action),\n            applicationStatus: ApplicationStatusReducer(rootStateChecked.applicationStatus, action),\n            // add new reducer here\n            // ...\n        }\n        process.env.NODE_ENV === 'development' && console.log(\"afterRootStore\", afterStore);\n\n        return afterStore;\n    }\n\n    return rootReducer;\n}","/** redux */\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport { IRootState } from \"../store/types\";\nimport { createRootReducer } from \"../store/reducers\";\n\n/** router */\nimport { createBrowserHistory } from 'history';\nimport { routerMiddleware } from 'connected-react-router';\n\n/** middleware */\n// saga\nimport { sagaMiddleware, runSagaMiddleaware } from \"../sagas/saga-config\";\n\n\n\nconst history = createBrowserHistory({\n    basename: (process.env.NODE_ENV === 'development') ?  \n    ``\n    :\n    // since we use custom domain which has root dir of /\n    // we no longer need a base subpath\n    // the subpath is originally used for github page\n    ``\n    // `/appl-tracky-spa`\n});\n\nconst preloadedState = {\n\n};\n\n// generate the singleton store from redux\nexport const store = createStore<IRootState, any, any, any>(\n    createRootReducer(history),\n    preloadedState,\n    compose(\n        applyMiddleware(\n            routerMiddleware(history),\n            sagaMiddleware,\n            // ... add other middlewares ...\n        )\n    )\n);\n\n/** after mount saga middlewares to store, run them */\nrunSagaMiddleaware();\n\nexport {\n    history\n};","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n/** redux */\nimport { Provider } from \"react-redux\";\nimport { Store } from \"redux\";\n/** root store */\nimport { IRootState } from \"./store/types\";\nimport { store } from \"./store/store-config\";\n\n/** router */\nimport { ConnectedRouter } from \"connected-react-router\";\nimport { history } from \"./store/store-config\";\n\n/** types */\ninterface IRootProps {\n    store: Store<IRootState>;\n}\n\n/** root component - just to wrap the App into redux store */\nconst Root: React.SFC<IRootProps> = props => {\n    return (\n        <Provider store={props.store}>\n            <ConnectedRouter history={history} >\n                <App />\n            </ConnectedRouter>\n        </Provider>\n    );\n};\n\nReactDOM.render(<Root store={store} />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"LandingPage\":\"landing-page_LandingPage__3oFtQ\",\"primaryPageContent\":\"landing-page_primaryPageContent__f287k\",\"headlineContent\":\"landing-page_headlineContent__29jRT\",\"headlineText\":\"landing-page_headlineText__9fxIM\",\"headlineSubText\":\"landing-page_headlineSubText__HE14O\",\"loginActionsContainer\":\"landing-page_loginActionsContainer__3yi10\",\"divider\":\"landing-page_divider__St_4o\",\"sideNoteContent\":\"landing-page_sideNoteContent__1uKKV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userAppPageHeader\":\"user-app-page_userAppPageHeader__zAlTa\",\"searchField\":\"user-app-page_searchField__3Xux1\",\"userAppPageContent\":\"user-app-page_userAppPageContent__30daC\"};"],"sourceRoot":""}