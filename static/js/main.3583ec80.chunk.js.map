{"version":3,"sources":["components/company/company-list-item.module.css","components/application/application-component.module.css","components/company/company-component.module.css","components/form-factory/form-input-field/form-input-field.module.css","components/tab/tab-content.module.css","components/tab/tab-transition-slide-left.module.css","components/tab/tab-transition-slide-right.module.css","components/tab/tab-container.module.css","pages/user-com-app-page/user-com-app-page.module.css","pages/page-routes/page-routes-transition.module.css","pages/page-routes/page-routes.module.css","state-management/types/auth-types.ts","utils/rest-api.ts","data-model/base-model.ts","utils/authentication.ts","state-management/action-creators/auth-actions.ts","components/login/social-auth-login-button.tsx","components/login/social-auth-logout-button.tsx","components/login/social-auth-button.tsx","components/form-factory/form-base-field/form-base-field-meta.tsx","pages/landing-page/landing-page.tsx","components/form-factory/form-input-field/form-input-field.tsx","components/form-factory/form-factory.tsx","components/form-factory/form-input-field/form-input-field-meta.tsx","data-model/label.ts","components/login/local-login-form.tsx","pages/login-page/local-login-page.tsx","utils/utilities.ts","data-model/address.ts","data-model/link.ts","data-model/company/company.ts","components/tab/tab-container.tsx","components/tab/tab-content.tsx","state-management/action-creators/root-actions.ts","components/company/company-list-item.tsx","pages/user-app-page/user-app-page.tsx","state-management/action-creators/action-creator-factory.ts","components/form-factory/form-base-field/form-base-field.tsx","components/form-factory/form-link-field/form-link-field.tsx","components/form-factory/form-link-field/form-link-field-component.tsx","components/form-factory/form-link-field/form-link-field-meta.tsx","components/form-factory/form-address-field/form-address-field.tsx","components/form-factory/form-address-field/form-address-field-component.tsx","components/form-factory/form-address-field/form-address-field-meta.tsx","components/label/label-group-component.tsx","components/form-factory/form-label-field/form-label-field.tsx","components/form-factory/form-label-field/form-label-field-meta.tsx","components/company/company-form-component.tsx","pages/add-com-page/add-com-page.tsx","data-model/application-status/application-status.ts","data-model/application-status-link.ts","components/form-factory/form-application-status-link-field/form-application-status-link-field.tsx","components/form-factory/form-application-status-link-field/form-application-status-link-field-component.tsx","components/form-factory/form-application-status-link-field/form-application-status-link-field-meta.tsx","components/application-status/application-status-form-component.tsx","components/application-status/application-status-component.tsx","data-model/application/application.ts","components/form-factory/form-rich-text-field/form-rich-text-field.tsx","components/form-factory/form-rich-text-field/form-rich-text-field-meta.tsx","components/application/application-form-component.tsx","components/application/application-component.tsx","components/company/company-component.tsx","pages/user-com-app-page/user-com-app-page.tsx","components/user-info/user-info.tsx","components/login/local-logout-button.tsx","pages/user-profile-page/user-profile-page.tsx","pages/page-routes/page-routes.tsx","App.tsx","serviceWorker.ts","state-management/reducers/auth-reducers.ts","state-management/reducers/reducer-factory.ts","state-management/reducers/root-reducers.ts","state-management/sagas/auth-sagas.ts","state-management/sagas/saga-factory.ts","state-management/sagas/company-custom-saga.ts","data-model/application-status/application-status-normalize-schema.ts","data-model/application/application-normalize-schema.ts","data-model/company/company-normalize-schema.ts","state-management/sagas/applicaiton-custom-saga.ts","state-management/sagas/application-status-custom-saga.ts","state-management/sagas/root-saga.ts","state-management/store/store-config.ts","index.tsx","pages/landing-page/landing-page.module.css","pages/user-app-page/user-app-page.module.css"],"names":["module","exports","companyCard","companyCardContent","applicationCard","applicationCardContent","companyTitleContainer","companyTitleCaption","TextField","TabContent","enter","enterActive","enterDone","exit","exitActive","exitDone","tabBar","UserCompanyPage","topAppBarTitle","RequestedLoginMode","AuthActionNames","RequestStatus","CrudType","RestMethod","BaseModel","_ref","_ref$uuid","uuid","_ref$created_at","created_at","_ref$modified_at","modified_at","Object","classCallCheck","this","normalizeSchemaShape","objectNamePlural","createClass","key","value","schema","Entity","idAttribute","normalizeSchema","getNormalizeSchema","Array","Yup","shape","RefreshObject","_this","_ref$token","token","args","objectWithoutProperties","possibleConstructorReturn","getPrototypeOf","call","LoginObject","_ref2","_this2","_ref2$code","code","_ref2$provider","provider","_ref2$redirect_uri","redirect_uri","AuthenticationService","state","clientID","redirectUri","apiSocialLoginUrl","apiLocalLoginUrl","apiLoginRefreshUrl","socialAuthProvider","apiLoginToken","serverLogin","_callee","loginMode","params","sessionAuthState","refreshTokenReponse","loginObject","resp","res","parsedJsonResponse","regenerator_default","a","wrap","_context","prev","next","PREFILL","localStorage","getItem","concat","JSON","parse","isLogin","_this3","apiCallToken","apiToken","refreshToken","sent","abrupt","email","userName","avatar_url","avatarUrl","isLocal","t0","SOCIAL_AUTH","socialAuthToken","RestApiService","post","data","endpointUrl","objectSpread","t1","Error","LOCAL","fetch","apiBaseUrl","method","mode","credentials","headers","Content-Type","body","stringify","username","password","ok","statusText","json","t2","stop","_callee2","refreshObject","_context2","serverLogout","_callee3","_context3","CrudMapToRest","crudType","CREATE","POST","READ","LIST","GET","UPDATE","PATCH","DELETE","IsSingleRestApiResponseTypeGuard","response","undefined","RestApi","userEmail","userFirstName","userLastName","objectID","get","absoluteUrl","objectName","getRelativeUrl","setApiAuthHeaders","then","patch","_ref3","delete","_ref4","_ref5","Authorization","RequestedLoginAuth","onCompleteCallback","type","REQUESTED_LOGIN_AUTH","payload","requestStatus","REQUESTING","RequestedLogoutAuth","REQUESTED_LOGOUT_AUTH","SuccessLoginAuth","expireDateTime","SUCCESS_AUTH","SUCCESS","SuccessLogoutAuth","FailureAuth","error","FAILURE_AUTH","FAILURE","SocialAuthLoginButton","_Component","_getPrototypeOf2","_len","arguments","length","_key","apply","onLoginButtonClicked","clickEvent","renderProps","onClick","onAuthSuccess","authResponse","props","onSuccess","onAuthFailure","onFailure","inherits","react_default","createElement","className","google_login","render","dist_default","unelevated","icon","index_es","faGoogle","disabled","clientId","responseType","cookiePolicy","hostedDomain","Component","SocialAuthLogoutButton","react_material_icon_dist_default","hasRipple","onLogoutSuccess","SocialAuthButton","onSocialLoginSuccess","googleOauthResponse","setState","requestedLoginAuth","onSocialLoginFailure","console","onSocialLogoutSuccess","requestedLogoutAuth","auth","social_auth_logout_button_SocialAuthLogoutButton","social_auth_login_button_SocialAuthLoginButton","InputFieldType","SocialAuthButtonContainer","withRouter","connect","store","dispatch","LandingPage","formFactoryProps","onStaffLoginClick","history","push","styles","primaryPageContent","headlineContent","react_typography_dist","headlineText","headlineSubText","loginActionsContainer","divider","sideNoteContent","href","target","LandingPageContainer","FormInputField","formik_esm","name","fieldName","field","form","react_text_field_dist_default","label","onTrailingIconSelect","trailingIcon","role","react_text_field_dist","assign","TEXT","inputType","autoFocus","ActionButtonType","FormBaseFieldMeta","model","formField","isDynamic","dynamicLimit","getInstanceDataFromFormikValues","values","isArray","alert","map","instanceData","FormInputFieldMeta","_FormBaseFieldMeta","labelTypes","FormActionButtonProps","text","FormFactory","initialInstance","validationSchema","onSubmit","setSubmitting","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","formFieldPropsList","Symbol","iterator","done","fieldProps","getInstance","err","return","createInstanceTriggerAction","updateInstanceTriggerAction","instance","enforcedInstanceData","onSubmitSuccess","initialValues","isSubmitting","submitForm","formFieldMeta","index","formikValues","onSaveKeystroke","actionButtonPropsList","actionButtonProps","BUTTON","children","LoginForm","PASSWORD","SUBMIT","onCancel","onSubmitLoginForm","asyncToGenerator","mark","_x","_x2","required","form_factory_FormFactory","LocalLoginPage","onLoginFormCancel","goBack","onLoginFormSubmit","local_login_form_LoginForm","LocalLoginPageContainer","Utilities","rawText","toLowerCase","trim","Address","_BaseModel","_ref$place_name","place_name","_ref$country","country","_ref$state","_ref$city","city","_ref$street","street","_ref$full_address","full_address","_ref$zipcode","zipcode","max","Link","_ref$text","_ref$user","user","_ref$url","url","_ref$order","order","default","when","is","Label","TARGET","_ref$color","color","SlideDirection","Company","_ref$labels","labels","_ref$name","_ref$hq_location","hq_location","_ref$home_page","home_page","_ref$ratings","ratings","_ref$applications","applications","companyObject","labelTypesMapToCompanyGroupTypes","_labelTypesMapToCompa","defineProperty","APPLIED","INTERVIEWING","ARCHIVED","RootActionNames","TabContainer","activeIndex","tabContentSlideDirection","RIGHTWARD","handleActiveIndexUpdate","LEFTWARD","tabContents","tabContentList","react_tab_bar_dist_default","tabContent","react_tab_dist_default","tabIndex","child","CSSTransition","classNames","rightSlideStyles","leftSlideStyles","in","timeout","unmountOnExit","tab_content_TabContent","CompanyListItem","react_card_dist_default","event","company","react_card_dist","bundle_default","duration","width","react_chips_dist","react_list_dist_default","nonInteractive","application","react_list_dist","primaryText","position_title","UserAppPage","searchText","isFiltering","filteredCompanyList","activeTabIndex","onCompanyClick","setTimeout","searchFieldTextIsEmpty","normalizeText","filterCompanyByName","filteringName","allCompanies","collection","filter","includes","onSearchFieldChange","currentTarget","onSearchFieldKeyDown","onSearchFieldClear","handleActiveTabIndexUpdate","displayingCompanies","from","UserAppPageHeader","tab_container_TabContainer","allCompanyTab","companyListHeader","searchField","outlined","leadingIcon","onKeyDown","onChange","company_list_item_CompanyListItem","user_company","groupCompanyTabs","labelText","keys","companyRef","applicationUuid","toConsumableArray","UserAppPageContainer","reduce","accumulated","RestApiActionCreatorsFactory","crudKeywords","ObjectRestApiActions","_loop","crudKeyword","_crudKeywords","_i","_i2","_Object$values","actionTypeName","action","toUpperCase","TRIGGERED","objectClassInstance","successCallback","failureCallback","finalCallback","triggerActionOptions","formData","jsonResponse","triggerFormData","newState","results","resetAllStoreAction","ResetAllStore","CompanyActionCreators","GroupedCompanyActionCreators","companyGroupText","ApplicationActionCreators","ApplicationStatusActionCreators","FormBaseDynamicFieldControlls","react_icon_button_dist_default","confirm","formikArrayHelpers","remove","BaseDynamicFieldAddButton","withFormBaseField","FormFieldComponent","form_base_field_FormBaseDynamicFieldControlls","form_base_field_BaseDynamicFieldAddButton","FormLinkField","FormLinkFieldComponent","textInputFieldMeta","urlInputFieldMeta","form_input_field_FormInputField","FormLinkFieldMeta","FormAddressField","FormAddressFieldComponent","fullAddressInputFieldMeta","placeNameInputFieldMeta","FormAddressFieldMeta","LabelGroupComponentContainer","_useState","useState","selectedLabels","_useState2","slicedToArray","setSelectedLabels","log","useEffect","choice","selectedChipIds","handleSelect","id","FormLabelField","selectedLabelText","setFieldValue","FormLabelFieldMeta","CompanyFormComponent","createCompany","updateCompany","CompanyFormComponentContainer","companyFormData","getLabel","updateFromCompany","updateFromObject","AddComPage","match","replace","AddComPageContainer","ApplicationStatus","_ref$application","_ref$applicationstatu","applicationstatuslink_set","_ref$date","date","localeNowDateString","now","Date","UTC","getUTCFullYear","getUTCMonth","getDate","toISOString","split","ApplicationStatusLink","_ref$application_stat","application_status","_ref$link","link","FormApplicationStatusLinkField","FormApplicationStatusLinkFieldComponent","linkFieldProps","FormApplicationStatusLinkFieldMeta","ApplicationStatusFormComponent","DATE","applicationStatus","createApplicationStatus","updateApplicationStatus","ApplicationStatusFormComponentContainer","applicationStatusStore","applicationStatusFormData","ApplicationStatusComponent","isFormOpened","renderDisplay","deleteApplicationStatus","applicationStatusLink","renderFormController","isOnlyForm","ApplicationStatusComponentContainer","applicationStatusToDelete","callback","Application","_ref$user_company","_ref$position_title","_ref$job_description_","job_description_page","_ref$job_source","job_source","_ref$notes","notes","_ref$statuses","statuses","FormRichTextField","Fragment","ckeditor_default","editor","BalloonEditor","getData","FormRichTextFieldMeta","ApplicationFormComponent","createApplication","updateApplication","ApplicationFormComponentContainer","applicationStore","applicationFormData","ApplicationComponent","renderApplicationFormController","renderApplicationDisplay","applicationStatusList","isLink","disableApplicationActionButtons","deleteApplication","ApplicationComponentController","applicationToDelete","CompanyComponent","actionButtonsDisabled","onEditIconClicked","onDeleteIconClicked","UserComAppPage","goBackToCompanyListPage","onCompanyDelete","companyStore","deleteCompany","onCompanyEdit","_","company_component_CompanyComponent","applicationRef","applicationsIndex","statusUuid","renderPage","someStillRequesting","renderController","UserComAppPageContainer","accumulate","companyToDelete","companyToUpdate","UserInfo","toString","LocalLogoutButton","UserProfilePage","localLogoutButton","user_info_UserInfo","local_logout_button_LocalLogoutButton","UserProfilePageContainer","publicPageSet","Set","PageRoutes","goHome","location","pathname","goInternal","search","nextUrl","URLSearchParams","isCurrentPublicPage","has","react_router","to","path","exact","component","react_top_app_bar_dist_default","react_top_app_bar_dist","align","navIcon","react_router_dom","faGithub","size","style","height","borderRadius","src","react_linear_progress_dist_default","indeterminate","buffer","bufferingDots","TransitionGroup","pageTransitionStyles","PageRoutesContainer","App","retrieveLoginAuth","Boolean","window","hostname","initialAuthState","authReducer","authStore","authAction","setItem","RestApiReducerFactory","initialState","objectStore","objectAction","newObject","resObjectList","newObjects","object","targetDeleteUuids","String","targetDeleteObject","omit","CompanyReducer","GroupCompanyReducer","ApplicationReducer","ApplicationStatusReducer","authLoginSagaHandler","authLoginSaga","authLogoutSagaHandler","authLogoutSaga","requestedLoginAuthAction","_requestedLoginAuthAc","put","warn","_marked","takeEvery","_marked2","requestedLogoutAuthAction","_marked3","_context4","_marked4","RestApiSagaFactory","sagaFactoryOptions","sagaHandler","triggerAction","normalizeData","relationalNormalizeData","normalizeObjectEntityKey","dataSource","normalizeDataSourceSchema","normalizeDataSource","_relationalEntityKey","dispatchResponseData","relationalActions","_relationalEntityKey2","_relationalActions","dispatchDeleteData","overrideCrudSuccessSagaHandler","doneCrudSuccessSagaHandler","status","normalizeManifest","objectEntityKey","listSchema","normalize","entities","relationalEntityReduxActionsMap","hasOwnProperty","relationalEntityKey","t3","t4","t5","saga","objectTriggerActionChannel","objectTriggerAction","actionChannel","take","companyDoneUpdateSuccessSagaHandler","destinationCompany","destinationLabelText","currentCompany","currentLabelText","destinationCreateAction","currentDeleteAction","companyOverrideDeleteSuccessSagaHandler","currentAction","deleteStatusUuids","select","getApplicationStore","flatMap","groupedCompanyListSuccessSagaHandler","fetchedCompanyList","fetchedCompanyListUuids","ApplicationStatusNormalizeSchema","ApplicationNormalizeDefinition","ApplicationNormalizeSchema","ApplicationListNormalizeSchema","ApplicationNormalizeManifest","CompanyNormalizeDefinition","CompanyNormalizeSchema","CompanyNormalizeManifest","applicationDoneCreateSuccessSagaHandler","updatedCompany","getCompanyStore","applicationDoneDeleteSuccessSagaHandler","applicationStatusDoneCreateSuccessSagaHandler","updatedApplication","applicationStatusDoneDeleteSuccessSagaHandler","applicationStatusUuid","CompanySagas","update","GroupCompanySagas","list","ApplicationSagas","create","ApplicationStatusSagas","rootSaga","all","flat","sagaMiddleware","createSagaMiddleware","createBrowserHistory","basename","createStore","rootState","rootStateChecked","router","forEach","connectRouter","Reducer","compose","applyMiddleware","routerMiddleware","run","ReactDOM","es","esm","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3583ec80.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"companyCard\":\"company-list-item_companyCard__17kBB\",\"companyCardContent\":\"company-list-item_companyCardContent__2u4Ow\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"applicationCard\":\"application-component_applicationCard__3GD6f\",\"applicationCardContent\":\"application-component_applicationCardContent__3DGDq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"companyTitleContainer\":\"company-component_companyTitleContainer__2em7z\",\"companyTitleCaption\":\"company-component_companyTitleCaption__1SZ8j\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TextField\":\"form-input-field_TextField__3eN8D\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TabContent\":\"tab-content_TabContent__1ez9J\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"tab-transition-slide-left_enter__2KMyK\",\"enterActive\":\"tab-transition-slide-left_enterActive__3Lg3B\",\"enterDone\":\"tab-transition-slide-left_enterDone__21D5_\",\"exit\":\"tab-transition-slide-left_exit__3it4x\",\"exitActive\":\"tab-transition-slide-left_exitActive__2Hloz\",\"exitDone\":\"tab-transition-slide-left_exitDone__1mbMp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"tab-transition-slide-right_enter__OnrTI\",\"enterActive\":\"tab-transition-slide-right_enterActive__3yVDI\",\"enterDone\":\"tab-transition-slide-right_enterDone__MlGOO\",\"exit\":\"tab-transition-slide-right_exit__2rsUI\",\"exitActive\":\"tab-transition-slide-right_exitActive__1K__6\",\"exitDone\":\"tab-transition-slide-right_exitDone__15w2u\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tabBar\":\"tab-container_tabBar__2ilYq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"UserCompanyPage\":\"user-com-app-page_UserCompanyPage__3XW94\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"exit\":\"page-routes-transition_exit__2ZrWw\",\"exitActive\":\"page-routes-transition_exitActive__2_8e6\",\"exitDone\":\"page-routes-transition_exitDone__1NNzK\",\"enter\":\"page-routes-transition_enter__2bB-O\",\"enterActive\":\"page-routes-transition_enterActive__1MxL-\",\"enterDone\":\"page-routes-transition_enterDone__2XKC1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"topAppBarTitle\":\"page-routes_topAppBarTitle__3oyst\"};","import { Action } from \"redux\";\n\nimport { RequestStatus } from \"../../utils/rest-api\";\n\n/**\n * Store Types\n */\n\n// complete store type\nexport interface IUpdateAuthState {\n    requestStatus: RequestStatus\n    isLogin: boolean\n    isLocal: boolean\n    userName: string\n    socialAuthToken: string\n    apiToken: string\n    expireDateTime: string\n    avatarUrl: string\n}\n\nexport enum RequestedLoginMode {\n    PREFILL = \"prefill\",\n    SOCIAL_AUTH = \"social_auth\",\n    LOCAL = \"local\"\n}\n\n// async partial store types\nexport interface IRequestedLoginAuthState {\n    requestStatus: RequestStatus\n}\n\nexport interface IRequestedLogoutAuthState {\n    requestStatus: RequestStatus\n}\n\nexport interface ISuccessAuthState {\n    requestStatus: RequestStatus\n    isLogin: boolean\n    isLocal: boolean\n    userName: string\n    expireDateTime: string\n    apiToken: string\n    avatarUrl: string\n}\n\nexport interface IFailureAuthState {\n    requestStatus: RequestStatus,\n    error: any\n}\n\n// add more state types for this reducer - auth reducer\n// ...\n\n\n\n\n\n/**\n * Action Types\n */\n\nexport enum AuthActionNames {\n    UPDATE_AUTH = \"Update auth\",\n    REQUESTED_LOGIN_AUTH = \"Requested login auth\",\n    REQUESTED_LOGOUT_AUTH = \"Requested logout auth\",\n    SUCCESS_AUTH = \"Success auth\",\n    FAILURE_AUTH = \"Failure auth\",\n\n    // 1. add more action for this reducer - auth reducer\n    // 2. write the type interface for the action below\n    // ...\n}\n\nexport interface IUpdateAuthAction extends Action<AuthActionNames.UPDATE_AUTH> {\n    type: typeof AuthActionNames.UPDATE_AUTH;\n    payload: IUpdateAuthState;\n}\n\nexport interface RequestedLoginAuthActionParams {\n    username?: string,\n    password?: string,\n    socialAuthToken?: string\n}\n\nexport interface IRequestedLoginAuthAction extends Action<AuthActionNames.REQUESTED_LOGIN_AUTH> {\n    type: typeof AuthActionNames.REQUESTED_LOGIN_AUTH;\n    loginMode: RequestedLoginMode;\n    params?: RequestedLoginAuthActionParams;\n    payload: IRequestedLoginAuthState;\n    onCompleteCallback?: () => void\n}\n\nexport interface IRequestedLogoutAuthAction extends Action<AuthActionNames.REQUESTED_LOGOUT_AUTH> {\n    type: typeof AuthActionNames.REQUESTED_LOGOUT_AUTH;\n    payload: IRequestedLogoutAuthState;\n}\n\nexport interface ISuccessAuthAction extends Action<AuthActionNames.SUCCESS_AUTH> {\n    type: typeof AuthActionNames.SUCCESS_AUTH;\n    payload: ISuccessAuthState;\n}\n\nexport interface IFailureAuthAction extends Action<AuthActionNames.FAILURE_AUTH> {\n    type: typeof AuthActionNames.FAILURE_AUTH;\n    payload: IFailureAuthState;\n}\n\n// use union | ... | ... to add more action types\nexport type TAuthActions = IUpdateAuthAction | IRequestedLoginAuthAction | IRequestedLogoutAuthAction | ISuccessAuthAction | IFailureAuthAction","import { TObject } from \"../state-management/types/factory-types\";\nimport { AuthenticationService } from \"./authentication\";\n\n\nexport enum RequestStatus {\n    TRIGGERED = \"triggered\",\n    REQUESTING = \"requesting\",\n    SUCCESS = \"success\",\n    FAILURE = \"failre\"\n}\n\nexport enum CrudType {\n    CREATE = \"create\",\n    READ = \"read\",\n    LIST = \"list\",\n    UPDATE = \"update\",\n    DELETE = \"delete\"\n}\n\nexport enum RestMethod {\n    POST = \"post\",\n    GET = \"get\",\n    PATCH = \"patch\",\n    DELETE = \"delete\"\n}\n\nexport const CrudMapToRest = (crudType: CrudType): RestMethod => {\n    switch (crudType) {\n        case CrudType.CREATE:\n            return RestMethod.POST;\n        case CrudType.READ:\n            return RestMethod.GET;\n        case CrudType.LIST:\n            return RestMethod.GET;\n        case CrudType.UPDATE:\n            return RestMethod.PATCH;\n        case CrudType.DELETE:\n            return RestMethod.DELETE;\n\n        default:\n            return RestMethod.GET;\n    }\n};\n\nexport interface IRequestParams<Schema> {\n    endpointUrl?: string;\n    absoluteUrl?: string;\n    objectName?: string;\n    data?: TObject<Schema> | Array<TObject<Schema>>;\n}\n\nexport interface IListRestApiResponse<Schema> {\n    count: number;\n    next: any;\n    previous: any;\n    results: Array<TObject<Schema>>;\n}\n\nexport type ISingleRestApiResponse<Schema> = TObject<Schema>;\n\nexport function IsSingleRestApiResponseTypeGuard<Schema>(\n    response: ISingleRestApiResponse<Schema> | IListRestApiResponse<Schema>\n): response is ISingleRestApiResponse<Schema> {\n    return (<ISingleRestApiResponse<Schema>>response).uuid !== undefined;\n}\n\nfunction IsSingleFormDataTypeGuard<Schema>(\n    formData: TObject<Schema> | Array<TObject<Schema>>\n): formData is TObject<Schema> {\n    return (<TObject<Schema>>formData).uuid !== undefined;\n}\n\nexport class RestApi {\n    state = {\n        clientID: `732988498848-vuhd6g61bnlqe372i3l5pbpnerteu6na.apps.googleusercontent.com`,\n        code: ``,\n        redirectUri: `postmessage`,\n        apiBaseUrl: (process.env.NODE_ENV === 'development') ? \n        `http://localhost:8000/api/`\n        :\n        `https://appl-tracky.api.shaungc.com/api/`\n        ,\n        socialAuthProvider: `google-oauth2`,\n\n        userEmail: ``,\n        userFirstName: ``,\n        userLastName: ``,\n\n        objectID: ``\n    };\n\n    get = <Schema>({ endpointUrl, absoluteUrl, objectName, data }: IRequestParams<Schema>) => {\n        return fetch(\n            this.getRelativeUrl({\n                endpointUrl,\n                absoluteUrl,\n                objectName,\n                data\n            }),\n            {\n                method: \"GET\",\n                ...this.setApiAuthHeaders()\n            }\n        ).then(res => res.json());\n    };\n\n    post = <Schema>({ data, objectName, endpointUrl }: IRequestParams<Schema>) => {\n        process.env.NODE_ENV === 'development' && console.log(`restapi:post fired`);\n        return fetch(\n            this.getRelativeUrl({\n                endpointUrl,\n                objectName,\n                data\n            }),\n            {\n                method: \"POST\",\n                ...this.setApiAuthHeaders(),\n                body: JSON.stringify(data)\n            }\n        ).then(res => res.json());\n        // let caller handle error in their own .catch()\n    };\n\n    patch = <Schema>({ data, objectName, endpointUrl }: IRequestParams<Schema>) => {\n        return fetch(\n            this.getRelativeUrl({\n                endpointUrl,\n                objectName,\n                data\n            }),\n            {\n                method: \"PATCH\",\n                ...this.setApiAuthHeaders(),\n                body: JSON.stringify(data)\n            }\n        ).then(res => res.json());\n    };\n\n    delete = <Schema>({ data, objectName, endpointUrl }: IRequestParams<Schema>) => {\n        return fetch(\n            this.getRelativeUrl({\n                endpointUrl,\n                objectName,\n                data\n            }),\n            {\n                method: \"DELETE\",\n                ...this.setApiAuthHeaders(),\n                body: JSON.stringify(data)\n            }\n        );\n    };\n\n    /** helper */\n    private getRelativeUrl = <Schema>({\n        objectName,\n        data,\n        endpointUrl,\n        absoluteUrl,\n    }: IRequestParams<Schema>) => {\n        let url = \"\";\n        if (absoluteUrl) {\n            url = absoluteUrl;\n        }\n        else if (endpointUrl) {\n            url = `${this.state.apiBaseUrl}${endpointUrl}`;\n        } else {\n            if (data && IsSingleFormDataTypeGuard(data) && data.uuid) {\n                url = `${this.state.apiBaseUrl}${objectName}/${data.uuid}/`;\n            } else {\n                url = `${this.state.apiBaseUrl}${objectName}/`;\n            }\n        }\n        process.env.NODE_ENV === 'development' && console.log(`restapi: url: ${url}, objname=${objectName}`);\n        return url;\n    };\n\n    private setApiAuthHeaders = (): RequestInit => {\n\n        process.env.NODE_ENV === 'development' && console.log(\"api: set header: got credentials?\", AuthenticationService.apiCallToken);\n        return {\n            mode: \"cors\",\n            credentials: AuthenticationService.apiCallToken ? \"include\" : \"omit\",\n            headers: {\n                Authorization: AuthenticationService.apiCallToken\n                    ? `JWT ${AuthenticationService.apiCallToken}`\n                    : ``,\n                \"Content-Type\": \"application/json\"\n            }\n        };\n    };\n}\n\n/** create restapi singleton */\nexport const RestApiService = new RestApi();\n","import * as Yup from \"yup\";\nimport { schema, Schema } from 'normalizr';\n\n\nexport type IReference = string;\n\nexport type IRelationship = {\n    uuid: string\n} | IReference;\n\nexport interface IBaseModelProps {\n    uuid?: string\n    created_at?: string\n    modified_at?: string\n}\n\nexport class BaseModel {\n    uuid: string\n    created_at: string\n    modified_at: string\n\n    normalizeSchemaShape?: Schema\n    objectNamePlural?: string\n    \n    constructor({\n        uuid = \"\",\n        created_at = \"\",\n        modified_at = \"\",\n    }: IBaseModelProps) {\n        this.uuid = uuid;\n        this.created_at = created_at;\n        this.modified_at = modified_at;\n    }\n\n    static schema() {\n        return Yup.object<BaseModel>().shape({});\n    }\n\n    getNormalizeSchema() {\n        if (this.normalizeSchemaShape && this.objectNamePlural) {\n            return new schema.Entity(this.objectNamePlural, this.normalizeSchemaShape, {\n                idAttribute: \"uuid\"\n            })\n        }\n\n        return null;\n    }\n\n    getListNormalizeSchema() {\n        const normalizeSchema = this.getNormalizeSchema();\n        if (normalizeSchema) {\n            return new schema.Array(normalizeSchema);\n        }\n\n        return null;\n    }\n}\n\n// for newing model class instance and access base class's assets\nexport type DataModelInstance<Model = BaseModel> = Model & BaseModel\n\nexport type DataModelClass<DataModel = any> = DataModelInstance<DataModel> & (new (props: any) => DataModel)\n","import { RestApiService } from \"./rest-api\";\nimport { BaseModel, IBaseModelProps } from \"../data-model/base-model\";\n\nimport { RequestedLoginMode, RequestedLoginAuthActionParams } from \"../state-management/types/auth-types\";\n\nexport interface ILoginObjectProps {\n    code?: string;\n    provider?: string;\n    redirect_uri?: string;\n}\n\nexport interface IRefreshObjectProps {\n    token: string;\n}\n\nclass RefreshObject extends BaseModel {\n    token: string;\n\n    constructor({\n        token = \"\",\n        ...args\n    }: IRefreshObjectProps & IBaseModelProps) {\n        super(args);\n        this.token = token;\n    }\n}\n\nclass LoginObject extends BaseModel {\n    code: string;\n    provider: string;\n    redirect_uri: string;\n\n    constructor({\n        code = \"\",\n        provider = \"\",\n        redirect_uri = \"\",\n        ...args\n    }: ILoginObjectProps & IBaseModelProps) {\n        super(args);\n        this.code = code;\n        this.provider = provider;\n        this.redirect_uri = redirect_uri;\n    }\n}\n\nclass Authentication {\n    state = {\n        clientID: `732988498848-vuhd6g61bnlqe372i3l5pbpnerteu6na.apps.googleusercontent.com`,\n        redirectUri: `postmessage`,\n        apiSocialLoginUrl: `login/social/`,\n        apiLocalLoginUrl: `api-token-auth/`,\n        apiLoginRefreshUrl: `api-token-refresh/`,\n        socialAuthProvider: `google-oauth2`,\n\n        apiLoginToken: ``,\n    };\n\n    serverLogin = async (loginMode: RequestedLoginMode, params: RequestedLoginAuthActionParams) => {\n        // prefill login\n        if (loginMode === RequestedLoginMode.PREFILL) {\n            // restore session login data\n            const sessionAuthState = localStorage.getItem(`${(process.env.NODE_ENV === \"development\") ? \"dev__\" : \"\"}applyTracky__authState`)\n                ? JSON.parse(localStorage.getItem(`${(process.env.NODE_ENV === \"development\") ? \"dev__\" : \"\"}applyTracky__authState`) || \"{}\")\n                : {};\n\n            if (sessionAuthState.isLogin) {\n                this.apiCallToken = sessionAuthState.apiToken;\n\n                try {\n                    const refreshTokenReponse = await this.refreshToken();\n\n                    return {\n                        email: sessionAuthState.userName,\n                        token: refreshTokenReponse.token,\n                        avatar_url: sessionAuthState.avatarUrl,\n                        isLocal: sessionAuthState.isLocal\n                    };\n                } catch (error) {\n                    // catch: refresh failed or data-fetching failed\n                    process.env.NODE_ENV === \"development\" &&\n                        console.error(\n                            `Error after refreshing token in Authentication service: ${error}`\n                        );\n                }\n            }\n            \n            // in case cannot restore login session,\n            // will let saga dispatch logout to reset authState in session storage\n            return {};\n        }\n\n        // social auth login\n        else if (loginMode === RequestedLoginMode.SOCIAL_AUTH) {\n            const loginObject = new LoginObject({\n                code: params.socialAuthToken,\n                provider: this.state.socialAuthProvider,\n                redirect_uri: this.state.redirectUri\n            });\n    \n            try {\n                const resp = await RestApiService.post<LoginObject>({\n                    data: loginObject,\n                    endpointUrl: this.state.apiSocialLoginUrl\n                });\n    \n                this.apiCallToken = resp.token;\n                return {\n                    ...resp,\n                    isLocal: false\n                };\n            }\n            catch (error) {\n                throw Error(error);\n            }\n        }\n\n        // local login\n        else if (loginMode === RequestedLoginMode.LOCAL) {\n            // post login form data to get login token\n            try {\n                const res = await fetch(`${RestApiService.state.apiBaseUrl}${this.state.apiLocalLoginUrl}`, {\n                    method: \"POST\",\n                    mode: \"cors\",\n                    credentials: \"omit\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    },\n                    body: JSON.stringify({\n                        username: params.username, password: params.password\n                    })\n                });\n    \n                if (!res.ok) {\n                    process.env.NODE_ENV === 'development' && console.log(\"INFO: server res =\", res);\n                    throw Error(res.statusText)\n                }\n    \n                const parsedJsonResponse = await res.json();\n                \n                this.apiCallToken = parsedJsonResponse.token;\n    \n                return {\n                    email: params.username,\n                    token: parsedJsonResponse.token,\n                    avatar_url: parsedJsonResponse.avatar_url,\n                    isLocal: true\n                }\n            }\n            catch (error) {\n                throw Error(error)\n            }\n        }\n    };\n\n    get apiCallToken() {\n        return this.state.apiLoginToken;\n    }\n\n    set apiCallToken(token) {\n        this.state.apiLoginToken = token;\n    }\n\n    refreshToken = async () => {\n        const refreshObject = new RefreshObject({\n            token: this.apiCallToken\n        });\n        try {\n            const resp = await RestApiService.post<RefreshObject>({\n                data: refreshObject,\n                endpointUrl: this.state.apiLoginRefreshUrl\n            });\n\n            this.apiCallToken = resp.token;\n\n            return resp;\n        } catch (error) {\n            throw Error(error);\n        }\n    };\n\n    serverLogout = async () => {\n        process.env.NODE_ENV === \"development\" &&\n            console.log(\"server logout...\");\n        \n        // no server-side invalidate implement at this point (a common case for JWT, however)\n\n        this.apiCallToken = \"\";\n        \n        // will let saga dispatch logout to reset authState in session storage\n        \n        return;\n    };\n}\n\nexport const AuthenticationService = new Authentication();\n","import {\n    /** state types */\n    IUpdateAuthState,\n    RequestedLoginMode,\n    /** action types */\n    IUpdateAuthAction,\n    IRequestedLoginAuthAction,\n    RequestedLoginAuthActionParams,\n    IRequestedLogoutAuthAction,\n    ISuccessAuthAction,\n    IFailureAuthAction,\n    /** action names */\n    AuthActionNames,\n} from \"../types/auth-types\";\n\nimport { RequestStatus } from \"../../utils/rest-api\";\n\nexport const UpdateAuth = (newAuthState: IUpdateAuthState): IUpdateAuthAction => {\n    return {\n        type: AuthActionNames.UPDATE_AUTH,\n        payload: newAuthState\n    };\n};\n\nexport const RequestedLoginAuth = (loginMode: RequestedLoginMode, params?: RequestedLoginAuthActionParams, onCompleteCallback?: () => void): IRequestedLoginAuthAction => {\n    return {\n        type: AuthActionNames.REQUESTED_LOGIN_AUTH,\n        loginMode,\n        params,\n        payload: {\n            requestStatus: RequestStatus.REQUESTING,\n        },\n        onCompleteCallback\n    };\n};\n\nexport const RequestedLogoutAuth = (): IRequestedLogoutAuthAction => {\n    return {\n        type: AuthActionNames.REQUESTED_LOGOUT_AUTH,\n        payload: {\n            requestStatus: RequestStatus.REQUESTING,\n        }\n    };\n};\n\nexport const SuccessLoginAuth = (userName: string, expireDateTime: string, apiToken: string, avatarUrl: string, isLocal: boolean): ISuccessAuthAction => {\n    process.env.NODE_ENV === 'development' && console.log(\"action username:\", userName);\n\n    return {\n        type: AuthActionNames.SUCCESS_AUTH,\n        payload: {\n            requestStatus: RequestStatus.SUCCESS,\n            isLogin: true,\n            isLocal: isLocal ? true : false,\n            userName,\n            expireDateTime,\n            apiToken,\n            avatarUrl\n        }\n    };\n};\n\nexport const SuccessLogoutAuth = (): ISuccessAuthAction => {\n    return {\n        type: AuthActionNames.SUCCESS_AUTH,\n        payload: {\n            requestStatus: RequestStatus.SUCCESS,\n            isLogin: false,\n            isLocal: false,\n            userName: \"\",\n            expireDateTime: \"\",\n            apiToken: \"\",\n            avatarUrl: \"\",\n        }\n    };\n};\n\nexport const FailureAuth = (error: any): IFailureAuthAction => {\n    return {\n        type: AuthActionNames.FAILURE_AUTH,\n        payload: {\n            requestStatus: RequestStatus.FAILURE,\n            error\n        }\n    };\n};\n\n// write new actions here for this reducer - auth reducer\n// ...\n","import React, { Component } from \"react\";\n\n/** Components */\nimport { GoogleLogin } from \"react-google-login\";\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n// font awesome\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faGoogle } from '@fortawesome/free-brands-svg-icons'\n\ninterface ISocialAuthLoginButtonProps {\n    clientID: string;\n    redirectUri?: string;\n    onSuccess(authResponse?: any): void;\n    onFailure?(error: any): void;\n    disabled?: boolean;\n}\n\nexport class SocialAuthLoginButton extends Component<\n    ISocialAuthLoginButtonProps\n> {\n    onLoginButtonClicked = (clickEvent: any, renderProps: any) => {\n        process.env.NODE_ENV === 'development' && console.log(\"login button clicked\", clickEvent, renderProps);\n        renderProps.onClick(clickEvent);\n    };\n\n    onAuthSuccess = (authResponse?: any) => {\n        process.env.NODE_ENV === 'development' && console.log(\"login button auth success\");\n        this.props.onSuccess(authResponse);\n    };\n\n    onAuthFailure = (error: any) => {\n        process.env.NODE_ENV === 'development' && console.log(\"login button auth failed\");\n        if (this.props.onFailure) {\n            this.props.onFailure(error);\n        }\n    };\n\n    render() {\n        return (\n            <div className=\"UserAuthButton\">\n                <GoogleLogin\n                    render={(renderProps: any) => (\n                        <Button\n                            onClick={clickEvent =>\n                                this.onLoginButtonClicked(\n                                    clickEvent,\n                                    renderProps\n                                )\n                            }\n                            unelevated\n                            icon={\n                                // <MaterialIcon hasRipple icon=\"account_circle\" />\n                                <FontAwesomeIcon icon={faGoogle} />\n                            }\n                            disabled={this.props.disabled}\n                        >\n                            Google Login\n                        </Button>\n                    )}\n                    onSuccess={this.onAuthSuccess}\n                    onFailure={this.onAuthFailure}\n                    clientId={this.props.clientID}\n                    responseType=\"code\"\n                    redirectUri={this.props.redirectUri || \"postmessage\"}\n                    cookiePolicy={ (process.env.NODE_ENV === 'development') ? 'single_host_origin' : 'https://shaungc.com'}\n                    hostedDomain={ (process.env.NODE_ENV === 'development') ? \"http://localhost:3000\" : \"https://appl-tracky.shaungc.com\"}\n                />\n            </div>\n        );\n    }\n}\n","import React, { Component } from \"react\";\n\nimport { AuthenticationService } from \"../../utils/authentication\";\n\n/** Components */\nimport { GoogleLogout } from \"react-google-login\";\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n\n\ninterface ISocialAuthLogoutButtonProps {\n    onSuccess(authResponse?: any): void;\n    onClick: () => void\n    disabled?: boolean\n}\n\nexport class SocialAuthLogoutButton extends Component<\n    ISocialAuthLogoutButtonProps\n> {\n    onAuthSuccess = (authResponse?: any) => {\n        this.props.onSuccess(authResponse);\n    };\n\n    render() {\n        return (\n            <div className=\"UserAuthButton\">\n                <GoogleLogout\n                    clientId={AuthenticationService.state.clientID}\n                    render={(renderProps: any) => (\n                        <Button\n                            onClick={this.props.onClick}\n                            unelevated\n                            icon={<MaterialIcon hasRipple icon=\"eject\" />}\n                            disabled={this.props.disabled}\n                        >\n                            Logout\n                        </Button>\n                    )}\n                    onLogoutSuccess={this.onAuthSuccess}\n                />\n            </div>\n        );\n    }\n}\n","import React, { Component } from \"react\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\n\n/** Redux */\nimport { Dispatch } from \"redux\";\nimport { connect } from \"react-redux\";\nimport { IRootState } from \"../../state-management/types/root-types\";\nimport { IUpdateAuthAction, IRequestedLoginAuthAction, TAuthActions, IUpdateAuthState, RequestedLoginMode } from \"../../state-management/types/auth-types\";\nimport { UpdateAuth, RequestedLoginAuth, RequestedLogoutAuth } from \"../../state-management/action-creators/auth-actions\";\n\n/** rest api */\nimport { RequestStatus } from \"../../utils/rest-api\";\n\n/** Components */\nimport { SocialAuthLoginButton } from \"./social-auth-login-button\";\nimport { SocialAuthLogoutButton } from \"./social-auth-logout-button\";\n\ninterface ISocialAuthButtonProps extends RouteComponentProps {\n    auth: IUpdateAuthState;\n    requestedLoginAuth: (socialAuthToken: string) => void;\n    requestedLogoutAuth: () => void;\n}\n\nclass SocialAuthButton extends Component<\n    ISocialAuthButtonProps\n> {\n    state = {\n        clientID: `732988498848-vuhd6g61bnlqe372i3l5pbpnerteu6na.apps.googleusercontent.com`,\n        \n        code: ``, // get `code` from social login button, then obtain token from django server\n        apiLoginToken: ``,\n\n        userEmail: ``,\n        userFirstName: ``,\n        userLastName: ``,\n\n        objectID: ``\n    };\n\n    onSocialLoginSuccess = (googleOauthResponse: any) => {\n        process.env.NODE_ENV === 'development' && console.log(\"Google Oauth2 res:\", googleOauthResponse);\n        this.setState(\n            {\n                code: googleOauthResponse.code\n            },\n            () => {\n                // this.apiLogin();\n                process.env.NODE_ENV === 'development' && console.log(\"social button: request auth...\");\n                this.props.requestedLoginAuth(this.state.code);\n            }\n        );\n    };\n\n    onSocialLoginFailure = (error: any) => {\n        console.error(\"Social login failed:\", error);\n    };\n\n    onSocialLogoutSuccess = () => {\n        process.env.NODE_ENV === 'development' && console.log(\"Social logout success, now our web app logout\");\n        this.props.requestedLogoutAuth();\n    };\n\n    render() {\n        return (\n            <div className=\"SocialAuth\">\n                {!this.props.auth.isLogin ? (\n                    <SocialAuthLoginButton\n                        clientID={this.state.clientID}\n                        onSuccess={this.onSocialLoginSuccess}\n                        onFailure={this.onSocialLoginFailure}\n                        disabled={this.props.auth.requestStatus === RequestStatus.REQUESTING}\n                    />\n                ) : (\n                    <SocialAuthLogoutButton\n                        onSuccess={this.onSocialLogoutSuccess}\n                        onClick={this.onSocialLogoutSuccess}\n                        \n                        // TODO: logout - ideally no need to wait for request status, just interrupt existing requests (actually this should be possible by looking at `axios` and its abort request feature, or the native javascript `AbortController` and its `AbortController.abort()`).\n                        // However, we'll have to cancel those ongoing sagas for data fetching\n                        // disabled={this.props.auth.requestStatus === RequestStatus.REQUESTING}\n                    />\n                )}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => {\n    return {\n        auth: store.auth\n    };\n};\n\nfunction mapDispatchToProps(dispatch: Dispatch<TAuthActions>) {\n    return {\n        requestedLoginAuth: (socialAuthToken: string) => {\n            dispatch(\n                RequestedLoginAuth(RequestedLoginMode.SOCIAL_AUTH, {\n                    socialAuthToken\n                })\n            );\n        },\n        requestedLogoutAuth: () => {\n            dispatch(\n                RequestedLogoutAuth()\n            );\n        }\n    };\n}\n\nexport const SocialAuthButtonContainer = withRouter(connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(SocialAuthButton));\n","import React from \"react\";\nimport { FormikValues } from \"formik\";\nimport { DataModelClass } from \"../../../data-model/base-model\";\nimport { FormInputField } from \"../form-input-field/form-input-field\";\n\n\nexport enum InputFieldType {\n    // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input\n    TEXT = \"text\",\n    PASSWORD = \"password\",\n    EMAIL = \"email\",\n    URL = \"url\",\n    DATE = \"date\"\n}\n\n// API for caller to new meta class\nexport interface IFieldBaseMetaProps {\n    fieldName: string\n    label: string;\n\n    isDynamic?: boolean;\n    dynamicLimit?: number;\n    getInstanceDataFromFormikValues?: (formikValues: FormikValues) => any // has to be optional since we want to let caller just use `fieldName` by default to access formik's values\n}\n\n// for form field props\nexport interface IFormBaseFieldProps extends IFieldBaseMetaProps {\n    model?: DataModelClass\n    formikValues?: FormikValues // for form field to load data (e.g. initial value) at a specific position in formik's `values`\n    // getInstanceDataFromFormikValues?: // when it's dynamic field, will use this to render dynamic fields\n    onSaveKeystroke?: () => void\n}\n\n// for the base meta class\ninterface IFormBaseFieldMeta extends IFieldBaseMetaProps {\n    model?: DataModelClass\n    formField?: React.ComponentType<IFormBaseFieldProps>\n\n    getInstance: (values: FormikValues) => any // for form factory to loop over fieldmeta and obtain field's data instance\n    getInstanceDataFromFormikValues: (formikValues: FormikValues) => any // required because getInstance() depends on it\n}\n\nexport class FormBaseFieldMeta implements IFormBaseFieldMeta {\n    fieldName: string\n    label: string\n\n    model?: DataModelClass\n    formField: React.ComponentType<IFormBaseFieldProps>\n\n    isDynamic?: boolean;\n    dynamicLimit?: number;\n    getInstanceDataFromFormikValues: (formikValues: FormikValues) => any\n\n    constructor(props: IFieldBaseMetaProps) {\n        this.fieldName = props.fieldName;\n        this.label = props.label;\n\n        this.isDynamic = props.isDynamic;\n        this.dynamicLimit = props.dynamicLimit;\n\n        if (props.getInstanceDataFromFormikValues) {\n            this.getInstanceDataFromFormikValues = props.getInstanceDataFromFormikValues;\n        }\n        else {\n            this.getInstanceDataFromFormikValues = (values: FormikValues) => {\n                if (!(values && values[this.fieldName])) {\n                    alert(\"Oops! Something might go wrong. Info: at class FormBaseFieldMeta.\")\n                    console.error(\"values =\", values, \" this.fieldName =\", this.fieldName);\n                    return (this.isDynamic) ? [] : \"\";\n                }\n                else {\n                    if (this.isDynamic && !Array.isArray(values[this.fieldName])) {\n                        alert(\"Oops! Something might go wrong. Info: at class FormBaseFieldMeta.\")\n                        console.error(\"isDynamic=true, but the value is not an array:\");\n                        console.error(\"values =\", values, \" this.fieldName =\", this.fieldName);\n                    }\n                    return values[this.fieldName];\n                }\n            }\n        }\n\n        this.formField = FormInputField;\n    }\n\n    getInstance(values: FormikValues) {\n        const model = this.model;\n        if (model) {\n            if (this.isDynamic) {\n                return this.getInstanceDataFromFormikValues(values).map((instanceData: any) => new model(instanceData))\n            }\n            else if (Array.isArray(values[this.fieldName])) {\n                return values[this.fieldName].map((value: typeof model) => new model(value));\n            }\n            else {\n                return new model(values[this.fieldName]);\n            }\n        }\n\n        // assume field values are plain string/num or other basic types\n        return values[this.fieldName];\n    }\n}\n","import React, { Component } from \"react\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch, AnyAction } from \"redux\";\nimport { IRootState } from \"../../state-management/types/root-types\";\nimport { IUpdateAuthState } from \"../../state-management/types/auth-types\";\n\n/** Components */\nimport { SocialAuthButtonContainer } from \"../../components/login/social-auth-button\";\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n\nimport {\n    Body1,\n    Body2,\n    // Button,\n    Caption,\n    Headline1,\n    Headline2,\n    Headline3,\n    Headline4,\n    Headline5,\n    Headline6,\n    Overline,\n    Subtitle1,\n    Subtitle2,\n} from '@material/react-typography';\nimport '@material/react-typography/dist/typography.css';\n\nimport styles from './landing-page.module.css';\n\n\ninterface ILandingPageProps extends RouteComponentProps {\n    auth: IUpdateAuthState;\n}\n\n\nclass LandingPage extends Component<ILandingPageProps> {\n    formFactoryProps: any;\n\n    constructor(props: ILandingPageProps) {\n        super(props);\n    }\n\n    onStaffLoginClick = () => {\n        this.props.history.push(\"/local-login/\");\n    }\n\n    render() {\n        return (\n            <div className={styles.LandingPage} >\n                <div className={styles.primaryPageContent}>\n                    <div className={styles.headlineContent}>\n                        <Headline1 className={styles.headlineText}>Appl Tracky</Headline1>\n                        <Headline4 className={styles.headlineSubText}>Got crazy using speadsheet to keep track of your application progress? Try out Appl Tracky to ease your workflow!</Headline4>\n                        <Body1>\n                            Whether it is application for job, school program, scholarship or whatever process that lets you wait from a couple weeks to months, Appl Tracky has you covered. Keep track of every steps in the process, insert links, put down notes to get you more organized and prepared!\n                        </Body1>\n                    </div>\n\n                    <div className={styles.loginActionsContainer}>\n                        <Headline4>Sign up & login now to get organized</Headline4>\n                        <SocialAuthButtonContainer />\n                        <Body1>\n                            Just want to try things out and don't want to sign up yet? No problem, here's a guest account you can use:\n                        </Body1>\n                        <div>🦄 username: guest</div>\n                        <div>🦄 password: appltracky</div>\n                        <Button\n                            onClick={this.onStaffLoginClick}\n                            unelevated\n                            icon={\n                                <MaterialIcon hasRipple icon=\"account_circle\" />\n                            }\n                        >\n                            Sign in\n                    </Button>\n                    </div>\n\n                    <div className={styles.divider} />\n\n                    <div className={styles.sideNoteContent}>\n                        <Subtitle1>\n                            Take a look at the React code that fuels and powers all the goodies!\n                        </Subtitle1>\n                        <Button\n                            href=\"https://github.com/rivernews/appl-tracky-spa\"\n                            target=\"_blank\"\n                            unelevated\n                            icon={\n                                <MaterialIcon hasRipple icon=\"code\" />\n                            }\n                        >\n                            Github Repository\n                </Button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: IRootState) => ({\n    auth: state.auth\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>) => {\n    // actionName = (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {\n    };\n};\n\nexport const LandingPageContainer = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(LandingPage)\n);\n","import React, { Component } from \"react\";\n\n/** Components */\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\n// mdc-react input\nimport \"@material/react-text-field/dist/text-field.css\";\nimport TextField, { Input } from \"@material/react-text-field\";\n// formik\nimport {\n    Field, FieldProps,\n    ErrorMessage,\n} from \"formik\";\n// input field\nimport { IFormInputFieldProps } from \"./form-input-field-meta\";\nimport { InputFieldType } from \"../form-base-field/form-base-field-meta\";\n\nimport styles from \"./form-input-field.module.css\";\n\n\nexport class FormInputField extends Component<IFormInputFieldProps> {\n    render() {\n        return (\n            <div className=\"FormInputField\">\n                <Field\n                    name={this.props.fieldName}\n                    render={({ field, form }: FieldProps<number | string>) => (\n                        <TextField\n                            className={styles.TextField}\n                            label={this.props.label}\n                            onTrailingIconSelect={this.props.onTrailingIconSelect}\n                            trailingIcon={this.props.onTrailingIconSelect && <MaterialIcon role=\"button\" icon=\"clear\" />}\n                        >\n                            <Input\n                                type={this.props.type || InputFieldType.TEXT}\n                                inputType=\"input\"\n                                autoFocus={this.props.autoFocus}\n                                {...field}\n                            />\n                        </TextField>\n                    )}\n                />\n                <ErrorMessage name={this.props.fieldName} />\n            </div>\n        );\n    }\n}","import React, { Component } from \"react\";\n\n/** Components */\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n// data model\nimport { DataModelClass, DataModelInstance } from \"../../data-model/base-model\";\n// formik\nimport {\n    Formik,\n    Form,\n    FormikValues\n} from \"formik\";\n// yup\nimport * as Yup from 'yup';\n// base field\nimport { FormBaseFieldMeta } from \"./form-base-field/form-base-field-meta\";\nimport { ISingleRestApiResponse } from \"../../utils/rest-api\";\nimport { JsonResponseType } from \"../../state-management/types/factory-types\";\n\n\nexport enum ActionButtonType {\n    SUBMIT = \"submit\",\n    BUTTON = \"button\"\n}\n\nexport class FormActionButtonProps {\n    constructor(\n        public text: string = \"\",\n        public onClick?: (event: any) => void,\n        public type?: ActionButtonType\n    ) { }\n}\n\nexport interface IFormFactoryProps<IDataModel> {\n    onSubmitSuccess?: (jsonResponse: JsonResponseType<IDataModel>) => void;\n\n    // pass in either `initialValues` or `initialInstance`, this is important for yup to render error message. If no initial info at all, yup will not display errors properly.\n    // `initialValues` should be used only for customize form; for data model forms please use `initialInstance` so update & create form can be handled together\n    initialValues?: any\n    initialInstance?: DataModelInstance<IDataModel>;\n    enforcedInstanceData?: any;\n\n    model?: DataModelClass;\n    actionButtonPropsList: Array<FormActionButtonProps>;\n    formFieldPropsList: Array<FormBaseFieldMeta>\n    \n    validationSchema?: Yup.Schema<IDataModel>\n\n    onSubmit?: (\n        values: FormikValues,\n        { setSubmitting }: { setSubmitting: Function }\n    ) => void;\n    \n    createInstanceTriggerAction?: (\n        instance: IDataModel,\n        successCallback?: (jsonResponse: ISingleRestApiResponse<IDataModel>) => void,\n        finalCallback?: Function,\n    ) => void;\n    updateInstanceTriggerAction?: (\n        instance: IDataModel,\n        successCallback?: Function,\n        finalCallback?: Function,\n        updateFromCompany?: IDataModel\n    ) => void;\n}\n\nexport class FormFactory<DataModel> extends Component<\n    IFormFactoryProps<DataModel>\n    > {\n\n    initialInstance?: DataModelInstance<any>;\n    validationSchema?: Yup.Schema<DataModel>;\n\n    constructor(props: IFormFactoryProps<DataModel>) {\n        super(props);\n\n        // guarantee this.initialInstance\n        if (this.props.model && !this.props.initialInstance) {\n            // for create form\n            const model = this.props.model;\n            this.initialInstance = new model({});\n        }\n        else {\n            // for update form\n            this.initialInstance = this.props.initialInstance;\n        }\n\n        // form behavior integrity check\n        if (!this.initialInstance) {\n            if (!this.props.initialValues || !this.props.onSubmit) {\n                throw Error(\"ERROR: form factory has no initialInstance - seems like you're building a custom form that does not use data model. Please pass in initialValues and onSubmit in props to handle the behavior manually.\");\n            }\n        }\n\n        this.validationSchema = this.props.validationSchema || this.props.model.schema;\n        process.env.NODE_ENV === 'development' && console.log(\"this.validationSchema =\", this.validationSchema);\n    }\n\n    onSubmit = (\n        values: FormikValues,\n        { setSubmitting }: { setSubmitting: Function }\n    ) => {\n        process.env.NODE_ENV === 'development' && console.log(\"submit values =\", values); setSubmitting(false);\n\n        setSubmitting(true);\n        let instanceData: any = {};\n        for (let fieldProps of this.props.formFieldPropsList) {\n            const keyName = fieldProps.fieldName;\n            instanceData[keyName] = fieldProps.getInstance(values);\n        }\n\n        // packaging\n        const model = this.props.model;\n        if (\n            model && this.props.createInstanceTriggerAction && this.props.updateInstanceTriggerAction &&\n            this.initialInstance\n        ) {\n            // a create / update form is assumed\n\n            const instance = new model({\n                uuid: this.initialInstance.uuid,\n                ...instanceData,\n                ...this.props.enforcedInstanceData\n            })\n            process.env.NODE_ENV === 'development' && console.log(\"instanceData =\", instanceData);\n            process.env.NODE_ENV === 'development' && console.log(\"instance =\", instance);\n\n            // dispatch API request\n            if (!instance.uuid) {\n                process.env.NODE_ENV === 'development' && console.log(\"ready to send create instance\");\n                this.props.createInstanceTriggerAction(instance, this.props.onSubmitSuccess, () => setSubmitting(false));\n            } else {\n                process.env.NODE_ENV === 'development' && console.log(\"ready to send update instance\");\n                this.props.updateInstanceTriggerAction(instance, this.props.onSubmitSuccess, () => setSubmitting(false), this.props.initialInstance);\n            }\n        }\n        else if (this.props.onSubmit) {\n            // if caller has customize onSubmit, then use it instead\n            this.props.onSubmit(values, { setSubmitting });\n        }\n        else {\n            process.env.NODE_ENV === 'development' && console.log(\"this.props.initialInstance =\", this.props.initialInstance);\n            process.env.NODE_ENV === 'development' && console.log(\"this.props.onSubmit =\", this.props.onSubmit);\n            process.env.NODE_ENV === 'development' && console.log(\"this.props.model =\", this.props.model);\n            alert(\"Something is wrong with the form...!\")\n            throw Error(\"ERROR: form factory props not properly configured. See above props.\")\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"FormFactory\">\n                <Formik\n                    initialValues={this.initialInstance || this.props.initialValues}\n                    validationSchema={this.validationSchema}\n                    onSubmit={this.onSubmit}\n                >\n                    {({\n                        values,\n                        isSubmitting,\n                        submitForm\n                    }) => (\n                            <Form>\n                                {this.props.formFieldPropsList.map((formFieldMeta: FormBaseFieldMeta, index: number) => (\n                                    <formFieldMeta.formField \n                                        key={index}\n                                        {...formFieldMeta}\n                                        formikValues={values}\n                                        onSaveKeystroke={submitForm}\n                                    />\n                                ) )}\n                                {this.props.actionButtonPropsList.map(\n                                    (actionButtonProps: FormActionButtonProps, index) => (\n                                        <Button\n                                            key={index}\n                                            type={actionButtonProps.type || ActionButtonType.BUTTON}\n                                            disabled={isSubmitting}\n                                            unelevated\n                                            onClick={actionButtonProps.onClick}\n                                            children={actionButtonProps.text}\n                                        />\n                                    )\n                                )}\n                            </Form>\n                        )}\n                </Formik>\n            </div>\n        );\n    }\n}\n","// base field\nimport { InputFieldType, FormBaseFieldMeta, IFormBaseFieldProps, IFieldBaseMetaProps } from \"../form-base-field/form-base-field-meta\";\n// input field\nimport { FormInputField } from \"./form-input-field\";\n\n\n// API for caller to new props for input field\nexport interface IFormInputFieldProps extends IFormBaseFieldProps {\n    type?: InputFieldType\n    onTrailingIconSelect?: () => void\n\n    autoFocus?: boolean\n}\n\n// for defining meta\nexport interface IFormInputFieldMetaProps extends IFieldBaseMetaProps {\n    type?: InputFieldType\n    onTrailingIconSelect?: () => void\n\n    autoFocus?: boolean\n}\n\nexport class FormInputFieldMeta extends FormBaseFieldMeta {\n    type?: InputFieldType\n    onTrailingIconSelect?: () => void\n\n    autoFocus?: boolean\n\n    constructor({\n        type,\n        onTrailingIconSelect,\n        autoFocus,\n        ...props\n    }: IFormInputFieldMetaProps) {\n        super(props)\n        this.type = type;\n        this.onTrailingIconSelect = onTrailingIconSelect;\n        this.autoFocus = autoFocus;\n\n        this.formField = FormInputField;\n    }\n}","import { BaseModel, IBaseModelProps } from \"./base-model\";\nimport * as Yup from \"yup\";\n\ninterface ILabelProps {\n    text?: labelTypes;\n    user?: any;\n    color?: string;\n    order?: number;\n}\n\nexport class Label extends BaseModel {\n    public text: labelTypes;\n    public user: any;\n    public color: string;\n    public order: number;\n\n    constructor({\n        text = labelTypes.TARGET,\n        user = null,\n        color = \"\",\n        order = 0,\n        ...args\n    }: ILabelProps & IBaseModelProps) {\n        super(args);\n        this.text = text;\n        this.user = user;\n\n        this.color = color;\n        this.order = order;\n    }\n\n    static schema(){\n        return Yup.object<Label>().shape({\n            text:  Yup.string().max(200),\n            color: Yup.string().max(20),\n            order: Yup.number()\n        });\n    }\n}\n\nexport enum labelTypes {\n    TARGET = \"Target\",\n    APPLIED = \"Applied\",\n    INTERVIEWING = \"Interviewing\",\n    ARCHIVED = \"Archived\",\n}\n","import React from \"react\";\n\nimport { FormikValues } from \"formik\";\nimport { RestApiService } from \"../../utils/rest-api\";\nimport { AuthenticationService } from \"../../utils/authentication\";\nimport { FormBaseFieldMeta, InputFieldType } from \"../form-factory/form-base-field/form-base-field-meta\";\nimport { FormInputFieldMeta } from \"../form-factory/form-input-field/form-input-field-meta\";\nimport { FormActionButtonProps, ActionButtonType, FormFactory } from \"../form-factory/form-factory\";\n// yup\nimport * as Yup from 'yup';\n\ninterface ILoginFormProps {\n    onCancel: () => void\n    onSubmit: (values: FormikValues, setSubmitting: Function) => void\n}\n\nexport const LoginForm = (props: ILoginFormProps) => {\n\n    const formFieldPropsList: Array<FormBaseFieldMeta> = [\n        new FormInputFieldMeta({\n            fieldName: \"username\",\n            label: \"Username\",\n            autoFocus: true\n        }),\n        new FormInputFieldMeta({\n            fieldName: \"password\",\n            label: \"Password\",\n            type: InputFieldType.PASSWORD\n        }),\n    ];\n    const actionButtonPropsList: Array<FormActionButtonProps> = [\n        new FormActionButtonProps(\"Login\", undefined, ActionButtonType.SUBMIT),\n        new FormActionButtonProps(\"Cancel\", props.onCancel)\n    ];\n\n    const onSubmitLoginForm = async (\n        values: FormikValues,\n        { setSubmitting }: { setSubmitting: Function }\n    ) => {\n        setSubmitting(true);\n        process.env.NODE_ENV === 'development' && console.log(\"values =\", values);\n\n        props.onSubmit(values, setSubmitting);\n    };\n\n    // validation\n    const loginFormInitialValues = {\n        username: \"guest\",\n        password: \"appltracky\"\n    }\n    type ILoginFormShape = typeof loginFormInitialValues;\n    const validationSchema: Yup.Schema<ILoginFormShape> = Yup.object<ILoginFormShape>().shape({\n        username: Yup.string().required(\"Forgot to type username...?\"),\n        password: Yup.string().required(\"Password please...!\")\n    })\n\n\n    return (\n        <div className=\"loginForm\">\n            <FormFactory\n                initialValues={loginFormInitialValues}\n    \n                formFieldPropsList={formFieldPropsList}\n                actionButtonPropsList={actionButtonPropsList}\n\n                validationSchema={validationSchema}\n    \n                onSubmit={onSubmitLoginForm}\n            />\n        </div>\n    )\n}","import React, { Component } from \"react\";\nimport { withRouter, RouteComponentProps, Redirect } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch, AnyAction } from \"redux\";\nimport { IRootState } from \"../../state-management/types/root-types\";\nimport { IUpdateAuthState, RequestedLoginMode } from \"../../state-management/types/auth-types\";\nimport { RequestedLoginAuth } from \"../../state-management/action-creators/auth-actions\";\nimport { FormikValues } from \"formik\";\n\n/** Components */\nimport { LoginForm } from \"../../components/login/local-login-form\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\n\n\ninterface ILocalLoginPageProps extends RouteComponentProps {\n    /** redux state */\n    auth: IUpdateAuthState;\n\n    /** dispatch action */\n    requestedLoginAuth: (username: string, password: string, onCompleteCallback: () => void) => void;\n}\n\nclass LocalLoginPage extends Component<ILocalLoginPageProps> {\n    onLoginFormCancel = () => {\n        this.props.history.goBack();\n    }\n\n    onLoginFormSubmit = (values: FormikValues, setSubmitting: Function) => {\n        this.props.requestedLoginAuth(values.username, values.password, () => {\n            setSubmitting(false);\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"LocalLoginPage\">\n                <h1>Login Portal for local sign in</h1>\n                <div>\n                    If you just want to try it out, you can use guest account:\n                    <div>\n                        username: guest\n                    </div>\n                    <div>\n                        password: appltracky\n                    </div>\n                </div>\n\n                <LoginForm\n                    onSubmit={this.onLoginFormSubmit}\n                    onCancel={this.onLoginFormCancel}\n                />\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    auth: store.auth\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>) => {\n    // actionName: (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {\n        requestedLoginAuth: (username: string, password: string, onCompleteCallback: () => void) => {\n            dispatch(\n                RequestedLoginAuth(RequestedLoginMode.LOCAL, {\n                    username, password\n                }, onCompleteCallback)\n            );\n        },\n    }\n};\n\nexport const LocalLoginPageContainer = withRouter(connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(LocalLoginPage));\n","class Utilities {\n    static normalizeText(rawText: string) {\n        return rawText.toLowerCase().trim()\n    }\n}\n\nexport {\n    Utilities\n};","import { BaseModel, IBaseModelProps } from \"./base-model\";\nimport * as Yup from \"yup\";\n\nexport interface IAddressProps {\n    place_name?: string;\n    country?: string;\n    state?: string;\n    city?: string;\n    street?: string;\n    full_address?: string;\n    zipcode?: string;\n}\n\nexport class Address extends BaseModel {\n    place_name: string;\n    country: string;\n    state: string;\n    city: string;\n    street: string;\n    full_address: string;\n    zipcode: string;\n\n    constructor({\n        place_name = \"\",\n        country = \"\",\n        state = \"\",\n        city = \"\",\n        street = \"\",\n        full_address = \"\",\n        zipcode = \"\",\n        ...args\n    }: IAddressProps & IBaseModelProps) {\n        super(args);\n        this.place_name = place_name;\n        this.country = country;\n        this.state = state;\n        this.place_name = place_name;\n        this.city = city;\n        this.street = street;\n        this.full_address = full_address;\n        this.zipcode = zipcode;\n    }\n\n    static schema(){\n        return Yup.object<Address>().shape({\n            full_address: Yup.string().max(200),\n            street: Yup.string().max(150),\n            city: Yup.string().max(50),\n            state: Yup.string().max(50),\n            country: Yup.string().max(50),\n            place_name: Yup.string().max(50),\n            zipcode: Yup.string().max(20),\n        });\n    }\n\n}\n","import { BaseModel, IBaseModelProps } from \"./base-model\";\nimport * as Yup from \"yup\";\n\ninterface ILinkProps {\n    text?: string;\n    user?: any;\n    url?: string;\n    order?: number;\n}\n\nexport class Link extends BaseModel {\n    public text: string;\n    public user: any;\n    public url: string;\n    public order: number;\n\n    constructor({\n        text = \"\",\n        user = {},\n        url = \"\",\n        order = 0,\n        ...args\n    }: ILinkProps & IBaseModelProps) {\n        super(args);\n        this.text = text;\n        this.user = user;\n        this.url = url;\n        this.order = order;\n    }\n\n    static schema(){\n        return Yup.object<Link>().shape({\n            text:  Yup.string().max(200),\n            url: Yup.string().default(\"#\").when(\n                \"text\", {\n                    is: (text) => text,\n                    then: Yup.string().required(\"Since you gave the link some text, let's provide an url as well...!\").max(500, \"URL is too long, only less than 500 characters please\")\n                }\n            ),\n        });\n    }\n}\n","import { BaseModel, IBaseModelProps, IReference } from \"../base-model\";\nimport { Address } from \"../address\";\nimport { Link } from \"../link\";\nimport { Label, labelTypes } from \"../label\";\nimport { Application } from \"../application/application\";\nimport * as Yup from \"yup\";\n\n\ninterface ICompanyProps {\n    user?: string;\n    labels?: Array<Label>;\n    name?: string;\n    hq_location?: Address;\n    home_page?: Link;\n    ratings?: any;\n    applications?: Array<Application> | Array<IReference>;\n}\n\nexport class Company extends BaseModel {\n    public user: string;\n    public labels: Array<Label>;\n    public name: string;\n    public hq_location: Address;\n    public home_page: Link;\n    public ratings: any;\n    public applications: Array<Application> | Array<IReference>;\n\n    constructor({\n        user = \"\",\n        labels = [],\n        name = \"\",\n        hq_location = new Address({}),\n        home_page = new Link({}),\n        ratings = {},\n        applications = [],\n        ...args\n    }: ICompanyProps & IBaseModelProps) {\n        super(args);\n        this.user = user;\n        this.labels = labels;\n        this.name = name;\n        this.hq_location = hq_location;\n        this.home_page = home_page;\n        this.ratings = ratings;\n        this.applications = applications;\n    }\n\n    static schema(){\n        return Yup.object<Company>().shape({\n            name: Yup.string().required(\"Every company needs a name...!\").max(100),\n            home_page: Link.schema(),\n            hq_location: Address.schema()\n        });\n    }\n\n    static getLabel(companyObject: Company): labelTypes {\n        // default to TARGET\n        return companyObject.labels && companyObject.labels.length ? companyObject.labels[0].text : labelTypes.TARGET;\n    }\n}\n\n\nexport type companyGroupTypes = \"targetCompany\" | \"appliedCompany\" | \"interviewingCompany\" | \"archivedCompany\";\n\nexport const labelTypesMapToCompanyGroupTypes: {\n    [key in labelTypes]: companyGroupTypes\n} = {\n    [labelTypes.TARGET]: \"targetCompany\",\n    [labelTypes.APPLIED]: \"appliedCompany\",\n    [labelTypes.INTERVIEWING]: \"interviewingCompany\",\n    [labelTypes.ARCHIVED]: \"archivedCompany\"\n};\n","import React, { Component } from \"react\";\n\n/** Components */\n// react-mdc tab\nimport '@material/react-tab-bar/dist/tab-bar.css';\nimport '@material/react-tab-scroller/dist/tab-scroller.css';\nimport '@material/react-tab/dist/tab.css';\nimport '@material/react-tab-indicator/dist/tab-indicator.css';\nimport Tab from '@material/react-tab';\nimport TabBar from '@material/react-tab-bar';\n\nimport { TabContent, ITabContentProps } from \"./tab-content\";\n\nimport { CSSTransition } from 'react-transition-group';\n\nimport leftSlideStyles from './tab-transition-slide-left.module.css';\nimport rightSlideStyles from './tab-transition-slide-right.module.css';\nimport styles from './tab-container.module.css';\n\n\nenum SlideDirection {\n    LEFTWARD = \"leftward\",\n    RIGHTWARD = \"rightward\"\n}\n\ninterface ITabContainerState {\n    activeIndex: number\n    tabContentSlideDirection: SlideDirection\n}\n\ninterface ITabContainerProps {\n    render?: () => React.ReactElement<ITabContentProps> | React.ReactElement<ITabContentProps>[]\n}\n\nexport class TabContainer extends Component<ITabContainerProps, ITabContainerState> {\n    state = {\n        activeIndex: 0,\n        tabContentSlideDirection: SlideDirection.RIGHTWARD\n    }\n\n    handleActiveIndexUpdate = (activeIndex: number) => {\n        this.setState({\n            activeIndex,\n            tabContentSlideDirection: (activeIndex > this.state.activeIndex) ?\n                SlideDirection.LEFTWARD : /** the tab item slides rightward, so content slides leftward */\n                SlideDirection.RIGHTWARD /** vice versa */\n        });\n    }\n\n    render() {\n        const tabContents = this.props.render ? (\n            this.props.render()\n        ) : [];\n        const tabContentList = Array.isArray(tabContents) ? tabContents : [tabContents];\n\n        return (\n            <div>\n                <TabBar\n                    className={`${styles.tabBar}`}\n                    activeIndex={this.state.activeIndex}\n                    handleActiveIndexUpdate={this.handleActiveIndexUpdate}\n                >\n                    {\n                        tabContentList.map((tabContent, index) => (\n                            <Tab key={index} tabIndex={index}>\n                                <span className='mdc-tab__text-label'>{tabContent.props.label}</span>\n                            </Tab>\n                        ))\n                    }\n                </TabBar>\n                {\n                    tabContentList.map((child, index) => {\n                        return (\n                            <CSSTransition\n                                key={index}\n                                classNames={this.state.tabContentSlideDirection === SlideDirection.RIGHTWARD ?\n                                    { ...rightSlideStyles } :\n                                    { ...leftSlideStyles }}\n                                in={this.state.activeIndex === index}\n                                timeout={500}\n                                unmountOnExit\n                            >\n                                <TabContent\n                                    {...child.props}\n                                />\n                            </CSSTransition>\n                        );\n                    })\n                }\n            </div>\n        )\n    }\n}\n","import React, { Component } from \"react\";\n\nimport styles from \"./tab-content.module.css\";\n\n\nexport interface ITabContentProps {\n    label: string\n}\n\nexport class TabContent extends Component<ITabContentProps> {\n    render() {\n        return (\n            <div className={styles.TabContent}>\n                {this.props.children}\n            </div>\n        )\n    }\n}\n","import { RestApiActionCreatorsFactory } from \"./action-creator-factory\";\nimport { companyGroupTypes, labelTypesMapToCompanyGroupTypes, Company } from \"../../data-model/company/company\";\nimport { IObjectRestApiReduxFactoryActions } from \"../types/factory-types\";\nimport { Application } from \"../../data-model/application/application\";\nimport { ApplicationStatus } from \"../../data-model/application-status/application-status\";\n\n\nexport enum RootActionNames {\n    ResetAllStore = \"RESET_ALL_STORE\"\n}\n\nexport const resetAllStoreAction = () => {\n    return {\n        type: RootActionNames.ResetAllStore,\n    }\n}\n\n\n// action creators for companies\n\nexport const CompanyActionCreators = RestApiActionCreatorsFactory<Company>(\"companies\");\n\nconst groupedCompanyActionCreatorsHelper = () => {\n    return Object.values(labelTypesMapToCompanyGroupTypes).reduce((accumulated, companyGroupText) => {\n        return {\n            ...accumulated,\n            [companyGroupText]: RestApiActionCreatorsFactory<Company>(companyGroupText)\n        }\n    }, {});\n}\nexport const GroupedCompanyActionCreators = groupedCompanyActionCreatorsHelper() as {\n    [key in companyGroupTypes]: IObjectRestApiReduxFactoryActions\n};\n\n\n// action creators for application\n\nexport const ApplicationActionCreators = RestApiActionCreatorsFactory<Application>(\"applications\")\n\n\n// action creators for status\n\nexport const ApplicationStatusActionCreators = RestApiActionCreatorsFactory<ApplicationStatus>(\"application-statuses\")","import React, { Component } from \"react\";\n\n/** Redux & data models */\nimport { Company } from \"../../data-model/company/company\";\nimport { Application } from \"../../data-model/application/application\";\n\n/** Components */\nimport Card, { CardPrimaryContent } from \"@material/react-card\";\nimport '@material/react-card/dist/card.css';\nimport List, { ListItem, ListItemText } from \"@material/react-list\";\nimport '@material/react-list/dist/list.css';\n// mdc-chips\nimport { ChipSet, Chip } from '@material/react-chips';\nimport \"@material/react-chips/dist/chips.css\";\n\nimport Skeleton from 'react-loading-skeleton';\n\nimport styles from './company-list-item.module.css';\n\n\ninterface ICompanyListItemProps {\n    company?: Company;\n    applications?: Array<Application>\n    onClick?: (uuid: string) => void\n}\n\nconst CompanyListItem = (props: ICompanyListItemProps) => {\n    const onClick = (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n        props.onClick && props.company && props.onClick(props.company.uuid);\n    }\n\n    return (\n        <Card className={styles.companyCard} onClick={onClick}>\n            <CardPrimaryContent className={styles.companyCardContent}>\n                <h1>{props.company ? props.company.name : <Skeleton duration={1.1} width={`50vmin`} />}</h1>\n\n                {props.company ? (\n                    props.company.labels.length && props.company.labels[0].text ? (\n                        <ChipSet>\n                            <Chip label={props.company.labels[0].text} />\n                        </ChipSet>\n                    ) : (\n                        <ChipSet>\n                            <Chip label=\"None\" />\n                        </ChipSet>\n                    )\n                ) : (\n                    <Skeleton width=\"40px\" />\n                )}\n\n                <List nonInteractive>\n                    {\n                        props.applications ? props.applications.map((application: Application) => (\n                            <ListItem key={application.uuid}>\n                                <ListItemText primaryText={application.position_title} />\n                            </ListItem>\n                        )) : (\n                                <div className=\"skeletonGroup\">\n                                    <div><Skeleton duration={1.1} width=\"40vmin\" /></div>\n                                    <div><Skeleton duration={1.1} width=\"60vmin\" /></div>\n                                    <div><Skeleton duration={1.1} width=\"50vmin\" /></div>\n                                </div>\n                            )\n                    }\n                </List>\n            </CardPrimaryContent>\n        </Card>\n    );\n}\n\nexport {\n    CompanyListItem\n};","import React, { Component } from \"react\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\nimport { Utilities } from \"../../utils/utilities\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../state-management/types/root-types\";\nimport { IObjectAction, IObjectStore } from \"../../state-management/types/factory-types\";\nimport { InputFieldType } from \"../../components/form-factory/form-base-field/form-base-field-meta\";\n// data models\nimport { Company, labelTypesMapToCompanyGroupTypes, companyGroupTypes } from \"../../data-model/company/company\";\nimport { labelTypes } from \"../../data-model/label\";\nimport { Application } from \"../../data-model/application/application\";\n\n/** Components */\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n\n// mdc-react input\nimport \"@material/react-text-field/dist/text-field.css\";\nimport TextField, { Input } from \"@material/react-text-field\";\n\nimport { TabContainer } from \"../../components/tab/tab-container\";\nimport { TabContent } from \"../../components/tab/tab-content\";\n\n// objects\nimport { CompanyListItem } from \"../../components/company/company-list-item\";\nimport { RequestStatus } from \"../../utils/rest-api\";\n\nimport {\n    Body1,\n    Body2,\n    // Button,\n    Caption,\n    Headline1,\n    Headline2,\n    Headline3,\n    Headline4,\n    Headline5,\n    Headline6,\n    Overline,\n    Subtitle1,\n    Subtitle2,\n} from '@material/react-typography';\nimport '@material/react-typography/dist/typography.css';\n\n// styling\nimport styles from \"./user-app-page.module.css\";\nimport { IReference } from \"../../data-model/base-model\";\n\n\ninterface IUserAppPageProps extends RouteComponentProps {\n    company: IObjectStore<Company>\n    targetCompany: IObjectStore<Company>\n    appliedCompany: IObjectStore<Company>\n    interviewingCompany: IObjectStore<Company>\n    archivedCompany: IObjectStore<Company>\n\n    application: IObjectStore<Application>\n}\n\ninterface IUserAppPageState {\n    searchText: string\n    isFiltering: boolean\n    filteredCompanyList: Array<Company>\n    activeTabIndex: number\n}\n\nclass UserAppPage extends Component<IUserAppPageProps, IUserAppPageState> {\n    state = {\n        searchText: '',\n        isFiltering: false,\n        filteredCompanyList: [],\n        activeTabIndex: 0\n    };\n\n    onCompanyClick = (uuid: string) => {\n        setTimeout(() => this.props.history.push(`/com-app/${uuid}/`), 10);\n    }\n\n    searchFieldTextIsEmpty = () => {\n        return Utilities.normalizeText(this.state.searchText) === '';\n    }\n\n    filterCompanyByName = (name: string) => {\n        const filteringName = Utilities.normalizeText(name);\n        const allCompanies = Object.values(this.props.company.collection);\n\n        this.setState({\n            filteredCompanyList: allCompanies.filter((company: Company) => Utilities.normalizeText(company.name).includes(filteringName)),\n\n            // always switch on filering mode when filtering is triggered\n            isFiltering: true\n        })\n    }\n\n    onSearchFieldChange = (event: React.FormEvent<HTMLInputElement>) => {\n        this.setState({\n            searchText: event.currentTarget.value,\n        }, () => {\n            this.setState({\n                // switch off filtering mode if field becomes empty\n                isFiltering: this.searchFieldTextIsEmpty() ? false : this.state.isFiltering\n            })\n        });\n    }\n\n    onSearchFieldKeyDown = (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key.toLowerCase() === 'enter') {\n            !this.searchFieldTextIsEmpty() && this.filterCompanyByName(this.state.searchText);\n        }\n    }\n\n    onSearchFieldClear = () => {\n        this.setState({ searchText: '', isFiltering: false });\n    }\n\n    handleActiveTabIndexUpdate = (activeTabIndex: number) => this.setState({ activeTabIndex });\n\n    render() {\n        const allCompanies = Object.values(this.props.company.collection);\n\n        // for searching feature\n        const displayingCompanies = this.props.company.requestStatus !== RequestStatus.REQUESTING ? this.state.isFiltering ? this.state.filteredCompanyList : allCompanies : Array.from(Array(5));\n\n        return (\n            <div>\n                <div className={styles.UserAppPageHeader}>\n                    <Headline3>Your Organizations</Headline3>\n                    <Button\n                        className=\"mdc-theme-secondary\"\n                        onClick={() => { this.props.history.push(\"/com-form/\") }}\n                        unelevated\n                        icon={<MaterialIcon hasRipple icon=\"add\" />}\n                        children=\"Add Organization\"\n                    />\n                </div>\n                <TabContainer\n                    render={() => {\n                        const allCompanyTab = (<TabContent label=\"All\">\n                            <div className={styles.companyListHeader}>\n                                <TextField\n                                    className={styles.searchField}\n                                    label=\"Search Company Name\"\n                                    outlined\n                                    leadingIcon={<MaterialIcon role=\"button\" icon=\"search\" />}\n                                    trailingIcon={this.state.searchText === '' ? undefined : <MaterialIcon role=\"button\" icon=\"clear\" />}\n                                    onTrailingIconSelect={this.onSearchFieldClear}\n                                >\n                                    <Input\n                                        type={InputFieldType.TEXT}\n                                        inputType=\"input\"\n                                        onKeyDown={this.onSearchFieldKeyDown}\n                                        onChange={this.onSearchFieldChange}\n                                        value={this.state.searchText}\n                                    />\n                                </TextField>\n                            </div>\n                            <div>\n                                {\n                                    displayingCompanies.map(\n                                        (company, index) =>\n                                            <CompanyListItem\n                                                key={company ? company.uuid : index}\n                                                company={company}\n                                                applications={company ? Object.values(this.props.application.collection).filter((application) => application.user_company === company.uuid) : undefined}\n                                                onClick={company ? this.onCompanyClick : undefined}\n                                            />\n                                    )\n                                }\n                            </div>\n                        </TabContent>)\n\n                        const groupCompanyTabs = Object.values(labelTypes).map((labelText: labelTypes, index) => {\n                            return (\n                                <TabContent key={index} label={`${labelText} (${Object.keys(this.props[labelTypesMapToCompanyGroupTypes[labelText]].collection).length})`}>\n                                    <div className={styles.companyListHeader}>\n                                        <h1>{labelText}</h1>\n                                    </div>\n                                    <div>\n                                        {\n                                            Object.values(this.props[labelTypesMapToCompanyGroupTypes[labelText]].collection).map(\n                                                (companyRef, index) => {\n                                                    const company = this.props.company.collection[companyRef.uuid];\n                                                    const applications = company ? (company.applications as Array<IReference>).map((applicationUuid) => {\n                                                        return this.props.application.collection[applicationUuid];\n                                                    }) : undefined;\n\n                                                    return (\n                                                        <CompanyListItem\n                                                            key={company ? company.uuid : index}\n                                                            company={company}\n                                                            applications={applications}\n                                                            onClick={company ? this.onCompanyClick : undefined}\n                                                        />\n                                                    )\n                                                }\n                                            )\n                                        }\n                                    </div>\n                                </TabContent>\n                            )\n                        })\n\n                        return [\n                            allCompanyTab,\n                            ...groupCompanyTabs\n                        ]\n                    }}\n                />\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    // prop: store.prop\n    company: store.company,\n\n    ...(Object.values(labelTypesMapToCompanyGroupTypes).reduce((accumulated, labelText) => ({\n        ...accumulated,\n        [labelText]: store[labelText]\n    }), {}) as {[key in companyGroupTypes]: IObjectStore<Company>}),\n\n    application: store.application,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<{}>>) => {\n    // actionName = (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n\n    return {\n        // listObject: (callback?: Function) =>\n        //     dispatch(\n        //         ObjectActions[CrudType.LIST][RequestStatus.TRIGGERED].action(\n        //             new Object({}),\n        //             callback\n        //         )\n        //     ),\n    }\n};\n\nexport const UserAppPageContainer = withRouter(connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(UserAppPage));\n","import { IObjectBase, TObject, IObjectRestApiReduxFactoryActions, JsonResponseType, ITriggerActionOptions, IObjectAction, ObjectRestApiJsonResponse } from \"../types/factory-types\";\n\nimport { CrudType, RequestStatus, IsSingleRestApiResponseTypeGuard, ISingleRestApiResponse, IListRestApiResponse } from \"../../utils/rest-api\";\n\n\nexport const RestApiActionCreatorsFactory = <ObjectRestApiSchema extends IObjectBase>(\n    /** should have uuid */ objectName: string\n): IObjectRestApiReduxFactoryActions => {\n    const crudKeywords = Object.values(CrudType);\n\n    let ObjectRestApiActions: IObjectRestApiReduxFactoryActions = {};\n    for (let crudKeyword of crudKeywords) {\n        ObjectRestApiActions[crudKeyword] = {};\n\n        /** action */\n        // action type names\n        for (let requestStatus of Object.values(RequestStatus)) {\n            ObjectRestApiActions[crudKeyword][requestStatus] = {\n                actionTypeName: \"\",\n                action: () => {}\n            };\n            ObjectRestApiActions[crudKeyword][\n                requestStatus\n            ].actionTypeName = `${requestStatus.toUpperCase()}_${crudKeyword.toUpperCase()}_${objectName.toUpperCase()}`;\n        }\n\n        // async actions ( & state...)\n        ObjectRestApiActions[crudKeyword][RequestStatus.TRIGGERED].action = (\n            objectClassInstance?: ObjectRestApiSchema,\n            successCallback?: (jsonResponse: JsonResponseType<ObjectRestApiSchema>) => void,\n            failureCallback?: (error: any) => void,\n            finalCallback?: Function,\n            absoluteUrl?: string,\n            triggerActionOptions?: ITriggerActionOptions<ObjectRestApiSchema>\n        ): IObjectAction<ObjectRestApiSchema> => {\n            process.env.NODE_ENV === 'development' && console.log(`action:fired, trigger, ${crudKeyword}`);\n            return {\n                type:\n                    ObjectRestApiActions[crudKeyword][RequestStatus.TRIGGERED]\n                        .actionTypeName,\n                crudType: crudKeyword,\n                finalCallback,\n                successCallback,\n                failureCallback,\n                absoluteUrl,\n                triggerActionOptions,\n                payload: {\n                    requestStatus: RequestStatus.TRIGGERED,\n                    formData: objectClassInstance\n                }\n            };\n        };\n        ObjectRestApiActions[crudKeyword][\n            RequestStatus.REQUESTING\n        ].action = (): IObjectAction<ObjectRestApiSchema> => {\n            return {\n                type:\n                    ObjectRestApiActions[crudKeyword][RequestStatus.REQUESTING]\n                        .actionTypeName,\n                crudType: crudKeyword,\n                payload: {\n                    requestStatus: RequestStatus.REQUESTING\n                }\n            };\n        };\n        ObjectRestApiActions[crudKeyword][RequestStatus.SUCCESS].action = (\n            /** api response */\n            jsonResponse: ObjectRestApiJsonResponse<ObjectRestApiSchema>,\n            triggerFormData?: TObject<ObjectRestApiSchema> | Array<TObject<ObjectRestApiSchema>>\n        ): IObjectAction<ObjectRestApiSchema> => {\n            let newState = {\n                type:\n                    ObjectRestApiActions[crudKeyword][RequestStatus.SUCCESS]\n                        .actionTypeName,\n                crudType: crudKeyword\n            };\n            // if is delete success, we don't need formData (& the server responds nothing for DELETE as well)\n            if (crudKeyword === CrudType.DELETE) {\n                return {\n                    ...newState,\n                    triggerFormData,\n                    payload: {\n                        requestStatus: RequestStatus.SUCCESS,\n                    }\n                }\n            }\n            else if (IsSingleRestApiResponseTypeGuard(jsonResponse)) {\n                return {\n                    ...newState,\n                    payload: {\n                        requestStatus: RequestStatus.SUCCESS,\n                        formData: <ISingleRestApiResponse<ObjectRestApiSchema>>(\n                            jsonResponse\n                        )\n                    }\n                };\n            } else {\n                return {\n                    ...newState,\n                    payload: {\n                        requestStatus: RequestStatus.SUCCESS,\n                        formData: (<IListRestApiResponse<ObjectRestApiSchema>>(\n                            jsonResponse\n                        )).results\n                    }\n                };\n            }\n        };\n        ObjectRestApiActions[crudKeyword][RequestStatus.FAILURE].action = (\n            error: any\n        ): IObjectAction<ObjectRestApiSchema> => {\n            return {\n                type:\n                    ObjectRestApiActions[crudKeyword][RequestStatus.FAILURE]\n                        .actionTypeName,\n                crudType: crudKeyword,\n                payload: {\n                    requestStatus: RequestStatus.FAILURE,\n                    error\n                }\n            };\n        };\n    }\n\n    return ObjectRestApiActions;\n}\n","import React from \"react\";\n\n/** Components */\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n// mdc-react icon button\nimport '@material/react-icon-button/dist/icon-button.css';\nimport IconButton from '@material/react-icon-button';\n// data model\nimport { DataModelClass } from \"../../../data-model/base-model\";\n// formik\nimport {\n    FieldArray,\n    ArrayHelpers,\n} from \"formik\";\n// base field\nimport { IFormBaseFieldProps } from \"./form-base-field-meta\";\n\n\ninterface IFormBaseDyanmicFieldControllsProps {\n    index: number\n    formikArrayHelpers: ArrayHelpers\n}\n\nconst FormBaseDynamicFieldControlls = (props: IFormBaseDyanmicFieldControllsProps) => {\n\n    const deleteField = () => {\n        confirm(`Are you sure you want to delete this dynamic field?`) && props.formikArrayHelpers.remove(props.index);\n    }\n\n    return (\n        <div className=\"FormBaseDynamicFieldControlls\">\n            <IconButton type=\"button\" onClick={deleteField}>\n                <MaterialIcon hasRipple icon=\"delete\" />\n            </IconButton>\n        </div>\n    )\n}\n\nconst BaseDynamicFieldAddButton = (props: {\n    formikArrayHelpers: ArrayHelpers\n    model?: DataModelClass\n    label: string\n}) => {\n\n    const onAddClick = () => {\n        if (props.model) {\n            const model = props.model;\n            props.formikArrayHelpers.push(new model({}));\n        } else {\n            props.formikArrayHelpers.push({});\n        }\n    }\n\n    return (\n        <Button type=\"button\" onClick={onAddClick} children={`New ${props.label}`} />\n    )\n}\n\nexport const withFormBaseField = (FormFieldComponent: React.ComponentType<IFormBaseFieldProps>) => (props: IFormBaseFieldProps) => {\n\n    if (props.isDynamic && !props.formikValues) {\n        alert(\"Oops! Something's wrong.\");\n        throw Error(\"When `isDynamic` is true, you need to pass over `formikValues`.\");\n    }\n\n    const formikValues = props.formikValues;\n    const getInstanceDataFromFormikValues = props.getInstanceDataFromFormikValues;\n\n    return (\n        (props.isDynamic && getInstanceDataFromFormikValues && formikValues) ?\n            (<FieldArray\n                name={props.fieldName}\n                render={formikArrayHelpers => (\n                    <div className=\"FormApplicationStatusLinkFieldsContainer\">\n                        {getInstanceDataFromFormikValues(formikValues).map((instanceData: any, index: number) => (\n                            <div key={index} className=\"FormBaseDynamicField\">\n                                <FormFieldComponent\n                                    fieldName={`${props.fieldName}[${index}]`}\n                                    label={`${props.label} ${index}`}\n                                    formikValues={props.formikValues}\n                                    getInstanceDataFromFormikValues={props.getInstanceDataFromFormikValues}\n                                />\n                                <FormBaseDynamicFieldControlls\n                                    index={index}\n                                    formikArrayHelpers={formikArrayHelpers}\n                                />\n                            </div>\n                        ))}\n\n                        <BaseDynamicFieldAddButton\n                            formikArrayHelpers={formikArrayHelpers}\n                            label={props.label}\n                            model={props.model}\n                        />\n                    </div>\n                )}\n            />)\n            :\n            (<FormFieldComponent\n                fieldName={props.fieldName}\n                label={props.label}\n                formikValues={props.formikValues}\n                getInstanceDataFromFormikValues={props.getInstanceDataFromFormikValues}\n            />)\n    )\n}\n","/** Components */\n// base field\nimport { withFormBaseField } from \"../form-base-field/form-base-field\";\n// link field\nimport { FormLinkFieldComponent } from \"./form-link-field-component\";\n\nexport const FormLinkField = withFormBaseField(FormLinkFieldComponent);\n","import React, { Component } from \"react\";\n\n/** Components */\n// mdc-react input\nimport \"@material/react-text-field/dist/text-field.css\";\n\nimport { FormInputFieldMeta } from \"../form-input-field/form-input-field-meta\";\nimport { FormInputField } from \"../form-input-field/form-input-field\";\nimport { IFormBaseFieldProps } from \"../form-base-field/form-base-field-meta\";\n\nexport interface IFormLinkFieldComponentProps extends IFormBaseFieldProps {\n}\n\nexport class FormLinkFieldComponent extends Component<IFormLinkFieldComponentProps> {\n\n    textInputFieldMeta: FormInputFieldMeta;\n    urlInputFieldMeta: FormInputFieldMeta;\n\n    constructor(props: IFormLinkFieldComponentProps) {\n        super(props)\n\n        this.textInputFieldMeta = new FormInputFieldMeta({\n            fieldName: `${this.props.fieldName}.text`,\n            label: \"Description\",\n            autoFocus: true\n        });\n        this.urlInputFieldMeta = new FormInputFieldMeta({\n            fieldName: `${this.props.fieldName}.url`,\n            label: \"Link url\"\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"FormLinkField\">\n                {this.props.label && <h4>{this.props.label}</h4>}\n                <FormInputField\n                    {...this.textInputFieldMeta}\n                />\n\n                <FormInputField\n                    {...this.urlInputFieldMeta}\n                />\n            </div>\n        );\n    }\n}","// data model\nimport { Link } from \"../../../data-model/link\";\n\n/** Components */\n// base field\nimport { IFieldBaseMetaProps, FormBaseFieldMeta } from \"../form-base-field/form-base-field-meta\";\nimport { FormLinkField } from \"./form-link-field\";\n\nexport class FormLinkFieldMeta extends FormBaseFieldMeta {\n\n    constructor(props: IFieldBaseMetaProps) {\n        super(props)\n        this.model = Link;\n        this.formField = FormLinkField;\n    }\n}\n","/** Components */\n// base field\nimport { withFormBaseField } from \"../form-base-field/form-base-field\";\n// link field\nimport { FormAddressFieldComponent } from \"./form-address-field-component\";\n\nexport const FormAddressField = withFormBaseField(FormAddressFieldComponent);\n","import React, { Component } from \"react\";\n\n/** Components */\n// mdc-react input\nimport \"@material/react-text-field/dist/text-field.css\";\n\nimport { FormInputFieldMeta } from \"../form-input-field/form-input-field-meta\";\nimport { FormInputField } from \"../form-input-field/form-input-field\";\nimport { IFormBaseFieldProps } from \"../form-base-field/form-base-field-meta\";\n\nexport interface IFormAddressFieldComponentProps extends IFormBaseFieldProps {\n}\n\nexport class FormAddressFieldComponent extends Component<IFormAddressFieldComponentProps> {\n\n    fullAddressInputFieldMeta: FormInputFieldMeta;\n    placeNameInputFieldMeta: FormInputFieldMeta;\n\n    constructor(props: IFormAddressFieldComponentProps) {\n        super(props)\n\n        this.fullAddressInputFieldMeta = new FormInputFieldMeta({\n            fieldName: `${this.props.fieldName}.full_address`,\n            label: `Full Address`\n        });\n        this.placeNameInputFieldMeta = new FormInputFieldMeta({\n            fieldName: `${this.props.fieldName}.place_name`,\n            label: `Place Name`\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"FormAddressField\">\n                {this.props.label && <h4>{this.props.label}</h4>}\n                \n                <FormInputField\n                    {...this.placeNameInputFieldMeta}\n                />\n\n                <FormInputField\n                    {...this.fullAddressInputFieldMeta}\n                />\n                \n            </div>\n        );\n    }\n}","// data model\nimport { Address } from \"../../../data-model/address\";\n\n/** Components */\n// base field\nimport { IFieldBaseMetaProps, FormBaseFieldMeta } from \"../form-base-field/form-base-field-meta\";\nimport { FormAddressField } from \"./form-address-field\";\n\nexport class FormAddressFieldMeta extends FormBaseFieldMeta {\n\n    constructor(props: IFieldBaseMetaProps) {\n        super(props)\n        this.model = Address;\n        this.formField = FormAddressField;\n    }\n}\n","import React, { Component, FunctionComponent, useState, useEffect } from \"react\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../state-management/types/root-types\";\nimport { Label, labelTypes } from \"../../data-model/label\";\n\n/** Components */\nimport { ChipSet, Chip } from '@material/react-chips';\nimport \"@material/react-chips/dist/chips.css\";\n\n\ninterface ILabelGroupComponentProps extends RouteComponentProps {\n    selectedLabels?: Label[]\n    onChange?: (selectedLabelText: labelTypes) => void\n}\n\n\nconst LabelGroupComponent: FunctionComponent<ILabelGroupComponentProps> = (props) => {\n    const [selectedLabels, setSelectedLabels] = useState<labelTypes[]>(\n        props.selectedLabels && props.selectedLabels.length ? [props.selectedLabels[0].text] : [labelTypes.TARGET]\n    );\n\n    console.log('label prop is', props.selectedLabels);\n    console.log('label state is', selectedLabels);\n\n    const handleSelectionChange = (selectedLabels: Array<string>) => {\n        setSelectedLabels(selectedLabels as labelTypes[]);\n    }\n\n    // signal the change to external world\n    useEffect(()=> {\n        props.onChange && props.onChange(selectedLabels[0]);\n    }, [selectedLabels]);\n\n    return (\n        <div className=\"LabelGroupComponent\">\n            <h1>LabelGroupComponent Works!</h1>\n            <ChipSet choice selectedChipIds={selectedLabels} handleSelect={handleSelectionChange}>\n                {\n                    Object.values(labelTypes).map((labelText, index) => {\n                        return <Chip key={index} id={labelText} label={labelText} />\n                    })\n                }\n            </ChipSet>\n        </div>\n    )\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    // prop: store.prop\n});\n\nexport const LabelGroupComponentContainer = withRouter(connect(\n    mapStateToProps,\n    // mapDispatchToProps\n)(LabelGroupComponent));\n","import React, { Component } from \"react\";\n\n/** Components */\nimport { LabelGroupComponentContainer } from \"../../label/label-group-component\";\nimport { labelTypes } from \"../../../data-model/label\";\nimport { Label } from \"../../../data-model/label\";\n// formik\nimport {\n    Field, FieldProps,\n    ErrorMessage,\n} from \"formik\";\n// label field\nimport { IFormLabelFieldProps } from \"./form-label-field-meta\";\n\n\nexport class FormLabelField extends Component<IFormLabelFieldProps> {\n\n    render() {\n        return (\n            <div className=\"FormLabelField\">\n                <Field\n                    name={this.props.fieldName}\n                    render={({ field, form }: FieldProps<number | string>) => (\n                        <LabelGroupComponentContainer \n                            selectedLabels={field.value}\n                            onChange={(selectedLabelText: labelTypes) => {\n                                form.setFieldValue(field.name, [new Label({\n                                    text: selectedLabelText\n                                })]);\n                            }}\n                        />\n                    )}\n                />\n                <ErrorMessage name={this.props.fieldName} />\n            </div>\n        );\n    }\n}\n","// base field\nimport { FormBaseFieldMeta, IFormBaseFieldProps, IFieldBaseMetaProps } from \"../form-base-field/form-base-field-meta\";\n// label field\nimport { FormLabelField } from \"./form-label-field\";\n\n// data model\nimport { Label } from \"../../../data-model/label\";\n\n\n// API for caller to new props for label field\nexport interface IFormLabelFieldProps extends IFormBaseFieldProps {\n    onTrailingIconSelect?: () => void\n\n    autoFocus?: boolean\n}\n\n// for defining meta\nexport interface IFormLabelFieldMetaProps extends IFieldBaseMetaProps {\n    onTrailingIconSelect?: () => void\n\n    autoFocus?: boolean\n}\n\nexport class FormLabelFieldMeta extends FormBaseFieldMeta {\n    onTrailingIconSelect?: () => void\n\n    autoFocus?: boolean\n\n    constructor({\n        onTrailingIconSelect,\n        autoFocus,\n        ...props\n    }: IFormLabelFieldMetaProps) {\n        super(props)\n        this.model = Label;\n\n        this.onTrailingIconSelect = onTrailingIconSelect;\n        this.autoFocus = autoFocus;\n\n        this.formField = FormLabelField;\n    }\n}\n","import React, { Component } from \"react\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../state-management/types/root-types\";\nimport { CrudType, RequestStatus, ISingleRestApiResponse } from \"../../utils/rest-api\";\nimport {\n    IObjectAction, ObjectRestApiJsonResponse\n} from \"../../state-management/types/factory-types\";\n// data models\nimport { Company, labelTypesMapToCompanyGroupTypes } from \"../../data-model/company/company\";\nimport { CompanyActionCreators, GroupedCompanyActionCreators } from \"../../state-management/action-creators/root-actions\";\n\n/** Components */\nimport {\n    FormFactory,\n    FormActionButtonProps,\n    ActionButtonType\n} from \"../form-factory/form-factory\";\n// form field\nimport { FormBaseFieldMeta } from \"../form-factory/form-base-field/form-base-field-meta\";\nimport { FormInputFieldMeta } from \"../form-factory/form-input-field/form-input-field-meta\";\nimport { FormLinkFieldMeta } from \"../form-factory/form-link-field/form-link-field-meta\";\nimport { FormAddressFieldMeta } from \"../form-factory/form-address-field/form-address-field-meta\";\nimport { FormLabelFieldMeta } from \"../form-factory/form-label-field/form-label-field-meta\";\n\n\ninterface ICompanyFormComponentProps {\n    company?: Company;\n    onCancel: (event: any) => void;\n    onSubmitSuccess?: (jsonResponse: ObjectRestApiJsonResponse<Company>) => void;\n\n    /** redux */\n    createCompany: (companyFormData: Company, successCallback?: (jsonResponse: ISingleRestApiResponse<Company>) => void, finalCallback?: Function) => void;\n    updateCompany: (companyFormData: Company, successCallback?: Function, finalCallback?: Function) => void;\n}\n\nclass CompanyFormComponent extends Component<ICompanyFormComponentProps> {\n\n    formFieldPropsList: Array<FormBaseFieldMeta>;\n    actionButtonPropsList: Array<FormActionButtonProps>;\n\n    constructor(props: ICompanyFormComponentProps) {\n        super(props);\n\n        this.formFieldPropsList = [\n            new FormInputFieldMeta({\n                fieldName: \"name\",\n                label: \"Organization Name*\",\n                autoFocus: true\n            }),\n\n            new FormLabelFieldMeta({\n                fieldName: \"labels\",\n                label: \"Label\",\n            }),\n\n            new FormAddressFieldMeta({\n                fieldName: \"hq_location\",\n                label: \"Headquarter Location\"\n            }),\n\n            new FormLinkFieldMeta({\n                fieldName: \"home_page\",\n                label: \"Organization Website\"\n            }),\n        ];\n\n        this.actionButtonPropsList = [\n            new FormActionButtonProps(\n                !this.props.company ? \"Create Company\" : \"Save Company\",\n                undefined,\n                ActionButtonType.SUBMIT\n            ),\n            new FormActionButtonProps(\"Cancel\", this.props.onCancel)\n        ]\n\n    }\n\n    render() {\n        return (\n            <div className=\"CompanyFormComponent\">\n                <FormFactory\n                    model={Company}\n                    initialInstance={this.props.company}\n\n                    formFieldPropsList={this.formFieldPropsList}\n                    actionButtonPropsList={this.actionButtonPropsList}\n\n                    createInstanceTriggerAction={this.props.createCompany}\n                    updateInstanceTriggerAction={this.props.updateCompany}\n\n                    onSubmitSuccess={this.props.onSubmitSuccess}\n                />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => ({});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<Company>>) => {\n    return {\n        createCompany: (companyFormData: Company, successCallback?: (jsonResponse: ISingleRestApiResponse<Company>) => void, finalCallback?: Function) => (\n            // create company object in pool redux\n            dispatch(\n                CompanyActionCreators[CrudType.CREATE][RequestStatus.TRIGGERED].action(\n                    companyFormData,\n                    (jsonResponse: ISingleRestApiResponse<Company>) => {\n                        // create ref in grouped redux\n                        dispatch(\n                            // no api calls, so don't dispatch TRIGGER action, just SUCCESS action\n                            GroupedCompanyActionCreators[labelTypesMapToCompanyGroupTypes[Company.getLabel(jsonResponse)]][CrudType.CREATE][RequestStatus.SUCCESS].action({ uuid: jsonResponse.uuid })\n                        );\n                        // Only TRIGGER/SUCCESS has success callback. Since this is CREATE/SUCCESS, we can only call the func here. This is necessary because the form component rely on this callback to carry out order-critical operations, like page transition after create, etc.\n                        successCallback && successCallback(jsonResponse);\n                    },\n                    undefined,\n                    finalCallback\n                )\n            )\n        ),\n        updateCompany: (companyFormData: Company, successCallback?: Function, finalCallback?: Function, updateFromCompany?: Company) => dispatch(\n            CompanyActionCreators[CrudType.UPDATE][RequestStatus.TRIGGERED].action(\n                companyFormData,\n                successCallback,\n                undefined,\n                finalCallback,\n                undefined,\n                {\n                    updateFromObject: updateFromCompany\n                }\n            )\n        )\n    };\n};\n\nexport const CompanyFormComponentContainer = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(CompanyFormComponent);\n","import React, { Component } from \"react\";\n\n/** route */\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../state-management/types/root-types\";\n// REST API\nimport { ISingleRestApiResponse } from \"../../utils/rest-api\";\nimport {\n    IObjectAction,\n    IObjectStore\n} from \"../../state-management/types/factory-types\";\nimport { Company } from \"../../data-model/company/company\";\n\n/** Components */\nimport \"./add-com-page.css\"\n// mdc-react button\nimport \"@material/react-button/dist/button.css\";\n// mdc-react input\nimport \"@material/react-text-field/dist/text-field.css\";\nimport { CompanyFormComponentContainer } from \"../../components/company/company-form-component\";\n\n\ninterface IAddComPageParams {\n    uuid?: string;\n}\n\ninterface IAddComPageProps extends RouteComponentProps<IAddComPageParams> {\n    company: IObjectStore<Company>;\n}\n\nclass AddComPage extends Component<IAddComPageProps> {\n    render() {\n        const company: Company | undefined = (this.props.match.params.uuid && this.props.company.collection[this.props.match.params.uuid])\n            ? this.props.company.collection[this.props.match.params.uuid]\n            : undefined;\n        process.env.NODE_ENV === 'development' && console.log(\n            \"com form page: params is\",\n            this.props.match.params.uuid,\n            \"company is\",\n            company\n        );\n        return (\n            <div className=\"AddComPage\">\n                <h1>{!company ? \"Add an Organization\" : `Update Organization`}</h1>\n                <CompanyFormComponentContainer\n                    company={company}\n                    onSubmitSuccess={(jsonResponse) => {\n                        process.env.NODE_ENV === 'development' && console.log(\"com form page: onSubmitSuccess\");\n                        \n                        const uuid = (jsonResponse as ISingleRestApiResponse<Company>).uuid;\n\n                        process.env.NODE_ENV === 'development' && console.log(\"new company:\", jsonResponse);\n\n                        company ? (\n                            // case: update company, let user be able to go back to update form\n                            this.props.history.push(`/com-app/${uuid}/`)\n                        ) : (\n                            // case: create company, don't let user go back to form. If attempt to update company, user should click on edit; if attempt to create another company, should go to /home/ to do so\n                            this.props.history.replace(`/com-app/${uuid}/`)\n                        );\n                    }}\n                    onCancel={event => {\n                        this.props.history.goBack()\n                    }}\n                />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: IRootState) => ({\n    // prop: state.prop\n    company: state.company\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<Company>>) => {\n    // actionName = (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {};\n};\n\nexport const AddComPageContainer = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(AddComPage)\n);\n","import { BaseModel, IBaseModelProps, IRelationship } from \"../base-model\";\nimport { ApplicationStatusLink } from \"../application-status-link\";\nimport * as Yup from \"yup\";\n\n\ninterface IApplicationStatusProps {\n    text?: string;\n    application?: IRelationship;\n    applicationstatuslink_set?: Array<ApplicationStatusLink>\n    date?: string;\n    order?: number\n}\n\nexport class ApplicationStatus extends BaseModel {\n    public text: string;\n    public application: IRelationship;\n    public applicationstatuslink_set: Array<ApplicationStatusLink>\n    public date: string;\n    public order: number;\n\n    constructor({\n        text = \"\",\n        application = \"\",\n        // applicationstatuslink_set = [],\n        applicationstatuslink_set = [],\n        date = ApplicationStatus.localeNowDateString(),\n        order = 0,\n        ...args\n    }: IApplicationStatusProps & IBaseModelProps) {\n        super(args);\n        this.text = text;\n        this.application = application;\n        this.applicationstatuslink_set = applicationstatuslink_set;\n        this.date = date;\n        this.order = order;\n    }\n\n    static schema(){\n        return Yup.object<ApplicationStatus>().shape({\n            text: Yup.string().required(\"Give a quick one or two words for the status\").max(50, \"No more than 50 characters\"),\n\n            // date: Yup.string().matches(/[01]\\d{1}[-/][0123]\\d{1}[-/]\\d{4}/), // TODO: not working, always invalid, figure out why\n            date: Yup.string().length(10), // workaround\n            \n            order: Yup.number()\n        });\n    }\n\n    static localeNowDateString() {\n        const now = new Date();\n        const localeNow = new Date(Date.UTC(now.getUTCFullYear(), now.getUTCMonth(), now.getDate() ));\n        const localeNowTimeString = localeNow.toISOString().split(\"T\")[0]\n        return localeNowTimeString;\n    }\n}\n","import { BaseModel, IBaseModelProps, IRelationship } from \"./base-model\";\nimport { Link } from \"./link\";\n\ninterface IApplicationStatusLinkProps {\n    application_status?: IRelationship;\n    link?: Link;\n}\n\nexport class ApplicationStatusLink extends BaseModel {\n    public application_status: IRelationship;\n    public link: Link;\n\n    constructor({\n        application_status = \"\",\n        link = new Link({}),\n        ...args\n    }: IApplicationStatusLinkProps & IBaseModelProps) {\n        super(args);\n        this.application_status = application_status;\n        this.link = link;\n    }\n}","/** Components */\n// link field\nimport { FormApplicationStatusLinkFieldComponent } from \"./form-application-status-link-field-component\";\n// base dynamic field\nimport { withFormBaseField } from \"../form-base-field/form-base-field\";\n\nexport const FormApplicationStatusLinkField = withFormBaseField(FormApplicationStatusLinkFieldComponent);","import React, { Component } from \"react\";\n\n/** Components */\n// mdc-react input\nimport \"@material/react-text-field/dist/text-field.css\";\n// link form\nimport { FormLinkFieldMeta } from \"../form-link-field/form-link-field-meta\";\nimport { FormLinkField } from \"../form-link-field/form-link-field\";\nimport { IFormBaseFieldProps } from \"../form-base-field/form-base-field-meta\";\n\nexport interface IFormApplicationStatusLinkFieldComponentProps extends IFormBaseFieldProps {\n}\n\nexport class FormApplicationStatusLinkFieldComponent extends Component<IFormApplicationStatusLinkFieldComponentProps> {\n\n    linkFieldProps: FormLinkFieldMeta;\n\n    constructor(props: IFormApplicationStatusLinkFieldComponentProps) {\n        super(props)\n\n        this.linkFieldProps = new FormLinkFieldMeta({\n            fieldName: `${this.props.fieldName}.link`,\n            label: ``,\n            isDynamic: false, // Link is a one-to-one field in application status link model\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"FormApplicationStatusLinkField\">\n                {this.props.label && <h4>{this.props.label}</h4>}\n                <FormLinkField\n                    {...this.linkFieldProps}\n                    formikValues={this.props.formikValues}\n                    getInstanceDataFromFormikValues={this.props.getInstanceDataFromFormikValues}\n                />\n            </div>\n        );\n    }\n}","// data model\nimport { ApplicationStatusLink } from \"../../../data-model/application-status-link\";\n\n/** Components */\nimport { FormBaseFieldMeta, IFieldBaseMetaProps } from \"../form-base-field/form-base-field-meta\";\nimport { FormApplicationStatusLinkField } from \"./form-application-status-link-field\";\n\nexport class FormApplicationStatusLinkFieldMeta extends FormBaseFieldMeta {\n\n    constructor(props: IFieldBaseMetaProps) {\n        super(props)\n        this.model = ApplicationStatusLink;\n        this.formField = FormApplicationStatusLinkField;\n    }\n}\n","import React, { Component } from \"react\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../state-management/types/root-types\";\nimport { IObjectStore, IObjectAction } from \"../../state-management/types/factory-types\";\n// data models\nimport { ApplicationStatus } from \"../../data-model/application-status/application-status\";\nimport { ApplicationStatusLink } from \"../../data-model/application-status-link\";\nimport { Application } from \"../../data-model/application/application\";\nimport { ApplicationStatusActionCreators } from \"../../state-management/action-creators/root-actions\";\n\n/** Rest API */\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\n\n/** Components */\nimport {\n    FormFactory,\n    FormActionButtonProps,\n    ActionButtonType\n} from \"../form-factory/form-factory\";\nimport {FormInputFieldMeta } from \"../form-factory/form-input-field/form-input-field-meta\";\nimport { InputFieldType, FormBaseFieldMeta } from \"../form-factory/form-base-field/form-base-field-meta\";\n// form fields\nimport { FormApplicationStatusLinkFieldMeta } from \"../form-factory/form-application-status-link-field/form-application-status-link-field-meta\";\n\n\ninterface IApplicationStatusFormComponentProps extends RouteComponentProps {\n    applicationStatus?: ApplicationStatus; // for update form\n    onSubmitSuccess?: () => void;\n    onCancel: () => void;\n\n    /** redux */\n    application: Application;\n    applicationStatusStore: IObjectStore<ApplicationStatus>\n    createApplicationStatus: (\n        applicationStatusFormData: ApplicationStatus,\n        successCallback?: Function,\n        finalCallback?: Function,\n    ) => void;\n    updateApplicationStatus: (\n        applicationStatusFormData: ApplicationStatus,\n        successCallback?: Function,\n        finalCallback?: Function,\n    ) => void;\n}\n\nclass ApplicationStatusFormComponent extends Component<\n    IApplicationStatusFormComponentProps\n> {\n    formFieldPropsList: Array<FormBaseFieldMeta>;\n    actionButtonPropsList: Array<FormActionButtonProps>;\n\n    constructor(props: IApplicationStatusFormComponentProps) {\n        super(props);\n\n        this.formFieldPropsList = [\n            new FormInputFieldMeta({\n                fieldName: \"text\",\n                label: \"Status*\",\n                autoFocus: true\n            }),\n            new FormInputFieldMeta({\n                fieldName: \"date\",\n                label: \"Date\",\n                type: InputFieldType.DATE\n            }),\n            new FormApplicationStatusLinkFieldMeta({\n                fieldName: `applicationstatuslink_set`,\n                label: `Status Link`,\n                isDynamic: true,\n            }),\n        ];\n\n        this.actionButtonPropsList = [\n            new FormActionButtonProps(\n                this.props.applicationStatus ?\n                \"Save Status\":\n                \"Create Status\",\n                undefined,\n                ActionButtonType.SUBMIT\n            ),\n            new FormActionButtonProps(\"Cancel\", this.props.onCancel)\n        ];\n    }\n\n    render() {\n        return (\n            <div className=\"ApplicationStatusFormComponent\">\n                <FormFactory\n                    model={ApplicationStatus}\n                    initialInstance={new ApplicationStatus({\n                        ...this.props.applicationStatus,\n                    })}\n                    enforcedInstanceData={{\n                        application: this.props.application.uuid\n                    }}\n        \n                    formFieldPropsList={this.formFieldPropsList}\n                    actionButtonPropsList={this.actionButtonPropsList}\n        \n                    createInstanceTriggerAction={this.props.createApplicationStatus}\n                    updateInstanceTriggerAction={this.props.updateApplicationStatus}\n\n                    onSubmitSuccess={this.props.onSubmitSuccess}\n                />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    // prop: store.prop\n    applicationStatusStore: store.applicationStatus\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<ApplicationStatus> | IObjectAction<ApplicationStatusLink>>) => {\n    // actionName: (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {\n        createApplicationStatus: (\n            applicationStatusFormData: ApplicationStatus,\n            successCallback?: Function,\n            failureCallback?: Function,\n        ) =>\n            dispatch(\n                ApplicationStatusActionCreators[CrudType.CREATE][\n                    RequestStatus.TRIGGERED\n                ].action(applicationStatusFormData, successCallback, undefined, failureCallback)\n            )\n        ,\n        updateApplicationStatus: (\n            applicationStatusFormData: ApplicationStatus,\n            successCallback?: Function,\n            failureCallback?: Function,\n        ) =>\n            dispatch(\n                ApplicationStatusActionCreators[CrudType.UPDATE][\n                    RequestStatus.TRIGGERED\n                ].action(applicationStatusFormData, successCallback, undefined, failureCallback)\n            )\n        ,\n    };\n};\n\nexport const ApplicationStatusFormComponentContainer = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(ApplicationStatusFormComponent)\n);\n","import React, { Component } from \"react\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../state-management/types/root-types\";\nimport {\n    IObjectAction, IObjectStore,\n} from \"../../state-management/types/factory-types\";\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\nimport { ApplicationStatusActionCreators } from \"../../state-management/action-creators/root-actions\";\n\n/** data model */\nimport { ApplicationStatus } from \"../../data-model/application-status/application-status\";\nimport { Application } from \"../../data-model/application/application\";\n\n/** Components */\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc-react icon button\nimport \"@material/react-icon-button/dist/icon-button.css\";\nimport IconButton from \"@material/react-icon-button\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\nimport { ApplicationStatusFormComponentContainer } from \"./application-status-form-component\";\n\nimport Skeleton from 'react-loading-skeleton';\n\n\ninterface IApplicationStatusComponentProps extends RouteComponentProps {\n    applicationStatus?: ApplicationStatus;\n    application?: Application; // needed by form\n    isOnlyForm?: boolean; // needed by add-button\n\n    applicationStatusStore: IObjectStore<ApplicationStatus>;\n    deleteApplicationStatus: (\n        applicationStatusToDelete: ApplicationStatus,\n        callback?: Function\n    ) => void;\n}\n\ninterface IApplicationStatusComponentState {\n    isFormOpened: boolean;\n}\n\nclass ApplicationStatusComponent extends Component<\n    IApplicationStatusComponentProps,\n    IApplicationStatusComponentState\n    > {\n    state = {\n        isFormOpened: false\n    };\n\n    render() {\n        // console.log(`\\n\\n\\n\\napp=${JSON.stringify(this.props.application)}, status=${JSON.stringify(this.props.applicationStatus)}`);\n        return (\n            <div className=\"ApplicationStatusComponent\">\n                {(this.state.isFormOpened || this.props.isOnlyForm) ? (\n                    this.renderFormController(\n                        this.props.application,\n                        this.props.applicationStatus\n                    )\n                ) : this.renderDisplay(this.props.applicationStatus)\n                }\n            </div>\n        );\n    }\n\n    renderDisplay = (applicationStatus?: ApplicationStatus) => {\n        return (\n            <div className=\"ApplicationStatusComponent\">\n                <span>Status: {applicationStatus ? applicationStatus.text : <Skeleton width=\"20vmin\" />}</span>\n\n                {/* edit button */}\n                {\n                    applicationStatus ? (\n                        <IconButton\n                            onClick={() => {\n                                process.env.NODE_ENV === 'development' && console.log(\"application status component: edit button clicked.\")\n                                this.setState({ isFormOpened: true });\n                            }}\n                        >\n                            <MaterialIcon hasRipple icon=\"edit\" />\n                        </IconButton>\n                    ) : (\n                            <IconButton disabled>\n                                <MaterialIcon hasRipple icon=\"edit\" />\n                            </IconButton>\n                        )\n                }\n\n                {/* delete button */}\n                {\n                    applicationStatus ? (\n                        <IconButton\n                            onClick={() =>\n                                confirm(`Are you sure you want to delete this status? ${applicationStatus.text}`) && this.props.deleteApplicationStatus(\n                                    applicationStatus\n                                )\n                            }\n                        >\n                            <MaterialIcon hasRipple icon=\"delete\" />\n                        </IconButton>\n                    ) : (\n                            <IconButton disabled>\n                                <MaterialIcon hasRipple icon=\"delete\" />\n                            </IconButton>\n                        )\n                }\n\n                <div>{applicationStatus ? applicationStatus.date : <Skeleton width=\"35vmin\" />}</div>\n\n                {applicationStatus ? applicationStatus.applicationstatuslink_set.map(\n                    applicationStatusLink => {\n                        return (\n                            applicationStatusLink &&\n                            applicationStatusLink.link && (\n                                <span key={applicationStatusLink.uuid}>\n                                    <a\n                                        href={\n                                            (\n                                                applicationStatusLink.link.url &&\n                                                applicationStatusLink.link.url.includes(\"//\")\n                                            ) ?\n                                                applicationStatusLink.link.url :\n                                                `//${applicationStatusLink.link.url}`\n                                        }\n                                        target=\"_blank\"\n                                    >\n                                        {applicationStatusLink.link.text}\n                                    </a>{\" \"}\n                                    |{\" \"}\n                                </span>\n                            )\n                        );\n                    }\n                ) : (\n                        <Skeleton width=\"10vmin\" />\n                    )}\n            </div>\n        );\n    };\n\n    renderFormController = (\n        application?: Application,\n        applicationStatus?: ApplicationStatus\n    ) => {\n        return (\n            <div className=\"application-status-form-controller\">\n                {/* new application status form */}\n                {(\n                    !this.state.isFormOpened ||\n                    !application // application may be still in requesting state\n                ) ? (\n                        <Button\n                            disabled={!application || this.props.applicationStatusStore.requestStatus === RequestStatus.REQUESTING} // disable action button \n                            onClick={clickEvent => {\n                                this.setState({\n                                    isFormOpened: true\n                                });\n                            }}\n                            unelevated\n                            icon={<MaterialIcon hasRipple icon=\"add\" />}\n                        >\n                            Add New Status\n                    </Button>\n                    ) : (\n                        <div className=\"application-component__status-form\">\n                            <h3>\n                                Add new status to application for{\" \"}\n                                {application.position_title}{\" \"}\n                            </h3>\n                            <ApplicationStatusFormComponentContainer\n                                application={application}\n                                applicationStatus={applicationStatus}\n                                onCancel={() => {\n                                    this.setState({\n                                        isFormOpened: false\n                                    });\n                                }}\n                                onSubmitSuccess={() => {\n                                    this.setState({\n                                        isFormOpened: false\n                                    });\n                                }}\n                            />\n                        </div>\n                    )}\n            </div>\n        );\n    };\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    // prop: store.prop\n    applicationStatusStore: store.applicationStatus\n});\n\nconst mapDispatchToProps = (\n    dispatch: Dispatch<IObjectAction<ApplicationStatus>>\n) => {\n    // actionName: (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {\n        deleteApplicationStatus: (\n            applicationStatusToDelete: ApplicationStatus,\n            callback?: Function\n        ) =>\n            dispatch(\n                ApplicationStatusActionCreators[CrudType.DELETE][\n                    RequestStatus.TRIGGERED\n                ].action(applicationStatusToDelete, callback)\n            )\n    };\n};\n\nexport const ApplicationStatusComponentContainer = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(ApplicationStatusComponent)\n);\n","import { BaseModel, IBaseModelProps, IRelationship, IReference } from \"../base-model\";\nimport { Link } from \"../link\";\nimport { ApplicationStatus } from \"../application-status/application-status\";\nimport * as Yup from \"yup\";\n\n\ninterface IApplicationProps {\n    user?: IRelationship;\n    user_company?: IRelationship;\n    position_title?: string;\n    job_description_page?: Link;\n    job_source?: Link;\n    labels?: any;\n    notes?: string;\n    statuses?: Array<ApplicationStatus> | Array<IReference>;\n}\n\nexport class Application extends BaseModel {\n    public user: IRelationship;\n    public user_company: IRelationship;\n    public position_title: string;\n    public job_description_page: Link;\n    public job_source: Link;\n    public labels: any;\n    public notes: string;\n    public statuses: Array<ApplicationStatus> | Array<IReference>;\n\n    constructor({\n        user = \"\",\n        user_company = \"\",\n        position_title = \"\",\n        job_description_page = new Link({}),\n        job_source = new Link({}),\n        labels = {},\n        notes = \"\",\n        statuses = [],\n        ...args\n    }: IApplicationProps & IBaseModelProps) {\n        super(args);\n        this.user = user;\n        this.user_company = user_company;\n        this.position_title = position_title;\n        this.job_description_page = job_description_page;\n        this.job_source = job_source;\n        this.labels = labels;\n        this.notes = notes;\n        this.statuses = statuses;\n    }\n\n    static schema(){\n        return Yup.object<Application>().shape({\n            position_title: Yup.string().required(\"We need a title...!\").max(150, \"No more than 150 characters\"),\n            job_description_page: Link.schema(),\n            job_source: Link.schema(),\n            notes: Yup.string(),\n        });\n    }\n}\n","import React, { Component } from \"react\";\n\n/** Components */\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\n// mdc-react input\nimport \"@material/react-text-field/dist/text-field.css\";\nimport TextField, { Input } from \"@material/react-text-field\";\n// formik\nimport {\n    Field, FieldProps,\n    ErrorMessage,\n} from \"formik\";\n// input field\nimport { IFormRichTextFieldProps } from \"./form-rich-text-field-meta\";\n// ckeditor\n// import CKEditor from '@ckeditor/ckeditor5-react';\nimport CKEditor from '@shaungc/custom-ckeditor5-react';\n// import BalloonEditor from '@ckeditor/ckeditor5-build-balloon';\nimport BalloonEditor from '@shaungc/ckeditor5-custom-balloon';\n\n\nexport class FormRichTextField extends Component<IFormRichTextFieldProps> {\n    render() {\n        return (\n            <div className=\"FormRichTextField\">\n                <Field\n                    name={this.props.fieldName}\n                    render={({ field, form }: FieldProps<number | string>) => {\n                        return (\n                            <>\n                                <h4>{this.props.label}</h4>\n                                <CKEditor\n                                    editor={BalloonEditor}\n                                    data={field.value}\n                                    onChange={(event: any, editor: any) => {\n                                        form.setFieldValue(field.name, editor.getData());\n                                    }}\n                                    onSaveKeystroke={this.props.onSaveKeystroke}\n                                />\n                            </>\n                        )\n                    }}\n                />\n                <ErrorMessage name={this.props.fieldName} />\n            </div>\n        );\n    }\n}","// base field\nimport { FormBaseFieldMeta, IFormBaseFieldProps, IFieldBaseMetaProps } from \"../form-base-field/form-base-field-meta\";\n// input field\nimport { FormRichTextField } from \"./form-rich-text-field\";\n\n\n// API for caller to new props for input field\nexport interface IFormRichTextFieldProps extends IFormBaseFieldProps {\n    onSaveKeystroke?: () => void\n}\n\n// for defining meta\nexport interface IFormRichTextFieldMetaProps extends IFieldBaseMetaProps {\n}\n\nexport class FormRichTextFieldMeta extends FormBaseFieldMeta {\n\n    constructor(props: IFormRichTextFieldMetaProps) {\n        super(props)\n        this.formField = FormRichTextField;\n    }\n}","import React, { Component } from \"react\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../state-management/types/root-types\";\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\nimport {\n    IObjectStore,\n    IObjectAction\n} from \"../../state-management/types/factory-types\";\nimport { ApplicationActionCreators } from \"../../state-management/action-creators/root-actions\";\n\n// data models\nimport { Company } from \"../../data-model/company/company\";\nimport { Application } from \"../../data-model/application/application\";\n\n/** Components */\nimport {\n    FormFactory,\n    FormActionButtonProps,\n    ActionButtonType\n} from \"../form-factory/form-factory\";\n// form field\nimport { FormBaseFieldMeta } from \"../form-factory/form-base-field/form-base-field-meta\";\nimport { FormInputFieldMeta } from \"../form-factory/form-input-field/form-input-field-meta\";\nimport { FormLinkFieldMeta } from \"../form-factory/form-link-field/form-link-field-meta\";\nimport { FormRichTextFieldMeta } from \"../form-factory/form-rich-text-field/form-rich-text-field-meta\";\n\n\ninterface IApplicationFormComponentProps {\n    application?: Application;\n    onCancel: (event: any) => void;\n    onSubmitSuccess?: () => void;\n\n    company: Company;\n    /** redux */\n    applicationStore: IObjectStore<Application>;\n    createApplication: (\n        applicationFormData: Application,\n        successCallback?: Function,\n        finalCallback?: Function,\n    ) => void;\n    updateApplication: (\n        applicationFormData: Application,\n        successCallback?: Function,\n        finalCallback?: Function,\n    ) => void;\n}\n\nclass ApplicationFormComponent extends Component<\n    IApplicationFormComponentProps\n> {\n\n    formFieldPropsList: Array<FormBaseFieldMeta>;\n    actionButtonPropsList: Array<FormActionButtonProps>;\n\n    constructor(props: IApplicationFormComponentProps) {\n        super(props);\n\n        this.formFieldPropsList = [\n            new FormInputFieldMeta({\n                fieldName: \"position_title\",\n                label: \"Position Title*\",\n                autoFocus: true\n            }),\n            new FormLinkFieldMeta({\n                fieldName: \"job_description_page\",\n                label: \"Job Description Link\",\n            }),\n            new FormLinkFieldMeta({\n                fieldName: \"job_source\",\n                label: \"Job Source Link\",\n            }),\n            new FormRichTextFieldMeta({\n                fieldName: \"notes\",\n                label: \"Notes\",\n            }),\n        ];\n        this.actionButtonPropsList = [\n            new FormActionButtonProps(\n                this.props.company ? \"Save Application\" : \"Create Application\",\n                undefined,\n                ActionButtonType.SUBMIT\n            ),\n            new FormActionButtonProps(\"Cancel\", this.props.onCancel)\n        ]\n    }\n\n    render() {\n        return (\n            <div className=\"ApplicationFormComponent\">\n                {/* <FormFactory {...this.formFactoryProps} /> */}\n                <FormFactory\n                    model={Application}\n                    initialInstance={new Application({\n                        ...this.props.application,\n                    })}\n                    enforcedInstanceData={{\n                        user_company: this.props.company.uuid\n                    }}\n        \n                    formFieldPropsList={this.formFieldPropsList}\n                    actionButtonPropsList={this.actionButtonPropsList}\n        \n                    createInstanceTriggerAction={this.props.createApplication}\n                    updateInstanceTriggerAction={this.props.updateApplication}\n\n                    onSubmitSuccess={this.props.onSubmitSuccess}\n                />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    applicationStore: store.application\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<Application>>) => {\n    return {\n        createApplication: (\n            applicationFormData: Application,\n            successCallback?: Function,\n            finalCallback?: Function,\n        ) =>\n            dispatch(\n                ApplicationActionCreators[CrudType.CREATE][\n                    RequestStatus.TRIGGERED\n                ].action(applicationFormData, successCallback, undefined, finalCallback)\n            )\n        ,\n        updateApplication: (\n            applicationFormData: Application,\n            successCallback?: Function,\n            finalCallback?: Function,\n        ) =>\n            dispatch(\n                ApplicationActionCreators[CrudType.UPDATE][\n                    RequestStatus.TRIGGERED\n                ].action(applicationFormData, successCallback, undefined, finalCallback)\n            )\n        ,\n    };\n};\n\nexport const ApplicationFormComponentContainer = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ApplicationFormComponent);\n","import React, { Component } from \"react\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Application } from \"../../data-model/application/application\";\nimport { IRootState } from \"../../state-management/types/root-types\";\nimport { IObjectAction, IObjectStore } from \"../../state-management/types/factory-types\";\nimport { Dispatch } from \"redux\";\n\n/** data model */\nimport { ApplicationStatus } from \"../../data-model/application-status/application-status\";\nimport { Company } from \"../../data-model/company/company\";\n\n/** rest api */\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\n\n/** Components */\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\nimport IconButton from \"@material/react-icon-button\";\nimport { ApplicationStatusComponentContainer } from \"../application-status/application-status-component\";\nimport { ApplicationFormComponentContainer } from \"./application-form-component\";\nimport {\n    Headline6,\n} from '@material/react-typography';\n/** CKeditor */\n// import CKEditor from '@ckeditor/ckeditor5-react';\nimport CKEditor from '@shaungc/custom-ckeditor5-react';\n// import BalloonEditor from '@ckeditor/ckeditor5-build-balloon';\nimport BalloonEditor from '@shaungc/ckeditor5-custom-balloon';\n\nimport Skeleton from 'react-loading-skeleton';\n\nimport styles from './application-component.module.css';\nimport { ApplicationActionCreators } from \"../../state-management/action-creators/root-actions\";\n\n\n/** Types */\ninterface IApplicationComponentProps {\n    application?: Application;\n\n    disableApplicationActionButtons?: boolean\n\n    /** application form */\n    company?: Company;\n\n    isOnlyForm?: boolean;\n\n    applicationStatusList?: Array<ApplicationStatus>;\n\n    /** redux */\n    applicationStatusStore: IObjectStore<ApplicationStatus>;\n\n    deleteApplication: (\n        applicationToDelete: Application,\n        callback?: Function\n    ) => void;\n}\n\ninterface IApplicationComponentState {\n    isFormOpened: boolean;\n}\n\n/** Main Class */\nexport class ApplicationComponent extends Component<\n    IApplicationComponentProps,\n    IApplicationComponentState\n    > {\n    state = {\n        isFormOpened: false\n    };\n\n    render() {\n        if (!this.state.isFormOpened && this.props.isOnlyForm) {  // company may still be in requesting state, when attempt to render form\n            return (\n                <Button\n                    disabled={!this.props.company}\n                    onClick={clickEvent => {\n                        this.setState({\n                            isFormOpened: true\n                        });\n                    }}\n                    unelevated\n                    icon={<MaterialIcon hasRipple icon=\"add\" />}\n                >\n                    Add Application\n                </Button>\n            )\n        }\n\n        return (\n            <div className={styles.applicationCard}>\n                <div className={styles.applicationCardContent}>\n                    {(!this.state.isFormOpened && !this.props.isOnlyForm) ? (\n                        this.renderApplicationDisplay(\n                            this.props.application,\n                            this.props.applicationStatusList\n                        )\n                    ) : (\n                            this.renderApplicationFormController()\n                        )}\n                </div>\n            </div>\n\n        )\n    }\n\n    renderApplicationFormController = () => {\n        return this.props.company && (\n            // application create or udpate must have company associate with it.\n            <div className=\"application-form-controller\">\n                <h2>{this.props.application ? \"Edit Application\" : \"New Application\"}</h2>\n                <ApplicationFormComponentContainer\n                    onCancel={event => {\n                        process.env.NODE_ENV === 'development' && console.log(\"onCancel clicked\");\n                        this.setState({\n                            isFormOpened: false\n                        });\n                    }}\n                    onSubmitSuccess={() =>\n                        this.setState({\n                            isFormOpened: false\n                        })\n                    }\n                    company={this.props.company}\n                    application={this.props.application}\n                />\n            </div>\n        );\n    };\n\n    renderApplicationDisplay = (\n        application?: Application,\n        applicationStatusList: Array<ApplicationStatus> = []\n    ) => {\n\n        return (\n            <div className=\"application-component-display\">\n                {/* application display view */}\n                <h3>{application ? application.position_title : <Skeleton />}\n                    {/* external link icon */}\n                    {\n                        application ? (\n                            <IconButton\n                                disabled={application.job_description_page.url == \"#\"}\n                                isLink={application.job_description_page.url != \"#\"} target=\"_blank\" href={application.job_description_page.url && application.job_description_page.url.includes(\"//\") ?\n                                    application.job_description_page.url :\n                                    `//${application.job_description_page.url}`}\n                            >\n                                <MaterialIcon hasRipple icon=\"launch\" />\n                            </IconButton>\n                        ) : (\n                                <IconButton disabled>\n                                    <MaterialIcon hasRipple icon=\"launch\" />\n                                </IconButton>\n                            )\n                    }\n\n                    {/* external link icon */}\n                    {\n                        application ? (\n                            <IconButton\n                                disabled={application.job_source.url == \"#\"}\n                                isLink={application.job_source.url != \"#\"} target=\"_blank\" href={application.job_source.url && application.job_source.url.includes(\"//\") ?\n                                    application.job_source.url :\n                                    `//${application.job_source.url}`}\n                            >\n                                <MaterialIcon hasRipple icon=\"language\" />\n                            </IconButton>\n                        ) : (\n                                <IconButton disabled>\n                                    <MaterialIcon hasRipple icon=\"language\" />\n                                </IconButton>\n                            )\n                    }\n\n                    {/* application actions */}\n                    {\n                        application ? (\n                            <IconButton\n                                disabled={this.props.disableApplicationActionButtons}\n                                onClick={() => {\n                                    this.setState({\n                                        isFormOpened: true // open form and close display\n                                    });\n                                }}\n                            >\n                                <MaterialIcon hasRipple icon=\"edit\" />\n                            </IconButton>\n                        ) : (\n                                <IconButton disabled>\n                                    <MaterialIcon hasRipple icon=\"edit\" />\n                                </IconButton>\n                            )\n                    }\n\n                    {\n                        application ? (\n                            <IconButton\n                                disabled={this.props.disableApplicationActionButtons}\n                                onClick={() =>\n                                    confirm(`Are you sure you want to delete ${application.position_title}?`) && this.props.deleteApplication(application)\n                                }\n                            >\n                                <MaterialIcon hasRipple icon=\"delete\" />\n                            </IconButton>\n                        ) : (\n                                <IconButton disabled>\n                                    <MaterialIcon hasRipple icon=\"delete\" />\n                                </IconButton>\n                            )\n                    }\n                </h3>\n\n                <div className=\"applicationNotesRichText\">\n                    {application ? (application.notes ? (\n                        <CKEditor\n                            editor={BalloonEditor}\n                            disabled={true}\n                            data={application.notes}\n                        />\n\n                    ) : (\n                            <p>\n                                No notes yet.\n                            </p>\n                        )) : (\n                            <div>\n                                <div><Skeleton width=\"70vmin\" /></div>\n                                <div><Skeleton width=\"30vmin\" /></div>\n                                <div><Skeleton width=\"50vmin\" /></div>\n                            </div>\n                        )}\n                </div>\n\n                {/* application statuses list */}\n                <div className=\"statusContainer\">\n                    <Headline6>Status</Headline6>\n\n                    {/* application status form controller */}\n                    {\n                        <ApplicationStatusComponentContainer\n                            application={application}\n                            isOnlyForm\n                        />\n                    }\n\n                    {\n                        /* show skeleton to indicate application status is loading */\n                        (this.props.applicationStatusStore.requestStatus === RequestStatus.REQUESTING) && (\n                            <ApplicationStatusComponentContainer />\n                        )\n                    }\n\n                    {\n                        application && (\n                            applicationStatusList.map((applicationStatus, index) => {\n                                return (\n                                    <ApplicationStatusComponentContainer\n                                        key={index}\n                                        applicationStatus={applicationStatus}\n                                        application={application}\n                                    />\n                                );\n                            })\n                        )\n                    }\n                </div>\n            </div>\n        );\n    };\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    applicationStatusStore: store.applicationStatus\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<Application>>) => {\n    // actionName: (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {\n        deleteApplication: (\n            applicationToDelete: Application,\n            callback?: Function\n        ) =>\n            dispatch(\n                ApplicationActionCreators[CrudType.DELETE][\n                    RequestStatus.TRIGGERED\n                ].action(applicationToDelete, callback)\n            )\n    };\n};\n\nexport const ApplicationComponentController = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ApplicationComponent);\n","import React, { Component } from \"react\";\n\n/** Redux */\nimport { Company } from \"../../data-model/company/company\";\n\n/** Components */\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc-react icon button\nimport '@material/react-icon-button/dist/icon-button.css';\nimport IconButton from '@material/react-icon-button';\n// mdc-chips\nimport { ChipSet, Chip } from '@material/react-chips';\nimport \"@material/react-chips/dist/chips.css\";\n\nimport Skeleton from 'react-loading-skeleton';\n\nimport styles from './company-component.module.css';\n\n\ninterface ICompanyComponentProps {\n    company: Company;\n    onDeleteIconClicked?: (event: any) => void\n    onEditIconClicked?: (event: any) => void\n    actionButtonsDisabled?: boolean\n}\n\nexport class CompanyComponent extends Component<ICompanyComponentProps> {\n    render() {\n        const company = this.props.company;\n\n        return (\n            <div className=\"CompanyComponent\">\n                <div className={styles.companyTitleContainer}>\n                    <h1>{company ? company.name : <Skeleton width=\"50vmin\" />}</h1>\n\n                    {company ? (\n                        company.labels.length && company.labels[0].text ? (\n                            <ChipSet>\n                                <Chip label={company.labels[0].text} />\n                            </ChipSet>\n                        ) : (\n                            <ChipSet>\n                                <Chip label=\"None\" />\n                            </ChipSet>\n                        )\n                    ) : (\n                        <Skeleton width=\"40px\" />\n                    )}\n\n                    {/* company link */}\n                    {\n                        company ? (\n                            <IconButton\n                                disabled={company.home_page.url == \"#\"}\n                                isLink={company.home_page.url != \"#\"} // isLink=true will make `disabled` useless, a bug\n                                target=\"_blank\"\n                                href={company.home_page.url && company.home_page.url.includes('//') ? company.home_page.url : `//${company.home_page.url}`}>\n                                <MaterialIcon hasRipple icon=\"launch\" />\n                            </IconButton>\n                        ) : (\n                                <IconButton disabled>\n                                    <MaterialIcon hasRipple icon=\"launch\" />\n                                </IconButton>\n                            )\n                    }\n\n                    {/* company actions */}\n                    {\n                        <div className=\"CompanyActionCreators\">\n                            <IconButton disabled={this.props.actionButtonsDisabled} onClick={this.props.onEditIconClicked}>\n                                <MaterialIcon hasRipple icon=\"edit\" />\n                            </IconButton>\n                            <IconButton disabled={this.props.actionButtonsDisabled} onClick={this.props.onDeleteIconClicked}>\n                                <MaterialIcon hasRipple icon=\"delete\" />\n                            </IconButton>\n                        </div>\n                    }\n                </div>\n                <div className={styles.companyTitleCaption}>{company ? company.hq_location.place_name : <Skeleton />}{company ? company.hq_location.full_address : <Skeleton />}</div>\n            </div>\n        );\n    }\n}\n","import React, { Component } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { RouteComponentProps } from \"react-router\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../state-management/types/root-types\";\n// rest api\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\nimport {\n    IObjectStore,\n    IObjectAction\n} from \"../../state-management/types/factory-types\";\nimport { Company, labelTypesMapToCompanyGroupTypes, companyGroupTypes } from \"../../data-model/company/company\";\nimport { Application } from \"../../data-model/application/application\";\nimport { ApplicationStatus } from \"../../data-model/application-status/application-status\";\n\n/** Components */\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n// mdc-react input\nimport \"@material/react-text-field/dist/text-field.css\";\nimport { ApplicationComponentController } from \"../../components/application/application-component\";\nimport { CompanyComponent } from \"../../components/company/company-component\";\n\nimport styles from \"./user-com-app-page.module.css\";\nimport { IReference } from \"../../data-model/base-model\";\nimport { CompanyActionCreators, ApplicationActionCreators } from \"../../state-management/action-creators/root-actions\";\n\n\ninterface IUserComAppPageParams {\n    uuid: string;\n}\n\ninterface IUserComAppPageNoGroupCompanyProps\n    extends RouteComponentProps<IUserComAppPageParams> {\n    companyStore: IObjectStore<Company>;\n    applicationStore: IObjectStore<Application>;\n    applicationStatusStore: IObjectStore<ApplicationStatus>;\n\n    createApplication: (\n        applicationFormData: Application,\n        callback?: Function\n    ) => void;\n\n    deleteCompany: (companyToDelete: Company, callback?: Function) => void;\n    updateCompany: (companyToUpdate: Company, callback?: Function) => void;\n}\n\ntype IUserComAppPageProps = IUserComAppPageNoGroupCompanyProps & {\n    [key in companyGroupTypes]: IObjectStore<Company>\n}\n\nclass UserComAppPage extends Component<IUserComAppPageProps> {\n    componentDidMount() {\n        const companyUuid = this.props.match.params.uuid;\n        process.env.NODE_ENV === 'development' && console.log(\"mount, got uuid from route?\", companyUuid);\n    }\n\n    goBackToCompanyListPage = () => {\n        this.props.history.replace('/home/');\n    }\n\n    onCompanyDelete = () => {\n        if (this.props.match.params.uuid) {\n            const company = this.props.companyStore.collection[this.props.match.params.uuid];\n            confirm(`Are you sure you want to delete company ${company.name}?`) && this.props.deleteCompany(company, this.goBackToCompanyListPage);\n            return;\n        }\n\n        console.error(\"Attempted to delete but company obj has no uuid\");\n    }\n\n    onCompanyEdit = () => {\n        if (this.props.match.params.uuid) {\n            const company = this.props.companyStore.collection[this.props.match.params.uuid];\n            this.props.history.push(`/com-form/${company.uuid}/`);\n            return;\n        }\n\n        console.error(\"Attempted to edit but no company uuid provided\");\n    }\n\n    renderPage() {\n        if (!this.props.match.params.uuid) {\n            return;\n        }\n\n        const company = this.props.companyStore.collection[this.props.match.params.uuid];\n        const applications = company ? company.applications as Array<IReference> : [];\n\n        return (\n            <div className={styles.UserCompanyPage}>\n                <Button\n                    onClick={_ => {\n                        this.props.history.length > 1 ? this.props.history.goBack()  : this.props.history.push('/home/');\n                    }}\n                >\n                    Back\n                </Button>\n\n                <CompanyComponent\n                    company={company}\n                    onDeleteIconClicked={this.onCompanyDelete}\n                    onEditIconClicked={this.onCompanyEdit}\n                    actionButtonsDisabled={this.props.companyStore.requestStatus === RequestStatus.REQUESTING}\n                />\n\n                <h2>Your Applications</h2>\n                {/* add application button - application form controller - always create form */}\n                <div>\n                    <ApplicationComponentController\n                        company={company}\n                        isOnlyForm\n                    />\n                </div>\n\n                {/* application list */}\n                {company ? applications.map((applicationRef, applicationsIndex) => {\n                    const application = this.props.applicationStore.collection[applicationRef as IReference];\n\n                    const applicationStatusList =  application ? (application.statuses as Array<IReference>).map((statusUuid) => this.props.applicationStatusStore.collection[statusUuid]) : undefined;\n                    return (\n                        <ApplicationComponentController\n                            key={applicationsIndex}\n                            application={application}\n                            company={company}\n                            applicationStatusList={applicationStatusList}\n                            disableApplicationActionButtons={this.props.applicationStore.requestStatus === RequestStatus.REQUESTING}\n                        />\n                    )\n                }) : (\n                    <ApplicationComponentController \n                        disableApplicationActionButtons\n                    />\n                )}\n\n            </div>\n        );\n    }\n\n    renderController() {\n        if (!this.props.match.params.uuid) {\n            return <h1>Company uuid not specified</h1>\n        }\n\n        // if such company in store, just take it\n        if (this.props.match.params.uuid in this.props.companyStore.collection) {\n            return this.renderPage();\n        }\n\n        // need to really make sure company not found in database\n        // will not show \"not found\" till all requesting finish\n        let someStillRequesting: boolean = false;\n        for (const companyGroupText of Object.values(labelTypesMapToCompanyGroupTypes)) {\n            if (\n                this.props[companyGroupText].requestStatus !== RequestStatus.SUCCESS ||\n                this.props[companyGroupText].requestStatus !== RequestStatus.FAILURE\n            ) {\n                someStillRequesting = true;\n                break;\n            }\n        }\n\n        if (\n            !someStillRequesting &&\n            !(this.props.match.params.uuid in this.props.companyStore.collection)\n        ) {\n            return <h1>Company not found</h1>\n        }\n\n        return this.renderPage();\n    }\n\n    // handle invalid company uuid given in url\n    render() {\n        return (\n            <div className=\"UserComAppPageContainer\">\n                {this.renderController()}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => {\n    return {\n        // prop: store.prop\n        companyStore: store.company,\n        ...(Object.values(labelTypesMapToCompanyGroupTypes).reduce((accumulate, companyGroupText) => ({\n            ...accumulate,\n            [companyGroupText]: store[companyGroupText]\n        }), {})),\n        applicationStore: store.application,\n        applicationStatusStore: store.applicationStatus\n    };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<Application>>) => {\n    // actionName = (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {\n        createApplication: (\n            applicationFormData: Application,\n            callback?: Function\n        ) =>\n            dispatch(\n                ApplicationActionCreators[CrudType.CREATE][\n                    RequestStatus.TRIGGERED\n                ].action(applicationFormData, callback)\n            )\n        ,\n        deleteCompany: (companyToDelete: Company, callback?: Function) =>\n            dispatch(\n                CompanyActionCreators[CrudType.DELETE][RequestStatus.TRIGGERED].action(\n                    companyToDelete,\n                    callback\n                )\n            ),\n        updateCompany: (companyToUpdate: Company, callback?: Function) =>\n            dispatch(\n                CompanyActionCreators[CrudType.UPDATE][RequestStatus.TRIGGERED].action(\n                    companyToUpdate,\n                    callback\n                )\n            )\n    };\n};\n\nexport const UserComAppPageContainer = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(UserComAppPage)\n);\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { IUpdateAuthState } from \"../../state-management/types/auth-types\";\n\ninterface UserInfoProps {\n    auth: IUpdateAuthState;\n}\n\nexport class UserInfo extends Component<UserInfoProps, any> {\n    render() {\n        return (\n            <div>\n                <div>\n                    Logged in:{\" \"}\n                    {(this.props.auth.isLogin &&\n                        this.props.auth.isLogin.toString()) ||\n                        \"undefine\"}\n                </div>\n                <div>User Name: {this.props.auth.userName || \"(empty)\"}</div>\n            </div>\n        );\n    }\n}\n","import React from \"react\";\n\n/** Components */\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n\ninterface ILocalLogoutButtonProps {\n    onClick: () => void;\n    disabled?: boolean;\n}\n\nconst LocalLogoutButton = (props: ILocalLogoutButtonProps) => {\n    return (\n        <div className=\"UserAuthButton\">\n            <Button\n                onClick={props.onClick}\n                unelevated\n                icon={\n                    <MaterialIcon hasRipple icon=\"account_circle\" />\n                }\n                disabled={props.disabled}\n            >\n                Local Logout\n                    </Button>\n        </div>\n    );\n}\n\nexport {\n    LocalLogoutButton\n};","import React, { Component, Dispatch } from \"react\";\n\n/** redux */\nimport { AnyAction } from \"redux\";\nimport { connect } from \"react-redux\";\nimport { IRootState } from \"../../state-management/types/root-types\";\nimport { IUpdateAuthState } from \"../../state-management/types/auth-types\";\nimport { RequestedLogoutAuth } from \"../../state-management/action-creators/auth-actions\";\n\n/** Routes & pages */\nimport { UserInfo } from \"../../components/user-info/user-info\";\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\n\n/** Components */\nimport \"./user-profile-page.css\"\n\nimport { SocialAuthButtonContainer } from \"../../components/login/social-auth-button\";\nimport { LocalLogoutButton } from \"../../components/login/local-logout-button\";\n\n\ninterface IUserProfilePageProps extends RouteComponentProps {\n    /** redux store state */\n    auth: IUpdateAuthState;\n\n    /** action dispatcher */\n    requestedLogoutAuth: () => void;\n}\n\nclass UserProfilePage extends Component<IUserProfilePageProps, any> {\n    localLogoutButton = () => {\n        this.props.requestedLogoutAuth();\n    }\n\n    render() {\n        return (\n            <div className=\"UserProfilePage\">\n                <h1>{this.props.auth.userName}'s profile</h1>\n                <div>\n                    isLocal = {JSON.stringify(this.props.auth.isLocal)}\n                </div>\n                <UserInfo auth={this.props.auth} />\n                {\n                    !this.props.auth.isLocal ? (\n                        <SocialAuthButtonContainer />\n                    ) : (\n                        <LocalLogoutButton \n                            onClick={this.localLogoutButton}\n                        />\n                    )\n                }\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => {\n    return {\n        auth: store.auth\n    };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>) => { \n    return {\n        requestedLogoutAuth: () => {\n            dispatch(\n                RequestedLogoutAuth()\n            );\n        },\n    }\n}\n\nexport const UserProfilePageContainer = withRouter(connect(mapStateToProps, mapDispatchToProps)(UserProfilePage));\n","import React, { Component, memo } from \"react\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { IRootState } from \"../../state-management/types/root-types\";\nimport { IUpdateAuthState } from \"../../state-management/types/auth-types\";\n\nimport { RequestStatus } from \"../../utils/rest-api\";\n\n/** Routing & Pages */\nimport {\n    Route,\n    Redirect,\n    Switch,\n    Link,\n    withRouter,\n    RouteComponentProps\n} from \"react-router-dom\";\n// pages\nimport { LandingPageContainer } from \"../landing-page/landing-page\";\nimport { LocalLoginPageContainer } from \"../login-page/local-login-page\";\nimport { UserAppPageContainer } from \"../user-app-page/user-app-page\";\nimport { AddComPageContainer } from \"../add-com-page/add-com-page\";\nimport { UserComAppPageContainer } from \"../user-com-app-page/user-com-app-page\";\nimport { UserProfilePageContainer } from \"../user-profile-page/user-profile-page\";\n// transition effects\nimport {\n    TransitionGroup,\n    CSSTransition\n} from \"react-transition-group\";\n\n/** MDC React */\nimport TopAppBar, {\n    TopAppBarFixedAdjust,\n    TopAppBarIcon,\n    TopAppBarRow,\n    TopAppBarSection,\n    TopAppBarTitle,\n} from '@material/react-top-app-bar';\nimport \"@material/react-top-app-bar/dist/top-app-bar.css\";\n\nimport LinearProgress from '@material/react-linear-progress';\nimport '@material/react-linear-progress/dist/linear-progress.css';\n\nimport '@material/react-material-icon/dist/material-icon.css';\nimport MaterialIcon from \"@material/react-material-icon\";\n\n// font awesome\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faGithub, faGithubAlt, faGithubSquare } from '@fortawesome/free-brands-svg-icons'\n\nimport \"@material/react-ripple/dist/ripple.css\";\n// import {withRipple} from '@material/react-ripple';\n\nimport pageTransitionStyles from \"./page-routes-transition.module.css\";\nimport styles from \"./page-routes.module.css\";\n\n\nconst publicPageSet = new Set([\n    \"/\",\n    \"/local-login/\",\n    // add more public page routres here\n    // ...\n]);\n\n\ninterface IPageRoutesRouterParams {\n    next?: string;\n}\n\n\ninterface IPageRoutesProps extends RouteComponentProps<IPageRoutesRouterParams> {\n    auth: IUpdateAuthState;\n}\n\n\nclass PageRoutes extends Component<IPageRoutesProps> {\n    goHome = () => {\n        this.props.location.pathname === '/home/' ? this.props.history.replace('/home/') : this.props.history.push('/home/');\n    }\n\n    goInternal = (): string => {\n        if (!this.props.location.search) {\n            return \"/home/\";\n        }\n\n        const query = new URLSearchParams(this.props.location.search);\n        const nextUrl = query.get(\"next\");\n        if (!nextUrl) {\n            return \"\";\n        }\n\n        return nextUrl;\n    }\n\n    isCurrentPublicPage = () => {\n        return publicPageSet.has(this.props.location.pathname);\n    }\n\n    render() {\n        return (\n            <div>\n                {this.isCurrentPublicPage() ? (\n                    <div className=\"PublicRoutesContainer\">\n                        {/** direct user to internal page if logged in */\n                            this.props.auth.isLogin && <Redirect to={this.goInternal()} />}\n\n                        <Switch>\n                            <Route path=\"/\" exact component={LandingPageContainer} />\n                            <Route path=\"/local-login/\" exact component={LocalLoginPageContainer} />\n                            {\n                                /** add more public page routes here */\n                                // ...\n                            }\n                        </Switch>\n                    </div>\n                ) : (\n                        <div className=\"PrivateRoutesContainer\">\n                            {/** protect private routes, but let people come back the internal page they want to access after they login */\n                                !this.props.auth.isLogin && <Redirect to={`/?next=${this.props.location.pathname}`} />}\n\n                            <TopAppBar>\n                                <TopAppBarRow>\n                                    <TopAppBarSection align=\"start\">\n                                        {/* <TopAppBarIcon>\n                                            <MaterialIcon hasRipple icon='menu' />\n                                        </TopAppBarIcon> */}\n                                        <TopAppBarTitle className={styles.topAppBarTitle} onClick={this.goHome}>Appl Tracky</TopAppBarTitle>\n                                    </TopAppBarSection>\n                                    <TopAppBarSection align='end' role='toolbar'>\n                                        <TopAppBarIcon navIcon tabIndex={0}>\n                                            <Link to=\"/home/\">\n                                                <MaterialIcon\n                                                    hasRipple\n                                                    key=\"itemHome\"\n                                                    icon=\"home\"\n                                                />\n                                            </Link>\n                                        </TopAppBarIcon>\n                                        <TopAppBarIcon navIcon tabIndex={1}>\n                                            <a target=\"_blank\" href=\"//github.com/rivernews/appl-tracky-spa\">\n                                                <FontAwesomeIcon icon={faGithub} size=\"lg\" />\n                                            </a>\n                                        </TopAppBarIcon>\n                                        <TopAppBarIcon navIcon tabIndex={2}>\n                                            <Link to=\"/profile/\">\n                                                {!this.props.auth.avatarUrl ? (\n                                                    <MaterialIcon\n                                                        hasRipple\n                                                        key=\"itemProfile\"\n                                                        icon=\"account_circle\"\n                                                    />\n                                                ) : (\n                                                        <img style={{\n                                                            \"height\": \"100%\",\n                                                            \"borderRadius\": \"50%\",\n                                                        }} src={this.props.auth.avatarUrl} />\n                                                    )}\n                                            </Link>\n                                        </TopAppBarIcon>\n                                    </TopAppBarSection>\n                                </TopAppBarRow>\n                            </TopAppBar>\n\n                            <TopAppBarFixedAdjust>\n\n                                <LinearProgress\n                                    indeterminate={this.props.auth.requestStatus === RequestStatus.REQUESTING}\n\n                                    // mdc's progress bar bug workaround\n                                    // when press back button, avoid showing dotted buffer animation\n                                    buffer={1}\n                                    bufferingDots={true}\n                                />\n\n                                <TransitionGroup>\n                                    <CSSTransition\n                                        key={this.props.location.key}\n                                        classNames={{ ...pageTransitionStyles }}\n                                        timeout={500}\n                                    >\n                                        <Switch location={this.props.location}>\n                                            <Route\n                                                path=\"/home/\"\n                                                component={UserAppPageContainer}\n                                            />\n                                            <Route\n                                                path=\"/com-form/:uuid?/\"\n                                                component={AddComPageContainer}\n                                            />\n                                            <Route\n                                                path=\"/com-app/:uuid/\"\n                                                component={UserComAppPageContainer}\n                                            />\n                                            <Route\n                                                path=\"/com-app/\"\n                                                component={UserComAppPageContainer}\n                                            />\n                                            <Route\n                                                path=\"/profile/\"\n                                                component={UserProfilePageContainer}\n                                            />\n                                            {/** add more private page routes here */}\n                                        </Switch>\n                                    </CSSTransition>\n                                </TransitionGroup>\n                            </TopAppBarFixedAdjust>\n                        </div>\n                    )}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    auth: store.auth\n});\n\nconst mapDispatchToProps = {};\n\nexport const PageRoutesContainer = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(PageRoutes)\n);\n","/** React core */\nimport React, { Component, Dispatch } from \"react\";\n\n/** Redux */\nimport { AnyAction } from \"redux\";\nimport { connect } from \"react-redux\";\nimport { IRootState } from \"./state-management/types/root-types\";\nimport { RequestedLoginAuth } from \"./state-management/action-creators/auth-actions\";\nimport { RequestedLoginMode } from \"./state-management/types/auth-types\";\n\n/** Routes & pages */\nimport { PageRoutesContainer } from \"./pages/page-routes/page-routes\";\n\n/** Locals */\nimport \"./App.css\";\nimport \"./ckeditor.css\";\n\n\ninterface IAppProps {\n    retrieveLoginAuth: () => void;\n}\n\nclass App extends Component<IAppProps> {\n    componentDidMount() {\n        this.props.retrieveLoginAuth();\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <PageRoutesContainer />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => {\n    return {\n    };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>) => { \n    return {\n        retrieveLoginAuth: () => {\n            dispatch(\n                RequestedLoginAuth(RequestedLoginMode.PREFILL)\n            );\n        },\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          process.env.NODE_ENV === 'development' && console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              process.env.NODE_ENV === 'development' && console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              process.env.NODE_ENV === 'development' && console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      process.env.NODE_ENV === 'development' && console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { Reducer, Action } from 'redux';\n\nimport { \n    /** store */\n    IUpdateAuthState, \n    /** action */\n    AuthActionNames, TAuthActions \n} from \"../types/auth-types\";\n\nimport { RequestStatus } from \"../../utils/rest-api\";\n\nconst initialAuthState: IUpdateAuthState = {\n    requestStatus: RequestStatus.SUCCESS, // initial status just set to SUCCESS\n    isLogin: false,\n    isLocal: false,\n    socialAuthToken: \"\",\n    apiToken: \"\",\n    userName: \"\",\n    expireDateTime: \"\",\n    avatarUrl: \"\",\n}\n\n// authStore will be stored as a sub-entry in global store; this is defined in ./store/types.ts\nexport const authReducer: Reducer<IUpdateAuthState> = (authStore = initialAuthState, action: Action)  => {\n    // add reducer for new actions here\n    // ...\n\n    const authAction = action as TAuthActions;\n\n    if (authAction.type === AuthActionNames.SUCCESS_AUTH) {\n        localStorage.setItem(process.env.NODE_ENV === 'development' ? 'dev__applyTracky__authState' : 'applyTracky__authState', JSON.stringify(authAction.payload));\n    }\n\n    return {\n        ...authStore,\n        ...authAction.payload\n    }\n}","import { IObjectStore, IObjectAction, TObject, IObjectList, IObjectBase } from \"../types/factory-types\";\n\nimport { RequestStatus, CrudType } from \"../../utils/rest-api\";\n\nimport { Action, Reducer } from \"redux\";\n\nimport { omit } from \"lodash\";\n\n\nexport const RestApiReducerFactory = <ObjectRestApiSchema extends IObjectBase>(\n    objectName: string,\n): Reducer<IObjectStore<ObjectRestApiSchema>> => {\n    const initialState: IObjectStore<ObjectRestApiSchema> = {\n        collection: {},\n        requestStatus: RequestStatus.SUCCESS\n    };\n\n    const storeReducer: Reducer<IObjectStore<ObjectRestApiSchema>> = (\n        objectStore: IObjectStore<ObjectRestApiSchema> = initialState,\n        action: Action\n    ): IObjectStore<ObjectRestApiSchema> => {\n\n        const objectAction = action as IObjectAction<ObjectRestApiSchema>;\n\n        if (\n            !(objectAction && objectAction.payload && objectAction.payload.requestStatus) ||\n            !(action.type.split(\"_\")[2] === objectName.toUpperCase())\n        ) {\n            return {\n                ...objectStore\n            };\n        }\n\n        // async success\n        if (objectAction.payload.requestStatus === RequestStatus.SUCCESS) {\n            // CREATE\n            if (objectAction.crudType === CrudType.CREATE) {\n                let newObject = <TObject<ObjectRestApiSchema>>objectAction.payload.formData;\n                return {\n                    collection: {\n                        ...objectStore.collection,\n                        [newObject.uuid]: newObject\n                    },\n                    requestStatus: objectAction.payload.requestStatus\n                };\n            }\n\n            // LIST\n            else if (objectAction.crudType === CrudType.LIST) {\n                const resObjectList = <Array<TObject<ObjectRestApiSchema>>>(\n                    objectAction.payload.formData\n                );\n                let newObjects: IObjectList<ObjectRestApiSchema> = {};\n                for (let object of resObjectList) {\n                    newObjects[object.uuid] = object;\n                }\n                process.env.NODE_ENV === 'development' && console.log(\"Reducer: crud=list, action=\", objectAction)\n                process.env.NODE_ENV === 'development' && console.log(\"initialState=\", initialState)\n                process.env.NODE_ENV === 'development' && console.log(\"beforestore=\", objectStore)\n                process.env.NODE_ENV === 'development' && console.log(\"newlistobjects=\", newObjects)\n\n                const afterStore: IObjectStore<ObjectRestApiSchema> = {\n                    collection: {\n                        ...objectStore.collection,\n                        ...newObjects\n                    },\n                    requestStatus: objectAction.payload.requestStatus\n                };\n                process.env.NODE_ENV === 'development' && console.log(\"afterstore=\", afterStore)\n\n                return afterStore;\n            }\n\n            // UPDATE\n            else if (objectAction.crudType === CrudType.UPDATE) {\n                let newObject = <TObject<ObjectRestApiSchema>>objectAction.payload.formData;\n                return {\n                    collection: {\n                        ...objectStore.collection,\n                        [newObject.uuid]: newObject\n                    },\n                    requestStatus: objectAction.payload.requestStatus\n                };\n            }\n\n            // DELETE\n            else if (objectAction.crudType === CrudType.DELETE) {\n                let targetDeleteUuids: Array<string> = [];\n                if (!Array.isArray(objectAction.triggerFormData)) {\n                    const targetDeleteObject = <TObject<ObjectRestApiSchema>>objectAction.triggerFormData;\n                    process.env.NODE_ENV === 'development' && console.log(\"Reducer: delete, targetobj=\", targetDeleteObject)\n                    targetDeleteUuids.push(targetDeleteObject.uuid);\n                }\n                else if (objectAction.triggerFormData.length) {\n                    if (typeof (objectAction.triggerFormData[0]) === \"string\" || objectAction.triggerFormData instanceof String) {\n                        targetDeleteUuids = objectAction.triggerFormData as Array<string>;\n                    }\n                    else {\n                        const targetDeleteObjectList = <Array<TObject<ObjectRestApiSchema>>>objectAction.triggerFormData;\n\n                        process.env.NODE_ENV === 'development' && console.log(\"Reducer: delete, targetobjList=\", targetDeleteObjectList);\n\n                        targetDeleteUuids = targetDeleteObjectList.map(targetDeleteObject => targetDeleteObject.uuid);\n                    }\n                }\n\n                process.env.NODE_ENV === 'development' && console.log(\"Reducer: delete, beforestore=\", objectStore)\n                const afterStore = {\n                    collection: omit(objectStore.collection, targetDeleteUuids),\n                    requestStatus: objectAction.payload.requestStatus\n                }\n                process.env.NODE_ENV === 'development' && console.log(\"Reducer: delete, afterstore\", afterStore)\n\n                return afterStore;\n            }\n        }\n\n        // async trigger\n        else if (objectAction.payload.requestStatus === RequestStatus.TRIGGERED) {\n            return {\n                ...objectStore,\n                requestStatus: objectAction.payload.requestStatus\n            };\n        }\n\n        // async requesting & failure\n        else {\n            return {\n                ...objectStore,\n                ...objectAction.payload\n            };\n        }\n\n        // no effect\n        return {\n            ...objectStore\n        };\n    };\n\n    return storeReducer;\n}","/** redux */\nimport { Reducer, Action } from \"redux\";\nimport { connectRouter, LocationChangeAction } from 'connected-react-router';\nimport { authReducer } from \"./auth-reducers\";\nimport { IRootState } from \"../types/root-types\";\nimport { IObjectStore } from \"../types/factory-types\";\nimport { RootActionNames } from \"../action-creators/root-actions\";\nimport { RestApiReducerFactory } from \"./reducer-factory\";\nimport { ApplicationStatus } from \"../../data-model/application-status/application-status\";\nimport { Application } from \"../../data-model/application/application\";\n// rest api\nimport { labelTypesMapToCompanyGroupTypes, companyGroupTypes, Company } from \"../../data-model/company/company\";\n\n/** router */\nimport { History } from \"history\";\n\n\n// create reducer for each data model\n\nexport const CompanyReducer = RestApiReducerFactory<Company>(\"companies\");\n\nexport const GroupCompanyReducer = Object.values(labelTypesMapToCompanyGroupTypes).reduce((accumulated, companyGroupText) => {\n    return {\n        ...accumulated,\n        [companyGroupText]: RestApiReducerFactory(companyGroupText)\n    }\n}, {}) as { [key in companyGroupTypes]: Reducer<IObjectStore<Company>> };\n\nexport const ApplicationReducer = RestApiReducerFactory<Application>(\"applications\");\n\nexport const ApplicationStatusReducer = RestApiReducerFactory<ApplicationStatus>(\"application-statuses\");\n\n\n// root reducer with router state\n\nexport const createRootReducer = (history: History<any>): Reducer<IRootState> => {\n    // return combineReducers<IRootState>({\n    //     router: connectRouter(history),\n    \n    //     // add more reducers here\n    //     auth: authReducer,\n    //     company: CompanyReducer,\n    //     address: AddressReducer,\n    //     application: ApplicationReducer,\n    //     // ...\n    // })\n\n    const rootReducer: Reducer<IRootState> = (rootState: IRootState | undefined, action: Action): IRootState  => {\n\n        let rootStateChecked: {\n            [storeName: string]: any\n        } = {};\n        if (!rootState) {\n            rootStateChecked.router = undefined;\n            rootStateChecked.auth = undefined;\n\n            rootStateChecked.company = undefined;\n            Object.values(labelTypesMapToCompanyGroupTypes).forEach((companyGroupText) => {\n                rootStateChecked[companyGroupText] = undefined;\n            });\n\n            rootStateChecked.application = undefined;\n            rootStateChecked.applicationStatus = undefined;\n            // add initial state for new sub-store here\n            // ...\n        } else if (action.type === RootActionNames.ResetAllStore) {\n            // exclude all store instead of the router's\n            rootStateChecked = {\n                router: rootState.router\n            }\n        } else {\n            rootStateChecked = rootState;\n        }\n\n        process.env.NODE_ENV === 'development' && console.log(\"beforeRootStore\", rootState);\n        process.env.NODE_ENV === 'development' && console.log(\"reducer: incoming action\", action);\n\n        const afterStore = { \n            ...rootState,\n            router: connectRouter(history)(rootStateChecked.router, action as LocationChangeAction),\n            auth: authReducer(rootStateChecked.auth, action),\n\n            company: CompanyReducer(rootStateChecked.company, action),\n            \n            // add grouped company reducers\n            ...(Object.values(labelTypesMapToCompanyGroupTypes).reduce((accumulate, companyGroupText) => {\n                const Reducer = GroupCompanyReducer[companyGroupText];\n                return ({\n                    ...accumulate,\n                    [companyGroupText]: Reducer(rootStateChecked[companyGroupText], action)\n                })\n            }, {}) as {\n                [key in companyGroupTypes]: IObjectStore<Company>\n            }),\n\n            application: ApplicationReducer(rootStateChecked.application, action),\n            applicationStatus: ApplicationStatusReducer(rootStateChecked.applicationStatus, action),\n            \n            // add new reducer here\n            // ...\n        }\n        \n        process.env.NODE_ENV === 'development' && console.log(\"afterRootStore\", afterStore);\n\n        return afterStore;\n    }\n\n    return rootReducer;\n}","/** redux */\nimport {\n    AuthActionNames,\n    IRequestedLoginAuthAction,\n    IRequestedLogoutAuthAction\n} from \"../types/auth-types\";\nimport {\n    SuccessLoginAuth,\n    SuccessLogoutAuth,\n    FailureAuth\n} from \"../action-creators/auth-actions\";\nimport { resetAllStoreAction, GroupedCompanyActionCreators, CompanyActionCreators } from \"../action-creators/root-actions\";\nimport { labelTypesMapToCompanyGroupTypes } from \"../../data-model/company/company\";\nimport { labelTypes } from \"../../data-model/label\";\n// redux-saga\nimport { takeEvery, call, put } from \"redux-saga/effects\";\n\n/** api */\nimport { AuthenticationService } from \"../../utils/authentication\";\nimport { CrudType, RequestStatus, RestApiService } from \"../../utils/rest-api\";\n\n\nfunction* authLoginSagaHandler(\n    requestedLoginAuthAction: IRequestedLoginAuthAction\n) {\n    // RequestAuth action triggered & injecting side effects here...\n    process.env.NODE_ENV === 'development' && console.log(\"auth saga: initialize\");\n    \n    const {\n        loginMode, \n        params={},\n        onCompleteCallback,\n    } = requestedLoginAuthAction;\n    \n    try {\n        // TODO: define interface typing for api response\n\n        const jsonResponse = yield call(AuthenticationService.serverLogin, loginMode, params);\n\n        process.env.NODE_ENV === 'development' && console.log(\"auth saga: server login, jsonRes=\", jsonResponse);\n\n        // In prefill login case, if cannot restore/refresh login session\n        if (!jsonResponse.token) {\n            yield put(SuccessLogoutAuth());\n            return;\n        }\n\n        yield put(SuccessLoginAuth(\n            jsonResponse.email, \"\", \n            jsonResponse.token, \n            jsonResponse.avatar_url,\n            jsonResponse.isLocal\n        ));\n\n        // initial fetch user data\n        // yield put(\n        //     CompanyActionCreators[CrudType.LIST][RequestStatus.TRIGGERED].action()\n        // );\n        yield put(\n            GroupedCompanyActionCreators[\"targetCompany\"][CrudType.LIST][RequestStatus.TRIGGERED].action(\n                {}, undefined, undefined, undefined,\n                `${RestApiService.state.apiBaseUrl}companies/?labels__isnull=True`\n            )\n        );\n        for (let labelText of Object.values(labelTypes)) {\n            yield put(\n                GroupedCompanyActionCreators[labelTypesMapToCompanyGroupTypes[labelText as labelTypes]][CrudType.LIST][RequestStatus.TRIGGERED].action(\n                    {}, undefined, undefined, undefined,\n                    `${RestApiService.state.apiBaseUrl}companies/?labels__text=${labelText}`\n                )\n            )\n        }\n    } catch (error) {\n        console.warn(`auth saga error: ${JSON.stringify(error)}`);\n        yield put(FailureAuth(error));\n    }\n\n    onCompleteCallback && onCompleteCallback();\n}\n\nexport function* authLoginSaga() {\n    yield takeEvery(AuthActionNames.REQUESTED_LOGIN_AUTH, authLoginSagaHandler);\n}\n\nfunction* authLogoutSagaHandler(\n    requestedLogoutAuthAction: IRequestedLogoutAuthAction\n) {\n    // RequestAuth action triggered & injecting side effects here...\n    process.env.NODE_ENV === 'development' && console.log(\"auth logout saga: fired\");\n    try {\n        yield call(AuthenticationService.serverLogout);\n\n        // clear all store\n    } catch (error) {\n        yield put(FailureAuth(error));\n        return;\n    }\n\n    process.env.NODE_ENV === 'development' && console.log(\"auth logout saga: navigating\");\n    yield put(SuccessLogoutAuth());\n    // yield put(push(\"/\"));\n\n    // clear all redux store\n    yield put(resetAllStoreAction());\n}\n\nexport function* authLogoutSaga() {\n    yield takeEvery(\n        AuthActionNames.REQUESTED_LOGOUT_AUTH,\n        authLogoutSagaHandler\n    );\n}\n\n// add new saga handler here && a `takeEvery` saga.\n// ...","import { IObjectBase, IObjectRestApiReduxFactoryActions, JsonResponseType, ITriggerActionOptions, IObjectAction, ISuccessSagaHandlerArgs, ISagaFactoryOptions } from \"../types/factory-types\";\n\nimport { CrudType, RequestStatus, IsSingleRestApiResponseTypeGuard, ISingleRestApiResponse, IListRestApiResponse, IRequestParams, RestApiService, CrudMapToRest } from \"../../utils/rest-api\";\nimport { SagaIterator } from \"redux-saga\";\nimport { actionChannel, take, call, put } from \"redux-saga/effects\";\nimport { normalize } from \"normalizr\";\n\n\nexport const RestApiSagaFactory = <ObjectRestApiSchema extends IObjectBase>(\n    /** should have uuid */ objectName: string,\n    ObjectRestApiActions: IObjectRestApiReduxFactoryActions,\n    sagaFactoryOptions: ISagaFactoryOptions<ObjectRestApiSchema>\n): Array<() => SagaIterator> => {\n    const crudKeywords = Object.values(CrudType) as Array<CrudType>;\n\n    const sagas = crudKeywords.map((crudKeyword) => {\n\n        const sagaHandler = function* (\n            triggerAction: IObjectAction<ObjectRestApiSchema>\n        ) {\n            process.env.NODE_ENV === 'development' && console.log(`Saga: action intercepted; aync=trigger, crud=${crudKeyword}, obj=${objectName}; ready to call api`);\n            let formData: ObjectRestApiSchema | Array<ObjectRestApiSchema> | undefined = triggerAction.payload.formData;\n            const absoluteUrl = triggerAction.absoluteUrl;\n\n            yield put(\n                ObjectRestApiActions[crudKeyword][\n                    RequestStatus.REQUESTING\n                ].action()\n            );\n\n            try {\n                // api call\n                let jsonResponse: JsonResponseType<ObjectRestApiSchema> = yield call(\n                    (<(params: IRequestParams<ObjectRestApiSchema>) => void>RestApiService[CrudMapToRest(crudKeyword)]),\n                    {\n                        data: formData,\n                        objectName,\n                        absoluteUrl,\n                    }\n                );\n\n                process.env.NODE_ENV === 'development' && console.log(\"Saga: res from server\", jsonResponse);\n\n                if (jsonResponse.status && jsonResponse.status >= 400) {\n                    console.error(\"Server error, see message in res.\");\n                    throw new Error(\"Server error, see message in res.\");\n                }\n\n                // if there is .next in res, then it's paginated data and we should perform a next request to next page data\n                if (jsonResponse.next) {\n                    process.env.NODE_ENV === 'development' && console.log(\"Saga: res contains next url, so we will also trigger list request for next=\", jsonResponse.next);\n                    yield put(ObjectRestApiActions[CrudType.LIST][RequestStatus.TRIGGERED].action(\n                        undefined, undefined, undefined, undefined, jsonResponse.next\n                    ));\n                }\n\n                // normalize primary object data (for relational object normalizing, will do it later) if  normalize manifest speciified\n                let normalizeData: undefined | Array<ObjectRestApiSchema> = undefined;\n                let relationalNormalizeData: undefined | {\n                    [relationalEntityKey: string]: Array<ObjectRestApiSchema>\n                } = undefined;\n\n                if (sagaFactoryOptions.normalizeManifest) {\n                    process.env.NODE_ENV === 'development' && console.log(\"Saga: receive normalizeManifest\");\n\n                    const normalizeObjectEntityKey = sagaFactoryOptions.normalizeManifest.objectEntityKey;\n\n                    // collect data from meaningful source\n                    let dataSource = undefined;\n                    if (crudKeyword === CrudType.DELETE) {\n                        dataSource = formData;\n                    }\n                    else if (IsSingleRestApiResponseTypeGuard(jsonResponse)) {\n                        dataSource = jsonResponse as ObjectRestApiSchema;\n                    }\n                    else {\n                        dataSource = jsonResponse.results as Array<ObjectRestApiSchema>;\n                    }\n                    process.env.NODE_ENV === 'development' && console.log(\"Saga: jsonResponse is\", jsonResponse);\n                    process.env.NODE_ENV === 'development' && console.log(\"Saga: formData is\", formData);\n                    process.env.NODE_ENV === 'development' && console.log(\"Saga: data source is\", dataSource);\n\n                    // normalize all data once for all\n                    const normalizeDataSourceSchema = Array.isArray(dataSource) ? (sagaFactoryOptions.normalizeManifest.listSchema) : (sagaFactoryOptions.normalizeManifest.schema);\n                    const normalizeDataSource = normalize(dataSource, normalizeDataSourceSchema);\n                    process.env.NODE_ENV === 'development' && console.log(\"Saga: normalized data source is\", normalizeDataSource);\n\n                    // place noramlized data to variables to fit in existing framework\n                    normalizeData = Object.values(normalizeDataSource.entities[normalizeObjectEntityKey]);\n                    if (crudKeyword === CrudType.DELETE) {\n                        formData = normalizeData.length === 1 ? normalizeData[0] : normalizeData;\n                    }\n                    else if (IsSingleRestApiResponseTypeGuard(jsonResponse)) {\n                        jsonResponse = normalizeData[0];\n                    }\n                    else {\n                        jsonResponse.results = normalizeData;\n                    }\n                    process.env.NODE_ENV === 'development' && console.log(\"Saga: data to dispatch SUCCESS action\", crudKeyword === CrudType.DELETE ? formData : jsonResponse);\n\n                    // prepare relational data for later use\n                    relationalNormalizeData = Object.keys(sagaFactoryOptions.normalizeManifest.relationalEntityReduxActionsMap).filter(key => normalizeDataSource.entities.hasOwnProperty(key)).reduce((accumulate, relationalEntityKey) => ({\n                        ...accumulate,\n                        [relationalEntityKey]: Object.values(normalizeDataSource.entities[relationalEntityKey])\n                    }), {});\n                    process.env.NODE_ENV === 'development' && console.log(\"relational normalize data for SUCCESS action\", relationalNormalizeData);\n                }\n\n                // handle success state --\n\n                // dispatch relational object actions, if normalize is needed (normalize manifest specified)\n                if (sagaFactoryOptions.normalizeManifest && relationalNormalizeData) {\n                    process.env.NODE_ENV === 'development' && console.log('Saga: about to dispatch relational, normalized objects');\n\n                    switch (crudKeyword) {\n                        case CrudType.UPDATE:\n                            // relational object will do nothing when primary action is UPDATE - UPDATE is purely on primary object\n                            break\n\n                        case CrudType.LIST:\n                        // relational objects should also apply LIST\n                        case CrudType.CREATE:\n                            // when there's a fresh new object created, if there're relational objects present then will also apply LIST to them\n                            for (const relationalEntityKey in sagaFactoryOptions.normalizeManifest.relationalEntityReduxActionsMap) {\n                                if (\n                                    // if no embed data, normalizr will not include it in `entities`\n                                    // so don't compare length; just compare its key existence\n                                    !relationalNormalizeData[relationalEntityKey]\n                                ) {\n                                    process.env.NODE_ENV === 'development' && console.log('skip for relational key', relationalEntityKey)\n                                    continue;\n                                }\n\n                                const dispatchResponseData = IsSingleRestApiResponseTypeGuard(jsonResponse) ? (\n                                    relationalNormalizeData[relationalEntityKey][0]\n                                ) : {\n                                        results: relationalNormalizeData[relationalEntityKey]\n                                    };\n\n                                process.env.NODE_ENV === 'development' && console.log(`Saga: relational action dispatch; crud=${crudKeyword}, entity=${relationalEntityKey}, dispatchResponseData for action is`, dispatchResponseData);\n\n                                const relationalActions = sagaFactoryOptions.normalizeManifest.relationalEntityReduxActionsMap[relationalEntityKey] as IObjectRestApiReduxFactoryActions;\n\n                                yield put(\n                                    relationalActions[crudKeyword][RequestStatus.SUCCESS].action(dispatchResponseData)\n                                );\n                            }\n                            break;\n\n                        case CrudType.DELETE:\n                            // if got `overrideCrudSuccessHandler.delete`, we will not do any side effects (dispatching actions) to redux store\n                            // we'll let `overrideCrudSuccessHandler.delete` handle all side effects to redux store\n                            if (sagaFactoryOptions.overrideCrudSuccessSagaHandler && sagaFactoryOptions.overrideCrudSuccessSagaHandler.delete) {\n                                break;\n                            }\n\n                            // because formData is always already normalized and we only have 1st-level-relationship's uuids, we will only dispatch delete action for 1st level relational fields. \n                            // we will not do cascade delete for nested && relational field.\n                            // if you need cascade delete to deal with nested relational fields, you'll have to write your own `overrideCrudSuccessHandler.delete` in the sagaOptions.\n\n                            // in backend, cascade delete should already be handled.\n                            // here we are only cleaning up / cascade delete the frontend redux store\n\n                            for (const relationalEntityKey in sagaFactoryOptions.normalizeManifest.relationalEntityReduxActionsMap) {\n                                const relationalActions = sagaFactoryOptions.normalizeManifest.relationalEntityReduxActionsMap[relationalEntityKey] as IObjectRestApiReduxFactoryActions;\n\n                                // relational objects should apply DELETE action -- this is a bulk deletion, not single delete\n                                const dispatchDeleteData = relationalNormalizeData[relationalEntityKey] ? relationalNormalizeData[relationalEntityKey] : (\n                                    formData && !Array.isArray(formData) && formData.hasOwnProperty(relationalEntityKey) ? (<ObjectRestApiSchema>formData)[relationalEntityKey as keyof ObjectRestApiSchema] : []\n                                );\n\n                                yield put(\n                                    relationalActions[CrudType.DELETE][RequestStatus.SUCCESS].action(undefined, dispatchDeleteData)\n                                );\n                            }\n                            break;\n\n                        default:\n                            break;\n                    }\n                }\n\n                // dispatch primary object action\n                const overrideCrudSuccessSagaHandler: ((args: ISuccessSagaHandlerArgs<ObjectRestApiSchema>) => void) | undefined = (\n                    sagaFactoryOptions.overrideCrudSuccessSagaHandler &&\n                    sagaFactoryOptions.overrideCrudSuccessSagaHandler.hasOwnProperty(crudKeyword) &&\n                    sagaFactoryOptions.overrideCrudSuccessSagaHandler[crudKeyword as CrudType] // only call the corresponding CRUD success saga handler\n                ) ? (\n                        sagaFactoryOptions.overrideCrudSuccessSagaHandler[crudKeyword as CrudType]\n                    ) : undefined;\n                if (overrideCrudSuccessSagaHandler) {\n                    // use custom handler if provided\n                    yield call(overrideCrudSuccessSagaHandler, {\n                        data: normalizeData ? normalizeData : (\n                            crudKeyword === CrudType.DELETE ? formData : jsonResponse\n                        ),\n                        updateFromObject: triggerAction.triggerActionOptions ? triggerAction.triggerActionOptions.updateFromObject : undefined\n                    });\n                }\n                else {\n                    // default handler\n                    if (crudKeyword === CrudType.DELETE) {\n                        process.env.NODE_ENV === 'development' && console.log(\"Saga: ready to dispatch delete action, formData =\", formData)\n                        yield put(\n                            ObjectRestApiActions[CrudType.DELETE][\n                                RequestStatus.SUCCESS\n                            ].action(undefined, formData)\n                        );\n                    } else {\n                        process.env.NODE_ENV === 'development' && console.log(\"Saga: ready to dispatch success action, jsonResponse =\", jsonResponse)\n                        yield put(\n                            ObjectRestApiActions[crudKeyword][\n                                RequestStatus.SUCCESS\n                            ].action(jsonResponse)\n                        );\n                    }\n                }\n\n                // add-on behavior\n                const doneCrudSuccessSagaHandler = sagaFactoryOptions.doneCrudSuccessSagaHandler && sagaFactoryOptions.doneCrudSuccessSagaHandler[crudKeyword as CrudType] ? sagaFactoryOptions.doneCrudSuccessSagaHandler[crudKeyword as CrudType] : undefined;\n                if (doneCrudSuccessSagaHandler) {\n                    yield call(doneCrudSuccessSagaHandler, {\n                        data: normalizeData ? normalizeData : (\n                            crudKeyword === CrudType.DELETE ? formData : jsonResponse\n                        ),\n                        updateFromObject: triggerAction.triggerActionOptions ? triggerAction.triggerActionOptions.updateFromObject : undefined\n                    }\n                    );\n                }\n\n                if (triggerAction.successCallback) {\n                    triggerAction.successCallback(jsonResponse);\n                }\n            } catch (error) {\n                // error state\n                yield put(\n                    ObjectRestApiActions[crudKeyword][\n                        RequestStatus.FAILURE\n                    ].action(error)\n                );\n\n                if (triggerAction.failureCallback) {\n                    triggerAction.failureCallback(error);\n                }\n                return;\n            }\n\n            if (triggerAction.finalCallback) {\n                triggerAction.finalCallback();\n            }\n        };\n\n        // saga listener\n        const saga = function* () {\n            process.env.NODE_ENV === 'development' && console.log(`Saga: action intercepted; async=trigger, crud=${crudKeyword}, obj=${objectName}`);\n\n            // queue style \n            const objectTriggerActionChannel = yield actionChannel(\n                ObjectRestApiActions[crudKeyword][RequestStatus.TRIGGERED]\n                    .actionTypeName\n            )\n\n            while (true) {\n                const objectTriggerAction = yield take(objectTriggerActionChannel);\n                yield call(sagaHandler, objectTriggerAction);\n            }\n        };\n\n        return saga;\n    }\n    );\n\n    return sagas;\n}","import { ISuccessSagaHandlerArgs, IObjectStore } from \"../types/factory-types\";\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\nimport { Company, labelTypesMapToCompanyGroupTypes } from \"../../data-model/company/company\";\nimport { CompanyActionCreators, GroupedCompanyActionCreators, ApplicationStatusActionCreators, ApplicationActionCreators } from \"../action-creators/root-actions\";\n\nimport { put, select } from \"redux-saga/effects\";\nimport { getApplicationStore } from \"../store/store-config\";\nimport { Application } from \"../../data-model/application/application\";\nimport { IReference } from \"../../data-model/base-model\";\n\n\nexport const companyDoneUpdateSuccessSagaHandler = function*(args: ISuccessSagaHandlerArgs<Company>) {\n    if (!args.data || (Array.isArray(args.data) && !args.data.length)) {\n        return;\n    }\n\n    const destinationCompany = Array.isArray(args.data) ? args.data[0] : args.data;\n    const destinationLabelText = Company.getLabel(destinationCompany);\n\n    // formData will always be a single company since we are dealing with Update only\n    const currentCompany = args.updateFromObject as Company;\n    const currentLabelText = Company.getLabel(currentCompany);\n\n    // update ref in grouped redux\n    if (destinationLabelText === currentLabelText) {\n        return;\n    }\n\n    // dispatch a success/CREATE action to the destination company group's action\n    const destinationCreateAction = GroupedCompanyActionCreators[labelTypesMapToCompanyGroupTypes[destinationLabelText]][CrudType.CREATE][RequestStatus.SUCCESS].action;\n    yield put(\n        destinationCreateAction({ uuid: destinationCompany.uuid })\n    );\n    \n    // dispatch a success/DELETE action of the original (current) company group \n    const currentDeleteAction = GroupedCompanyActionCreators[labelTypesMapToCompanyGroupTypes[currentLabelText]][CrudType.DELETE][RequestStatus.SUCCESS].action;\n    yield put(\n        currentDeleteAction(undefined, { uuid: currentCompany.uuid })\n    );\n}\nexport const companyOverrideDeleteSuccessSagaHandler = function*(args: ISuccessSagaHandlerArgs<Company>) {\n    if (!args.data || (Array.isArray(args.data) && !args.data.length)) {\n        return;\n    }\n    // delete ref in grouped company redux\n    const currentCompany = Array.isArray(args.data) ? args.data[0] : args.data;\n    const currentLabelText = Company.getLabel(currentCompany);\n    const currentAction = GroupedCompanyActionCreators[labelTypesMapToCompanyGroupTypes[currentLabelText]][CrudType.DELETE][RequestStatus.SUCCESS].action;\n    yield put(\n        currentAction(undefined, { uuid: currentCompany.uuid })\n    );\n\n    // handle cascade delete - delete relational data in their redux\n    \n    // delete related statuses\n    const applicationStore: IObjectStore<Application> = yield select(getApplicationStore);\n    alert(`currentCompany applications: ${JSON.stringify(currentCompany.applications)}`);\n    const deleteStatusUuids = (currentCompany.applications as Array<IReference>).flatMap((applicationUuid) => {\n        alert(`flatMap, application uuid: ${applicationUuid}`);\n        alert(`applicationUuid in applicationStore.collection?: ${applicationUuid in applicationStore.collection}`);\n        alert(`hasownProperty?: ${applicationStore.collection.hasOwnProperty(applicationUuid)}`);\n        alert(`statuses?: ${JSON.stringify(applicationStore.collection[applicationUuid].statuses)}`);\n        return applicationUuid in applicationStore.collection ? (\n            applicationStore.collection[applicationUuid].statuses as Array<IReference>\n        ) : []\n    });\n    alert(`cascade delete statuses: ${JSON.stringify(deleteStatusUuids)}`);\n\n    yield put(\n        ApplicationStatusActionCreators[CrudType.DELETE][RequestStatus.SUCCESS].action(\n            undefined,\n            deleteStatusUuids\n        )\n    );\n\n    // delete related applications\n    yield put(\n        ApplicationActionCreators[CrudType.DELETE][RequestStatus.SUCCESS].action(\n            undefined,\n            currentCompany.applications\n        )\n    );\n\n    // handle deleting company itself\n    yield put(\n        CompanyActionCreators[CrudType.DELETE][RequestStatus.SUCCESS].action(\n            undefined,\n            currentCompany\n        )\n    );\n}\n\n// grouped redux can only do api call when it's fetch (LIST), using the absolute url when dispatching TRIGGER action (in login saga).\n// if operation is others like UPDATE, CREATE, DELETE, then cannot do api call because the absolute url might not work for POST/PATCH/DELET.\nexport const groupedCompanyListSuccessSagaHandler = function*(args: ISuccessSagaHandlerArgs<Company>) {\n    // In redux factory saga, already ensure the right CRUD so no need to check crudType\n\n    if (!args.data || Array.isArray(args.data) && !args.data.length) {\n        return;\n    }\n\n    const fetchedCompanyList: Array<Company> = Array.isArray(args.data) ? args.data : [args.data];\n\n    const currentLabelText = Company.getLabel(fetchedCompanyList[0]);\n\n    // place company objects in pool redux\n    yield put(\n        CompanyActionCreators[CrudType.LIST][RequestStatus.SUCCESS].action({\n            results: fetchedCompanyList\n        })\n    );\n\n    // place \"pointers\", i.e., uuids, of company objects to grouped redux\n    const fetchedCompanyListUuids = fetchedCompanyList.map(company => ({\n        uuid: company.uuid\n    }));\n    yield put(\n        GroupedCompanyActionCreators[labelTypesMapToCompanyGroupTypes[currentLabelText]][CrudType.LIST][RequestStatus.SUCCESS].action({ results: fetchedCompanyListUuids })\n    );\n}","import { schema } from \"normalizr\";\n\nexport const ApplicationStatusNormalizeSchema = new schema.Entity(\"statuses\", {}, {\n    idAttribute: \"uuid\"\n})\n\nexport const ApplicationStatusListNormalizeSchema = new schema.Array(ApplicationStatusNormalizeSchema);","import { schema } from \"normalizr\";\nimport { ApplicationStatusListNormalizeSchema } from \"../application-status/application-status-normalize-schema\";\nimport { ApplicationStatusActionCreators } from \"../../state-management/action-creators/root-actions\";\n\n\nconst ApplicationNormalizeDefinition = {\n    \"statuses\": ApplicationStatusListNormalizeSchema\n};\n\nexport const ApplicationNormalizeSchema = new schema.Entity(\"applications\", ApplicationNormalizeDefinition, {\n    idAttribute: \"uuid\"\n});\n\nexport const ApplicationListNormalizeSchema = new schema.Array(ApplicationNormalizeSchema);\n\nexport const ApplicationNormalizeManifest = {\n    schema: ApplicationNormalizeSchema,\n    listSchema: ApplicationListNormalizeSchema,\n    objectEntityKey: \"applications\",\n    relationalEntityReduxActionsMap: {\n        \"statuses\": ApplicationStatusActionCreators\n    }\n}\n","import { schema } from 'normalizr';\nimport { ApplicationListNormalizeSchema } from \"../application/application-normalize-schema\";\nimport { ApplicationActionCreators, ApplicationStatusActionCreators } from '../../state-management/action-creators/root-actions';\n\n\nconst CompanyNormalizeDefinition = {\n    applications: ApplicationListNormalizeSchema\n};\n\nexport const CompanyNormalizeSchema = new schema.Entity(\"companies\", CompanyNormalizeDefinition, {\n    idAttribute: \"uuid\"\n});\n\nexport const CompanyListNormalizeSchema = new schema.Array(CompanyNormalizeSchema);\nexport const CompanyNormalizeManifest = {\n    schema: CompanyNormalizeSchema,\n    listSchema: CompanyListNormalizeSchema,\n    objectEntityKey: \"companies\",\n    relationalEntityReduxActionsMap: {\n        \"applications\": ApplicationActionCreators,\n        \"statuses\": ApplicationStatusActionCreators\n    }\n}","import { ISuccessSagaHandlerArgs } from \"../types/factory-types\";\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\nimport { IReference } from \"../../data-model/base-model\";\nimport { Company } from \"../../data-model/company/company\";\nimport { CompanyActionCreators } from \"../action-creators/root-actions\";\nimport { Application } from \"../../data-model/application/application\";\n\nimport { select, put } from \"redux-saga/effects\";\nimport { getCompanyStore } from \"../store/store-config\";\n\n\n// create a ref (uuid) in the upstream object - company\nexport const applicationDoneCreateSuccessSagaHandler = function*(args: ISuccessSagaHandlerArgs<Application>) {\n    if (!args.data || (Array.isArray(args.data) && !args.data.length)) {\n        return;\n    }\n    const application = (Array.isArray(args.data) ? args.data[0] : args.data) as Application;\n    const companyStore = yield select(getCompanyStore);\n    const company = companyStore.collection[application.user_company as IReference];\n    let updatedCompany = new Company(company);\n    updatedCompany.applications = [\n        application.uuid,\n        ...updatedCompany.applications as Array<IReference>\n    ];\n\n    yield put(\n        CompanyActionCreators[CrudType.UPDATE][RequestStatus.SUCCESS].action(updatedCompany)\n    );\n}\nexport const applicationDoneDeleteSuccessSagaHandler = function*(args: ISuccessSagaHandlerArgs<Application>) {\n    if (!args.data || (Array.isArray(args.data) && !args.data.length)) {\n        return;\n    }\n    const application = (Array.isArray(args.data) ? args.data[0] : args.data) as Application;\n    const companyStore = yield select(getCompanyStore);\n    const company = companyStore.collection[application.user_company as IReference];\n    let updatedCompany = new Company(company);\n    updatedCompany.applications = (updatedCompany.applications as Array<IReference>).filter(applicationUuid => applicationUuid !== application.uuid);\n\n    yield put(\n        CompanyActionCreators[CrudType.UPDATE][RequestStatus.SUCCESS].action(updatedCompany)\n    );\n}\n","import { ISuccessSagaHandlerArgs } from \"../types/factory-types\";\nimport { IReference } from \"../../data-model/base-model\";\nimport { IRootState } from \"../types/root-types\";\nimport { Application } from \"../../data-model/application/application\";\nimport { ApplicationStatus } from \"../../data-model/application-status/application-status\";\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\n\nimport { select, put } from \"redux-saga/effects\";\nimport { ApplicationActionCreators } from \"../action-creators/root-actions\";\n\n\nconst getApplicationStore = (store: IRootState) => store.application;\nexport const applicationStatusDoneCreateSuccessSagaHandler = function*(args: ISuccessSagaHandlerArgs<ApplicationStatus>) {\n    if (!args.data || (Array.isArray(args.data) && !args.data.length)) {\n        return;\n    }\n    const status = (Array.isArray(args.data) ? args.data[0] : args.data) as ApplicationStatus;\n    const applicationStore = yield select(getApplicationStore);\n    const application = applicationStore.collection[status.application as IReference];\n    let updatedApplication = new Application(application);\n    updatedApplication.statuses = [\n        status.uuid,\n        ...updatedApplication.statuses as Array<IReference>\n    ];\n    yield put(\n        ApplicationActionCreators[CrudType.UPDATE][RequestStatus.SUCCESS].action(updatedApplication)\n    );\n}\nexport const applicationStatusDoneDeleteSuccessSagaHandler = function*(args: ISuccessSagaHandlerArgs<ApplicationStatus>) {\n    if (!args.data || (Array.isArray(args.data) && !args.data.length)) {\n        return;\n    }\n    const status = (Array.isArray(args.data) ? args.data[0] : args.data) as ApplicationStatus;\n    const applicationStore = yield select(getApplicationStore);\n    const application = applicationStore.collection[status.application as IReference];\n    let updatedApplication = new Application(application);\n    updatedApplication.statuses = (updatedApplication.statuses as Array<IReference>).filter(applicationStatusUuid => applicationStatusUuid !== status.uuid);\n\n    yield put(\n        ApplicationActionCreators[CrudType.UPDATE][RequestStatus.SUCCESS].action(updatedApplication)\n    );\n}","import createSagaMiddleware, { SagaIterator } from 'redux-saga';\nimport { all } from \"redux-saga/effects\";\nimport { authLoginSaga, authLogoutSaga } from \"./auth-sagas\";\n// rest api\nimport { labelTypesMapToCompanyGroupTypes, companyGroupTypes} from \"../../data-model/company/company\";\nimport { labelTypes } from '../../data-model/label';\nimport { RestApiSagaFactory } from './saga-factory';\nimport { CompanyActionCreators, ApplicationActionCreators, ApplicationStatusActionCreators, GroupedCompanyActionCreators } from '../action-creators/root-actions';\nimport { companyDoneUpdateSuccessSagaHandler, groupedCompanyListSuccessSagaHandler, companyOverrideDeleteSuccessSagaHandler } from './company-custom-saga';\nimport { CompanyNormalizeManifest } from '../../data-model/company/company-normalize-schema';\nimport { applicationDoneCreateSuccessSagaHandler, applicationDoneDeleteSuccessSagaHandler } from './applicaiton-custom-saga';\nimport { ApplicationNormalizeManifest } from '../../data-model/application/application-normalize-schema';\nimport { applicationStatusDoneCreateSuccessSagaHandler, applicationStatusDoneDeleteSuccessSagaHandler } from './application-status-custom-saga';\n\n\n// saga for company\nexport const CompanySagas = RestApiSagaFactory(\"companies\", CompanyActionCreators, {\n    doneCrudSuccessSagaHandler: {\n        update: companyDoneUpdateSuccessSagaHandler,\n    },\n    overrideCrudSuccessSagaHandler: {\n        delete: companyOverrideDeleteSuccessSagaHandler\n    },\n    normalizeManifest: CompanyNormalizeManifest\n})\n\nexport const GroupCompanySagas = Object.values(labelTypesMapToCompanyGroupTypes).reduce((accumulated, companyGroupText) => {\n    return {\n        ...accumulated,\n        [companyGroupText]: RestApiSagaFactory(companyGroupText, GroupedCompanyActionCreators[companyGroupText], {\n            overrideCrudSuccessSagaHandler: {\n                list: groupedCompanyListSuccessSagaHandler\n            },\n            normalizeManifest: CompanyNormalizeManifest\n        })\n    }\n}, {}) as {\n    [groupText in companyGroupTypes]: Array<() => SagaIterator>\n};\n\n\n// saga for application\nexport const ApplicationSagas = RestApiSagaFactory(\"applications\", ApplicationActionCreators, {\n    doneCrudSuccessSagaHandler: {\n        create: applicationDoneCreateSuccessSagaHandler,\n        delete: applicationDoneDeleteSuccessSagaHandler\n    },\n    normalizeManifest: ApplicationNormalizeManifest\n});\n\n\n// saga for statuses\nexport const ApplicationStatusSagas = RestApiSagaFactory(\"application-statuses\", ApplicationStatusActionCreators, {\n    doneCrudSuccessSagaHandler: {\n        create: applicationStatusDoneCreateSuccessSagaHandler,\n        delete: applicationStatusDoneDeleteSuccessSagaHandler\n    }\n});\n\n\n// collect all sagas in root saga\n\nconst rootSaga = function*() {\n    yield all([\n        authLoginSaga(),\n        authLogoutSaga(),\n\n        ...CompanySagas.map((saga) => saga()),\n        ...Object.values(labelTypesMapToCompanyGroupTypes).map(companyGroupText => {\n            return GroupCompanySagas[companyGroupText].map(saga => saga())\n        }).flat(),\n\n        ...ApplicationSagas.map((saga) => saga()),\n        ...ApplicationStatusSagas.map((saga) => saga()),\n        // add new saga here\n        // ...\n    ]);\n};\n\n\n/** setup saga */\nexport const sagaMiddleware = createSagaMiddleware();\n\n\nexport const runSagaMiddleaware = () => {\n    sagaMiddleware.run(rootSaga)\n}\n","/** redux */\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport { IRootState } from \"../types/root-types\";\nimport { createRootReducer } from \"../reducers/root-reducers\";\n\n/** router */\nimport { createBrowserHistory } from 'history';\nimport { routerMiddleware } from 'connected-react-router';\n\n/** middleware */\n// saga\nimport { sagaMiddleware, runSagaMiddleaware } from \"../sagas/root-saga\";\n\n\n\nexport const history = createBrowserHistory({\n    basename: (process.env.NODE_ENV === 'development') ?  \n    ``\n    :\n    // since we use custom domain which has root dir of /\n    // we no longer need a base subpath\n    // the subpath is originally used for github page\n    ``\n    // `/appl-tracky-spa`\n});\n\nconst preloadedState = {\n\n};\n\n// generate the singleton store from redux\nexport const store = createStore<IRootState, any, any, any>(\n    createRootReducer(history),\n    preloadedState,\n    compose(\n        applyMiddleware(\n            routerMiddleware(history),\n            sagaMiddleware,\n            // ... add other middlewares ...\n        )\n    )\n);\n\n/** after mount saga middlewares to store, run them */\nrunSagaMiddleaware();\n\nexport const getCompanyStore = (store: IRootState) => store.company;\nexport const getApplicationStore = (store: IRootState) => store.application;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n/** redux */\nimport { Provider } from \"react-redux\";\nimport { Store } from \"redux\";\n/** root store */\nimport { IRootState } from \"./state-management/types/root-types\";\nimport { store } from \"./state-management/store/store-config\";\n\n/** router */\nimport { ConnectedRouter } from \"connected-react-router\";\nimport { history } from \"./state-management/store/store-config\";\n\n/** types */\ninterface IRootProps {\n    store: Store<IRootState>;\n}\n\n/** root component - just to wrap the App into redux store */\nconst Root: React.SFC<IRootProps> = props => {\n    return (\n        <Provider store={props.store}>\n            <ConnectedRouter history={history} >\n                <App />\n            </ConnectedRouter>\n        </Provider>\n    );\n};\n\nReactDOM.render(<Root store={store} />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"LandingPage\":\"landing-page_LandingPage__3oFtQ\",\"primaryPageContent\":\"landing-page_primaryPageContent__f287k\",\"headlineContent\":\"landing-page_headlineContent__29jRT\",\"headlineText\":\"landing-page_headlineText__9fxIM\",\"headlineSubText\":\"landing-page_headlineSubText__HE14O\",\"loginActionsContainer\":\"landing-page_loginActionsContainer__3yi10\",\"divider\":\"landing-page_divider__St_4o\",\"sideNoteContent\":\"landing-page_sideNoteContent__1uKKV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"UserAppPageHeader\":\"user-app-page_UserAppPageHeader__2dvrY\",\"companyListHeader\":\"user-app-page_companyListHeader__2eOFe\",\"searchField\":\"user-app-page_searchField__3Xux1\"};"],"sourceRoot":""}