{"version":3,"sources":["store/auth/types.ts","utils/rest-api.ts","store/data-model/base-model.ts","utils/auth.ts","store/auth/actions.ts","store/rest-api-redux-factory.ts","store/data-model/address.ts","store/data-model/link.ts","store/data-model/company.ts","store/data-model/application.ts","components/social-auth/social-auth-login-button.tsx","components/social-auth/social-auth-logout-button.tsx","components/social-auth/social-auth-button.tsx","components/form-factory/form-field-factory.tsx","components/form-factory/form-factory.tsx","pages/landing-page/landing-page.tsx","components/company/company-component.tsx","store/data-model/application-status.ts","store/data-model/application-status-link.ts","components/application-status/application-status-form-component.tsx","components/application-status/application-status-component.tsx","components/application/application-component.tsx","components/company-application/company-application-component.tsx","pages/user-app-page/user-app-page.tsx","components/company/company-form-component.tsx","pages/add-com-page/add-com-page.tsx","components/application/application-form-component.tsx","pages/user-com-app-page/user-com-app-page.tsx","components/user-info/user-info.tsx","pages/user-profile-page/user-profile-page.tsx","pages/page-routes/page-routes.tsx","App.tsx","serviceWorker.ts","store/actions.ts","store/auth/reducers.ts","sagas/auth/sagas.ts","sagas/saga-config.ts","store/reducers.ts","store/store-config.ts","index.tsx"],"names":["AuthActionNames","RequestStatus","CrudType","RestMethod","BaseModel","_ref","_ref$uuid","uuid","_ref$created_at","created_at","_ref$modified_at","modified_at","Object","classCallCheck","this","AuthObject","_BaseModel","_this","_ref$code","code","_ref$provider","provider","_ref$redirect_uri","redirect_uri","args","objectWithoutProperties","possibleConstructorReturn","getPrototypeOf","call","inherits","AuthenticationService","state","clientID","redirectUri","apiLoginUrl","socialAuthProvider","userEmail","apiLoginToken","userFirstName","userLastName","objectID","serverLogin","socialLoginCode","authFormData","_this2","RestApiService","post","data","endpointUrl","serverLogout","_callee","regenerator_default","a","wrap","_context","prev","next","console","log","abrupt","stop","CrudMapToRest","crudType","CREATE","POST","READ","LIST","GET","UPDATE","PATCH","DELETE","RestApi","apiBaseUrl","get","objectName","fetch","getRelativeUrl","objectSpread","method","setApiAuthHeaders","then","res","json","_ref2","body","JSON","stringify","patch","_ref3","delete","_ref4","_ref5","url","concat","undefined","mode","credentials","headers","Authorization","Content-Type","RequestedLoginAuth","socialAuthToken","type","REQUESTED_LOGIN_AUTH","payload","requestStatus","REQUESTING","RequestedLogoutAuth","REQUESTED_LOGOUT_AUTH","SuccessLoginAuth","userName","expireDateTime","apiToken","avatarUrl","SUCCESS_AUTH","SUCCESS","isLogin","SuccessLogoutAuth","FailureAuth","error","FAILURE_AUTH","FAILURE","RestApiReduxFactory","initialObjectInstance","crudKeywords","values","ObjectRestApiRedux","_loop","crudKeyword","_i","_arr","_i2","length","actionTypeName","action","toUpperCase","TRIGGERED","objectClassInstance","callback","formData","jsonResponse","triggerFormData","newState","lastChangedObjectID","results","sagaHandler","mark","triggerAction","put","sent","t0","saga","_context2","takeEvery","initialState","collection","sagas","map","actions","storeReducer","objectStore","arguments","objectAction","split","newObject","defineProperty","resObjectList","newObjects","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","done","object","value","err","return","afterStore","targetDeleteObject","omit","Address","_ref$place_name","place_name","_ref$country","country","_ref$state","_ref$city","city","_ref$street","street","_ref$full_address","full_address","_ref$zipcode","zipcode","AddressRestApiRedux","AddressReducer","AddressSagas","Link","_ref$text","text","_ref$user","user","_ref$url","_ref$order","order","Company","_ref$labels","labels","_ref$name","name","_ref$hq_location","hq_location","_ref$home_page","home_page","_ref$ratings","ratings","_ref$applications","applications","CompanyRestApiRedux","CompanyActions","CompanyReducer","CompanySagas","Application","_ref$user_company","user_company","_ref$position_title","position_title","_ref$job_description_","job_description_page","_ref$job_source","job_source","ApplicationRestApiRedux","ApplicationActions","ApplicationReducer","ApplicationSagas","SocialAuthLoginButton","_Component","_getPrototypeOf2","_len","Array","_key","apply","onLoginButtonClicked","clickEvent","renderProps","onClick","onAuthSuccess","authResponse","props","onSuccess","onAuthFailure","onFailure","createClass","key","react_default","createElement","className","google_login","render","react_button_dist_default","unelevated","icon","dist_default","hasRipple","disabled","clientId","responseType","Component","SocialAuthLogoutButton","onLogoutSuccess","SocialAuthButton","onSocialLoginSuccess","googleOauthResponse","setState","requestedLoginAuth","onSocialLoginFailure","onSocialLogoutSuccess","requestedLogoutAuth","auth","social_auth_logout_button_SocialAuthLogoutButton","social_auth_login_button_SocialAuthLoginButton","InputFieldType","SocialAuthButtonContainer","withRouter","connect","store","dispatch","ActionButtonType","FormInputFieldProps","fieldName","label","onTrailingIconSelect","FormInputFieldFactory","react_text_field_dist_default","react_text_field_dist","TEXT","inputType","onChange","onBlur","formik_esm","FormActionButtonProps","FormFactory","initialValues","validate","onSubmit","errors","touched","handleChange","handleBlur","isSubmitting","handleSubmit","formInputFieldPropsList","formInputFieldProps","index","form_field_factory_FormInputFieldFactory","assign","actionButtonPropsList","actionButtonProps","BUTTON","children","styles","backgroundColor","color","LandingPage","formFactoryProps","validateLoginForm","onSubmitLoginForm","setSubmitting","token","loginSuccess","username","avatar_url","listApplication","listCompany","catch","prepareLoginForm","password","PASSWORD","SUBMIT","style","react_router","to","form_factory_FormFactory","LandingPageContainer","CompanyComponent","company","react_router_dom","react_icon_button_dist_default","onDeleteIconClicked","target","href","ApplicationStatus","_ref$application","application","_ref$applicationstatu","applicationstatuslink_set","_ref$date","date","ApplicationStatusRestApiRedux","ApplicationStatusActions","ApplicationStatusReducer","ApplicationStatusSagas","ApplicationStatusLink","_ref$application_stat","application_status","_ref$link","link","ApplicationStatusFormComponent","application_status__text","application_status__date","application__id","links","indexes","push","applicationStatusLinks","applicationStatus","createApplicationStatus","onSubmitSuccess","application_status__link0__url","application_status__link0__text","application_status__link1__url","application_status__link1__text","DATE","onCancel","ApplicationStatusFormComponentContainer","applicationStatusStore","applicationStatusFormData","ApplicationStatusComponent","applicationStatusLink","ApplicationStatusComponentContainer","ApplicationComponent","isApplicationStatusFormOpened","isShowApplicationStatuses","applicationStatusList","status","CompanyApplicationComponent","onDeleteClick","event","deleteObject","company_component_CompanyComponent","applicationStore","filter","application_component_ApplicationComponent","CompanyApplicationComponentContainer","companyToDelete","UserAppPage","history","UserAppPageContainer","CompanyFormComponent","validateAppForm","company__name","test","company__home_page__url","onSubmitAppForm","company__hq_location__full_address","createCompany","CompanyFormComponentContainer","companyFormData","AddComPage","newCompany","AddComPageContainer","ApplicationFormComponent","application__position_title","application__job_description_page__url","application__job_source__url","application__user_company__id","createApplication","newApplication","ApplicationFormComponentContainer","applicationFormData","UserComAppPage","isApplicationFormOpened","companyUuid","match","params","renderAll","UserComAppPageContainer","UserInfo","src","toString","UserProfilePage","user_info_UserInfo","UserProfilePageContainer","PageRoutes","location","pathname","path","exact","component","react_top_app_bar_dist_default","title","actionItems","react_top_app_bar_dist","PageRoutesContainer","App","Boolean","window","hostname","RootActionNames","initialAuthState","authReducer","authStore","authAction","resetAllStoreAction","ResetAllStore","authLoginSagaHandler","authLoginSaga","authLogoutSagaHandler","authLogoutSaga","requestedLoginAuthAction","email","warn","_marked","_marked2","requestedLogoutAuthAction","_context3","_marked3","_context4","_marked4","sagaMiddleware","createSagaMiddleware","rootSaga","all","toConsumableArray","createBrowserHistory","basename","createStore","rootState","rootStateChecked","router","address","connectRouter","compose","applyMiddleware","routerMiddleware","run","ReactDOM","es","esm","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6d321de6.chunk.js","sourcesContent":["import { Action } from \"redux\";\n\nimport { RequestStatus } from \"../../utils/rest-api\";\n\n/**\n * Store Types\n */\n\n// complete store type\nexport interface IUpdateAuthState {\n    requestStatus: RequestStatus\n    isLogin: boolean\n    userName: string\n    socialAuthToken: string\n    apiToken: string\n    expireDateTime: string\n    avatarUrl: string\n}\n\n// async partial store types\nexport interface IRequestedLoginAuthState {\n    requestStatus: RequestStatus\n    socialAuthToken: string\n}\n\nexport interface IRequestedLogoutAuthState {\n    requestStatus: RequestStatus\n}\n\nexport interface ISuccessAuthState {\n    requestStatus: RequestStatus\n    isLogin: boolean\n    userName: string\n    expireDateTime: string\n    apiToken: string\n    avatarUrl: string\n}\n\nexport interface IFailureAuthState {\n    requestStatus: RequestStatus,\n    error: any\n}\n\n// add more state types for this reducer - auth reducer\n// ...\n\n\n\n\n\n/**\n * Action Types\n */\n\nexport enum AuthActionNames {\n    UPDATE_AUTH = \"Update auth\",\n    REQUESTED_LOGIN_AUTH = \"Requested login auth\",\n    REQUESTED_LOGOUT_AUTH = \"Requested logout auth\",\n    SUCCESS_AUTH = \"Success auth\",\n    FAILURE_AUTH = \"Failure auth\",\n\n    // 1. add more action for this reducer - auth reducer\n    // 2. write the type interface for the action below\n    // ...\n}\n\nexport interface IUpdateAuthAction extends Action<AuthActionNames.UPDATE_AUTH> {\n    type: typeof AuthActionNames.UPDATE_AUTH;\n    payload: IUpdateAuthState;\n}\n\nexport interface IRequestedLoginAuthAction extends Action<AuthActionNames.REQUESTED_LOGIN_AUTH> {\n    type: typeof AuthActionNames.REQUESTED_LOGIN_AUTH;\n    payload: IRequestedLoginAuthState;\n}\n\nexport interface IRequestedLogoutAuthAction extends Action<AuthActionNames.REQUESTED_LOGOUT_AUTH> {\n    type: typeof AuthActionNames.REQUESTED_LOGOUT_AUTH;\n    payload: IRequestedLogoutAuthState;\n}\n\nexport interface ISuccessAuthAction extends Action<AuthActionNames.SUCCESS_AUTH> {\n    type: typeof AuthActionNames.SUCCESS_AUTH;\n    payload: ISuccessAuthState;\n}\n\nexport interface IFailureAuthAction extends Action<AuthActionNames.FAILURE_AUTH> {\n    type: typeof AuthActionNames.FAILURE_AUTH;\n    payload: IFailureAuthState;\n}\n\n// use union | ... | ... to add more action types\nexport type TAuthActions = IUpdateAuthAction | IRequestedLoginAuthAction | IRequestedLogoutAuthAction | ISuccessAuthAction | IFailureAuthAction","import React from \"react\";\nimport { TObject, IObjectBase } from \"../store/rest-api-redux-factory\";\nimport { BaseModel } from \"../store/data-model/base-model\";\nimport { AuthenticationService } from \"./auth\";\n\nexport enum RequestStatus {\n    TRIGGERED = \"triggered\",\n    REQUESTING = \"requesting\",\n    SUCCESS = \"success\",\n    FAILURE = \"failre\"\n}\n\nexport enum CrudType {\n    CREATE = \"create\",\n    READ = \"read\",\n    LIST = \"list\",\n    UPDATE = \"update\",\n    DELETE = \"delete\"\n}\n\nexport enum RestMethod {\n    POST = \"post\",\n    GET = \"get\",\n    PATCH = \"patch\",\n    DELETE = \"delete\"\n}\n\nexport const CrudMapToRest = (crudType: CrudType): RestMethod => {\n    switch (crudType) {\n        case CrudType.CREATE:\n            return RestMethod.POST;\n        case CrudType.READ:\n            return RestMethod.GET;\n        case CrudType.LIST:\n            return RestMethod.GET;\n        case CrudType.UPDATE:\n            return RestMethod.PATCH;\n        case CrudType.DELETE:\n            return RestMethod.DELETE;\n\n        default:\n            return RestMethod.GET;\n    }\n};\n\nexport interface IRequestParams<Schema> {\n    endpointUrl?: string;\n    objectName?: string;\n    data?: TObject<Schema> | Array<TObject<Schema>>;\n}\n\nexport interface IListRestApiResponse<Schema> {\n    count: number;\n    next: any;\n    previous: any;\n    results: Array<TObject<Schema>>;\n}\n\nexport type ISingleRestApiResponse<Schema> = TObject<Schema>;\n\nexport function IsSingleRestApiResponseTypeGuard<Schema>(\n    response: ISingleRestApiResponse<Schema> | IListRestApiResponse<Schema>\n): response is ISingleRestApiResponse<Schema> {\n    return (<ISingleRestApiResponse<Schema>>response).uuid !== undefined;\n}\n\nfunction IsSingleFormDataTypeGuard<Schema>(\n    formData: TObject<Schema> | Array<TObject<Schema>>\n): formData is TObject<Schema> {\n    return (<TObject<Schema>>formData).uuid !== undefined;\n}\n\nexport class RestApi {\n    state = {\n        clientID: `732988498848-vuhd6g61bnlqe372i3l5pbpnerteu6na.apps.googleusercontent.com`,\n        code: ``,\n        redirectUri: `postmessage`,\n        apiBaseUrl: (process.env.NODE_ENV === 'development') ? \n        `http://localhost:8000/api/`\n        :\n        `https://appl-tracky-api-https.shaungc.com/api/`\n        ,\n        apiLoginUrl: `login/social/`,\n        socialAuthProvider: `google-oauth2`,\n\n        userEmail: ``,\n        apiLoginToken: ``,\n        userFirstName: ``,\n        userLastName: ``,\n\n        objectID: ``\n    };\n\n    get = <Schema>({ endpointUrl, objectName, data }: IRequestParams<Schema>) => {\n        return fetch(\n            this.getRelativeUrl({\n                endpointUrl,\n                objectName,\n                data\n            }),\n            {\n                method: \"GET\",\n                ...this.setApiAuthHeaders()\n            }\n        ).then(res => res.json());\n    };\n\n    post = <Schema>({ data, objectName, endpointUrl }: IRequestParams<Schema>) => {\n        console.log(`restapi:post fired`);\n        return fetch(\n            this.getRelativeUrl({\n                endpointUrl,\n                objectName,\n                data\n            }),\n            {\n                method: \"POST\",\n                ...this.setApiAuthHeaders(),\n                body: JSON.stringify(data)\n            }\n        ).then(res => res.json());\n        // let caller handle error in their own .catch()\n    };\n\n    patch = <Schema>({ data, objectName, endpointUrl }: IRequestParams<Schema>) => {\n        return fetch(\n            this.getRelativeUrl({\n                endpointUrl,\n                objectName,\n                data\n            }),\n            {\n                method: \"PATCH\",\n                ...this.setApiAuthHeaders(),\n                body: JSON.stringify(data)\n            }\n        );\n    };\n\n    delete = <Schema>({ data, objectName, endpointUrl }: IRequestParams<Schema>) => {\n        return fetch(\n            this.getRelativeUrl({\n                endpointUrl,\n                objectName,\n                data\n            }),\n            {\n                method: \"DELETE\",\n                ...this.setApiAuthHeaders(),\n                body: JSON.stringify(data)\n            }\n        );\n    };\n\n    /** helper */\n    private getRelativeUrl = <Schema>({\n        objectName,\n        data,\n        endpointUrl\n    }: IRequestParams<Schema>) => {\n        let url = \"\";\n        if (endpointUrl) {\n            url = `${this.state.apiBaseUrl}${endpointUrl}`;\n        } else {\n            if (data && IsSingleFormDataTypeGuard(data) && data.uuid) {\n                url = `${this.state.apiBaseUrl}${objectName}/${data.uuid}/`;\n            } else {\n                url = `${this.state.apiBaseUrl}${objectName}/`;\n            }\n        }\n        console.log(`restapi: url: ${url}, objname=${objectName}`);\n        return url;\n    };\n\n    private setApiAuthHeaders = (): RequestInit => {\n\n        this.state.apiLoginToken = (\n            AuthenticationService.state.apiLoginToken\n        ) ? AuthenticationService.state.apiLoginToken : this.state.apiLoginToken;\n\n        console.log(\"api: set header: got credentials?\", this.state.apiLoginToken);\n        return {\n            mode: \"cors\",\n            credentials: this.state.apiLoginToken ? \"include\" : \"omit\",\n            headers: {\n                Authorization: this.state.apiLoginToken\n                    ? `JWT ${this.state.apiLoginToken}`\n                    : ``,\n                \"Content-Type\": \"application/json\"\n            }\n        };\n    };\n}\n\n/** create restapi singleton */\nexport const RestApiService = new RestApi();\n","export type IRelationship = string;\n\nexport interface IBaseModelProps {\n    uuid?: IRelationship\n    created_at?: string\n    modified_at?: string\n}\n\nexport class BaseModel {\n    uuid: string\n    created_at: string\n    modified_at: string\n    \n    constructor({\n        uuid = \"\",\n        created_at = \"\",\n        modified_at = \"\",\n    }: IBaseModelProps) {\n        this.uuid = uuid;\n        this.created_at = created_at;\n        this.modified_at = modified_at;\n    }\n}","import { RestApiService } from \"./rest-api\";\nimport { BaseModel, IBaseModelProps } from \"../store/data-model/base-model\";\n\nexport interface IAuthObjectProps {\n    code?: string\n    provider?: string\n    redirect_uri?: string\n}\n\nexport class AuthObject extends BaseModel {\n    code: string\n    provider: string\n    redirect_uri: string\n\n    constructor({\n        code = \"\",\n        provider = \"\",\n        redirect_uri = \"\",\n        ...args\n    }: IAuthObjectProps & IBaseModelProps) {\n        super(args);\n        this.code = code;\n        this.provider = provider;\n        this.redirect_uri = redirect_uri;\n    }\n}\n\nclass Authentication {\n    state = {\n        clientID: `732988498848-vuhd6g61bnlqe372i3l5pbpnerteu6na.apps.googleusercontent.com`,\n\n        redirectUri: `postmessage`,\n        apiLoginUrl: `login/social/`,\n        socialAuthProvider: `google-oauth2`,\n\n        userEmail: ``,\n        apiLoginToken: ``,\n        userFirstName: ``,\n        userLastName: ``,\n\n        objectID: ``\n    };\n\n    serverLogin = (socialLoginCode: string) => {\n        let authFormData = new AuthObject({\n            code: socialLoginCode,\n            provider: this.state.socialAuthProvider,\n            redirect_uri: this.state.redirectUri\n        })\n        return RestApiService\n            .post<AuthObject>({\n                data: authFormData,\n                endpointUrl: this.state.apiLoginUrl\n            })\n    }\n\n    serverLogout = async () => {\n        console.log(\"server logout...\");\n        // no server-side invalidate implement at this point (a common case for JWT, however)\n        this.state.userEmail = \"\";\n        this.state.userFirstName = \"\"\n        this.state.userLastName = \"\"\n        this.state.apiLoginToken = RestApiService.state.apiLoginToken = \"\";\n        return;\n    }\n}\n\nexport const AuthenticationService = new Authentication();","import { ActionCreator } from \"redux\";\n\nimport {\n    /** state types */\n    IUpdateAuthState,\n    IRequestedLoginAuthState,\n    /** action types */\n    IUpdateAuthAction,\n    IRequestedLoginAuthAction,\n    IRequestedLogoutAuthAction,\n    ISuccessAuthAction,\n    IFailureAuthAction,\n    /** action names */\n    AuthActionNames\n} from \"./types\";\n\nimport { RequestStatus } from \"../../utils/rest-api\";\n\nexport const UpdateAuth = (newAuthState: IUpdateAuthState): IUpdateAuthAction => {\n    return {\n        type: AuthActionNames.UPDATE_AUTH,\n        payload: newAuthState\n    };\n};\n\nexport const RequestedLoginAuth = (socialAuthToken: string): IRequestedLoginAuthAction => {\n    return {\n        type: AuthActionNames.REQUESTED_LOGIN_AUTH,\n        payload: {\n            requestStatus: RequestStatus.REQUESTING,\n            socialAuthToken\n        }\n    };\n};\n\nexport const RequestedLogoutAuth = (): IRequestedLogoutAuthAction => {\n    return {\n        type: AuthActionNames.REQUESTED_LOGOUT_AUTH,\n        payload: {\n            requestStatus: RequestStatus.REQUESTING,\n        }\n    };\n};\n\nexport const SuccessLoginAuth = (userName: string, expireDateTime: string, apiToken: string, avatarUrl: string): ISuccessAuthAction => {\n    console.log(\"action username:\", userName);\n    return {\n        type: AuthActionNames.SUCCESS_AUTH,\n        payload: {\n            requestStatus: RequestStatus.SUCCESS,\n            isLogin: true,\n            userName,\n            expireDateTime,\n            apiToken,\n            avatarUrl\n        }\n    };\n};\n\nexport const SuccessLogoutAuth = (): ISuccessAuthAction => {\n    return {\n        type: AuthActionNames.SUCCESS_AUTH,\n        payload: {\n            requestStatus: RequestStatus.SUCCESS,\n            isLogin: false,\n            userName: \"\",\n            expireDateTime: \"\",\n            apiToken: \"\",\n            avatarUrl: \"\",\n        }\n    };\n};\n\nexport const FailureAuth = (error: any): IFailureAuthAction => {\n    return {\n        type: AuthActionNames.FAILURE_AUTH,\n        payload: {\n            requestStatus: RequestStatus.FAILURE,\n            error\n        }\n    };\n};\n\n// write new actions here for this reducer - auth reducer\n// ...\n","import { Action, Reducer } from \"redux\";\nimport { takeEvery, call, put } from \"redux-saga/effects\";\nimport { SagaIterator } from \"redux-saga\";\nimport {\n    RequestStatus,\n    CrudType,\n    CrudMapToRest,\n    RestApiService,\n    IRequestParams,\n    ISingleRestApiResponse,\n    IListRestApiResponse,\n    IsSingleRestApiResponseTypeGuard\n} from \"../utils/rest-api\";\nimport omit from \"lodash/omit\";\n\n/** state & store */\n\nexport interface IObjectBase {\n    uuid: string;\n}\n\nexport type TObject<Schema> = IObjectBase & { [Property in keyof Schema]: Schema[Property] };\n\ninterface IObjectList<Schema> {\n    [uuid: string]: TObject<Schema>;\n}\n\nexport interface IObjectStore<Schema> {\n    lastChangedObjectID?: string;\n    requestStatus: RequestStatus;\n    error?: any;\n    collection: IObjectList<Schema>;\n}\n\n/** action */\n\ntype IObjectRestApiReduxFactoryActions = {\n    [restfulKeyword: string]: {\n        [asyncKeyword: string]: {\n            actionTypeName: string;\n            action: Function;\n            saga?: () => SagaIterator;\n        };\n    };\n};\n\nexport interface IObjectAction<Schema> extends Action {\n    type: string;\n    crudType: CrudType;\n\n    // for deleteAction or other actions to obtain the original instance obj passed into trigger action\n    triggerFormData?: TObject<Schema> | Array<TObject<Schema>>;\n\n    // for saga to perform additional side effect e.g. navigation\n    callback?: Function;\n    \n    payload: {\n        formData?: TObject<Schema> | Array<TObject<Schema>>;\n        lastChangedObjectID?: string;\n        requestStatus: RequestStatus;\n        error?: any;\n    };\n}\n\n/** factory API */\n\ninterface IRestApiReduxFactory<Schema> {\n    actions: IObjectRestApiReduxFactoryActions;\n    storeReducer: Reducer<IObjectStore<Schema>>\n    sagas: Array<() => SagaIterator>;\n}\n\nexport const RestApiReduxFactory = <Schema extends IObjectBase>(\n    /** should have uuid */ objectName: string,\n    initialObjectInstance: TObject<Schema>\n): IRestApiReduxFactory<Schema> => {\n    type TObjectSchema = typeof initialObjectInstance;\n    const crudKeywords = Object.values(CrudType);\n\n    let ObjectRestApiRedux: IObjectRestApiReduxFactoryActions = {};\n    for (let crudKeyword of crudKeywords) {\n        ObjectRestApiRedux[crudKeyword] = {};\n        /** store */\n        // TODO?: action state\n\n        /** action */\n        // action type names\n        for (let requestStatus of Object.values(RequestStatus)) {\n            ObjectRestApiRedux[crudKeyword][requestStatus] = {\n                actionTypeName: \"\",\n                action: () => {}\n            };\n            ObjectRestApiRedux[crudKeyword][\n                requestStatus\n            ].actionTypeName = `${requestStatus.toUpperCase()}_${crudKeyword.toUpperCase()}_${objectName.toUpperCase()}`;\n        }\n\n        // async actions ( & state...)\n        ObjectRestApiRedux[crudKeyword][RequestStatus.TRIGGERED].action = (\n            objectClassInstance: TObjectSchema,\n            callback?: Function\n        ): IObjectAction<TObjectSchema> => {\n            console.log(`action:fired, trigger, ${crudKeyword}`);\n            return {\n                type:\n                    ObjectRestApiRedux[crudKeyword][RequestStatus.TRIGGERED]\n                        .actionTypeName,\n                crudType: crudKeyword,\n                callback: callback,\n                payload: {\n                    requestStatus: RequestStatus.TRIGGERED,\n                    formData: objectClassInstance\n                }\n            };\n        };\n        ObjectRestApiRedux[crudKeyword][\n            RequestStatus.REQUESTING\n        ].action = (): IObjectAction<TObjectSchema> => {\n            return {\n                type:\n                    ObjectRestApiRedux[crudKeyword][RequestStatus.REQUESTING]\n                        .actionTypeName,\n                crudType: crudKeyword,\n                payload: {\n                    requestStatus: RequestStatus.REQUESTING\n                }\n            };\n        };\n        ObjectRestApiRedux[crudKeyword][RequestStatus.SUCCESS].action = (\n            /** api response */\n            jsonResponse:\n            | IListRestApiResponse<TObjectSchema>\n            | ISingleRestApiResponse<TObjectSchema>,\n            triggerFormData?: TObject<Schema> | Array<TObject<Schema>>\n        ): IObjectAction<TObjectSchema> => {\n            let newState = {\n                type:\n                    ObjectRestApiRedux[crudKeyword][RequestStatus.SUCCESS]\n                        .actionTypeName,\n                crudType: crudKeyword\n            };\n            // if is delete success, we don't need formData (& the server responds nothing for DELETE as well)\n            if (crudKeyword === CrudType.DELETE) {\n                return {\n                    ...newState,\n                    triggerFormData,\n                    payload: {\n                        requestStatus: RequestStatus.SUCCESS,\n                    }\n                }\n            }\n            else if (IsSingleRestApiResponseTypeGuard(jsonResponse)) {\n                return {\n                    ...newState,\n                    payload: {\n                        requestStatus: RequestStatus.SUCCESS,\n                        formData: <ISingleRestApiResponse<TObjectSchema>>(\n                            jsonResponse\n                        ),\n                        lastChangedObjectID: jsonResponse.uuid\n                    }\n                };\n            } else {\n                return {\n                    ...newState,\n                    payload: {\n                        requestStatus: RequestStatus.SUCCESS,\n                        formData: (<IListRestApiResponse<TObjectSchema>>(\n                            jsonResponse\n                        )).results\n                    }\n                };\n            }\n        };\n        ObjectRestApiRedux[crudKeyword][RequestStatus.FAILURE].action = (\n            error: any\n        ): IObjectAction<TObjectSchema> => {\n            return {\n                type:\n                    ObjectRestApiRedux[crudKeyword][RequestStatus.FAILURE]\n                        .actionTypeName,\n                crudType: crudKeyword,\n                payload: {\n                    requestStatus: RequestStatus.FAILURE,\n                    error\n                }\n            };\n        };\n\n        /** saga */\n        const sagaHandler = function*(\n            triggerAction: IObjectAction<TObjectSchema>\n        ) {\n            console.log(`Saga: action intercepted; aync=trigger, crud=${crudKeyword}, obj=${objectName}; ready to call api`);\n            const formData = triggerAction.payload.formData;\n            yield put(\n                ObjectRestApiRedux[crudKeyword][\n                    RequestStatus.REQUESTING\n                ].action()\n            );\n            try {\n                // api call\n                const jsonResponse:\n                    | IListRestApiResponse<TObjectSchema>\n                    | ISingleRestApiResponse<TObjectSchema> = yield call(\n                    (<(params: IRequestParams<TObjectSchema>) => void>RestApiService[CrudMapToRest(crudKeyword)]),\n                    {\n                        data: formData,\n                        objectName\n                    }\n                );\n\n                console.log(\"Saga: res from server\", jsonResponse);\n\n                // success state\n                if (crudKeyword === CrudType.DELETE) {\n                    yield put(\n                        ObjectRestApiRedux[CrudType.DELETE][\n                            RequestStatus.SUCCESS\n                        ].action(jsonResponse, formData)\n                    );\n                } else {\n                    yield put(\n                        ObjectRestApiRedux[crudKeyword][\n                            RequestStatus.SUCCESS\n                        ].action(jsonResponse)\n                    );\n                }\n\n                if (triggerAction.callback) {\n                    triggerAction.callback();\n                }\n            } catch (error) {\n                // error state\n                yield put(\n                    ObjectRestApiRedux[crudKeyword][\n                        RequestStatus.FAILURE\n                    ].action(error)\n                );\n                return;\n            }\n        };\n\n        ObjectRestApiRedux[crudKeyword][\n            RequestStatus.TRIGGERED\n        ].saga = function*() {\n            console.log(`Saga: action intercepted; async=trigger, crud=${crudKeyword}, obj=${objectName}`);\n            yield takeEvery(\n                ObjectRestApiRedux[crudKeyword][RequestStatus.TRIGGERED]\n                    .actionTypeName,\n                sagaHandler\n            );\n        };\n    }\n\n    const initialState: IObjectStore<TObjectSchema> = {\n        collection: {},\n        requestStatus: RequestStatus.SUCCESS\n    };\n\n    const storeReducer: Reducer<IObjectStore<Schema>> = (\n        objectStore: IObjectStore<TObjectSchema> = initialState,\n        action: Action\n    ): IObjectStore<TObjectSchema> => {\n        \n        const objectAction = action as IObjectAction<TObjectSchema>;\n\n        if (\n            !(objectAction && objectAction.payload && objectAction.payload.requestStatus) ||\n            !(action.type.split(\"_\")[2] === objectName.toUpperCase())\n        ) {\n            return {\n                ...objectStore\n            };\n        }\n\n        // async success\n        if (objectAction.payload.requestStatus === RequestStatus.SUCCESS) {\n            // CREATE\n            if (objectAction.crudType === CrudType.CREATE) {\n                let newObject = <TObject<TObjectSchema>>objectAction.payload.formData;\n                return {\n                    collection: {\n                        ...objectStore.collection,\n                        [newObject.uuid]: newObject\n                    },\n                    requestStatus: objectAction.payload.requestStatus,\n                    lastChangedObjectID: objectAction.payload.lastChangedObjectID\n                };\n            }\n\n            // LIST\n            else if (objectAction.crudType === CrudType.LIST) {\n                const resObjectList = <Array<TObject<TObjectSchema>>>(\n                    objectAction.payload.formData\n                );\n                let newObjects: IObjectList<TObjectSchema> = {};\n                for (let object of resObjectList) {\n                    newObjects[object.uuid] = object;\n                }\n                console.log(\"Reducer: crud=list, action=\", objectAction)\n                console.log(\"initialState=\", initialState)\n                console.log(\"beforestore=\", objectStore)\n                console.log(\"newlistobjects=\", newObjects)\n\n                const afterStore: IObjectStore<TObjectSchema> = {\n                    collection: {\n                        ...objectStore.collection,\n                        ...newObjects\n                    },\n                    requestStatus: objectAction.payload.requestStatus\n                };\n                console.log(\"afterstore=\", afterStore)\n\n                return afterStore;\n            }\n\n            // UPDATE\n            else if (objectAction.crudType === CrudType.UPDATE) {\n                let newObject = <TObject<TObjectSchema>>objectAction.payload.formData;\n                return {\n                    collection: {\n                        ...objectStore.collection,\n                        [newObject.uuid]: newObject\n                    },\n                    requestStatus: objectAction.payload.requestStatus,\n                    lastChangedObjectID: objectAction.payload.lastChangedObjectID\n                };\n            }\n\n            // DELETE\n            else if (objectAction.crudType === CrudType.DELETE) {\n                let targetDeleteObject = <TObject<TObjectSchema>>objectAction.triggerFormData;\n                console.log(\"Reducer: delete, targetobj=\", targetDeleteObject)\n\n                console.log(\"Reducer: delete, beforestore=\", objectStore)\n                \n                const afterStore = {\n                    collection: omit(objectStore.collection, [targetDeleteObject.uuid]),\n                    requestStatus: objectAction.payload.requestStatus\n                }\n                console.log(\"Reducer: delete, afterstore\", afterStore)\n\n                return afterStore;\n            }\n        }\n\n        // async trigger\n        else if (objectAction.payload.requestStatus === RequestStatus.TRIGGERED) {\n            return {\n                ...objectStore,\n                requestStatus: objectAction.payload.requestStatus\n            };\n        }\n\n        // async requesting & failure\n        else {\n            return {\n                ...objectStore,\n                ...objectAction.payload\n            };\n        }\n\n        // no effect\n        return {\n            ...objectStore\n        };\n    };\n\n    const sagas = crudKeywords.map((crudKeyword) => \n        (<() => SagaIterator>ObjectRestApiRedux[crudKeyword][RequestStatus.TRIGGERED].saga)\n    );\n\n    return {\n        actions: ObjectRestApiRedux,\n        storeReducer,\n        sagas\n    };\n};\n","import { RestApiReduxFactory } from \"../rest-api-redux-factory\";\nimport { BaseModel, IBaseModelProps } from \"./base-model\";\n\nexport interface IAddressProps {\n    place_name?: string;\n    country?: string;\n    state?: string;\n    city?: string;\n    street?: string;\n    full_address?: string;\n    zipcode?: string;\n}\n\nexport class Address extends BaseModel {\n    place_name: string;\n    country: string;\n    state: string;\n    city: string;\n    street: string;\n    full_address: string;\n    zipcode: string;\n\n    constructor({\n        place_name = \"\",\n        country = \"\",\n        state = \"\",\n        city = \"\",\n        street = \"\",\n        full_address = \"\",\n        zipcode = \"\",\n        ...args\n    }: IAddressProps & IBaseModelProps) {\n        super(args);\n        this.place_name = place_name;\n        this.country = country;\n        this.state = state;\n        this.place_name = place_name;\n        this.city = city;\n        this.street = street;\n        this.full_address = full_address;\n        this.zipcode = zipcode;\n    }\n}\n\nconst initialAddressInstance = new Address({});\nconst AddressRestApiRedux = RestApiReduxFactory<Address>(\n    \"addresses\",\n    initialAddressInstance\n);\nexport const AddressActions = AddressRestApiRedux.actions;\nexport const AddressReducer = AddressRestApiRedux.storeReducer;\nexport const AddressSagas = AddressRestApiRedux.sagas;\n","import { BaseModel, IBaseModelProps } from \"./base-model\";\n\ninterface ILinkProps {\n    text?: string;\n    user?: any;\n    url?: string;\n    order?: number;\n}\n\nexport class Link extends BaseModel {\n    public text: string;\n    public user: any;\n    public url: string;\n    public order: number;\n\n    constructor({\n        text = \"\",\n        user = {},\n        url = \"\",\n        order = 0,\n        ...args\n    }: ILinkProps & IBaseModelProps) {\n        super(args);\n        this.text = text;\n        this.user = user;\n        this.url = url;\n        this.order = order;\n    }\n}\n","import { RestApiReduxFactory } from \"../rest-api-redux-factory\";\nimport { BaseModel, IBaseModelProps } from \"./base-model\";\nimport { Address } from \"./address\";\nimport { Link } from \"./link\";\n\ninterface ICompanyProps {\n    user?: string;\n    labels?: any;\n    name?: string;\n    hq_location?: Address;\n    home_page?: Link;\n    ratings?: any;\n    applications?: any;\n}\n\nexport class Company extends BaseModel {\n    public user: string;\n    public labels: any;\n    public name: string;\n    public hq_location: Address;\n    public home_page: Link;\n    public ratings: any;\n    public applications: any;\n\n    constructor({\n        user = \"\",\n        labels = [],\n        name = \"\",\n        hq_location = new Address({}),\n        home_page = new Link({}),\n        ratings = {},\n        applications = {},\n        ...args\n    }: ICompanyProps & IBaseModelProps) {\n        super(args);\n        this.user = user;\n        this.labels = labels;\n        this.name = name;\n        this.hq_location = hq_location;\n        this.home_page = home_page;\n        this.ratings = ratings;\n        this.applications = applications;\n    }\n}\n\nconst initialCompanyInstance = new Company({});\nconst CompanyRestApiRedux = RestApiReduxFactory<Company>(\n    \"companies\",\n    initialCompanyInstance\n);\nexport const CompanyActions = CompanyRestApiRedux.actions;\nexport const CompanyReducer = CompanyRestApiRedux.storeReducer;\nexport const CompanySagas = CompanyRestApiRedux.sagas;\n","import { RestApiReduxFactory } from \"../rest-api-redux-factory\";\nimport { BaseModel, IBaseModelProps, IRelationship } from \"./base-model\";\nimport { Link } from \"./link\";\n\ninterface IApplicationProps {\n    user?: IRelationship;\n    user_company?: IRelationship;\n    position_title?: string;\n    job_description_page?: Link;\n    job_source?: Link;\n    labels?: any;\n}\n\nexport class Application extends BaseModel {\n    public user: string;\n    public user_company: IRelationship;\n    public position_title: string;\n    public job_description_page: Link;\n    public job_source: Link;\n    public labels: any;\n\n    constructor({\n        user = \"\",\n        user_company = \"\",\n        position_title = \"\",\n        job_description_page = new Link({}),\n        job_source = new Link({}),\n        labels = {},\n        ...args\n    }: IApplicationProps & IBaseModelProps) {\n        super(args);\n        this.user = user;\n        this.user_company = user_company;\n        this.position_title = position_title;\n        this.job_description_page = job_description_page;\n        this.job_source = job_source;\n        this.labels = labels;\n    }\n}\n\nconst initialApplicationInstance = new Application({});\nconst ApplicationRestApiRedux = RestApiReduxFactory<Application>(\n    \"applications\",\n    initialApplicationInstance\n);\nexport const ApplicationActions = ApplicationRestApiRedux.actions;\nexport const ApplicationReducer = ApplicationRestApiRedux.storeReducer;\nexport const ApplicationSagas = ApplicationRestApiRedux.sagas;\n","import React, { Component } from \"react\";\n\n/** Components */\nimport { GoogleLogin } from \"react-google-login\";\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n\ninterface ISocialAuthLoginButtonProps {\n    clientID: string;\n    redirectUri?: string;\n    onSuccess(authResponse?: any): void;\n    onFailure?(error: any): void;\n    disabled?: boolean;\n}\n\nexport class SocialAuthLoginButton extends Component<\n    ISocialAuthLoginButtonProps\n> {\n    onLoginButtonClicked = (clickEvent: any, renderProps: any) => {\n        console.log(\"login button clicked\", clickEvent, renderProps);\n        renderProps.onClick(clickEvent);\n    };\n\n    onAuthSuccess = (authResponse?: any) => {\n        console.log(\"login button auth success\");\n        this.props.onSuccess(authResponse);\n    };\n\n    onAuthFailure = (error: any) => {\n        console.log(\"login button auth failed\");\n        if (this.props.onFailure) {\n            this.props.onFailure(error);\n        }\n    };\n\n    render() {\n        return (\n            <div className=\"UserAuthButton\">\n                <GoogleLogin\n                    render={(renderProps: any) => (\n                        <Button\n                            onClick={clickEvent =>\n                                this.onLoginButtonClicked(\n                                    clickEvent,\n                                    renderProps\n                                )\n                            }\n                            unelevated\n                            icon={\n                                <MaterialIcon hasRipple icon=\"account_circle\" />\n                            }\n                            disabled={this.props.disabled}\n                        >\n                            Google Login\n                        </Button>\n                    )}\n                    onSuccess={this.onAuthSuccess}\n                    onFailure={this.onAuthFailure}\n                    clientId={this.props.clientID}\n                    responseType=\"code\"\n                    redirectUri={this.props.redirectUri || \"postmessage\"}\n                />\n            </div>\n        );\n    }\n}\n","import React, { Component } from \"react\";\n\n/** Components */\nimport { GoogleLogout } from \"react-google-login\";\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n\ninterface ISocialAuthLogoutButtonProps {\n    onSuccess(authResponse?: any): void;\n    disabled?: boolean\n}\n\nexport class SocialAuthLogoutButton extends Component<\n    ISocialAuthLogoutButtonProps\n> {\n    onAuthSuccess = (authResponse?: any) => {\n        this.props.onSuccess(authResponse);\n    };\n\n    render() {\n        return (\n            <div className=\"UserAuthButton\">\n                <GoogleLogout\n                    render={(renderProps: any) => (\n                        <Button\n                            onClick={renderProps.onClick}\n                            unelevated\n                            icon={<MaterialIcon hasRipple icon=\"eject\" />}\n                            disabled={this.props.disabled}\n                        >\n                            Logout\n                        </Button>\n                    )}\n                    onLogoutSuccess={this.onAuthSuccess}\n                />\n            </div>\n        );\n    }\n}\n","import React, { Component } from \"react\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\n\n/** Redux */\nimport { Dispatch } from \"redux\";\nimport { connect } from \"react-redux\";\nimport { IRootState } from \"../../store/types\";\nimport { IUpdateAuthAction, IRequestedLoginAuthAction, TAuthActions, IUpdateAuthState } from \"../../store/auth/types\";\nimport { UpdateAuth, RequestedLoginAuth, RequestedLogoutAuth } from \"../../store/auth/actions\";\n\n/** rest api */\nimport { RequestStatus } from \"../../utils/rest-api\";\n\n/** Components */\nimport { SocialAuthLoginButton } from \"./social-auth-login-button\";\nimport { SocialAuthLogoutButton } from \"./social-auth-logout-button\";\n\ninterface ISocialAuthButtonProps extends RouteComponentProps {\n    auth: IUpdateAuthState;\n    requestedLoginAuth: (socialAuthToken: string) => void;\n    requestedLogoutAuth: () => void;\n}\n\nclass SocialAuthButton extends Component<\n    ISocialAuthButtonProps\n> {\n    state = {\n        clientID: `732988498848-vuhd6g61bnlqe372i3l5pbpnerteu6na.apps.googleusercontent.com`,\n        code: ``,\n        redirectUri: `postmessage`,\n        apiBaseUrl: `http://localhost:8000/`,\n        apiLoginUrl: `login/social/`,\n        socialAuthProvider: `google-oauth2`,\n\n        userEmail: ``,\n        apiLoginToken: ``,\n        userFirstName: ``,\n        userLastName: ``,\n\n        objectID: ``\n    };\n\n    onSocialLoginSuccess = (googleOauthResponse: any) => {\n        console.log(\"Google Oauth2 res:\", googleOauthResponse);\n        this.setState(\n            {\n                code: googleOauthResponse.code\n            },\n            () => {\n                // this.apiLogin();\n                console.log(\"social button: request auth...\");\n                this.props.requestedLoginAuth(this.state.code);\n            }\n        );\n    };\n\n    onSocialLoginFailure = (error: any) => {\n        console.error(\"Social login failed:\", error);\n    };\n\n    onSocialLogoutSuccess = () => {\n        console.log(\"Social logout success, now our web app logout\");\n        this.props.requestedLogoutAuth();\n    };\n\n    render() {\n        return (\n            <div className=\"SocialAuth\">\n                auth requestStatus: {this.props.auth.requestStatus} <br></br>\n                {!this.props.auth.isLogin ? (\n                    <SocialAuthLoginButton\n                        clientID={this.state.clientID}\n                        onSuccess={this.onSocialLoginSuccess}\n                        onFailure={this.onSocialLoginFailure}\n                        disabled={this.props.auth.requestStatus === RequestStatus.REQUESTING}\n                    />\n                ) : (\n                    <SocialAuthLogoutButton\n                        onSuccess={this.onSocialLogoutSuccess}\n                        disabled={this.props.auth.requestStatus === RequestStatus.REQUESTING}\n                    />\n                )}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => {\n    return {\n        auth: store.auth\n    };\n};\n\nfunction mapDispatchToProps(dispatch: Dispatch<TAuthActions>) {\n    return {\n        requestedLoginAuth: (socialAuthToken: string) => {\n            dispatch(\n                RequestedLoginAuth(socialAuthToken)\n            );\n        },\n        requestedLogoutAuth: () => {\n            dispatch(\n                RequestedLogoutAuth()\n            );\n        }\n    };\n}\n\nexport const SocialAuthButtonContainer = withRouter(connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(SocialAuthButton));\n","import React, { Component } from \"react\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\n\n/** Components */\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n// mdc-react input\nimport \"@material/react-text-field/dist/text-field.css\";\nimport TextField, { HelperText, Input } from \"@material/react-text-field\";\n// formik\nimport {\n    Formik,\n    Form,\n    Field,\n    ErrorMessage,\n    FormikValues,\n    FormikTouched,\n    FormikErrors,\n} from \"formik\";\n\nexport enum InputFieldType {\n    // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input\n    TEXT = \"text\",\n    PASSWORD = \"password\",\n    EMAIL = \"email\",\n    URL = \"url\",\n    DATE = \"date\"\n}\n\nexport class FormInputFieldProps {\n    constructor(\n        public fieldName: string = \"\",\n        public label: string = \"\",\n        public type?: InputFieldType,\n        public onTrailingIconSelect?: () => void\n    ) {}\n}\n\ninterface IFormInputFieldFactoryProps extends FormInputFieldProps {\n    /* formik */\n    onChange: (event: any) => void\n    onBlur: (event: any) => void\n    values: FormikValues\n    errors: FormikErrors<FormikValues>\n    touched: FormikTouched<FormikValues>\n}\n\nexport class FormInputFieldFactory extends Component<IFormInputFieldFactoryProps> {\n    render() {\n        return (\n            <div className=\"FormFieldFactory\">\n                <TextField\n                    label={this.props.label}\n                    onTrailingIconSelect={this.props.onTrailingIconSelect}\n                    // trailingIcon={<MaterialIcon role=\"button\" icon=\"clear\" />}\n                >\n                    <Input\n                        type={this.props.type || InputFieldType.TEXT}\n                        name={this.props.fieldName}\n                        inputType=\"input\"\n                        onChange={this.props.onChange}\n                        onBlur={this.props.onBlur}\n                        value={this.props.values[this.props.fieldName]}\n                    />\n                </TextField>\n                <ErrorMessage name={this.props.fieldName} />\n            </div>\n        );\n    }\n}","import React, { Component } from \"react\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\n\n/** Components */\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n// mdc-react input\nimport \"@material/react-text-field/dist/text-field.css\";\nimport TextField, { HelperText, Input } from \"@material/react-text-field\";\n// formik\nimport {\n    Formik,\n    Form,\n    Field,\n    ErrorMessage,\n    FormikValues,\n    FormikErrors,\n    FormikTouched\n} from \"formik\";\nimport { FormInputFieldFactory, FormInputFieldProps } from \"./form-field-factory\";\n\nexport enum ActionButtonType {\n    SUBMIT = \"submit\",\n    BUTTON = \"button\"\n}\n\nexport class FormActionButtonProps {\n    constructor(\n        public text: string = \"\", \n        public onClick?: (event: any) => void, \n        public type?: ActionButtonType\n    ) {}\n}\n\nexport interface IFormFactoryProps<DataModel> {\n    initialValues: DataModel;\n\n    validate: (values: FormikValues) => FormikErrors<FormikValues>;\n    onSubmit: (\n        values: FormikValues,\n        { setSubmitting }: { setSubmitting: Function }\n    ) => void;\n\n    actionButtonPropsList: Array<FormActionButtonProps>;\n    formInputFieldPropsList: Array<FormInputFieldProps>\n}\n\nexport class FormFactory<DataModel> extends Component<\n    IFormFactoryProps<DataModel>\n> {\n    render() {\n        return (\n            <div className=\"FormFactory\">\n                <Formik\n                    initialValues={this.props.initialValues}\n                    validate={this.props.validate}\n                    onSubmit={this.props.onSubmit}\n                >\n                    {({\n                        values,\n                        errors,\n                        touched,\n                        handleChange,\n                        handleBlur,\n                        handleSubmit,\n                        isSubmitting\n                    }: {\n                        values: FormikValues,\n                        touched: FormikTouched<FormikValues>,\n                        [props: string]: any\n                    }) => (\n                        <Form>\n                            {this.props.formInputFieldPropsList.map((formInputFieldProps: FormInputFieldProps, index) => (\n                                <FormInputFieldFactory \n                                    key={index}\n                                    {...formInputFieldProps} \n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    values={values}\n                                    errors={errors}\n                                    touched={touched}\n                                />\n                            ))}\n                            {this.props.actionButtonPropsList.map(\n                                (actionButtonProps: FormActionButtonProps, index) => (\n                                    <Button\n                                        key={index}\n                                        type={actionButtonProps.type || ActionButtonType.BUTTON}\n                                        disabled={isSubmitting}\n                                        unelevated\n                                        onClick={actionButtonProps.onClick}\n                                        children={actionButtonProps.text}\n                                    />\n                                )\n                            )}\n                        </Form>\n                    )}\n                </Formik>\n            </div>\n        );\n    }\n}\n","import React, { Component } from \"react\";\nimport { withRouter, RouteComponentProps, Redirect } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch, AnyAction } from \"redux\";\nimport { IRootState } from \"../../store/types\";\nimport { IUpdateAuthState } from \"../../store/auth/types\";\nimport { SuccessLoginAuth } from \"../../store/auth/actions\";\nimport { CompanyActions, Company } from \"../../store/data-model/company\";\nimport {\n    ApplicationActions,\n    Application\n} from \"../../store/data-model/application\";\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\n\n/** Components */\nimport { SocialAuthButtonContainer } from \"../../components/social-auth/social-auth-button\";\n// form\nimport {\n    FormFactory,\n    FormActionButtonProps,\n    IFormFactoryProps,\n    ActionButtonType\n} from \"../../components/form-factory/form-factory\";\nimport {\n    FormInputFieldFactory,\n    FormInputFieldProps,\n    InputFieldType\n} from \"../../components/form-factory/form-field-factory\";\nimport { ErrorMessage, FormikValues, FormikErrors } from \"formik\";\nimport { AuthenticationService } from \"../../utils/auth\";\nimport { RestApiService } from \"../../utils/rest-api\";\n\n\nlet styles = {\n    backgroundColor: \"purple\",\n    color: \"white\"\n};\n\ninterface ILandingPageProps extends RouteComponentProps {\n    auth: IUpdateAuthState;\n    loginSuccess: (userName: string, apiToken: string, avatarUrl: string) => void;\n    listApplication: () => void\n    listCompany: () => void\n}\n\nclass LandingPage extends Component<ILandingPageProps> {\n    formFactoryProps: any;\n\n    constructor(props: ILandingPageProps) {\n        super(props);\n        this.prepareLoginForm();\n    }\n\n    validateLoginForm = (values: FormikValues) => {\n        let errors: FormikErrors<any> = {};\n        return errors;\n    };\n\n    onSubmitLoginForm = (\n        values: FormikValues,\n        { setSubmitting }: { setSubmitting: Function }\n    ) => {\n        setSubmitting(false);\n        console.log(\"values=\", values);\n\n        // post to get login token\n\n        fetch(`${RestApiService.state.apiBaseUrl}api-token-auth/`, {\n            method: \"POST\",\n            mode: \"cors\",\n            credentials: \"omit\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(values)\n        })\n            .then(res => res.json())\n            .then(res => {\n                console.log(\"res=\", res);\n                // set login token\n                AuthenticationService.state.apiLoginToken = res.token;\n\n                // set redux auth store isLogin state --- have to write action and reducer.\n                this.props.loginSuccess(values.username, res.token, res.avatar_url);\n\n                // request com & app list (dispatch)\n                this.props.listApplication();\n                this.props.listCompany();\n            })\n            .catch(err => {\n                console.error(\"login error~~\", err);\n            });\n    };\n\n    prepareLoginForm = () => {\n        const initialValues = {\n            username: \"\",\n            password: \"\"\n        };\n\n        this.formFactoryProps = {\n            initialValues: initialValues,\n            validate: this.validateLoginForm,\n            onSubmit: this.onSubmitLoginForm,\n            formInputFieldPropsList: [\n                new FormInputFieldProps(\"username\", \"Username\"),\n                new FormInputFieldProps(\n                    \"password\",\n                    \"Password\",\n                    InputFieldType.PASSWORD\n                )\n            ],\n            actionButtonPropsList: [\n                new FormActionButtonProps(\"Login\", undefined, ActionButtonType.SUBMIT)\n            ]\n        };\n    };\n\n    render() {\n        return (\n            <div className=\"LandingPage\" style={styles}>\n                {/** redirect logged in user to private routes */\n                this.props.auth.isLogin && <Redirect to=\"/home/\" />}\n                <h1>Appl Tracky</h1>\n                <SocialAuthButtonContainer />\n                <h2>Or login locally:</h2>\n                <FormFactory {...this.formFactoryProps} />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: IRootState) => ({\n    auth: state.auth\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>) => {\n    // actionName = (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {\n        loginSuccess: (userName: string, apiToken: string, avatarUrl: string) =>\n            dispatch(SuccessLoginAuth(userName, \"\", apiToken, avatarUrl)),\n        listApplication: () =>\n            dispatch(\n                ApplicationActions[CrudType.LIST][\n                    RequestStatus.TRIGGERED\n                ].action(new Application({}))\n            ),\n        listCompany: () =>\n            dispatch(\n                CompanyActions[CrudType.LIST][\n                    RequestStatus.TRIGGERED\n                ].action(new Company({}))\n            )\n    };\n};\n\nexport const LandingPageContainer = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(LandingPage)\n);\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\n\n/** Redux */\nimport { Company } from \"../../store/data-model/company\";\n\n/** Components */\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc-react icon button\nimport '@material/react-icon-button/dist/icon-button.css';\nimport IconButton from '@material/react-icon-button';\n\ninterface ICompanyComponentProps {\n    company: Company;\n    onDeleteIconClicked?: (event: any) => void\n}\n\nexport class CompanyComponent extends Component<ICompanyComponentProps> {\n    render() {\n        const company = this.props.company;\n        return (\n            <div className=\"CompanyComponent\">\n                <p>\n                    <Link to={`/com-app/${company.uuid}/`}>\n                        {company.name}\n                    </Link>\n                    <IconButton onClick={this.props.onDeleteIconClicked}>\n                        <MaterialIcon hasRipple icon=\"delete\"/>\n                    </IconButton>\n                    <br />\n                    <span>\n                        <strong>UUID:</strong> {company.uuid}\n                    </span>\n                    <br />\n                    <span>\n                        <strong>HQ:</strong> {company.hq_location.full_address}\n                    </span>\n                    <br />\n                    <a target=\"_blank\" href={company.home_page.url}>\n                        <strong>Homepage</strong>\n                    </a>\n                    <br />\n                </p>\n            </div>\n        );\n    }\n}\n","import { RestApiReduxFactory } from \"../rest-api-redux-factory\";\nimport { BaseModel, IBaseModelProps, IRelationship } from \"./base-model\";\nimport { ApplicationStatusLink } from \"./application-status-link\";\n\ninterface IApplicationStatusProps {\n    text?: string;\n    application?: IRelationship;\n    applicationstatuslink_set?: Array<ApplicationStatusLink>\n    date?: string;\n    order?: number\n}\n\nexport class ApplicationStatus extends BaseModel {\n    public text: string;\n    public application: IRelationship;\n    public applicationstatuslink_set: Array<ApplicationStatusLink>\n    public date: string;\n    public order: number;\n\n    constructor({\n        text = \"\",\n        application = \"\",\n        applicationstatuslink_set = [],\n        date = \"\",\n        order = 0,\n        ...args\n    }: IApplicationStatusProps & IBaseModelProps) {\n        super(args);\n        this.text = text;\n        this.application = application;\n        this.applicationstatuslink_set = applicationstatuslink_set;\n        this.date = date;\n        this.order = order;\n    }\n}\n\nconst initialApplicationStatusInstance = new ApplicationStatus({});\nconst ApplicationStatusRestApiRedux = RestApiReduxFactory<ApplicationStatus>(\n    \"application-statuses\",\n    initialApplicationStatusInstance\n);\nexport const ApplicationStatusActions = ApplicationStatusRestApiRedux.actions;\nexport const ApplicationStatusReducer = ApplicationStatusRestApiRedux.storeReducer;\nexport const ApplicationStatusSagas = ApplicationStatusRestApiRedux.sagas;\n","import { RestApiReduxFactory } from \"../rest-api-redux-factory\";\nimport { BaseModel, IBaseModelProps, IRelationship } from \"./base-model\";\nimport { Link } from \"./link\";\n\ninterface IApplicationStatusLinkProps {\n    application_status?: IRelationship;\n    link?: Link;\n}\n\nexport class ApplicationStatusLink extends BaseModel {\n    public application_status: IRelationship;\n    public link: Link;\n\n    constructor({\n        application_status = \"\",\n        link = new Link({}),\n        ...args\n    }: IApplicationStatusLinkProps & IBaseModelProps) {\n        super(args);\n        this.application_status = application_status;\n        this.link = link;\n    }\n}","import React, { Component } from \"react\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\nimport { IObjectStore, IObjectAction } from \"../../store/rest-api-redux-factory\";\n// data models\nimport {\n    ApplicationStatus,\n    ApplicationStatusActions\n} from \"../../store/data-model/application-status\";\nimport {\n    ApplicationStatusLink,\n} from \"../../store/data-model/application-status-link\";\nimport { Application } from \"../../store/data-model/application\";\nimport { Link } from \"../../store/data-model/link\";\n\n/** Rest API */\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\n\n/** Components */\nimport {\n    FormFactory,\n    FormActionButtonProps,\n    IFormFactoryProps,\n    ActionButtonType\n} from \"../form-factory/form-factory\";\nimport {\n    FormInputFieldFactory,\n    FormInputFieldProps,\n    InputFieldType\n} from \"../form-factory/form-field-factory\";\nimport { ErrorMessage, FormikValues, FormikErrors } from \"formik\";\n\ninterface IApplicationStatusFormComponentProps extends RouteComponentProps {\n    onCancel: (event: any) => void;\n    onSubmitSuccess?: () => void;\n\n    /** redux */\n    application: Application;\n    applicationStatusStore: IObjectStore<ApplicationStatus>\n    createApplicationStatus: (\n        applicationStatusFormData: ApplicationStatus,\n        callback?: Function\n    ) => void;\n}\n\nclass ApplicationStatusFormComponent extends Component<\n    IApplicationStatusFormComponentProps\n> {\n    formFactoryProps: IFormFactoryProps<any>;\n\n    constructor(props: IApplicationStatusFormComponentProps) {\n        super(props);\n\n        const initialValues = {\n            application_status__text: \"\",\n            application_status__date: \"\",\n            application_status__link0__url: \"\",\n            application_status__link0__text: \"\",\n            application_status__link1__url: \"\",\n            application_status__link1__text: \"\",\n        }\n\n        this.formFactoryProps = {\n            initialValues: initialValues,\n            validate: this.validate,\n            onSubmit: this.onSubmit,\n            formInputFieldPropsList: [\n                new FormInputFieldProps(\"application_status__text\", \"Status*\"),\n                new FormInputFieldProps(\n                    \"application_status__date\",\n                    \"Date\",\n                    InputFieldType.DATE\n                ),\n                new FormInputFieldProps(\"application_status__link0__url\", \"Link 0 URL\"),\n                new FormInputFieldProps(\"application_status__link0__text\", \"Link 0 Text\"),\n                new FormInputFieldProps(\"application_status__link1__url\", \"Link 1 URL\"),\n                new FormInputFieldProps(\"application_status__link1__text\", \"Link 1 Text\"),\n            ],\n            actionButtonPropsList: [\n                new FormActionButtonProps(\n                    \"Add\",\n                    undefined,\n                    ActionButtonType.SUBMIT\n                ),\n                new FormActionButtonProps(\"Cancel\", this.props.onCancel)\n            ]\n        };\n    }\n\n    validate = (values: FormikValues) => {\n        let errors: FormikErrors<any> = {};\n        if (!values.application_status__text) {\n            errors.application_status__text = \"Required\";\n        }\n        if (!values.application_status__date) {\n            errors.application_status__date = \"Please give a valid date\";\n        }\n        return errors;\n    };\n\n    onSubmit = (\n        values: FormikValues,\n        { setSubmitting }: { setSubmitting: Function }\n    ) => {\n        setSubmitting(false);\n        console.log(\"values=\", values);\n\n        // prepare relational objects\n        const application__id = this.props.application.uuid;\n        if (!application__id) {\n            console.error(\n                \"Application object has no uuid so cannot submit form.\"\n            );\n            return;\n        }\n\n        // create link(s)\n        let links = [];\n        const indexes = [0, 1];\n        for (let index of indexes) {\n            if (values[`application_status__link${index}__url`]) {\n                links.push(new Link({\n                    url: values[`application_status__link${index}__url`],\n                    text: values[`application_status__link${index}__text`] || `Link of status`,\n                }))\n            }\n        }\n        // create main object for applicationStatusLink(s)\n        const applicationStatusLinks = links.map(link => {\n            return new ApplicationStatusLink({\n                link,\n            });\n        });\n\n        // create main object for application status\n        const applicationStatus = new ApplicationStatus({\n            text: values.application_status__text,\n            application: application__id,\n            date: values.application_status__date,\n            applicationstatuslink_set: applicationStatusLinks,\n        });\n\n        // dispatch for application status\n        this.props.createApplicationStatus(applicationStatus, () => {\n            this.props.onSubmitSuccess && this.props.onSubmitSuccess();\n        });\n    };\n\n    render() {\n        return (\n            <div className=\"ApplicationStatusFormComponent\">\n                <FormFactory {...this.formFactoryProps} />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    // prop: store.prop\n    applicationStatusStore: store.applicationStatus\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<ApplicationStatus> | IObjectAction<ApplicationStatusLink>>) => {\n    // actionName: (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {\n        createApplicationStatus: (\n            applicationStatusFormData: ApplicationStatus,\n            callback?: Function\n        ) =>\n            dispatch(\n                ApplicationStatusActions[CrudType.CREATE][\n                    RequestStatus.TRIGGERED\n                ].action(applicationStatusFormData, callback)\n            ),\n    };\n};\n\nexport const ApplicationStatusFormComponentContainer = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(ApplicationStatusFormComponent)\n);\n","import React, { Component } from \"react\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\nimport {\n    IObjectAction,\n    IObjectStore\n} from \"../../store/rest-api-redux-factory\";\n\n/** data model */\nimport { ApplicationStatus } from \"../../store/data-model/application-status\";\nimport { ApplicationStatusLink } from \"../../store/data-model/application-status-link\";\n\n/** Components */\n\ninterface IApplicationStatusComponentProps extends RouteComponentProps {\n    applicationStatus: ApplicationStatus;\n}\n\nclass ApplicationStatusComponent extends Component<\n    IApplicationStatusComponentProps\n> {\n    render() {\n        return (\n            <div className=\"ApplicationStatusComponent\">\n                <p>\n                    <span>Status: {this.props.applicationStatus.text}</span>\n                    <br />\n                    <span>{this.props.applicationStatus.date}</span>\n                    <br />\n                    {this.props.applicationStatus.applicationstatuslink_set.map(\n                        applicationStatusLink => {\n                            console.log(\"applicationStatusLinkID Obj=\", applicationStatusLink);\n                            return (\n                                (applicationStatusLink && applicationStatusLink.link) && <span key={applicationStatusLink.uuid}>\n                                    <a\n                                        href={applicationStatusLink.link.url}\n                                        target=\"_blank\"\n                                    >\n                                        {applicationStatusLink.link.text}\n                                    </a>{\" \"}\n                                    |{\" \"}\n                                </span>\n                            );\n                        }\n                    )}\n                </p>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    // prop: store.prop\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<any>>) => {\n    // actionName: (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {\n        // listObjectName: (callback?: Function) =>\n        // \tdispatch(\n        // \t\tObjectNameActions[CrudType.LIST][RequestStatus.TRIGGERED].action(\n        // \t\t\tnew ObjectName({}),\n        // \t\t\tcallback\n        // \t\t)\n        // \t),\n    };\n};\n\nexport const ApplicationStatusComponentContainer = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(ApplicationStatusComponent)\n);\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\n\n/** Redux */\nimport { Application } from \"../../store/data-model/application\";\n\n/** data model */\nimport { ApplicationStatus } from \"../../store/data-model/application-status\";\n\n/** Components */\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\nimport { ApplicationStatusFormComponentContainer } from \"../../components/application-status/application-status-form-component\";\nimport { ApplicationStatusComponentContainer } from \"../application-status/application-status-component\";\n\n/** Types */\ninterface IApplicationComponentProps {\n    application: Application;\n    applicationStatusList: Array<ApplicationStatus>;\n    isShowApplicationStatuses?: boolean\n}\n\ninterface IApplicationComponentState {\n    isApplicationStatusFormOpened: boolean;\n}\n\n/** Main Class */\nexport class ApplicationComponent extends Component<\n    IApplicationComponentProps,\n    IApplicationComponentState\n> {\n    state = {\n        isApplicationStatusFormOpened: false\n    };\n\n    render() {\n        const application = this.props.application;\n        return application.uuid ? (\n            <div className=\"ApplicationComponent\">\n                {/* application info */}\n                <p>\n                    <span>\n                        <strong>Position:</strong> {application.position_title}\n                    </span>\n                    <br />\n                    <span>Application UUID: {application.uuid}</span>\n                    <br />\n                    {application.job_description_page.url ? (\n                        <a\n                            target=\"_blank\"\n                            href={application.job_description_page.url}\n                        >\n                            <strong>JD Page</strong>\n                        </a>\n                    ) : (\n                        <span>JD Page</span>\n                    )}\n\n                    <br />\n                    {application.job_source.url ? (\n                        <a target=\"_blank\" href={application.job_source.url}>\n                            <strong>Job Source</strong>\n                        </a>\n                    ) : (\n                        <span>Job Source</span>\n                    )}\n                </p>\n\n                {/* application statuses list */}\n                {this.props.isShowApplicationStatuses && this.props.applicationStatusList.map(status => {\n                    return (\n                        <ApplicationStatusComponentContainer\n                            key={status.uuid}\n                            applicationStatus={status}\n                        />\n                    );\n                })}\n\n                {/* new application status form */}\n                {this.props.isShowApplicationStatuses && (!this.state.isApplicationStatusFormOpened ? (\n                    <Button\n                        onClick={clickEvent => {\n                            this.setState({\n                                isApplicationStatusFormOpened: true\n                            });\n                        }}\n                        unelevated\n                        icon={<MaterialIcon hasRipple icon=\"add\" />}\n                    >\n                        Add New Status\n                    </Button>\n                ) : (\n                    <div className=\"application-component__status-form\">\n                        <h3>\n                            Add new status to application for{\" \"}\n                            {this.props.application.position_title}{\" \"}\n                        </h3>\n                        <ApplicationStatusFormComponentContainer\n                            application={this.props.application}\n                            onCancel={clickEvent => {\n                                this.setState({\n                                    isApplicationStatusFormOpened: false\n                                });\n                            }}\n                            onSubmitSuccess={() => {\n                                this.setState({ isApplicationStatusFormOpened: false } )\n                            }}\n                        />\n                    </div>\n                ))}\n            </div>\n        ) : (\n            <span>application object has no uuid.</span>\n        );\n    }\n}\n","import React, { Component } from \"react\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\nimport { IObjectAction, IObjectStore } from \"../../store/rest-api-redux-factory\";\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\n// data models\nimport { CompanyActions, Company } from \"../../store/data-model/company\";\nimport {\n    ApplicationActions,\n    Application\n} from \"../../store/data-model/application\";\nimport { ApplicationStatus } from \"../../store/data-model/application-status\";\n\n/** Components */\n// objects\nimport { CompanyComponent } from \"../company/company-component\";\nimport { ApplicationComponent } from \"../application/application-component\";\n\n\ninterface ICompanyApplicationComponentProps {\n    company: Company;\n    applicationStore: IObjectStore<Application>\n    applicationStatusStore: IObjectStore<ApplicationStatus>\n    isShowApplicationStatuses?: boolean\n    deleteObject: (companyToDelete: Company, callback?: Function) => void\n}\n\nclass CompanyApplicationComponent extends Component<ICompanyApplicationComponentProps> {\n\n    onDeleteClick = (event: any) => {\n        if (this.props.company.uuid) {\n            this.props.deleteObject(this.props.company);\n        } else {\n            console.error(\"Attempted to delete but company obj has no uuid\");\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"CompanyApplicationContainer\">\n                <CompanyComponent company={this.props.company} onDeleteIconClicked={this.onDeleteClick} />\n                {Object.values(this.props.applicationStore.collection)\n                    .filter(\n                        application => application.user_company === this.props.company.uuid\n                    )\n                    .map(application => {\n                        const applicationStatusList = (\n                            this.props.isShowApplicationStatuses || false\n                        ) ? Object.values(this.props.applicationStatusStore.collection).filter(\n                            (applicationStatus) => applicationStatus.application === application.uuid\n                        ) : [];\n                        return (\n                            <ApplicationComponent\n                                key={application.uuid}\n                                application={application}\n                                applicationStatusList={applicationStatusList}\n                                isShowApplicationStatuses={this.props.isShowApplicationStatuses}\n                            />\n                        );\n                    })}\n                {(!this.props.isShowApplicationStatuses) && <hr />}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    // prop: store.prop\n    applicationStore: store.application,\n    applicationStatusStore: store.applicationStatus,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<Application>>) => {\n    // actionName: (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {\n        deleteObject: (companyToDelete: Company, callback?: Function) =>\n        \tdispatch(\n        \t\tCompanyActions[CrudType.DELETE][RequestStatus.TRIGGERED].action(\n        \t\t\tcompanyToDelete,\n        \t\t\tcallback\n        \t\t)\n        \t),\n    };\n};\n\nexport const CompanyApplicationComponentContainer = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(CompanyApplicationComponent);\n","import React, { Component } from \"react\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\nimport { IObjectAction, IObjectStore } from \"../../store/rest-api-redux-factory\";\n// data models\nimport { Company } from \"../../store/data-model/company\";\nimport { Application } from \"../../store/data-model/application\";\n\n/** Components */\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n// objects\nimport { CompanyApplicationComponentContainer } from \"../../components/company-application/company-application-component\";\n\ninterface IUserAppPageProps extends RouteComponentProps {\n    company: IObjectStore<Company>\n    application: IObjectStore<Application>\n}\n\nclass UserAppPage extends Component<IUserAppPageProps> {\n\n    componentDidMount() {\n    }\n\n    render() {\n        return (\n            <div className=\"UserAppPage\">\n                <h1>Your Applications</h1>\n                <Button\n                    onClick={()=>{ this.props.history.push(\"/add-com/\") }}\n                    unelevated\n                    icon={<MaterialIcon hasRipple icon=\"add\" />}\n                    children=\"Add Company\"\n                />\n                <br></br>\n                {\n                    (this.props.company.collection !== {}) && Object.values(this.props.company.collection).map((company) => {\n                        return (\n                            <CompanyApplicationComponentContainer key={company.uuid} company={company} />\n                        )\n                    })\n                }\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    // prop: store.prop\n    company: store.company,\n    application: store.application,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<{}>>) => {\n    // actionName = (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n\n    return {\n        // listObject: (callback?: Function) =>\n        //     dispatch(\n        //         ObjectActions[CrudType.LIST][RequestStatus.TRIGGERED].action(\n        //             new Object({}),\n        //             callback\n        //         )\n        //     ),\n    }\n};\n\nexport const UserAppPageContainer = withRouter(connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(UserAppPage));\n","import React, { Component } from \"react\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\nimport {\n    IObjectStore,\n    IObjectAction\n} from \"../../store/rest-api-redux-factory\";\n// data models\nimport {\n    Company,\n    CompanyActions\n} from \"../../store/data-model/company\";\nimport { Link } from \"../../store/data-model/link\";\nimport { Address } from \"../../store/data-model/address\";\n\n/** Components */\nimport {\n    FormFactory,\n    FormActionButtonProps,\n    IFormFactoryProps,\n    ActionButtonType,\n} from \"../form-factory/form-factory\";\nimport {\n    FormInputFieldFactory,\n    FormInputFieldProps,\n    InputFieldType\n} from \"../form-factory/form-field-factory\";\nimport { ErrorMessage, FormikValues, FormikErrors } from \"formik\";\n\ninterface ICompanyFormComponentProps {\n    onCancel: (event: any) => void;\n    onSubmitSuccess?: (event: any) => void;\n\n    /** redux */\n    createCompany: (\n        companyFormData: Company,\n        callback?: Function\n    ) => void;\n}\n\nclass CompanyFormComponent extends Component<\n    ICompanyFormComponentProps\n> {\n    formFactoryProps: IFormFactoryProps<any>;\n\n    constructor(props: ICompanyFormComponentProps) {\n        super(props);\n\n        // prepare for new company form\n        const initialValues = {\n            company__name: \"\",\n            company__hq_location__full_address: \"\",\n            company__home_page__url: \"\"\n        };\n\n        this.formFactoryProps = {\n            initialValues: initialValues,\n            validate: this.validateAppForm,\n            onSubmit: this.onSubmitAppForm,\n            formInputFieldPropsList: [\n                new FormInputFieldProps(\n                    \"company__name\",\n                    \"Company Name*\"\n                ),\n                new FormInputFieldProps(\n                    \"company__hq_location__full_address\",\n                    \"HQ Address or Location\"\n                ),\n                new FormInputFieldProps(\n                    \"company__home_page__url\",\n                    \"Company Home Page URL\"\n                )\n            ],\n            actionButtonPropsList: [\n                new FormActionButtonProps(\"Create\", undefined, ActionButtonType.SUBMIT),\n                new FormActionButtonProps(\"Cancel\", this.props.onCancel)\n            ]\n        };\n    }\n\n    validateAppForm = (values: FormikValues) => {\n        let errors: FormikErrors<any> = {};\n        if (!values.company__name) {\n            errors.company__name = \"Required\";\n        }\n        if (!/^https*\\:\\/\\/.+$/i.test(values.company__home_page__url)) {\n            errors.company__home_page__url =\n                \"Please start by http:// or https://\";\n        }\n        return errors;\n    };\n\n    onSubmitAppForm = (\n        values: FormikValues,\n        { setSubmitting }: { setSubmitting: Function }\n    ) => {\n        setSubmitting(false);\n        console.log(\"values=\", values);\n\n        // prep relationship object by data model\n        const hq_location = new Address({\n            full_address: values.company__hq_location__full_address,\n            place_name: `HQ of ${values.company__name}`\n        });\n        const home_page = new Link({\n            url: values.company__home_page__url,\n            text: `Home page of ${values.company__name}`\n        });\n        // create main object\n        const company = new Company({\n            name: values.company__name,\n            hq_location,\n            home_page\n        });\n\n        // dispatch\n        this.props.createCompany(company, this.props.onSubmitSuccess);\n    };\n\n    render() {\n        return (\n            <div className=\"CompanyFormComponent\">\n                <FormFactory {...this.formFactoryProps} />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<Company>>) => {\n    return {\n        createCompany: (\n            companyFormData: Company,\n            callback?: Function\n        ) =>\n            dispatch(\n                CompanyActions[CrudType.CREATE][\n                    RequestStatus.TRIGGERED\n                ].action(companyFormData, callback)\n            )\n    };\n};\n\nexport const CompanyFormComponentContainer = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(CompanyFormComponent);\n","import React, { Component } from \"react\";\n\n/** route */\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\n// REST API\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\nimport {\n    IObjectAction,\n    IObjectStore\n} from \"../../store/rest-api-redux-factory\";\nimport { CompanyActions, Company } from \"../../store/data-model/company\";\nimport { Address } from \"../../store/data-model/address\";\nimport { Link } from \"../../store/data-model/link\";\n\n/** Components */\n//mdc-react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc-react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n// mdc-react input\nimport \"@material/react-text-field/dist/text-field.css\";\nimport TextField, { HelperText, Input } from \"@material/react-text-field\";\n// formik\nimport { Formik, Form, Field } from \"formik\";\n// form factory\nimport {\n    FormFactory,\n    FormActionButtonProps,\n    IFormFactoryProps\n} from \"../../components/form-factory/form-factory\";\nimport {\n    FormInputFieldFactory,\n    FormInputFieldProps,\n    InputFieldType\n} from \"../../components/form-factory/form-field-factory\";\nimport { ErrorMessage, FormikValues, FormikErrors } from \"formik\";\nimport { CompanyFormComponentContainer } from \"../../components/company/company-form-component\";\n\ninterface IAddComPageProps extends RouteComponentProps {\n    company: IObjectStore<Company>;\n}\n\nclass AddComPage extends Component<IAddComPageProps> {\n    \n    render() {\n        return (\n            <div className=\"AddComPage\">\n                <h1>AddComPage Works!</h1>\n                <CompanyFormComponentContainer \n                    onSubmitSuccess={() => {\n                        if (this.props.company.lastChangedObjectID) {\n                            let newCompany = this.props.company.collection[\n                                this.props.company.lastChangedObjectID\n                            ];\n                            console.log(\"new company:\", newCompany);\n                            this.props.history.push(\n                                `/com-app/${newCompany.uuid}/`\n                            );\n                        } else {\n                            console.error(\"store has no lastChangedObjectID\");\n                        }\n                    }}\n                    onCancel={(event) => {\n                        this.props.history.push(`/`);\n                    }}\n                />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: IRootState) => ({\n    // prop: state.prop\n    company: state.company,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<Company>>) => {\n    // actionName = (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {\n    };\n};\n\nexport const AddComPageContainer = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(AddComPage)\n);\n","import React, { Component } from \"react\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\nimport {\n    IObjectStore,\n    IObjectAction\n} from \"../../store/rest-api-redux-factory\";\n// data models\nimport { Company } from \"../../store/data-model/company\";\nimport {\n    Application,\n    ApplicationActions\n} from \"../../store/data-model/application\";\nimport { Link } from \"../../store/data-model/link\";\n\n/** Components */\nimport {\n    FormFactory,\n    FormActionButtonProps,\n    IFormFactoryProps,\n    ActionButtonType,\n} from \"../form-factory/form-factory\";\nimport {\n    FormInputFieldFactory,\n    FormInputFieldProps,\n    InputFieldType\n} from \"../form-factory/form-field-factory\";\nimport { ErrorMessage, FormikValues, FormikErrors } from \"formik\";\n\ninterface IApplicationFormComponentProps {\n    company: Company;\n    onCancel: (event: any) => void;\n    onSubmitSuccess?: () => void;\n\n    /** redux */\n    application: IObjectStore<Application>;\n    createApplication: (\n        applicationFormData: Application,\n        callback?: Function\n    ) => void;\n}\n\nclass ApplicationFormComponent extends Component<\n    IApplicationFormComponentProps\n> {\n    formFactoryProps: IFormFactoryProps<any>;\n\n    constructor(props: IApplicationFormComponentProps) {\n        super(props);\n\n        // prepare for new application form\n        const initialValues = {\n            application__position_title: \"\",\n            application__job_description_page__url: \"\",\n            application__job_source__url: \"\"\n        };\n\n        this.formFactoryProps = {\n            initialValues: initialValues,\n            validate: this.validateAppForm,\n            onSubmit: this.onSubmitAppForm,\n            formInputFieldPropsList: [\n                new FormInputFieldProps(\n                    \"application__position_title\",\n                    \"Position Title*\"\n                ),\n                new FormInputFieldProps(\n                    \"application__job_description_page__url\",\n                    \"Job Description URL\"\n                ),\n                new FormInputFieldProps(\n                    \"application__job_source__url\",\n                    \"Job Source URL\"\n                )\n            ],\n            actionButtonPropsList: [\n                new FormActionButtonProps(\"Create\", undefined, ActionButtonType.SUBMIT),\n                new FormActionButtonProps(\"Cancel\", this.props.onCancel)\n            ]\n        };\n    }\n\n    validateAppForm = (values: FormikValues) => {\n        let errors: FormikErrors<any> = {};\n        if (!values.application__position_title) {\n            errors.application__position_title = \"Required\";\n        }\n        if (\n            !/^https*\\:\\/\\/.+$/i.test(\n                values.application__job_description_page__url\n            )\n        ) {\n            errors.application__job_description_page__url =\n                \"Please start by http:// or https://\";\n        }\n        if (!/^https*\\:\\/\\/.+$/i.test(values.application__job_source__url)) {\n            errors.application__job_source__url =\n                \"Please start by http:// or https://\";\n        }\n        return errors;\n    };\n\n    onSubmitAppForm = (\n        values: FormikValues,\n        { setSubmitting }: { setSubmitting: Function }\n    ) => {\n        setSubmitting(false);\n\n        // prep relationship object by data model\n        const job_description_page = new Link({\n            url: values.application__job_description_page__url,\n            text: `Job description URL for application ${\n                values.application__position_title\n            } at company ${this.props.company.name}`\n        });\n        const job_source = new Link({\n            url: values.application__job_source__url,\n            text: `Job source URL for application ${\n                values.application__position_title\n            } at company ${this.props.company.name}`\n        });\n        const application__user_company__id = this.props.company.uuid;\n\n        // create main object\n        const application = new Application({\n            position_title: values.application__position_title,\n            job_description_page,\n            job_source,\n            user_company: application__user_company__id\n        });\n\n        // dispatch\n        this.props.createApplication(application, () => {\n            // log print newly created application\n            if (this.props.application.lastChangedObjectID) {\n                const newApplication = this.props.application.collection[\n                    this.props.application.lastChangedObjectID\n                ];\n                console.log(\"new application:\", newApplication);\n                this.props.onSubmitSuccess && this.props.onSubmitSuccess();\n            } else {\n                console.error(\"application store has no lastChangedObjectID\");\n            }\n        });\n    };\n\n    render() {\n        return (\n            <div className=\"ApplicationFormComponent\">\n                <FormFactory {...this.formFactoryProps} />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    application: store.application\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<Application>>) => {\n    return {\n        createApplication: (\n            applicationFormData: Application,\n            callback?: Function\n        ) =>\n            dispatch(\n                ApplicationActions[CrudType.CREATE][\n                    RequestStatus.TRIGGERED\n                ].action(applicationFormData, callback)\n            )\n    };\n};\n\nexport const ApplicationFormComponentContainer = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ApplicationFormComponent);\n","import React, { Component } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { RouteComponentProps } from \"react-router\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store/types\";\n// rest api\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\nimport {\n    IObjectStore,\n    IObjectAction\n} from \"../../store/rest-api-redux-factory\";\nimport { Company } from \"../../store/data-model/company\";\nimport { Link } from \"../../store/data-model/link\";\nimport {\n    Application,\n    ApplicationActions\n} from \"../../store/data-model/application\";\n\n/** Components */\nimport { CompanyApplicationComponentContainer } from \"../../components/company-application/company-application-component\";\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n// mdc-react input\nimport \"@material/react-text-field/dist/text-field.css\";\nimport TextField, { HelperText, Input } from \"@material/react-text-field\";\n// form factory\nimport {\n    FormFactory,\n    FormActionButtonProps,\n    IFormFactoryProps\n} from \"../../components/form-factory/form-factory\";\n// formik\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\nimport {\n    FormInputFieldFactory,\n    FormInputFieldProps,\n    InputFieldType\n} from \"../../components/form-factory/form-field-factory\";\nimport { FormikValues, FormikErrors } from \"formik\";\nimport { ApplicationFormComponentContainer } from \"../../components/application/application-form-component\";\n\ninterface IUserComAppPageParams {\n    uuid: string;\n}\n\ninterface IUserComAppPageProps\n    extends RouteComponentProps<IUserComAppPageParams> {\n    company: IObjectStore<Company>;\n    application: IObjectStore<Application>;\n    createApplication: (\n        applicationFormData: Application,\n        callback?: Function\n    ) => void;\n}\n\ninterface IUserComAppPageState {\n    isApplicationFormOpened: boolean;\n    companyUuid: string;\n    company: Company;\n}\n\nclass UserComAppPage extends Component<\n    IUserComAppPageProps,\n    IUserComAppPageState\n> {\n    readonly state: IUserComAppPageState = {\n        isApplicationFormOpened: false,\n        companyUuid: \"\",\n        company: new Company({})\n    };\n\n    componentDidMount() {\n        let companyUuid = this.props.match.params.uuid;\n        console.log(\"mount, got uuid from route?\", companyUuid);\n        if (\n            this.props.company.collection &&\n            companyUuid in this.props.company.collection\n        ) {\n            this.setState({\n                companyUuid,\n                company: new Company(this.props.company.collection[companyUuid])\n            });\n        }\n    }\n\n    renderAll() {\n        if (!this.state.company.uuid) {\n            return;\n        }\n\n        return (\n            <div className=\"user-com-app-page-content\">\n                <Button\n                    onClick={clickEvent => {\n                        this.props.history.push(\"/\");\n                    }}\n                >\n                    Back\n                </Button>\n                <h1>{this.state.company.name}</h1>\n\n                {/* application form */}\n                {(!this.state.isApplicationFormOpened) ? (\n                    <Button\n                        onClick={clickEvent => {\n                            this.setState({ isApplicationFormOpened: true });\n                        }}\n                        unelevated\n                        icon={<MaterialIcon hasRipple icon=\"add\" />}\n                    >\n                        Add Application\n                    </Button>\n                ) : (\n                    <ApplicationFormComponentContainer\n                        onCancel={event => {\n                            console.log(\"onCancel clicked\");\n                            this.setState({ isApplicationFormOpened: false })\n                        }}\n                        onSubmitSuccess={() => this.setState({\n                            isApplicationFormOpened: false\n                        })}\n                        company={this.state.company}\n                    />\n                )}\n\n                <br />\n\n                {/* application list */}\n                {this.state.company.uuid && (\n                    <CompanyApplicationComponentContainer\n                        company={this.state.company}\n                        isShowApplicationStatuses\n                    />\n                )}\n            </div>\n        );\n    }\n\n    render() {\n        return (\n            <div className=\"UserComAppPage\">\n                {this.state.companyUuid &&\n                this.props.company.collection &&\n                this.state.companyUuid in this.props.company.collection ? (\n                    this.renderAll()\n                ) : this.state.companyUuid ? (\n                    <h1>No company found. Uuid={this.state.companyUuid}</h1>\n                ) : (\n                    <h1>Company uuid not specified</h1>\n                )}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => {\n    return {\n        // prop: store.prop\n        company: store.company,\n        application: store.application\n    };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<Application>>) => {\n    // actionName = (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {\n        createApplication: (\n            applicationFormData: Application,\n            callback?: Function\n        ) =>\n            dispatch(\n                ApplicationActions[CrudType.CREATE][\n                    RequestStatus.TRIGGERED\n                ].action(applicationFormData, callback)\n            )\n    };\n};\n\nexport const UserComAppPageContainer = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(UserComAppPage)\n);\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { IUpdateAuthState } from \"../../store/auth/types\";\n\ninterface UserInfoProps {\n    auth: IUpdateAuthState;\n}\n\nexport class UserInfo extends Component<UserInfoProps, any> {\n    render() {\n        return (\n            <div>\n                {this.props.auth.avatarUrl && (\n                    <div>\n                        <img src={this.props.auth.avatarUrl} />\n                    </div>\n                )}\n                <div>\n                    Logged in:{\" \"}\n                    {(this.props.auth.isLogin &&\n                        this.props.auth.isLogin.toString()) ||\n                        \"undefine\"}\n                </div>\n                <div>User Name: {this.props.auth.userName || \"(empty)\"}</div>\n                <div>\n                    Token (for API): {this.props.auth.apiToken || \"(empty)\"}\n                </div>\n            </div>\n        );\n    }\n}\n","import React, { Component } from \"react\";\n\n/** redux */\nimport { connect } from \"react-redux\";\nimport { IRootState } from \"../../store/types\";\nimport { IUpdateAuthState } from \"../../store/auth/types\";\n\n/** Routes & pages */\nimport { UserInfo } from \"../../components/user-info/user-info\";\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\n\n/** Components */\nimport { SocialAuthButtonContainer } from \"../../components/social-auth/social-auth-button\";\n\ninterface IUserProfilePageProps extends RouteComponentProps {\n    auth: IUpdateAuthState;\n}\n\nclass UserProfilePage extends Component<IUserProfilePageProps, any> {\n    render() {\n        return (\n            <div>\n                <h1>My Profile</h1>\n                <UserInfo auth={this.props.auth} />\n                <SocialAuthButtonContainer />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => {\n    return {\n        auth: store.auth\n    };\n};\n\nexport const UserProfilePageContainer = withRouter(connect(mapStateToProps)(UserProfilePage));\n","import React, { Component } from \"react\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { IRootState } from \"../../store/types\";\nimport { IUpdateAuthState } from \"../../store/auth/types\";\n\n/** Routing & Pages */\nimport {\n    Route,\n    Redirect,\n    Switch,\n    Link,\n    withRouter,\n    RouteComponentProps\n} from \"react-router-dom\";\n// pages\nimport { LandingPageContainer } from \"../landing-page/landing-page\";\nimport { UserAppPageContainer } from \"../user-app-page/user-app-page\";\nimport { AddComPageContainer } from \"../add-com-page/add-com-page\";\nimport { UserComAppPageContainer } from \"../user-com-app-page/user-com-app-page\";\nimport { UserProfilePageContainer } from \"../user-profile-page/user-profile-page\";\n\n/** MDC React */\nimport TopAppBar, { TopAppBarFixedAdjust } from \"@material/react-top-app-bar\";\nimport \"@material/react-top-app-bar/dist/top-app-bar.css\";\n// import '@material/react-material-icon/dist/material-icon.css';\nimport MaterialIcon from \"@material/react-material-icon\";\n// style\nimport \"@material/react-ripple/dist/ripple.css\";\n\n// import {withRipple} from '@material/react-ripple';\n\ninterface IPageRoutesProps extends RouteComponentProps {\n    auth: IUpdateAuthState;\n}\n\nclass PageRoutes extends Component<IPageRoutesProps> {\n    render() {\n        return (\n            <div className=\"PageRoutesContainer\">\n                {this.props.location.pathname === \"/\" ? (\n                    <Route path=\"/\" exact component={LandingPageContainer} />\n                ) : (\n                    <div className=\"PrivateRoutesContainer\">\n\n                        {\n                            /** protect private routes */\n                            (!this.props.auth.isLogin) && (\n                                <Redirect to=\"/\" />\n                            )\n                        }\n\n                        <TopAppBar\n                            title=\"Appl Tracky\"\n                            actionItems={[\n                                <Link to=\"/home/\">\n                                    <MaterialIcon\n                                        hasRipple\n                                        key=\"itemHome\"\n                                        icon=\"home\"\n                                    />\n                                </Link>,\n                                <Link to=\"/profile/\">\n                                    <MaterialIcon\n                                        hasRipple\n                                        key=\"itemProfile\"\n                                        icon=\"account_circle\"\n                                    />\n                                </Link>\n                            ]}\n                        />\n                        <TopAppBarFixedAdjust>\n                            <Switch>\n                                <Route\n                                    path=\"/home/\"\n                                    component={UserAppPageContainer}\n                                />\n                                <Route\n                                    path=\"/add-com/\"\n                                    component={AddComPageContainer}\n                                />\n                                <Route\n                                    path=\"/com-app/:uuid/\"\n                                    component={UserComAppPageContainer}\n                                />\n                                <Route\n                                    path=\"/com-app/\"\n                                    component={UserComAppPageContainer}\n                                />\n                                <Route\n                                    path=\"/profile/\"\n                                    component={UserProfilePageContainer}\n                                />\n                                {/** add more page routes here */}\n                            </Switch>\n                        </TopAppBarFixedAdjust>\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    auth: store.auth\n});\n\nconst mapDispatchToProps = {};\n\nexport const PageRoutesContainer = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(PageRoutes)\n);\n","/** React core */\nimport React, { Component } from \"react\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { IRootState } from \"./store/types\";\n\n/** Routes & pages */\nimport { PageRoutesContainer } from \"./pages/page-routes/page-routes\";\n\n/** Locals */\nimport \"./App.css\";\n\ninterface IAppProps {}\n\nclass App extends Component<IAppProps> {\n    componentDidMount() {}\n\n    render() {\n        return (\n            <div className=\"App\">\n                <PageRoutesContainer />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => {\n    return {};\n};\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { Action } from \"redux\";\nimport { IRootState } from \"./types\";\n\nexport enum RootActionNames {\n    ResetAllStore = \"RESET_ALL_STORE\"\n}\n\nexport const resetAllStoreAction = () => {\n    return {\n        type: RootActionNames.ResetAllStore,\n    }\n}","import { Reducer, Action } from 'redux';\n\nimport { \n    /** store */\n    IUpdateAuthState, \n    /** action */\n    AuthActionNames, TAuthActions \n} from \"./types\";\n\nimport { RequestStatus } from \"../../utils/rest-api\";\n\nconst initialAuthState: IUpdateAuthState = {\n    requestStatus: RequestStatus.SUCCESS,\n    isLogin: false,\n    socialAuthToken: \"\",\n    apiToken: \"\",\n    userName: \"\",\n    expireDateTime: \"\",\n    avatarUrl: \"\",\n}\n\n// authStore will be stored as a sub-entry in global store; this is defined in ./store/types.ts\nexport const authReducer: Reducer<IUpdateAuthState> = (authStore = initialAuthState, action: Action)  => {\n    // add reducer for new actions here\n    // ...\n\n    const authAction = action as TAuthActions;\n\n    return {\n        ...authStore,\n        ...authAction.payload\n    }\n}","/** redux */\nimport {\n    AuthActionNames,\n    IRequestedLoginAuthAction,\n    IRequestedLogoutAuthAction\n} from \"../../store/auth/types\";\nimport {\n    SuccessLoginAuth,\n    SuccessLogoutAuth,\n    FailureAuth\n} from \"../../store/auth/actions\";\nimport { resetAllStoreAction } from \"../../store/actions\";\nimport { CompanyActions, Company } from \"../../store/data-model/company\";\nimport { ApplicationActions, Application } from \"../../store/data-model/application\";\nimport { ApplicationStatusActions, ApplicationStatus } from \"../../store/data-model/application-status\";\n// redux-saga\nimport { takeEvery, call, put } from \"redux-saga/effects\";\n\n/** router */\nimport { push } from \"connected-react-router\";\n\n/** api */\nimport { AuthenticationService } from \"../../utils/auth\";\nimport { RestApiService, CrudType, RequestStatus } from \"../../utils/rest-api\";\n\nfunction* authLoginSagaHandler(\n    requestedLoginAuthAction: IRequestedLoginAuthAction\n) {\n    // RequestAuth action triggered & injecting side effects here...\n    console.log(\"auth saga: initialize\");\n    const { socialAuthToken } = requestedLoginAuthAction.payload;\n    console.log(\"auth saga: request fired\");\n    try {\n        // TODO: define interface typing for api response\n        const jsonResponse = yield call(AuthenticationService.serverLogin, socialAuthToken);\n        console.log(\"auth saga: server login using code from social button. server jsonRes=\", jsonResponse);\n        AuthenticationService.state.apiLoginToken = jsonResponse.token;\n        yield put(SuccessLoginAuth(\n            jsonResponse.email, \"\", \n            jsonResponse.token, \n            jsonResponse.avatar_url\n        ));\n        // yield put(push(\"/home/\"));\n\n        // initial fetch user data\n        yield put(ApplicationActions[CrudType.LIST][RequestStatus.TRIGGERED].action(new Application({})))\n        yield put(CompanyActions[CrudType.LIST][RequestStatus.TRIGGERED].action(new Company({})))\n        yield put(ApplicationStatusActions[CrudType.LIST][RequestStatus.TRIGGERED].action(new ApplicationStatus({})))\n    } catch (error) {\n        console.warn(\"auth saga: error\")\n        yield put(FailureAuth(error));\n        return;\n    }\n}\n\nexport function* authLoginSaga() {\n    yield takeEvery(AuthActionNames.REQUESTED_LOGIN_AUTH, authLoginSagaHandler);\n}\n\nfunction* authLogoutSagaHandler(\n    requestedLogoutAuthAction: IRequestedLogoutAuthAction\n) {\n    // RequestAuth action triggered & injecting side effects here...\n    console.log(\"auth logout saga: fired\");\n    try {\n        yield call(AuthenticationService.serverLogout);\n\n        // clear all store\n    } catch (error) {\n        yield put(FailureAuth(error));\n        return;\n    }\n\n    console.log(\"auth logout saga: navigating\");\n    yield put(SuccessLogoutAuth());\n    // yield put(push(\"/\"));\n\n    // clear all redux store\n    yield put(resetAllStoreAction());\n}\n\nexport function* authLogoutSaga() {\n    yield takeEvery(\n        AuthActionNames.REQUESTED_LOGOUT_AUTH,\n        authLogoutSagaHandler\n    );\n}\n\n// add new saga handler here && a `takeEvery` saga.\n// ...","import createSagaMiddleware from 'redux-saga';\nimport { all } from \"redux-saga/effects\";\nimport { authLoginSaga, authLogoutSaga } from \"./auth/sagas\";\n// rest api\nimport { CompanySagas } from \"../store/data-model/company\";\nimport { AddressSagas } from \"../store/data-model/address\";\nimport { ApplicationSagas } from \"../store/data-model/application\";\nimport { ApplicationStatusSagas } from \"../store/data-model/application-status\";\n\n/** setup saga */\nconst sagaMiddleware = createSagaMiddleware();\n\nexport {\n    sagaMiddleware\n};\n\nconst rootSaga = function*() {\n    yield all([\n        authLoginSaga(),\n        authLogoutSaga(),\n        ...CompanySagas.map((saga) => saga()),\n        ...AddressSagas.map((saga) => saga()),\n        ...ApplicationSagas.map((saga) => saga()),\n        ...ApplicationStatusSagas.map((saga) => saga()),\n        // add new saga here\n        // ...\n    ]);\n};\n\nexport const runSagaMiddleaware = () => {\n    sagaMiddleware.run(rootSaga)\n}\n\n","/** redux */\nimport { combineReducers, Reducer, AnyAction, Action } from \"redux\";\nimport { connectRouter, LocationChangeAction } from 'connected-react-router';\nimport { authReducer } from \"./auth/reducers\";\nimport { TAuthActions } from \"./auth/types\";\nimport { IRootState } from \"./types\";\nimport { RootActionNames } from \"./actions\";\n// rest api\nimport { CompanyReducer } from \"./data-model/company\";\nimport { AddressReducer } from \"./data-model/address\";\nimport { ApplicationReducer } from \"./data-model/application\";\nimport { ApplicationStatusReducer } from \"./data-model/application-status\";\n\n/** router */\nimport { History } from \"history\";\n\n// root reducer with router state\nexport const createRootReducer = (history: History<any>): Reducer<IRootState> => {\n    // return combineReducers<IRootState>({\n    //     router: connectRouter(history),\n    \n    //     // add more reducers here\n    //     auth: authReducer,\n    //     company: CompanyReducer,\n    //     address: AddressReducer,\n    //     application: ApplicationReducer,\n    //     // ...\n    // })\n\n    const rootReducer: Reducer<IRootState> = (rootState: IRootState | undefined, action: Action): IRootState  => {\n\n        let rootStateChecked: any = {}\n        if (!rootState) {\n            rootStateChecked.router = undefined;\n            rootStateChecked.auth = undefined;\n            rootStateChecked.company = undefined;\n            rootStateChecked.address = undefined;\n            rootStateChecked.application = undefined;\n            rootStateChecked.applicationStatus = undefined;\n            // add initial state for new sub-store here\n            // ...\n        } else if (action.type === RootActionNames.ResetAllStore) {\n            rootStateChecked = {\n                router: rootState.router\n            }\n        } else {\n            rootStateChecked = rootState;\n        }\n\n        console.log(\"beforeRootStore\", rootState);\n\n        const afterStore  = { \n            ...rootState,\n            router: connectRouter(history)(rootStateChecked.router, action as LocationChangeAction),\n            auth: authReducer(rootStateChecked.auth, action),\n            company: CompanyReducer(rootStateChecked.company, action),\n            address: AddressReducer(rootStateChecked.address, action),\n            application: ApplicationReducer(rootStateChecked.application, action),\n            applicationStatus: ApplicationStatusReducer(rootStateChecked.applicationStatus, action),\n            // add new reducer here\n            // ...\n        }\n        console.log(\"afterRootStore\", afterStore);\n\n        return afterStore;\n    }\n\n    return rootReducer;\n}","/** redux */\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport { IRootState } from \"../store/types\";\nimport { createRootReducer } from \"../store/reducers\";\n\n/** router */\nimport { createBrowserHistory } from 'history';\nimport { routerMiddleware } from 'connected-react-router';\n\n/** middleware */\n// saga\nimport { sagaMiddleware, runSagaMiddleaware } from \"../sagas/saga-config\";\n\n\n\nconst history = createBrowserHistory({\n    basename: (process.env.NODE_ENV === 'development') ?  \n    ``\n    :\n    `/appl-tracky-spa`\n});\n\nconst preloadedState = {\n\n};\n\n// generate the singleton store from redux\nexport const store = createStore<IRootState, any, any, any>(\n    createRootReducer(history),\n    preloadedState,\n    compose(\n        applyMiddleware(\n            routerMiddleware(history),\n            sagaMiddleware,\n            // ... add other middlewares ...\n        )\n    )\n);\n\n/** after mount saga middlewares to store, run them */\nrunSagaMiddleaware();\n\nexport {\n    history\n};","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n/** redux */\nimport { Provider } from \"react-redux\";\nimport { Store } from \"redux\";\n/** root store */\nimport { IRootState } from \"./store/types\";\nimport { store } from \"./store/store-config\";\n\n/** router */\nimport { ConnectedRouter } from \"connected-react-router\";\nimport { history } from \"./store/store-config\";\n\n/** types */\ninterface IRootProps {\n    store: Store<IRootState>;\n}\n\n/** root component - just to wrap the App into redux store */\nconst Root: React.SFC<IRootProps> = props => {\n    return (\n        <Provider store={props.store}>\n            <ConnectedRouter history={history} >\n                <App />\n            </ConnectedRouter>\n        </Provider>\n    );\n};\n\nReactDOM.render(<Root store={store} />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}