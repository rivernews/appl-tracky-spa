{"version":3,"sources":["components/application/application-component.module.css","components/company/company-component.module.css","components/form-factory/form-input-field/form-input-field.module.css","components/tab/tab-content.module.css","components/tab/tab-transition-slide-left.module.css","components/tab/tab-transition-slide-right.module.css","components/tab/tab-container.module.css","components/company/company-list-item.module.css","pages/user-com-app-page/user-com-app-page.module.css","pages/page-routes/page-routes-transition.module.css","components/app-top-bar/app-top-bar.module.css","state-management/types/auth-types.ts","utils/rest-api.ts","data-model/base-model.ts","utils/authentication.ts","state-management/action-creators/auth-actions.ts","components/login/social-auth-login-button.tsx","components/login/social-auth-logout-button.tsx","components/login/social-auth-button.tsx","components/form-factory/form-base-field/form-base-field-meta.tsx","pages/landing-page/landing-page.tsx","components/form-factory/form-input-field/form-input-field.tsx","components/form-factory/form-factory.tsx","components/form-factory/form-input-field/form-input-field-meta.tsx","data-model/label.ts","components/login/local-login-form.tsx","pages/login-page/local-login-page.tsx","utils/utilities.ts","data-model/address.ts","data-model/link.ts","data-model/company/company.ts","components/tab/tab-container.tsx","components/tab/tab-content.tsx","state-management/types/select-company-types.ts","state-management/action-creators/select-company-actions.ts","state-management/action-creators/root-actions.ts","components/company/company-list-item-checkbox.tsx","components/company/company-list-item.tsx","pages/user-app-page/user-app-page.tsx","state-management/action-creators/action-creator-factory.ts","components/form-factory/form-base-field/form-base-field.tsx","components/form-factory/form-link-field/form-link-field.tsx","components/form-factory/form-link-field/form-link-field-component.tsx","components/form-factory/form-link-field/form-link-field-meta.tsx","components/form-factory/form-address-field/form-address-field.tsx","components/form-factory/form-address-field/form-address-field-component.tsx","components/form-factory/form-address-field/form-address-field-meta.tsx","components/label/label-group-component.tsx","components/form-factory/form-label-field/form-label-field.tsx","components/form-factory/form-label-field/form-label-field-meta.tsx","components/company/company-form-component.tsx","pages/add-com-page/add-com-page.tsx","data-model/application-status/application-status.ts","data-model/application-status-link.ts","components/form-factory/form-application-status-link-field/form-application-status-link-field.tsx","components/form-factory/form-application-status-link-field/form-application-status-link-field-component.tsx","components/form-factory/form-application-status-link-field/form-application-status-link-field-meta.tsx","components/application-status/application-status-form-component.tsx","components/application-status/application-status-component.tsx","data-model/application/application.ts","components/form-factory/form-rich-text-field/form-rich-text-field.tsx","components/form-factory/form-rich-text-field/form-rich-text-field-meta.tsx","components/application/application-form-component.tsx","components/application/application-component.tsx","components/company/company-component.tsx","pages/user-com-app-page/user-com-app-page.tsx","components/user-info/user-info.tsx","components/login/local-logout-button.tsx","pages/user-profile-page/user-profile-page.tsx","components/themes.tsx","components/app-top-bar/select-company-menu.tsx","components/app-top-bar/app-top-bar.tsx","pages/page-routes/page-routes.tsx","App.tsx","serviceWorker.ts","state-management/reducers/auth-reducers.ts","state-management/reducers/reducer-factory.ts","state-management/reducers/select-company-reducers.ts","state-management/reducers/root-reducers.ts","state-management/sagas/auth-sagas.ts","state-management/sagas/saga-factory.ts","state-management/sagas/company-custom-saga.ts","data-model/application-status/application-status-normalize-schema.ts","data-model/application/application-normalize-schema.ts","data-model/company/company-normalize-schema.ts","state-management/sagas/applicaiton-custom-saga.ts","state-management/sagas/application-status-custom-saga.ts","state-management/sagas/select-company-saga.ts","state-management/sagas/root-saga.ts","state-management/store/store-config.ts","index.tsx","pages/landing-page/landing-page.module.css","pages/user-app-page/user-app-page.module.css"],"names":["module","exports","RequestedLoginMode","AuthActionNames","RequestStatus","CrudType","RestMethod","AuthActionNamesValue","Object","values","BaseModel","uuid","created_at","modified_at","normalizeSchemaShape","objectNamePlural","this","schema","Entity","idAttribute","normalizeSchema","getNormalizeSchema","Array","Yup","shape","RefreshObject","token","args","LoginObject","code","provider","redirect_uri","AuthenticationService","state","clientID","redirectUri","apiSocialLoginUrl","apiLocalLoginUrl","apiLoginRefreshUrl","socialAuthProvider","apiLoginToken","serverLogin","loginMode","params","a","PREFILL","sessionAuthState","localStorage","getItem","JSON","parse","isLogin","apiCallToken","apiToken","refreshToken","refreshTokenReponse","email","userName","avatar_url","avatarUrl","isLocal","SOCIAL_AUTH","loginObject","socialAuthToken","RestApiService","post","data","endpointUrl","resp","Error","LOCAL","fetch","apiBaseUrl","method","mode","credentials","headers","body","stringify","username","password","res","ok","statusText","json","parsedJsonResponse","refreshObject","serverLogout","CrudMapToRest","crudType","CREATE","BATCHCREATE","POST","READ","LIST","GET","UPDATE","BATCHUPDATE","PATCH","DELETE","IsSingleRestApiResponseTypeGuard","response","undefined","userEmail","userFirstName","userLastName","objectID","get","absoluteUrl","objectName","getRelativeUrl","setApiAuthHeaders","then","patch","delete","Authorization","RequestedLoginAuth","onCompleteCallback","type","REQUESTED_LOGIN_AUTH","payload","requestStatus","REQUESTING","RequestedLogoutAuth","REQUESTED_LOGOUT_AUTH","SuccessLogoutAuth","SUCCESS_AUTH","SUCCESS","expireDateTime","FailureAuth","error","FAILURE_AUTH","FAILURE","SocialAuthLoginButton","onLoginButtonClicked","clickEvent","renderProps","onClick","onAuthSuccess","authResponse","props","onSuccess","onAuthFailure","onFailure","className","render","unelevated","icon","faGoogle","disabled","clientId","responseType","cookiePolicy","hostedDomain","Component","SocialAuthLogoutButton","hasRipple","onLogoutSuccess","SocialAuthButton","onSocialLoginSuccess","googleOauthResponse","setState","requestedLoginAuth","onSocialLoginFailure","console","onSocialLogoutSuccess","requestedLogoutAuth","auth","InputFieldType","SocialAuthButtonContainer","withRouter","connect","store","dispatch","LandingPage","formFactoryProps","onStaffLoginClick","history","push","styles","primaryPageContent","headlineContent","headlineText","headlineSubText","loginActionsContainer","divider","sideNoteContent","href","target","LandingPageContainer","FormInputField","name","fieldName","field","form","TextField","label","onTrailingIconSelect","trailingIcon","role","TEXT","inputType","autoFocus","ActionButtonType","FormBaseFieldMeta","model","formField","isDynamic","dynamicLimit","getInstanceDataFromFormikValues","isArray","alert","map","instanceData","value","FormInputFieldMeta","labelTypes","TabNames","FormActionButtonProps","text","FormFactory","initialInstance","validationSchema","onSubmit","setSubmitting","formFieldPropsList","fieldProps","getInstance","createInstanceTriggerAction","updateInstanceTriggerAction","instance","enforcedInstanceData","onSubmitSuccess","initialValues","isSubmitting","submitForm","formFieldMeta","index","key","formikValues","onSaveKeystroke","actionButtonPropsList","actionButtonProps","BUTTON","children","LoginForm","PASSWORD","SUBMIT","onCancel","onSubmitLoginForm","required","LocalLoginPage","onLoginFormCancel","goBack","onLoginFormSubmit","LocalLoginPageContainer","Utilities","rawText","toLowerCase","trim","Address","place_name","country","city","street","full_address","zipcode","max","Link","user","url","order","default","when","is","Label","TARGET","color","SlideDirection","Company","labels","hq_location","home_page","ratings","applications","companyObject","length","labelTypesMapToCompanyGroupTypes","APPLIED","INTERVIEWING","ARCHIVED","TabContent","SelectCompanyActionNames","TabContainer","activeIndex","tabContentSlideDirection","RIGHTWARD","handleActiveIndexUpdate","LEFTWARD","tabContents","tabContentList","tabBar","tabContent","tabIndex","child","CSSTransition","classNames","rightSlideStyles","leftSlideStyles","in","timeout","unmountOnExit","RootActionNames","SetApplyAllSelectCompanyRequestStatus","SET_REQUEST_STATUS","CompanyListItemCheckBox","company","companyId","useDispatch","selectCompanyCollection","useSelector","selectCompany","onCheckBoxChange","useCallback","event","checked","companyStatus","ADD_SELECT_COMPANY","AddSelectCompany","REMOVE_SELECT_COMPANY","RemoveSelectCompany","Checkbox","edge","has","onChange","CompanyListItem","companyCardContent","Typography","variant","duration","width","nonInteractive","application","primaryText","position_title","ListItemSecondaryAction","UserAppPage","searchText","isFiltering","filteredCompanyList","activeTabIndex","onCompanyClick","setTimeout","searchFieldTextIsEmpty","normalizeText","filterCompanyByName","filteringName","allCompanies","collection","filter","includes","onSearchFieldChange","currentTarget","onSearchFieldKeyDown","onSearchFieldClear","handleActiveTabIndexUpdate","displayingCompanies","from","UserAppPageHeader","allCompanyTab","companyListHeader","searchField","outlined","leadingIcon","onKeyDown","user_company","groupCompanyTabs","labelText","keys","companyRef","applicationUuid","UserAppPageContainer","reduce","accumulated","RestApiActionCreatorsFactory","crudKeywords","ObjectRestApiActions","crudKeyword","actionTypeName","action","toUpperCase","TRIGGERED","objectClassInstance","successCallback","failureCallback","finalCallback","triggerActionOptions","formData","jsonResponse","triggerFormData","newState","results","CompanyActionCreators","GroupedCompanyActionCreators","companyGroupText","ApplicationActionCreators","ApplicationStatusActionCreators","FormBaseDynamicFieldControlls","window","confirm","formikArrayHelpers","remove","BaseDynamicFieldAddButton","withFormBaseField","FormFieldComponent","FormLinkField","textInputFieldMeta","urlInputFieldMeta","FormLinkFieldMeta","FormAddressField","fullAddressInputFieldMeta","placeNameInputFieldMeta","FormAddressFieldMeta","LabelGroupComponentContainer","useState","selectedLabels","setSelectedLabels","useEffect","titleText","choice","selectedChipIds","handleSelect","id","FormLabelField","selectedLabelText","setFieldValue","FormLabelFieldMeta","CompanyFormComponent","createCompany","updateCompany","CompanyFormComponentContainer","companyFormData","getLabel","updateFromCompany","updateFromObject","AddComPage","match","replace","AddComPageContainer","ApplicationStatus","applicationstatuslink_set","date","localeNowDateString","now","Date","UTC","getUTCFullYear","getUTCMonth","getDate","toISOString","split","ApplicationStatusLink","application_status","link","FormApplicationStatusLinkField","linkFieldProps","FormApplicationStatusLinkFieldMeta","ApplicationStatusFormComponent","DATE","applicationStatus","createApplicationStatus","updateApplicationStatus","ApplicationStatusFormComponentContainer","applicationStatusStore","applicationStatusFormData","ApplicationStatusComponent","isFormOpened","renderDisplay","deleteApplicationStatus","applicationStatusLink","renderFormController","isOnlyForm","ApplicationStatusComponentContainer","applicationStatusToDelete","callback","Application","job_description_page","job_source","notes","statuses","FormRichTextField","editor","BalloonEditor","getData","FormRichTextFieldMeta","ApplicationFormComponent","createApplication","updateApplication","ApplicationFormComponentContainer","applicationStore","applicationFormData","ApplicationComponent","renderApplicationFormController","renderApplicationDisplay","applicationStatusList","isLink","disableApplicationActionButtons","deleteApplication","applicationCard","applicationCardContent","ApplicationComponentController","applicationToDelete","CompanyComponent","companyTitleContainer","actionButtonsDisabled","onEditIconClicked","onDeleteIconClicked","companyTitleCaption","UserComAppPage","goBackToCompanyListPage","onCompanyDelete","companyStore","deleteCompany","onCompanyEdit","UserCompanyPage","_","applicationRef","applicationsIndex","statusUuid","renderPage","someStillRequesting","renderController","UserComAppPageContainer","accumulate","companyToDelete","companyToUpdate","UserInfo","toString","LocalLogoutButton","UserProfilePage","localLogoutButton","UserProfilePageContainer","lightTheme","createMuiTheme","darkTheme","palette","CompanyStatusDropdownListItem","onSelect","onDropdownListItemSelected","status","SET_DESTINATION_STATUS","MenuItem","SelectCompanyMenu","selectCompanyApplyRequestStatus","stagedStatus","destinationStatus","React","anchorEl","setAnchorEl","onDropdownListClick","onDropdownListSelect","onApply","APPLY_ALL_CHANGES","CANCEL_ALL","theme","size","Button","aria-controls","aria-haspopup","Menu","keepMounted","open","Boolean","AppTopBar","location","useLocation","useHistory","goHome","pathname","align","topAppBarTitle","navIcon","to","faGithub","style","src","alt","publicPageSet","Set","PageRoutes","goInternal","search","nextUrl","URLSearchParams","isCurrentPublicPage","path","exact","component","indeterminate","buffer","bufferingDots","TransitionGroup","pageTransitionStyles","PageRoutesContainer","App","retrieveLoginAuth","CssBaseline","hostname","initialAuthState","authReducer","authStore","authAction","setItem","RestApiReducerFactory","initialState","objectStore","objectAction","newObject","newObjects","newObjectsCollection","object","resObjects","afterStore","updatedObject","updatedObjects","updatedObjectsCollection","targetDeleteUuids","targetDeleteObjectList","targetDeleteObject","omit","initialSelectCompanyState","Map","selectCompanyReducer","selectCompanyAction","isFound","CompanyReducer","GroupCompanyReducer","ApplicationReducer","ApplicationStatusReducer","authLoginSagaHandler","authLoginSaga","authLogoutSagaHandler","authLogoutSaga","requestedLoginAuthAction","call","put","warn","takeEvery","requestedLogoutAuthAction","ResetAllStore","RestApiSagaFactory","sagaFactoryOptions","sagaHandler","triggerAction","next","normalizeData","relationalNormalizeData","normalizeManifest","normalizeObjectEntityKey","objectEntityKey","dataSource","normalizeDataSourceSchema","listSchema","normalizeDataSource","normalize","entities","relationalEntityReduxActionsMap","hasOwnProperty","relationalEntityKey","dispatchResponseData","relationalActions","overrideCrudSuccessSagaHandler","dispatchDeleteData","doneCrudSuccessSagaHandler","saga","actionChannel","objectTriggerActionChannel","take","objectTriggerAction","companyDoneUpdateSuccessSagaHandler","destinationCompany","destinationLabelText","currentCompany","currentLabelText","destinationCreateAction","currentDeleteAction","companyOverrideDeleteSuccessSagaHandler","currentAction","select","getApplicationStore","deleteStatusUuids","flatMap","groupedCompanyListSuccessSagaHandler","fetchedCompanyList","fetchedCompanyListUuids","ApplicationStatusNormalizeSchema","ApplicationNormalizeDefinition","ApplicationNormalizeSchema","ApplicationListNormalizeSchema","ApplicationNormalizeManifest","CompanyNormalizeDefinition","CompanyNormalizeSchema","CompanyNormalizeManifest","applicationDoneCreateSuccessSagaHandler","getCompanyStore","updatedCompany","applicationDoneDeleteSuccessSagaHandler","applicationStatusDoneCreateSuccessSagaHandler","updatedApplication","applicationStatusDoneDeleteSuccessSagaHandler","applicationStatusUuid","selectCompanyApplySagaHandler","selectCompanyApplySaga","applyAllAction","selectCompanyState","partialUpdateCompanies","updateCompaniesResult","removeGroupsMapping","forEach","removeGroupSet","add","set","all","uuidSet","deleteAction","batchCreateAction","batchUpdateAction","CompanySagas","update","GroupCompanySagas","list","ApplicationSagas","create","ApplicationStatusSagas","rootSaga","flat","sagaMiddleware","createSagaMiddleware","createBrowserHistory","basename","createStore","rootState","rootStateChecked","router","connectRouter","Reducer","composeWithDevTools","applyMiddleware","routerMiddleware","run","Root","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.35e01f25.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"applicationCard\":\"application-component_applicationCard__31V7N\",\"applicationCardContent\":\"application-component_applicationCardContent__37H7Z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"companyTitleContainer\":\"company-component_companyTitleContainer__Ri6WX\",\"companyTitleCaption\":\"company-component_companyTitleCaption__1Ke-4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TextField\":\"form-input-field_TextField__3KSDC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TabContent\":\"tab-content_TabContent__1_9TR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"tab-transition-slide-left_enter__1sdjC\",\"enterActive\":\"tab-transition-slide-left_enterActive__8WTGE\",\"enterDone\":\"tab-transition-slide-left_enterDone__1_OwZ\",\"exit\":\"tab-transition-slide-left_exit__3VudZ\",\"exitActive\":\"tab-transition-slide-left_exitActive__3-3TN\",\"exitDone\":\"tab-transition-slide-left_exitDone__3Mo2P\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"tab-transition-slide-right_enter__1QHPP\",\"enterActive\":\"tab-transition-slide-right_enterActive__2aDp0\",\"enterDone\":\"tab-transition-slide-right_enterDone__2f3WM\",\"exit\":\"tab-transition-slide-right_exit__36vYx\",\"exitActive\":\"tab-transition-slide-right_exitActive__k1Mfn\",\"exitDone\":\"tab-transition-slide-right_exitDone__3H4Ny\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tabBar\":\"tab-container_tabBar__18BpS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"companyCard\":\"company-list-item_companyCard__1aDLN\",\"companyCardContent\":\"company-list-item_companyCardContent__2-x9i\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"UserCompanyPage\":\"user-com-app-page_UserCompanyPage__1_59y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"exit\":\"page-routes-transition_exit__FV-eW\",\"exitActive\":\"page-routes-transition_exitActive__KOsYo\",\"exitDone\":\"page-routes-transition_exitDone__3tF_F\",\"enter\":\"page-routes-transition_enter__2xlSM\",\"enterActive\":\"page-routes-transition_enterActive__ARhrI\",\"enterDone\":\"page-routes-transition_enterDone__1rm_w\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"topAppBarTitle\":\"app-top-bar_topAppBarTitle__2xrzw\"};","import { Action } from \"redux\";\n\nimport { RequestStatus } from \"../../utils/rest-api\";\n\n/**\n * Store Types\n */\n\n// complete store type\nexport interface IUpdateAuthState {\n    requestStatus: RequestStatus\n    isLogin: boolean\n    isLocal: boolean\n    userName: string\n    socialAuthToken: string\n    apiToken: string\n    expireDateTime: string\n    avatarUrl: string\n}\n\nexport enum RequestedLoginMode {\n    PREFILL = \"prefill\",\n    SOCIAL_AUTH = \"social_auth\",\n    LOCAL = \"local\"\n}\n\n// async partial store types\nexport interface IRequestedLoginAuthState {\n    requestStatus: RequestStatus\n}\n\nexport interface IRequestedLogoutAuthState {\n    requestStatus: RequestStatus\n}\n\nexport interface ISuccessAuthState {\n    requestStatus: RequestStatus\n    isLogin: boolean\n    isLocal: boolean\n    userName: string\n    expireDateTime: string\n    apiToken: string\n    avatarUrl: string\n}\n\nexport interface IFailureAuthState {\n    requestStatus: RequestStatus,\n    error: any\n}\n\n// add more state types for this reducer - auth reducer\n// ...\n\n\n\n\n\n/**\n * Action Types\n */\n\nexport enum AuthActionNames {\n    UPDATE_AUTH = \"Update auth\",\n    REQUESTED_LOGIN_AUTH = \"Requested login auth\",\n    REQUESTED_LOGOUT_AUTH = \"Requested logout auth\",\n    SUCCESS_AUTH = \"Success auth\",\n    FAILURE_AUTH = \"Failure auth\",\n\n    // 1. add more action for this reducer - auth reducer\n    // 2. write the type interface for the action below\n    // ...\n}\n\nexport const AuthActionNamesValue = Object.values(AuthActionNames);\n\nexport interface IUpdateAuthAction extends Action<AuthActionNames.UPDATE_AUTH> {\n    type: typeof AuthActionNames.UPDATE_AUTH;\n    payload: IUpdateAuthState;\n}\n\nexport interface RequestedLoginAuthActionParams {\n    username?: string,\n    password?: string,\n    socialAuthToken?: string\n}\n\nexport interface IRequestedLoginAuthAction extends Action<AuthActionNames.REQUESTED_LOGIN_AUTH> {\n    type: typeof AuthActionNames.REQUESTED_LOGIN_AUTH;\n    loginMode: RequestedLoginMode;\n    params?: RequestedLoginAuthActionParams;\n    payload: IRequestedLoginAuthState;\n    onCompleteCallback?: () => void\n}\n\nexport interface IRequestedLogoutAuthAction extends Action<AuthActionNames.REQUESTED_LOGOUT_AUTH> {\n    type: typeof AuthActionNames.REQUESTED_LOGOUT_AUTH;\n    payload: IRequestedLogoutAuthState;\n}\n\nexport interface ISuccessAuthAction extends Action<AuthActionNames.SUCCESS_AUTH> {\n    type: typeof AuthActionNames.SUCCESS_AUTH;\n    payload: ISuccessAuthState;\n}\n\nexport interface IFailureAuthAction extends Action<AuthActionNames.FAILURE_AUTH> {\n    type: typeof AuthActionNames.FAILURE_AUTH;\n    payload: IFailureAuthState;\n}\n\n// use union | ... | ... to add more action types\nexport type TAuthActions = IUpdateAuthAction | IRequestedLoginAuthAction | IRequestedLogoutAuthAction | ISuccessAuthAction | IFailureAuthAction","import { TObject } from \"../state-management/types/factory-types\";\nimport { AuthenticationService } from \"./authentication\";\n\n\nexport enum RequestStatus {\n    TRIGGERED = \"triggered\",\n    REQUESTING = \"requesting\",\n    SUCCESS = \"success\",\n    FAILURE = \"failre\"\n}\n\nexport enum CrudType {\n    CREATE = \"create\",\n    BATCHCREATE = \"batchcreate\",\n    READ = \"read\",\n    LIST = \"list\",\n    UPDATE = \"update\",\n    BATCHUPDATE = \"batchupdate\",\n    // DELETE includes indivual delete and batch delete\n    DELETE = \"delete\",\n}\n\nexport enum RestMethod {\n    POST = \"post\",\n    GET = \"get\",\n    PATCH = \"patch\",\n    DELETE = \"delete\"\n}\n\nexport const CrudMapToRest = (crudType: CrudType): RestMethod => {\n    switch (crudType) {\n        case CrudType.CREATE:\n        case CrudType.BATCHCREATE:\n            return RestMethod.POST;\n        case CrudType.READ:\n            return RestMethod.GET;\n        case CrudType.LIST:\n            return RestMethod.GET;\n        case CrudType.UPDATE:\n        case CrudType.BATCHUPDATE:\n            return RestMethod.PATCH;\n        // DELETE includes indivual delete and batch delete\n        case CrudType.DELETE:\n            return RestMethod.DELETE;\n\n        default:\n            return RestMethod.GET;\n    }\n};\n\nexport interface IRequestParams<Schema> {\n    endpointUrl?: string;\n    absoluteUrl?: string;\n    objectName?: string;\n    data?: TObject<Schema> | Array<TObject<Schema>>;\n}\n\nexport interface IListRestApiResponse<Schema> {\n    count: number;\n    next: any;\n    previous: any;\n    results: Array<TObject<Schema>>;\n}\n\nexport type ISingleRestApiResponse<Schema> = TObject<Schema>;\n\nexport function IsSingleRestApiResponseTypeGuard<Schema>(\n    response: ISingleRestApiResponse<Schema> | IListRestApiResponse<Schema>\n): response is ISingleRestApiResponse<Schema> {\n    return (<ISingleRestApiResponse<Schema>>response).uuid !== undefined;\n}\n\nfunction IsSingleFormDataTypeGuard<Schema>(\n    formData: TObject<Schema> | Array<TObject<Schema>>\n): formData is TObject<Schema> {\n    return (<TObject<Schema>>formData).uuid !== undefined;\n}\n\nexport class RestApi {\n    state = {\n        clientID: `732988498848-vuhd6g61bnlqe372i3l5pbpnerteu6na.apps.googleusercontent.com`,\n        code: ``,\n        redirectUri: `postmessage`,\n        apiBaseUrl: (process.env.NODE_ENV === 'development') ? \n        `http://localhost:8000/api/`\n        :\n        `https://appl-tracky.api.shaungc.com/api/`\n        ,\n        socialAuthProvider: `google-oauth2`,\n\n        userEmail: ``,\n        userFirstName: ``,\n        userLastName: ``,\n\n        objectID: ``\n    };\n\n    get = <Schema>({ endpointUrl, absoluteUrl, objectName, data }: IRequestParams<Schema>) => {\n        return fetch(\n            this.getRelativeUrl({\n                endpointUrl,\n                absoluteUrl,\n                objectName,\n                data\n            }),\n            {\n                method: \"GET\",\n                ...this.setApiAuthHeaders()\n            }\n        ).then(res => res.json());\n    };\n\n    post = <Schema>({ data, objectName, endpointUrl }: IRequestParams<Schema>) => {\n        return fetch(\n            this.getRelativeUrl({\n                endpointUrl,\n                objectName,\n                data\n            }),\n            {\n                method: \"POST\",\n                ...this.setApiAuthHeaders(),\n                body: JSON.stringify(data)\n            }\n        ).then(res => res.json());\n        // let caller handle error in their own .catch()\n    };\n\n    patch = <Schema>({ data, objectName, endpointUrl }: IRequestParams<Schema>) => {\n        return fetch(\n            this.getRelativeUrl({\n                endpointUrl,\n                objectName,\n                data\n            }),\n            {\n                method: \"PATCH\",\n                ...this.setApiAuthHeaders(),\n                body: JSON.stringify(data)\n            }\n        ).then(res => res.json());\n    };\n\n    delete = <Schema>({ data, objectName, endpointUrl }: IRequestParams<Schema>) => {\n        return fetch(\n            this.getRelativeUrl({\n                endpointUrl,\n                objectName,\n                data\n            }),\n            {\n                method: \"DELETE\",\n                ...this.setApiAuthHeaders(),\n                body: JSON.stringify(data)\n            }\n        );\n    };\n\n    /** helper */\n    private getRelativeUrl = <Schema>({\n        objectName,\n        data,\n        endpointUrl,\n        absoluteUrl,\n    }: IRequestParams<Schema>) => {\n        let url = \"\";\n        if (absoluteUrl) {\n            url = absoluteUrl;\n        }\n        else if (endpointUrl) {\n            url = `${this.state.apiBaseUrl}${endpointUrl}`;\n        } else {\n            if (data && IsSingleFormDataTypeGuard(data) && data.uuid) {\n                url = `${this.state.apiBaseUrl}${objectName}/${data.uuid}/`;\n            } else {\n                url = `${this.state.apiBaseUrl}${objectName}/`;\n            }\n        }\n        return url;\n    };\n\n    private setApiAuthHeaders = (): RequestInit => {\n\n        return {\n            mode: \"cors\",\n            credentials: AuthenticationService.apiCallToken ? \"include\" : \"omit\",\n            headers: {\n                Authorization: AuthenticationService.apiCallToken\n                    ? `JWT ${AuthenticationService.apiCallToken}`\n                    : ``,\n                \"Content-Type\": \"application/json\"\n            }\n        };\n    };\n}\n\n/** create restapi singleton */\nexport const RestApiService = new RestApi();\n","import * as Yup from \"yup\";\nimport { schema, Schema } from 'normalizr';\n\n\nexport type IReference = string;\n\nexport type IRelationship = {\n    uuid: string\n} | IReference;\n\nexport interface IBaseModelProps {\n    uuid?: string\n    created_at?: string\n    modified_at?: string\n}\n\nexport class BaseModel {\n    uuid: string\n    created_at: string\n    modified_at: string\n\n    normalizeSchemaShape?: Schema\n    objectNamePlural?: string\n    \n    constructor({\n        uuid = \"\",\n        created_at = \"\",\n        modified_at = \"\",\n    }: IBaseModelProps) {\n        this.uuid = uuid;\n        this.created_at = created_at;\n        this.modified_at = modified_at;\n    }\n\n    static schema() {\n        return Yup.object<BaseModel>().shape({});\n    }\n\n    getNormalizeSchema() {\n        if (this.normalizeSchemaShape && this.objectNamePlural) {\n            return new schema.Entity(this.objectNamePlural, this.normalizeSchemaShape, {\n                idAttribute: \"uuid\"\n            })\n        }\n\n        return null;\n    }\n\n    getListNormalizeSchema() {\n        const normalizeSchema = this.getNormalizeSchema();\n        if (normalizeSchema) {\n            return new schema.Array(normalizeSchema);\n        }\n\n        return null;\n    }\n}\n\n// for newing model class instance and access base class's assets\nexport type DataModelInstance<Model = BaseModel> = Model & BaseModel\n\nexport type DataModelClass<DataModel = any> = DataModelInstance<DataModel> & (new (props: any) => DataModel)\n","import { RestApiService } from \"./rest-api\";\nimport { BaseModel, IBaseModelProps } from \"../data-model/base-model\";\n\nimport { RequestedLoginMode, RequestedLoginAuthActionParams } from \"../state-management/types/auth-types\";\n\nexport interface ILoginObjectProps {\n    code?: string;\n    provider?: string;\n    redirect_uri?: string;\n}\n\nexport interface IRefreshObjectProps {\n    token: string;\n}\n\nclass RefreshObject extends BaseModel {\n    token: string;\n\n    constructor({\n        token = \"\",\n        ...args\n    }: IRefreshObjectProps & IBaseModelProps) {\n        super(args);\n        this.token = token;\n    }\n}\n\nclass LoginObject extends BaseModel {\n    code: string;\n    provider: string;\n    redirect_uri: string;\n\n    constructor({\n        code = \"\",\n        provider = \"\",\n        redirect_uri = \"\",\n        ...args\n    }: ILoginObjectProps & IBaseModelProps) {\n        super(args);\n        this.code = code;\n        this.provider = provider;\n        this.redirect_uri = redirect_uri;\n    }\n}\n\nclass Authentication {\n    state = {\n        clientID: `732988498848-vuhd6g61bnlqe372i3l5pbpnerteu6na.apps.googleusercontent.com`,\n        redirectUri: `postmessage`,\n        apiSocialLoginUrl: `login/social/`,\n        apiLocalLoginUrl: `api-token-auth/`,\n        apiLoginRefreshUrl: `api-token-refresh/`,\n        socialAuthProvider: `google-oauth2`,\n\n        apiLoginToken: ``,\n    };\n\n    serverLogin = async (loginMode: RequestedLoginMode, params: RequestedLoginAuthActionParams) => {\n        // prefill login\n        if (loginMode === RequestedLoginMode.PREFILL) {\n            // restore session login data\n            const sessionAuthState = localStorage.getItem(`${(process.env.NODE_ENV === \"development\") ? \"dev__\" : \"\"}applyTracky__authState`)\n                ? JSON.parse(localStorage.getItem(`${(process.env.NODE_ENV === \"development\") ? \"dev__\" : \"\"}applyTracky__authState`) || \"{}\")\n                : {};\n\n            if (sessionAuthState.isLogin) {\n                this.apiCallToken = sessionAuthState.apiToken;\n\n                try {\n                    const refreshTokenReponse = await this.refreshToken();\n\n                    return {\n                        email: sessionAuthState.userName,\n                        token: refreshTokenReponse.token,\n                        avatar_url: sessionAuthState.avatarUrl,\n                        isLocal: sessionAuthState.isLocal\n                    };\n                } catch (error) {\n                    // catch: refresh failed or data-fetching failed\n                    process.env.NODE_ENV === \"development\" &&\n                        console.error(\n                            `Error after refreshing token in Authentication service: ${error}`\n                        );\n                }\n            }\n            \n            // in case cannot restore login session,\n            // will let saga dispatch logout to reset authState in session storage\n            return {};\n        }\n\n        // social auth login\n        else if (loginMode === RequestedLoginMode.SOCIAL_AUTH) {\n            const loginObject = new LoginObject({\n                code: params.socialAuthToken,\n                provider: this.state.socialAuthProvider,\n                redirect_uri: this.state.redirectUri\n            });\n    \n            try {\n                const resp = await RestApiService.post<LoginObject>({\n                    data: loginObject,\n                    endpointUrl: this.state.apiSocialLoginUrl\n                });\n    \n                this.apiCallToken = resp.token;\n                return {\n                    ...resp,\n                    isLocal: false\n                };\n            }\n            catch (error) {\n                throw Error(error);\n            }\n        }\n\n        // local login\n        else if (loginMode === RequestedLoginMode.LOCAL) {\n            // post login form data to get login token\n            try {\n                const res = await fetch(`${RestApiService.state.apiBaseUrl}${this.state.apiLocalLoginUrl}`, {\n                    method: \"POST\",\n                    mode: \"cors\",\n                    credentials: \"omit\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    },\n                    body: JSON.stringify({\n                        username: params.username, password: params.password\n                    })\n                });\n    \n                if (!res.ok) {\n                    throw Error(res.statusText)\n                }\n    \n                const parsedJsonResponse = await res.json();\n                \n                this.apiCallToken = parsedJsonResponse.token;\n    \n                return {\n                    email: params.username,\n                    token: parsedJsonResponse.token,\n                    avatar_url: parsedJsonResponse.avatar_url,\n                    isLocal: true\n                }\n            }\n            catch (error) {\n                throw Error(error)\n            }\n        }\n    };\n\n    get apiCallToken() {\n        return this.state.apiLoginToken;\n    }\n\n    set apiCallToken(token) {\n        this.state.apiLoginToken = token;\n    }\n\n    refreshToken = async () => {\n        const refreshObject = new RefreshObject({\n            token: this.apiCallToken\n        });\n        try {\n            const resp = await RestApiService.post<RefreshObject>({\n                data: refreshObject,\n                endpointUrl: this.state.apiLoginRefreshUrl\n            });\n\n            this.apiCallToken = resp.token;\n\n            return resp;\n        } catch (error) {\n            throw Error(error);\n        }\n    };\n\n    serverLogout = async () => {\n        // no server-side invalidate implement at this point (a common case for JWT, however)\n\n        this.apiCallToken = \"\";\n        \n        // will let saga dispatch logout to reset authState in session storage\n        \n        return;\n    };\n}\n\nexport const AuthenticationService = new Authentication();\n","import {\n    /** state types */\n    IUpdateAuthState,\n    RequestedLoginMode,\n    /** action types */\n    IUpdateAuthAction,\n    IRequestedLoginAuthAction,\n    RequestedLoginAuthActionParams,\n    IRequestedLogoutAuthAction,\n    ISuccessAuthAction,\n    IFailureAuthAction,\n    /** action names */\n    AuthActionNames,\n} from \"../types/auth-types\";\n\nimport { RequestStatus } from \"../../utils/rest-api\";\n\nexport const UpdateAuth = (newAuthState: IUpdateAuthState): IUpdateAuthAction => {\n    return {\n        type: AuthActionNames.UPDATE_AUTH,\n        payload: newAuthState\n    };\n};\n\nexport const RequestedLoginAuth = (loginMode: RequestedLoginMode, params?: RequestedLoginAuthActionParams, onCompleteCallback?: () => void): IRequestedLoginAuthAction => {\n    return {\n        type: AuthActionNames.REQUESTED_LOGIN_AUTH,\n        loginMode,\n        params,\n        payload: {\n            requestStatus: RequestStatus.REQUESTING,\n        },\n        onCompleteCallback\n    };\n};\n\nexport const RequestedLogoutAuth = (): IRequestedLogoutAuthAction => {\n    return {\n        type: AuthActionNames.REQUESTED_LOGOUT_AUTH,\n        payload: {\n            requestStatus: RequestStatus.REQUESTING,\n        }\n    };\n};\n\nexport const SuccessLoginAuth = (userName: string, expireDateTime: string, apiToken: string, avatarUrl: string, isLocal: boolean): ISuccessAuthAction => {\n\n    return {\n        type: AuthActionNames.SUCCESS_AUTH,\n        payload: {\n            requestStatus: RequestStatus.SUCCESS,\n            isLogin: true,\n            isLocal: isLocal ? true : false,\n            userName,\n            expireDateTime,\n            apiToken,\n            avatarUrl\n        }\n    };\n};\n\nexport const SuccessLogoutAuth = (): ISuccessAuthAction => {\n    return {\n        type: AuthActionNames.SUCCESS_AUTH,\n        payload: {\n            requestStatus: RequestStatus.SUCCESS,\n            isLogin: false,\n            isLocal: false,\n            userName: \"\",\n            expireDateTime: \"\",\n            apiToken: \"\",\n            avatarUrl: \"\",\n        }\n    };\n};\n\nexport const FailureAuth = (error: any): IFailureAuthAction => {\n    return {\n        type: AuthActionNames.FAILURE_AUTH,\n        payload: {\n            requestStatus: RequestStatus.FAILURE,\n            error\n        }\n    };\n};\n\n// write new actions here for this reducer - auth reducer\n// ...\n","import React, { Component } from \"react\";\n\n/** Components */\nimport { GoogleLogin } from \"react-google-login\";\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n// font awesome\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faGoogle } from '@fortawesome/free-brands-svg-icons'\n\ninterface ISocialAuthLoginButtonProps {\n    clientID: string;\n    redirectUri?: string;\n    onSuccess(authResponse?: any): void;\n    onFailure?(error: any): void;\n    disabled?: boolean;\n}\n\nexport class SocialAuthLoginButton extends Component<\n    ISocialAuthLoginButtonProps\n> {\n    onLoginButtonClicked = (clickEvent: any, renderProps: any) => {\n        renderProps.onClick(clickEvent);\n    };\n\n    onAuthSuccess = (authResponse?: any) => {\n        this.props.onSuccess(authResponse);\n    };\n\n    onAuthFailure = (error: any) => {\n        if (this.props.onFailure) {\n            this.props.onFailure(error);\n        }\n    };\n\n    render() {\n        return (\n            <div className=\"UserAuthButton\">\n                <GoogleLogin\n                    render={(renderProps: any) => (\n                        <Button\n                            onClick={clickEvent =>\n                                this.onLoginButtonClicked(\n                                    clickEvent,\n                                    renderProps\n                                )\n                            }\n                            unelevated\n                            icon={\n                                // <MaterialIcon hasRipple icon=\"account_circle\" />\n                                <FontAwesomeIcon icon={faGoogle} />\n                            }\n                            disabled={this.props.disabled}\n                        >\n                            Google Login\n                        </Button>\n                    )}\n                    onSuccess={this.onAuthSuccess}\n                    onFailure={this.onAuthFailure}\n                    clientId={this.props.clientID}\n                    responseType=\"code\"\n                    redirectUri={this.props.redirectUri || \"postmessage\"}\n                    cookiePolicy={ (process.env.NODE_ENV === 'development') ? 'single_host_origin' : 'https://shaungc.com'}\n                    hostedDomain={ (process.env.NODE_ENV === 'development') ? \"http://localhost:3000\" : \"https://appl-tracky.shaungc.com\"}\n                />\n            </div>\n        );\n    }\n}\n","import React, { Component } from \"react\";\n\nimport { AuthenticationService } from \"../../utils/authentication\";\n\n/** Components */\nimport { GoogleLogout } from \"react-google-login\";\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n\n\ninterface ISocialAuthLogoutButtonProps {\n    onSuccess(authResponse?: any): void;\n    onClick: () => void\n    disabled?: boolean\n}\n\nexport class SocialAuthLogoutButton extends Component<\n    ISocialAuthLogoutButtonProps\n> {\n    onAuthSuccess = (authResponse?: any) => {\n        this.props.onSuccess(authResponse);\n    };\n\n    render() {\n        return (\n            <div className=\"UserAuthButton\">\n                <GoogleLogout\n                    clientId={AuthenticationService.state.clientID}\n                    render={(renderProps: any) => (\n                        <Button\n                            onClick={this.props.onClick}\n                            unelevated\n                            icon={<MaterialIcon hasRipple icon=\"eject\" />}\n                            disabled={this.props.disabled}\n                        >\n                            Logout\n                        </Button>\n                    )}\n                    onLogoutSuccess={this.onAuthSuccess}\n                />\n            </div>\n        );\n    }\n}\n","import React, { Component } from \"react\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\n\n/** Redux */\nimport { Dispatch } from \"redux\";\nimport { connect } from \"react-redux\";\nimport { IRootState } from \"../../state-management/types/root-types\";\nimport { IUpdateAuthAction, IRequestedLoginAuthAction, TAuthActions, IUpdateAuthState, RequestedLoginMode } from \"../../state-management/types/auth-types\";\nimport { UpdateAuth, RequestedLoginAuth, RequestedLogoutAuth } from \"../../state-management/action-creators/auth-actions\";\n\n/** rest api */\nimport { RequestStatus } from \"../../utils/rest-api\";\n\n/** Components */\nimport { SocialAuthLoginButton } from \"./social-auth-login-button\";\nimport { SocialAuthLogoutButton } from \"./social-auth-logout-button\";\n\ninterface ISocialAuthButtonProps extends RouteComponentProps {\n    auth: IUpdateAuthState;\n    requestedLoginAuth: (socialAuthToken: string) => void;\n    requestedLogoutAuth: () => void;\n}\n\nclass SocialAuthButton extends Component<\n    ISocialAuthButtonProps\n> {\n    state = {\n        clientID: `732988498848-vuhd6g61bnlqe372i3l5pbpnerteu6na.apps.googleusercontent.com`,\n        \n        code: ``, // get `code` from social login button, then obtain token from django server\n        apiLoginToken: ``,\n\n        userEmail: ``,\n        userFirstName: ``,\n        userLastName: ``,\n\n        objectID: ``\n    };\n\n    onSocialLoginSuccess = (googleOauthResponse: any) => {\n        this.setState(\n            {\n                code: googleOauthResponse.code\n            },\n            () => {\n                // this.apiLogin();\n                this.props.requestedLoginAuth(this.state.code);\n            }\n        );\n    };\n\n    onSocialLoginFailure = (error: any) => {\n        console.error(\"Social login failed:\", error);\n    };\n\n    onSocialLogoutSuccess = () => {\n        this.props.requestedLogoutAuth();\n    };\n\n    render() {\n        return (\n            <div className=\"SocialAuth\">\n                {!this.props.auth.isLogin ? (\n                    <SocialAuthLoginButton\n                        clientID={this.state.clientID}\n                        onSuccess={this.onSocialLoginSuccess}\n                        onFailure={this.onSocialLoginFailure}\n                        disabled={this.props.auth.requestStatus === RequestStatus.REQUESTING}\n                    />\n                ) : (\n                    <SocialAuthLogoutButton\n                        onSuccess={this.onSocialLogoutSuccess}\n                        onClick={this.onSocialLogoutSuccess}\n                        \n                        // TODO: logout - ideally no need to wait for request status, just interrupt existing requests (actually this should be possible by looking at `axios` and its abort request feature, or the native javascript `AbortController` and its `AbortController.abort()`).\n                        // However, we'll have to cancel those ongoing sagas for data fetching\n                        // disabled={this.props.auth.requestStatus === RequestStatus.REQUESTING}\n                    />\n                )}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => {\n    return {\n        auth: store.auth\n    };\n};\n\nfunction mapDispatchToProps(dispatch: Dispatch<TAuthActions>) {\n    return {\n        requestedLoginAuth: (socialAuthToken: string) => {\n            dispatch(\n                RequestedLoginAuth(RequestedLoginMode.SOCIAL_AUTH, {\n                    socialAuthToken\n                })\n            );\n        },\n        requestedLogoutAuth: () => {\n            dispatch(\n                RequestedLogoutAuth()\n            );\n        }\n    };\n}\n\nexport const SocialAuthButtonContainer = withRouter(connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(SocialAuthButton));\n","import React from \"react\";\nimport { FormikValues } from \"formik\";\nimport { DataModelClass } from \"../../../data-model/base-model\";\nimport { FormInputField } from \"../form-input-field/form-input-field\";\n\n\nexport enum InputFieldType {\n    // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input\n    TEXT = \"text\",\n    PASSWORD = \"password\",\n    EMAIL = \"email\",\n    URL = \"url\",\n    DATE = \"date\"\n}\n\n// API for caller to new meta class\nexport interface IFieldBaseMetaProps {\n    fieldName: string\n    label: string;\n\n    isDynamic?: boolean;\n    dynamicLimit?: number;\n    getInstanceDataFromFormikValues?: (formikValues: FormikValues) => any // has to be optional since we want to let caller just use `fieldName` by default to access formik's values\n}\n\n// for form field props\nexport interface IFormBaseFieldProps extends IFieldBaseMetaProps {\n    model?: DataModelClass\n    formikValues?: FormikValues // for form field to load data (e.g. initial value) at a specific position in formik's `values`\n    // getInstanceDataFromFormikValues?: // when it's dynamic field, will use this to render dynamic fields\n    onSaveKeystroke?: () => void\n}\n\n// for the base meta class\ninterface IFormBaseFieldMeta extends IFieldBaseMetaProps {\n    model?: DataModelClass\n    formField?: React.ComponentType<IFormBaseFieldProps>\n\n    getInstance: (values: FormikValues) => any // for form factory to loop over fieldmeta and obtain field's data instance\n    getInstanceDataFromFormikValues: (formikValues: FormikValues) => any // required because getInstance() depends on it\n}\n\nexport class FormBaseFieldMeta implements IFormBaseFieldMeta {\n    fieldName: string\n    label: string\n\n    model?: DataModelClass\n    formField: React.ComponentType<IFormBaseFieldProps>\n\n    isDynamic?: boolean;\n    dynamicLimit?: number;\n    getInstanceDataFromFormikValues: (formikValues: FormikValues) => any\n\n    constructor(props: IFieldBaseMetaProps) {\n        this.fieldName = props.fieldName;\n        this.label = props.label;\n\n        this.isDynamic = props.isDynamic;\n        this.dynamicLimit = props.dynamicLimit;\n\n        if (props.getInstanceDataFromFormikValues) {\n            this.getInstanceDataFromFormikValues = props.getInstanceDataFromFormikValues;\n        }\n        else {\n            this.getInstanceDataFromFormikValues = (values: FormikValues) => {\n                if (!(values && values[this.fieldName])) {\n                    alert(\"Oops! Something might go wrong. Info: at class FormBaseFieldMeta.\")\n                    console.error(\"values =\", values, \" this.fieldName =\", this.fieldName);\n                    return (this.isDynamic) ? [] : \"\";\n                }\n                else {\n                    if (this.isDynamic && !Array.isArray(values[this.fieldName])) {\n                        alert(\"Oops! Something might go wrong. Info: at class FormBaseFieldMeta.\")\n                        console.error(\"isDynamic=true, but the value is not an array:\");\n                        console.error(\"values =\", values, \" this.fieldName =\", this.fieldName);\n                    }\n                    return values[this.fieldName];\n                }\n            }\n        }\n\n        this.formField = FormInputField;\n    }\n\n    getInstance(values: FormikValues) {\n        const model = this.model;\n        if (model) {\n            if (this.isDynamic) {\n                return this.getInstanceDataFromFormikValues(values).map((instanceData: any) => new model(instanceData))\n            }\n            else if (Array.isArray(values[this.fieldName])) {\n                return values[this.fieldName].map((value: typeof model) => new model(value));\n            }\n            else {\n                return new model(values[this.fieldName]);\n            }\n        }\n\n        // assume field values are plain string/num or other basic types\n        return values[this.fieldName];\n    }\n}\n","import React, { Component } from \"react\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch, AnyAction } from \"redux\";\nimport { IRootState } from \"../../state-management/types/root-types\";\nimport { IUpdateAuthState } from \"../../state-management/types/auth-types\";\n\n/** Components */\nimport { SocialAuthButtonContainer } from \"../../components/login/social-auth-button\";\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n\nimport {\n    Body1,\n    Body2,\n    // Button,\n    Caption,\n    Headline1,\n    Headline2,\n    Headline3,\n    Headline4,\n    Headline5,\n    Headline6,\n    Overline,\n    Subtitle1,\n    Subtitle2,\n} from '@material/react-typography';\nimport '@material/react-typography/dist/typography.css';\n\nimport styles from './landing-page.module.css';\n\n\ninterface ILandingPageProps extends RouteComponentProps {\n    auth: IUpdateAuthState;\n}\n\n\nclass LandingPage extends Component<ILandingPageProps> {\n    formFactoryProps: any;\n\n    constructor(props: ILandingPageProps) {\n        super(props);\n    }\n\n    onStaffLoginClick = () => {\n        this.props.history.push(\"/local-login/\");\n    }\n\n    render() {\n        return (\n            <div className={styles.LandingPage} >\n                <div className={styles.primaryPageContent}>\n                    <div className={styles.headlineContent}>\n                        <Headline1 className={styles.headlineText}>Appl Tracky</Headline1>\n                        <Headline4 className={styles.headlineSubText}>Got crazy using speadsheet to keep track of your application progress? Try out Appl Tracky to ease your workflow!</Headline4>\n                        <Body1>\n                            Whether it is application for job, school program, scholarship or whatever process that lets you wait from a couple weeks to months, Appl Tracky has you covered. Keep track of every steps in the process, insert links, put down notes to get you more organized and prepared!\n                        </Body1>\n                    </div>\n\n                    <div className={styles.loginActionsContainer}>\n                        <Headline4>Sign up & login now to get organized</Headline4>\n                        <SocialAuthButtonContainer />\n                        <Body1>\n                            Just want to try things out and don't want to sign up yet? No problem, here's a guest account you can use:\n                        </Body1>\n                        <div>🦄 username: guest</div>\n                        <div>🦄 password: appltracky</div>\n                        <Button\n                            onClick={this.onStaffLoginClick}\n                            unelevated\n                            icon={\n                                <MaterialIcon hasRipple icon=\"account_circle\" />\n                            }\n                        >\n                            Sign in\n                    </Button>\n                    </div>\n\n                    <div className={styles.divider} />\n\n                    <div className={styles.sideNoteContent}>\n                        <Subtitle1>\n                            Take a look at the React code that fuels and powers all the goodies!\n                        </Subtitle1>\n                        <Button\n                            href=\"https://github.com/rivernews/appl-tracky-spa\"\n                            target=\"_blank\"\n                            unelevated\n                            icon={\n                                <MaterialIcon hasRipple icon=\"code\" />\n                            }\n                        >\n                            Github Repository\n                </Button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: IRootState) => ({\n    auth: state.auth\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>) => {\n    // actionName = (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {\n    };\n};\n\nexport const LandingPageContainer = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(LandingPage)\n);\n","import React, { Component } from \"react\";\n\n/** Components */\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\n// mdc-react input\nimport \"@material/react-text-field/dist/text-field.css\";\nimport TextField, { Input } from \"@material/react-text-field\";\n// formik\nimport {\n    Field, FieldProps,\n    ErrorMessage,\n} from \"formik\";\n// input field\nimport { IFormInputFieldProps } from \"./form-input-field-meta\";\nimport { InputFieldType } from \"../form-base-field/form-base-field-meta\";\n\nimport styles from \"./form-input-field.module.css\";\n\n\nexport class FormInputField extends Component<IFormInputFieldProps> {\n    render() {\n        return (\n            <div className=\"FormInputField\">\n                <Field\n                    name={this.props.fieldName}\n                    render={({ field, form }: FieldProps<number | string>) => (\n                        <TextField\n                            className={styles.TextField}\n                            label={this.props.label}\n                            onTrailingIconSelect={this.props.onTrailingIconSelect}\n                            trailingIcon={this.props.onTrailingIconSelect && <MaterialIcon role=\"button\" icon=\"clear\" />}\n                        >\n                            <Input\n                                type={this.props.type || InputFieldType.TEXT}\n                                inputType=\"input\"\n                                autoFocus={this.props.autoFocus}\n                                {...field}\n                            />\n                        </TextField>\n                    )}\n                />\n                <ErrorMessage name={this.props.fieldName} />\n            </div>\n        );\n    }\n}","import React, { Component } from \"react\";\n\n/** Components */\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n// data model\nimport { DataModelClass, DataModelInstance } from \"../../data-model/base-model\";\n// formik\nimport {\n    Formik,\n    Form,\n    FormikValues\n} from \"formik\";\n// yup\nimport * as Yup from 'yup';\n// base field\nimport { FormBaseFieldMeta } from \"./form-base-field/form-base-field-meta\";\nimport { ISingleRestApiResponse } from \"../../utils/rest-api\";\nimport { JsonResponseType } from \"../../state-management/types/factory-types\";\n\n\nexport enum ActionButtonType {\n    SUBMIT = \"submit\",\n    BUTTON = \"button\"\n}\n\nexport class FormActionButtonProps {\n    constructor(\n        public text: string = \"\",\n        public onClick?: (event: any) => void,\n        public type?: ActionButtonType\n    ) { }\n}\n\nexport interface IFormFactoryProps<IDataModel> {\n    onSubmitSuccess?: (jsonResponse: JsonResponseType<IDataModel>) => void;\n\n    // pass in either `initialValues` or `initialInstance`, this is important for yup to render error message. If no initial info at all, yup will not display errors properly.\n    // `initialValues` should be used only for customize form; for data model forms please use `initialInstance` so update & create form can be handled together\n    initialValues?: any\n    initialInstance?: DataModelInstance<IDataModel>;\n    enforcedInstanceData?: any;\n\n    model?: DataModelClass;\n    actionButtonPropsList: Array<FormActionButtonProps>;\n    formFieldPropsList: Array<FormBaseFieldMeta>\n    \n    validationSchema?: Yup.Schema<IDataModel>\n\n    onSubmit?: (\n        values: FormikValues,\n        { setSubmitting }: { setSubmitting: Function }\n    ) => void;\n    \n    createInstanceTriggerAction?: (\n        instance: IDataModel,\n        successCallback?: (jsonResponse: ISingleRestApiResponse<IDataModel>) => void,\n        finalCallback?: Function,\n    ) => void;\n    updateInstanceTriggerAction?: (\n        instance: IDataModel,\n        successCallback?: Function,\n        finalCallback?: Function,\n        updateFromCompany?: IDataModel\n    ) => void;\n}\n\nexport class FormFactory<DataModel> extends Component<\n    IFormFactoryProps<DataModel>\n    > {\n\n    initialInstance?: DataModelInstance<any>;\n    validationSchema?: Yup.Schema<DataModel>;\n\n    constructor(props: IFormFactoryProps<DataModel>) {\n        super(props);\n\n        // guarantee this.initialInstance\n        if (this.props.model && !this.props.initialInstance) {\n            // for create form\n            const model = this.props.model;\n            this.initialInstance = new model({});\n        }\n        else {\n            // for update form\n            this.initialInstance = this.props.initialInstance;\n        }\n\n        // form behavior integrity check\n        if (!this.initialInstance) {\n            if (!this.props.initialValues || !this.props.onSubmit) {\n                throw Error(\"ERROR: form factory has no initialInstance - seems like you're building a custom form that does not use data model. Please pass in initialValues and onSubmit in props to handle the behavior manually.\");\n            }\n        }\n\n        this.validationSchema = this.props.validationSchema || this.props.model.schema;\n    }\n\n    onSubmit = (\n        values: FormikValues,\n        { setSubmitting }: { setSubmitting: Function }\n    ) => {\n        setSubmitting(true);\n        let instanceData: any = {};\n        for (let fieldProps of this.props.formFieldPropsList) {\n            const keyName = fieldProps.fieldName;\n            instanceData[keyName] = fieldProps.getInstance(values);\n        }\n\n        // packaging\n        const model = this.props.model;\n        if (\n            model && this.props.createInstanceTriggerAction && this.props.updateInstanceTriggerAction &&\n            this.initialInstance\n        ) {\n            // a create / update form is assumed\n\n            const instance = new model({\n                uuid: this.initialInstance.uuid,\n                ...instanceData,\n                ...this.props.enforcedInstanceData\n            })\n\n            // dispatch API request\n            if (!instance.uuid) {\n                this.props.createInstanceTriggerAction(instance, this.props.onSubmitSuccess, () => setSubmitting(false));\n            } else {\n                this.props.updateInstanceTriggerAction(instance, this.props.onSubmitSuccess, () => setSubmitting(false), this.props.initialInstance);\n            }\n        }\n        else if (this.props.onSubmit) {\n            // if caller has customize onSubmit, then use it instead\n            this.props.onSubmit(values, { setSubmitting });\n        }\n        else {\n            alert(\"Something is wrong with the form...!\")\n            throw Error(\"ERROR: form factory props not properly configured. See above props.\")\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"FormFactory\">\n                <Formik\n                    initialValues={this.initialInstance || this.props.initialValues}\n                    validationSchema={this.validationSchema}\n                    onSubmit={this.onSubmit}\n                >\n                    {({\n                        values,\n                        isSubmitting,\n                        submitForm\n                    }) => (\n                            <Form>\n                                {this.props.formFieldPropsList.map((formFieldMeta: FormBaseFieldMeta, index: number) => (\n                                    <formFieldMeta.formField \n                                        key={index}\n                                        {...formFieldMeta}\n                                        formikValues={values}\n                                        onSaveKeystroke={submitForm}\n                                    />\n                                ) )}\n                                {this.props.actionButtonPropsList.map(\n                                    (actionButtonProps: FormActionButtonProps, index) => (\n                                        <Button\n                                            key={index}\n                                            type={actionButtonProps.type || ActionButtonType.BUTTON}\n                                            disabled={isSubmitting}\n                                            unelevated\n                                            onClick={actionButtonProps.onClick}\n                                            children={actionButtonProps.text}\n                                        />\n                                    )\n                                )}\n                            </Form>\n                        )}\n                </Formik>\n            </div>\n        );\n    }\n}\n","// base field\nimport { InputFieldType, FormBaseFieldMeta, IFormBaseFieldProps, IFieldBaseMetaProps } from \"../form-base-field/form-base-field-meta\";\n// input field\nimport { FormInputField } from \"./form-input-field\";\n\n\n// API for caller to new props for input field\nexport interface IFormInputFieldProps extends IFormBaseFieldProps {\n    type?: InputFieldType\n    onTrailingIconSelect?: () => void\n\n    autoFocus?: boolean\n}\n\n// for defining meta\nexport interface IFormInputFieldMetaProps extends IFieldBaseMetaProps {\n    type?: InputFieldType\n    onTrailingIconSelect?: () => void\n\n    autoFocus?: boolean\n}\n\nexport class FormInputFieldMeta extends FormBaseFieldMeta {\n    type?: InputFieldType\n    onTrailingIconSelect?: () => void\n\n    autoFocus?: boolean\n\n    constructor({\n        type,\n        onTrailingIconSelect,\n        autoFocus,\n        ...props\n    }: IFormInputFieldMetaProps) {\n        super(props)\n        this.type = type;\n        this.onTrailingIconSelect = onTrailingIconSelect;\n        this.autoFocus = autoFocus;\n\n        this.formField = FormInputField;\n    }\n}","import { BaseModel, IBaseModelProps } from \"./base-model\";\nimport * as Yup from \"yup\";\n\ninterface ILabelProps {\n    text?: labelTypes;\n    user?: any;\n    color?: string;\n    order?: number;\n}\n\nexport class Label extends BaseModel {\n    public text: labelTypes;\n    public user: any;\n    public color: string;\n    public order: number;\n\n    constructor({\n        text = labelTypes.TARGET,\n        user = null,\n        color = \"\",\n        order = 0,\n        ...args\n    }: ILabelProps & IBaseModelProps) {\n        super(args);\n        this.text = text;\n        this.user = user;\n\n        this.color = color;\n        this.order = order;\n    }\n\n    static schema(){\n        return Yup.object<Label>().shape({\n            text:  Yup.string().max(200),\n            color: Yup.string().max(20),\n            order: Yup.number()\n        });\n    }\n}\n\nexport enum labelTypes {\n    TARGET = \"Target\",\n    APPLIED = \"Applied\",\n    INTERVIEWING = \"Interviewing\",\n    ARCHIVED = \"Archived\",\n}\n\nexport enum TabNames {\n    ALL = 0,\n    TARGET = 1,\n    APPLIED = 2,\n    INTERVIEWING = 3,\n    ARCHIVED = 4\n}\n","import React from \"react\";\n\nimport { FormikValues } from \"formik\";\nimport { RestApiService } from \"../../utils/rest-api\";\nimport { AuthenticationService } from \"../../utils/authentication\";\nimport { FormBaseFieldMeta, InputFieldType } from \"../form-factory/form-base-field/form-base-field-meta\";\nimport { FormInputFieldMeta } from \"../form-factory/form-input-field/form-input-field-meta\";\nimport { FormActionButtonProps, ActionButtonType, FormFactory } from \"../form-factory/form-factory\";\n// yup\nimport * as Yup from 'yup';\n\ninterface ILoginFormProps {\n    onCancel: () => void\n    onSubmit: (values: FormikValues, setSubmitting: Function) => void\n}\n\nexport const LoginForm = (props: ILoginFormProps) => {\n\n    const formFieldPropsList: Array<FormBaseFieldMeta> = [\n        new FormInputFieldMeta({\n            fieldName: \"username\",\n            label: \"Username\",\n            autoFocus: true\n        }),\n        new FormInputFieldMeta({\n            fieldName: \"password\",\n            label: \"Password\",\n            type: InputFieldType.PASSWORD\n        }),\n    ];\n    const actionButtonPropsList: Array<FormActionButtonProps> = [\n        new FormActionButtonProps(\"Login\", undefined, ActionButtonType.SUBMIT),\n        new FormActionButtonProps(\"Cancel\", props.onCancel)\n    ];\n\n    const onSubmitLoginForm = async (\n        values: FormikValues,\n        { setSubmitting }: { setSubmitting: Function }\n    ) => {\n        setSubmitting(true);\n\n        props.onSubmit(values, setSubmitting);\n    };\n\n    // validation\n    const loginFormInitialValues = {\n        username: \"guest\",\n        password: \"appltracky\"\n    }\n    type ILoginFormShape = typeof loginFormInitialValues;\n    const validationSchema: Yup.Schema<ILoginFormShape> = Yup.object<ILoginFormShape>().shape({\n        username: Yup.string().required(\"Forgot to type username...?\"),\n        password: Yup.string().required(\"Password please...!\")\n    })\n\n\n    return (\n        <div className=\"loginForm\">\n            <FormFactory\n                initialValues={loginFormInitialValues}\n    \n                formFieldPropsList={formFieldPropsList}\n                actionButtonPropsList={actionButtonPropsList}\n\n                validationSchema={validationSchema}\n    \n                onSubmit={onSubmitLoginForm}\n            />\n        </div>\n    )\n}","import React, { Component } from \"react\";\nimport { withRouter, RouteComponentProps, Redirect } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch, AnyAction } from \"redux\";\nimport { IRootState } from \"../../state-management/types/root-types\";\nimport { IUpdateAuthState, RequestedLoginMode } from \"../../state-management/types/auth-types\";\nimport { RequestedLoginAuth } from \"../../state-management/action-creators/auth-actions\";\nimport { FormikValues } from \"formik\";\n\n/** Components */\nimport { LoginForm } from \"../../components/login/local-login-form\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\n\n\ninterface ILocalLoginPageProps extends RouteComponentProps {\n    /** redux state */\n    auth: IUpdateAuthState;\n\n    /** dispatch action */\n    requestedLoginAuth: (username: string, password: string, onCompleteCallback: () => void) => void;\n}\n\nclass LocalLoginPage extends Component<ILocalLoginPageProps> {\n    onLoginFormCancel = () => {\n        this.props.history.goBack();\n    }\n\n    onLoginFormSubmit = (values: FormikValues, setSubmitting: Function) => {\n        this.props.requestedLoginAuth(values.username, values.password, () => {\n            setSubmitting(false);\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"LocalLoginPage\">\n                <h1>Login Portal for local sign in</h1>\n                <div>\n                    If you just want to try it out, you can use guest account:\n                    <div>\n                        username: guest\n                    </div>\n                    <div>\n                        password: appltracky\n                    </div>\n                </div>\n\n                <LoginForm\n                    onSubmit={this.onLoginFormSubmit}\n                    onCancel={this.onLoginFormCancel}\n                />\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    auth: store.auth\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>) => {\n    // actionName: (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {\n        requestedLoginAuth: (username: string, password: string, onCompleteCallback: () => void) => {\n            dispatch(\n                RequestedLoginAuth(RequestedLoginMode.LOCAL, {\n                    username, password\n                }, onCompleteCallback)\n            );\n        },\n    }\n};\n\nexport const LocalLoginPageContainer = withRouter(connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(LocalLoginPage));\n","class Utilities {\n    static normalizeText(rawText: string) {\n        return rawText.toLowerCase().trim()\n    }\n}\n\nexport {\n    Utilities\n};","import { BaseModel, IBaseModelProps } from \"./base-model\";\nimport * as Yup from \"yup\";\n\nexport interface IAddressProps {\n    place_name?: string;\n    country?: string;\n    state?: string;\n    city?: string;\n    street?: string;\n    full_address?: string;\n    zipcode?: string;\n}\n\nexport class Address extends BaseModel {\n    place_name: string;\n    country: string;\n    state: string;\n    city: string;\n    street: string;\n    full_address: string;\n    zipcode: string;\n\n    constructor({\n        place_name = \"\",\n        country = \"\",\n        state = \"\",\n        city = \"\",\n        street = \"\",\n        full_address = \"\",\n        zipcode = \"\",\n        ...args\n    }: IAddressProps & IBaseModelProps) {\n        super(args);\n        this.place_name = place_name;\n        this.country = country;\n        this.state = state;\n        this.place_name = place_name;\n        this.city = city;\n        this.street = street;\n        this.full_address = full_address;\n        this.zipcode = zipcode;\n    }\n\n    static schema(){\n        return Yup.object<Address>().shape({\n            full_address: Yup.string().max(200),\n            street: Yup.string().max(150),\n            city: Yup.string().max(50),\n            state: Yup.string().max(50),\n            country: Yup.string().max(50),\n            place_name: Yup.string().max(50),\n            zipcode: Yup.string().max(20),\n        });\n    }\n\n}\n","import { BaseModel, IBaseModelProps } from \"./base-model\";\nimport * as Yup from \"yup\";\n\ninterface ILinkProps {\n    text?: string;\n    user?: any;\n    url?: string;\n    order?: number;\n}\n\nexport class Link extends BaseModel {\n    public text: string;\n    public user: any;\n    public url: string;\n    public order: number;\n\n    constructor({\n        text = \"\",\n        user = {},\n        url = \"\",\n        order = 0,\n        ...args\n    }: ILinkProps & IBaseModelProps) {\n        super(args);\n        this.text = text;\n        this.user = user;\n        this.url = url;\n        this.order = order;\n    }\n\n    static schema(){\n        return Yup.object<Link>().shape({\n            text:  Yup.string().max(200),\n            url: Yup.string().default(\"#\").when(\n                \"text\", {\n                    is: (text) => text,\n                    then: Yup.string().required(\"Since you gave the link some text, let's provide an url as well...!\").max(500, \"URL is too long, only less than 500 characters please\")\n                }\n            ),\n        });\n    }\n}\n","import { BaseModel, IBaseModelProps, IReference } from \"../base-model\";\nimport { Address } from \"../address\";\nimport { Link } from \"../link\";\nimport { Label, labelTypes } from \"../label\";\nimport { Application } from \"../application/application\";\nimport * as Yup from \"yup\";\n\n\ninterface ICompanyProps {\n    user?: string;\n    labels?: Array<Label>;\n    name?: string;\n    hq_location?: Address;\n    home_page?: Link;\n    ratings?: any;\n    applications?: Array<Application> | Array<IReference>;\n}\n\nexport class Company extends BaseModel {\n    public user: string;\n    public labels: Array<Label>;\n    public name: string;\n    public hq_location: Address;\n    public home_page: Link;\n    public ratings: any;\n    public applications: Array<Application> | Array<IReference>;\n\n    constructor({\n        user = \"\",\n        labels = [],\n        name = \"\",\n        hq_location = new Address({}),\n        home_page = new Link({}),\n        ratings = {},\n        applications = [],\n        ...args\n    }: ICompanyProps & IBaseModelProps) {\n        super(args);\n        this.user = user;\n        this.labels = labels;\n        this.name = name;\n        this.hq_location = hq_location;\n        this.home_page = home_page;\n        this.ratings = ratings;\n        this.applications = applications;\n    }\n\n    static schema(){\n        return Yup.object<Company>().shape({\n            name: Yup.string().required(\"Every company needs a name...!\").max(100),\n            home_page: Link.schema(),\n            hq_location: Address.schema()\n        });\n    }\n\n    static getLabel(companyObject: Company): labelTypes {\n        // default to TARGET\n        return companyObject.labels && companyObject.labels.length ? companyObject.labels[0].text : labelTypes.TARGET;\n    }\n}\n\n\nexport type companyGroupTypes = \"targetCompany\" | \"appliedCompany\" | \"interviewingCompany\" | \"archivedCompany\";\n\nexport const labelTypesMapToCompanyGroupTypes: {\n    [key in labelTypes]: companyGroupTypes\n} = {\n    [labelTypes.TARGET]: \"targetCompany\",\n    [labelTypes.APPLIED]: \"appliedCompany\",\n    [labelTypes.INTERVIEWING]: \"interviewingCompany\",\n    [labelTypes.ARCHIVED]: \"archivedCompany\"\n};\n","import React, { Component } from \"react\";\n\n/** Components */\n// react-mdc tab\nimport '@material/react-tab-bar/dist/tab-bar.css';\nimport '@material/react-tab-scroller/dist/tab-scroller.css';\nimport '@material/react-tab/dist/tab.css';\nimport '@material/react-tab-indicator/dist/tab-indicator.css';\nimport Tab from '@material/react-tab';\nimport TabBar from '@material/react-tab-bar';\n\nimport { TabContent, ITabContentProps } from \"./tab-content\";\n\nimport { CSSTransition } from 'react-transition-group';\n\nimport leftSlideStyles from './tab-transition-slide-left.module.css';\nimport rightSlideStyles from './tab-transition-slide-right.module.css';\nimport styles from './tab-container.module.css';\nimport { TabNames } from \"../../data-model/label\";\n\n\nenum SlideDirection {\n    LEFTWARD = \"leftward\",\n    RIGHTWARD = \"rightward\"\n}\n\ninterface ITabContainerState {\n    activeIndex: number\n    tabContentSlideDirection: SlideDirection\n}\n\ninterface ITabContainerProps {\n    render?: () => React.ReactElement<ITabContentProps> | React.ReactElement<ITabContentProps>[]\n}\n\nexport class TabContainer extends Component<ITabContainerProps, ITabContainerState> {\n    state = {\n        activeIndex: TabNames.INTERVIEWING, // make interviewing the initial tab to be activated\n        tabContentSlideDirection: SlideDirection.RIGHTWARD\n    }\n\n    handleActiveIndexUpdate = (activeIndex: number) => {\n        this.setState({\n            activeIndex,\n            tabContentSlideDirection: (activeIndex > this.state.activeIndex) ?\n                SlideDirection.LEFTWARD : /** the tab item slides rightward, so content slides leftward */\n                SlideDirection.RIGHTWARD /** vice versa */\n        });\n    }\n\n    render() {\n        const tabContents = this.props.render ? (\n            this.props.render()\n        ) : [];\n        const tabContentList = Array.isArray(tabContents) ? tabContents : [tabContents];\n\n        return (\n            <div>\n                <TabBar\n                    className={`${styles.tabBar}`}\n                    activeIndex={this.state.activeIndex}\n                    handleActiveIndexUpdate={this.handleActiveIndexUpdate}\n                >\n                    {\n                        tabContentList.map((tabContent, index) => (\n                            <Tab key={index} tabIndex={index}>\n                                <span className='mdc-tab__text-label'>{tabContent.props.label}</span>\n                            </Tab>\n                        ))\n                    }\n                </TabBar>\n                {\n                    tabContentList.map((child, index) => {\n                        return (\n                            <CSSTransition\n                                key={index}\n                                classNames={this.state.tabContentSlideDirection === SlideDirection.RIGHTWARD ?\n                                    { ...rightSlideStyles } :\n                                    { ...leftSlideStyles }}\n                                in={this.state.activeIndex === index}\n                                timeout={500}\n                                unmountOnExit\n                            >\n                                <TabContent\n                                    {...child.props}\n                                />\n                            </CSSTransition>\n                        );\n                    })\n                }\n            </div>\n        )\n    }\n}\n","import React, { Component } from \"react\";\n\nimport styles from \"./tab-content.module.css\";\n\n\nexport interface ITabContentProps {\n    label: string\n}\n\nexport class TabContent extends Component<ITabContentProps> {\n    render() {\n        return (\n            <div className={styles.TabContent}>\n                {this.props.children}\n            </div>\n        )\n    }\n}\n","import { Action } from \"redux\";\nimport { IReference } from \"../../data-model/base-model\";\nimport { labelTypes } from \"../../data-model/label\";\nimport { RequestStatus } from \"../../utils/rest-api\";\n\nexport interface ISelectCompanyState {\n    selectCompanyCollection: Map<IReference, labelTypes>;\n    destinationStatus: labelTypes;\n    requestStatus: RequestStatus;\n}\n\nexport enum SelectCompanyActionNames {\n    CANCEL_ALL = \"Cancel all selected company\",\n    ADD_SELECT_COMPANY = \"Add select company\",\n    REMOVE_SELECT_COMPANY = \"Remove select company\",\n    SET_DESTINATION_STATUS = \"Set destination status\",\n    APPLY_ALL_CHANGES = \"Batch apply all company status changes\",\n    SET_REQUEST_STATUS = \"Set select company apply request status\",\n}\n\nexport interface ICancelAllSelectCompanyAction extends Action<SelectCompanyActionNames.CANCEL_ALL> {\n    type: typeof SelectCompanyActionNames.CANCEL_ALL;\n}\n\nexport interface IAddSelectCompanyAction extends Action<SelectCompanyActionNames.ADD_SELECT_COMPANY> {\n    type: typeof SelectCompanyActionNames.ADD_SELECT_COMPANY;\n    companyId: string;\n    companyStatus: labelTypes\n}\n\nexport interface IRemoveSelectCompanyAction extends Action<SelectCompanyActionNames.REMOVE_SELECT_COMPANY> {\n    type: typeof SelectCompanyActionNames.REMOVE_SELECT_COMPANY;\n    companyId: string\n}\n\nexport interface ISetDestinationStatusAction extends Action<SelectCompanyActionNames.SET_DESTINATION_STATUS> {\n    type: typeof SelectCompanyActionNames.SET_DESTINATION_STATUS;\n    status: labelTypes;\n}\n\nexport interface IApplyAllSelectCompanyChangesAction extends Action<SelectCompanyActionNames.APPLY_ALL_CHANGES> {\n    type: typeof SelectCompanyActionNames.APPLY_ALL_CHANGES;\n    destinationStatus: labelTypes;\n}\n\nexport interface ISetApplyAllSelectCompanyRequestStatusAction extends Action<SelectCompanyActionNames.SET_REQUEST_STATUS> {\n    type: typeof SelectCompanyActionNames.SET_REQUEST_STATUS;\n    requestStatus: RequestStatus\n}\n\nexport type TSelectCompanyActions = \n    ICancelAllSelectCompanyAction |\n    IAddSelectCompanyAction | \n    IRemoveSelectCompanyAction | \n    ISetDestinationStatusAction |\n    IApplyAllSelectCompanyChangesAction |\n    ISetApplyAllSelectCompanyRequestStatusAction;\n","import { labelTypes } from \"../../data-model/label\"\nimport { RequestStatus } from \"../../utils/rest-api\"\nimport { IAddSelectCompanyAction, IApplyAllSelectCompanyChangesAction, ICancelAllSelectCompanyAction, IRemoveSelectCompanyAction, ISetApplyAllSelectCompanyRequestStatusAction, ISetDestinationStatusAction, SelectCompanyActionNames } from \"../types/select-company-types\"\n\nexport const CancelAllSelectCompany = (): ICancelAllSelectCompanyAction => {\n    return {\n        type: SelectCompanyActionNames.CANCEL_ALL\n    }\n}\n\nexport const AddSelectCompany = (companyId: string, companyStatus: labelTypes): IAddSelectCompanyAction => {\n    return {\n        type: SelectCompanyActionNames.ADD_SELECT_COMPANY,\n        companyId,\n        companyStatus\n    }\n}\n\nexport const RemoveSelectCompany = (companyId: string): IRemoveSelectCompanyAction => {\n    return {\n        type: SelectCompanyActionNames.REMOVE_SELECT_COMPANY,\n        companyId\n    }\n}\n\nexport const SetDestinationStatus = (status: labelTypes): ISetDestinationStatusAction => {\n    return {\n        type: SelectCompanyActionNames.SET_DESTINATION_STATUS,\n        status\n    }\n}\n\nexport const ApplyAllSelectCompanyChangesStatus = (destinationStatus: labelTypes): IApplyAllSelectCompanyChangesAction => {\n    return {\n        type: SelectCompanyActionNames.APPLY_ALL_CHANGES,\n        destinationStatus\n    }\n}\n\nexport const SetApplyAllSelectCompanyRequestStatus = (requestStatus: RequestStatus): ISetApplyAllSelectCompanyRequestStatusAction => {\n    return {\n        type: SelectCompanyActionNames.SET_REQUEST_STATUS,\n        requestStatus\n    }\n}\n","import { RestApiActionCreatorsFactory } from \"./action-creator-factory\";\nimport { companyGroupTypes, labelTypesMapToCompanyGroupTypes, Company } from \"../../data-model/company/company\";\nimport { IObjectRestApiReduxFactoryActions } from \"../types/factory-types\";\nimport { Application } from \"../../data-model/application/application\";\nimport { ApplicationStatus } from \"../../data-model/application-status/application-status\";\n\n\nexport enum RootActionNames {\n    ResetAllStore = \"RESET_ALL_STORE\"\n}\n\nexport const resetAllStoreAction = () => {\n    return {\n        type: RootActionNames.ResetAllStore,\n    }\n}\n\n\n// action creators for companies\n\nexport const CompanyActionCreators = RestApiActionCreatorsFactory<Company>(\"companies\");\n\nconst groupedCompanyActionCreatorsHelper = () => {\n    return Object.values(labelTypesMapToCompanyGroupTypes).reduce((accumulated, companyGroupText) => {\n        return {\n            ...accumulated,\n            [companyGroupText]: RestApiActionCreatorsFactory<Company>(companyGroupText)\n        }\n    }, {});\n}\nexport const GroupedCompanyActionCreators = groupedCompanyActionCreatorsHelper() as {\n    [key in companyGroupTypes]: IObjectRestApiReduxFactoryActions\n};\n\n\n// action creators for application\n\nexport const ApplicationActionCreators = RestApiActionCreatorsFactory<Application>(\"applications\")\n\n\n// action creators for status\n\nexport const ApplicationStatusActionCreators = RestApiActionCreatorsFactory<ApplicationStatus>(\"application-statuses\")","import Checkbox from \"@material-ui/core/Checkbox\";\nimport React, { useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Company } from \"../../data-model/company/company\";\nimport { labelTypes } from \"../../data-model/label\";\nimport { AddSelectCompany, RemoveSelectCompany } from \"../../state-management/action-creators/select-company-actions\";\nimport { IRootState } from \"../../state-management/types/root-types\";\n\n\ninterface ICompanyListItemCheckBoxProps {\n    company: Company;\n}\n\nconst CompanyListItemCheckBox = ({ company: { uuid: companyId, labels } }: ICompanyListItemCheckBoxProps) => {\n    const dispatch = useDispatch();\n    const selectCompanyCollection = useSelector((state: IRootState) => state.selectCompany.selectCompanyCollection);\n    \n    const onCheckBoxChange = useCallback((event) => {\n        if (event.target.checked) {\n            // support only single label/status for now\n            // for companies that does not have status set, default to `target`\n            dispatch(AddSelectCompany(companyId, labels.length ? labels[0].text : labelTypes.TARGET));\n        } else {\n            dispatch(RemoveSelectCompany(companyId));\n        }\n    }, [dispatch, companyId, labels])\n\n    return (\n        <Checkbox\n            edge=\"end\"\n            checked={selectCompanyCollection.has(companyId)}\n            onChange={onCheckBoxChange}\n        />\n    )\n}\n\nexport default CompanyListItemCheckBox;","import React from \"react\";\n\n/** Redux & data models */\nimport { Company } from \"../../data-model/company/company\";\nimport { Application } from \"../../data-model/application/application\";\n\n/** Components */\nimport '@material/react-card/dist/card.css';\nimport List, { ListItem, ListItemText } from \"@material/react-list\";\nimport MaterialUIListItem from \"@material-ui/core/ListItem\";\nimport MaterialUIButton from \"@material-ui/core/Button\";\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\n\nimport '@material/react-list/dist/list.css';\n// mdc-chips\nimport { ChipSet, Chip } from '@material/react-chips';\nimport \"@material/react-chips/dist/chips.css\";\n\nimport Skeleton from 'react-loading-skeleton';\n\nimport styles from './company-list-item.module.css';\nimport { Typography } from \"@material-ui/core\";\nimport CompanyListItemCheckBox from \"./company-list-item-checkbox\";\n\n\ninterface ICompanyListItemProps {\n    company?: Company;\n    applications?: Array<Application>\n    onClick?: (uuid: string) => void\n}\n\nconst CompanyListItem = (props: ICompanyListItemProps) => {\n    const onClick = () => {\n        props.onClick && props.company && props.onClick(props.company.uuid);\n    }\n\n    return (\n        <MaterialUIListItem className={false ? styles.companyCard : ''}>\n            <div className={styles.companyCardContent}>\n                <MaterialUIButton onClick={onClick}>\n                    <Typography variant=\"h5\">\n                        {props.company ? props.company.name : <Skeleton duration={1.1} width={`50vmin`} />}\n                    </Typography>\n                </MaterialUIButton>\n\n                {props.company ? (\n                    props.company.labels.length && props.company.labels[0].text ? (\n                        <ChipSet>\n                            <Chip label={props.company.labels[0].text} />\n                        </ChipSet>\n                    ) : (\n                        <ChipSet>\n                            <Chip label=\"None\" />\n                        </ChipSet>\n                    )\n                ) : (\n                    <Skeleton width=\"40px\" />\n                )}\n\n                <List nonInteractive>\n                    {\n                        props.applications ? props.applications.map((application: Application) => (\n                            <ListItem key={application.uuid}>\n                                <ListItemText primaryText={application.position_title} />\n                            </ListItem>\n                        )) : (\n                                <div className=\"skeletonGroup\">\n                                    <div><Skeleton duration={1.1} width=\"40vmin\" /></div>\n                                    <div><Skeleton duration={1.1} width=\"60vmin\" /></div>\n                                    <div><Skeleton duration={1.1} width=\"50vmin\" /></div>\n                                </div>\n                            )\n                    }\n                </List>\n                <ListItemSecondaryAction>\n                    {props.company?.uuid ? <CompanyListItemCheckBox company={props.company} /> : null}\n                </ListItemSecondaryAction>\n            </div>\n        </MaterialUIListItem>\n    );\n}\n\nexport {\n    CompanyListItem\n};","import React, { Component } from \"react\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\nimport { Utilities } from \"../../utils/utilities\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../state-management/types/root-types\";\nimport { IObjectAction, IObjectStore } from \"../../state-management/types/factory-types\";\nimport { InputFieldType } from \"../../components/form-factory/form-base-field/form-base-field-meta\";\n// data models\nimport { Company, labelTypesMapToCompanyGroupTypes, companyGroupTypes } from \"../../data-model/company/company\";\nimport { labelTypes } from \"../../data-model/label\";\nimport { Application } from \"../../data-model/application/application\";\n\n/** Components */\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport MaterialUIList from \"@material-ui/core/List\";\nimport Button from \"@material/react-button\";\n\n// mdc-react input\nimport \"@material/react-text-field/dist/text-field.css\";\nimport TextField, { Input } from \"@material/react-text-field\";\n\nimport { TabContainer } from \"../../components/tab/tab-container\";\nimport { TabContent } from \"../../components/tab/tab-content\";\n\n// objects\nimport { CompanyListItem } from \"../../components/company/company-list-item\";\nimport { RequestStatus } from \"../../utils/rest-api\";\n\nimport {\n    Body1,\n    Body2,\n    // Button,\n    Caption,\n    Headline1,\n    Headline2,\n    Headline3,\n    Headline4,\n    Headline5,\n    Headline6,\n    Overline,\n    Subtitle1,\n    Subtitle2,\n} from '@material/react-typography';\nimport '@material/react-typography/dist/typography.css';\n\n// styling\nimport styles from \"./user-app-page.module.css\";\nimport { IReference } from \"../../data-model/base-model\";\n\n\ninterface IUserAppPageProps extends RouteComponentProps {\n    company: IObjectStore<Company>\n    targetCompany: IObjectStore<Company>\n    appliedCompany: IObjectStore<Company>\n    interviewingCompany: IObjectStore<Company>\n    archivedCompany: IObjectStore<Company>\n\n    application: IObjectStore<Application>\n}\n\ninterface IUserAppPageState {\n    searchText: string\n    isFiltering: boolean\n    filteredCompanyList: Array<Company>\n    activeTabIndex: number\n}\n\nclass UserAppPage extends Component<IUserAppPageProps, IUserAppPageState> {\n    state = {\n        searchText: '',\n        isFiltering: false,\n        filteredCompanyList: [],\n        activeTabIndex: 0\n    };\n\n    onCompanyClick = (uuid: string) => {\n        setTimeout(() => this.props.history.push(`/com-app/${uuid}/`), 10);\n    }\n\n    searchFieldTextIsEmpty = () => {\n        return Utilities.normalizeText(this.state.searchText) === '';\n    }\n\n    filterCompanyByName = (name: string) => {\n        const filteringName = Utilities.normalizeText(name);\n        const allCompanies = Object.values(this.props.company.collection);\n\n        this.setState({\n            filteredCompanyList: allCompanies.filter((company: Company) => Utilities.normalizeText(company.name).includes(filteringName)),\n\n            // always switch on filering mode when filtering is triggered\n            isFiltering: true\n        })\n    }\n\n    onSearchFieldChange = (event: React.FormEvent<HTMLInputElement>) => {\n        this.setState({\n            searchText: event.currentTarget.value,\n        }, () => {\n            this.setState({\n                // switch off filtering mode if field becomes empty\n                isFiltering: this.searchFieldTextIsEmpty() ? false : this.state.isFiltering\n            })\n        });\n    }\n\n    onSearchFieldKeyDown = (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key.toLowerCase() === 'enter') {\n            !this.searchFieldTextIsEmpty() && this.filterCompanyByName(this.state.searchText);\n        }\n    }\n\n    onSearchFieldClear = () => {\n        this.setState({ searchText: '', isFiltering: false });\n    }\n\n    handleActiveTabIndexUpdate = (activeTabIndex: number) => this.setState({ activeTabIndex });\n\n    render() {\n        const allCompanies = Object.values(this.props.company.collection);\n\n        // for searching feature\n        const displayingCompanies = this.props.company.requestStatus !== RequestStatus.REQUESTING ? this.state.isFiltering ? this.state.filteredCompanyList : allCompanies : Array.from(Array(5));\n\n        return (\n            <div>\n                <div className={styles.UserAppPageHeader}>\n                    <Headline3>Your Organizations</Headline3>\n                    <Button\n                        className=\"mdc-theme-secondary\"\n                        onClick={() => { this.props.history.push(\"/com-form/\") }}\n                        unelevated\n                        icon={<MaterialIcon hasRipple icon=\"add\" />}\n                        children=\"Add Organization\"\n                    />\n                </div>\n                <TabContainer\n                    render={() => {\n                        const allCompanyTab = (<TabContent label=\"All\">\n                            <div className={styles.companyListHeader}>\n                                <TextField\n                                    className={styles.searchField}\n                                    label=\"Search Company Name\"\n                                    outlined\n                                    leadingIcon={<MaterialIcon role=\"button\" icon=\"search\" />}\n                                    trailingIcon={this.state.searchText === '' ? undefined : <MaterialIcon role=\"button\" icon=\"clear\" />}\n                                    onTrailingIconSelect={this.onSearchFieldClear}\n                                >\n                                    <Input\n                                        type={InputFieldType.TEXT}\n                                        inputType=\"input\"\n                                        onKeyDown={this.onSearchFieldKeyDown}\n                                        onChange={this.onSearchFieldChange}\n                                        value={this.state.searchText}\n                                    />\n                                </TextField>\n                            </div>\n                            <MaterialUIList>\n                                {\n                                    displayingCompanies.map(\n                                        (company, index) =>\n                                            <CompanyListItem\n                                                key={company ? company.uuid : index}\n                                                company={company}\n                                                applications={company ? Object.values(this.props.application.collection).filter((application) => application.user_company === company.uuid) : undefined}\n                                                onClick={company ? this.onCompanyClick : undefined}\n                                            />\n                                    )\n                                }\n                            </MaterialUIList>\n                        </TabContent>)\n\n                        const groupCompanyTabs = Object.values(labelTypes).map((labelText: labelTypes, index) => {\n                            return (\n                                <TabContent key={index} label={`${labelText} (${Object.keys(this.props[labelTypesMapToCompanyGroupTypes[labelText]].collection).length})`}>\n                                    <div className={styles.companyListHeader}>\n                                        <h1>{labelText}</h1>\n                                    </div>\n                                    <div>\n                                        {\n                                            Object.values(this.props[labelTypesMapToCompanyGroupTypes[labelText]].collection).map(\n                                                (companyRef, index) => {\n                                                    const company = this.props.company.collection[companyRef.uuid];\n                                                    const applications = company ? (company.applications as Array<IReference>).map((applicationUuid) => {\n                                                        return this.props.application.collection[applicationUuid];\n                                                    }) : undefined;\n\n                                                    return (\n                                                        <CompanyListItem\n                                                            key={company ? company.uuid : index}\n                                                            company={company}\n                                                            applications={applications}\n                                                            onClick={company ? this.onCompanyClick : undefined}\n                                                        />\n                                                    )\n                                                }\n                                            )\n                                        }\n                                    </div>\n                                </TabContent>\n                            )\n                        })\n\n                        return [\n                            allCompanyTab,\n                            ...groupCompanyTabs\n                        ]\n                    }}\n                />\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    // prop: store.prop\n    company: store.company,\n\n    ...(Object.values(labelTypesMapToCompanyGroupTypes).reduce((accumulated, labelText) => ({\n        ...accumulated,\n        [labelText]: store[labelText]\n    }), {}) as {[key in companyGroupTypes]: IObjectStore<Company>}),\n\n    application: store.application,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<{}>>) => {\n    // actionName = (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n\n    return {\n        // listObject: (callback?: Function) =>\n        //     dispatch(\n        //         ObjectActions[CrudType.LIST][RequestStatus.TRIGGERED].action(\n        //             new Object({}),\n        //             callback\n        //         )\n        //     ),\n    }\n};\n\nexport const UserAppPageContainer = withRouter(connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(UserAppPage));\n","import { IObjectBase, TObject, IObjectRestApiReduxFactoryActions, JsonResponseType, ITriggerActionOptions, IObjectAction, ObjectRestApiJsonResponse } from \"../types/factory-types\";\n\nimport { CrudType, RequestStatus, IsSingleRestApiResponseTypeGuard, ISingleRestApiResponse, IListRestApiResponse } from \"../../utils/rest-api\";\n\n\nexport const RestApiActionCreatorsFactory = <ObjectRestApiSchema extends IObjectBase>(\n    /** should have uuid */ objectName: string\n): IObjectRestApiReduxFactoryActions => {\n    const crudKeywords = Object.values(CrudType);\n\n    let ObjectRestApiActions: IObjectRestApiReduxFactoryActions = {};\n    for (let crudKeyword of crudKeywords) {\n        ObjectRestApiActions[crudKeyword] = {};\n\n        /** action */\n        // action type names\n        for (let requestStatus of Object.values(RequestStatus)) {\n            ObjectRestApiActions[crudKeyword][requestStatus] = {\n                actionTypeName: \"\",\n                action: () => {}\n            };\n            ObjectRestApiActions[crudKeyword][\n                requestStatus\n            ].actionTypeName = `${requestStatus.toUpperCase()}_${crudKeyword.toUpperCase()}_${objectName.toUpperCase()}`;\n        }\n\n        // async actions ( & state...)\n        ObjectRestApiActions[crudKeyword][RequestStatus.TRIGGERED].action = (\n            objectClassInstance?: ObjectRestApiSchema,\n            successCallback?: (jsonResponse: JsonResponseType<ObjectRestApiSchema>) => void,\n            failureCallback?: (error: any) => void,\n            finalCallback?: Function,\n            absoluteUrl?: string,\n            triggerActionOptions?: ITriggerActionOptions<ObjectRestApiSchema>\n        ): IObjectAction<ObjectRestApiSchema> => {\n            return {\n                type:\n                    ObjectRestApiActions[crudKeyword][RequestStatus.TRIGGERED]\n                        .actionTypeName,\n                crudType: crudKeyword,\n                finalCallback,\n                successCallback,\n                failureCallback,\n                absoluteUrl,\n                triggerActionOptions,\n                payload: {\n                    requestStatus: RequestStatus.TRIGGERED,\n                    formData: objectClassInstance\n                }\n            };\n        };\n        ObjectRestApiActions[crudKeyword][\n            RequestStatus.REQUESTING\n        ].action = (): IObjectAction<ObjectRestApiSchema> => {\n            return {\n                type:\n                    ObjectRestApiActions[crudKeyword][RequestStatus.REQUESTING]\n                        .actionTypeName,\n                crudType: crudKeyword,\n                payload: {\n                    requestStatus: RequestStatus.REQUESTING\n                }\n            };\n        };\n        ObjectRestApiActions[crudKeyword][RequestStatus.SUCCESS].action = (\n            /** api response */\n            jsonResponse: ObjectRestApiJsonResponse<ObjectRestApiSchema>,\n            triggerFormData?: TObject<ObjectRestApiSchema> | Array<TObject<ObjectRestApiSchema>>\n        ): IObjectAction<ObjectRestApiSchema> => {\n            let newState = {\n                type:\n                    ObjectRestApiActions[crudKeyword][RequestStatus.SUCCESS]\n                        .actionTypeName,\n                crudType: crudKeyword\n            };\n            // if is delete success, we don't need formData (& the server responds nothing for DELETE as well)\n            if (crudKeyword === CrudType.DELETE) {\n                return {\n                    ...newState,\n                    triggerFormData,\n                    payload: {\n                        requestStatus: RequestStatus.SUCCESS,\n                    }\n                }\n            }\n            else if (IsSingleRestApiResponseTypeGuard(jsonResponse)) {\n                return {\n                    ...newState,\n                    payload: {\n                        requestStatus: RequestStatus.SUCCESS,\n                        formData: <ISingleRestApiResponse<ObjectRestApiSchema>>(\n                            jsonResponse\n                        )\n                    }\n                };\n            } else {\n                const formData = \n                    // if not coming from API request, i.e., saga manually called batchCreateAction(objects)\n                    // then we just use it as-is\n                    Array.isArray(jsonResponse) ? jsonResponse as TObject<ObjectRestApiSchema>[] :\n                    // otherwise, it's a API response, which nests objects in `.results`\n                    (<IListRestApiResponse<ObjectRestApiSchema>>(jsonResponse)).results;\n                \n                return {\n                    ...newState,\n                    payload: {\n                        requestStatus: RequestStatus.SUCCESS,\n                        formData\n                    }\n                };\n            }\n        };\n        ObjectRestApiActions[crudKeyword][RequestStatus.FAILURE].action = (\n            error: any\n        ): IObjectAction<ObjectRestApiSchema> => {\n            return {\n                type:\n                    ObjectRestApiActions[crudKeyword][RequestStatus.FAILURE]\n                        .actionTypeName,\n                crudType: crudKeyword,\n                payload: {\n                    requestStatus: RequestStatus.FAILURE,\n                    error\n                }\n            };\n        };\n    }\n\n    return ObjectRestApiActions;\n}\n","import React from \"react\";\n\n/** Components */\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n// mdc-react icon button\nimport '@material/react-icon-button/dist/icon-button.css';\nimport IconButton from '@material/react-icon-button';\n// data model\nimport { DataModelClass } from \"../../../data-model/base-model\";\n// formik\nimport {\n    FieldArray,\n    ArrayHelpers,\n} from \"formik\";\n// base field\nimport { IFormBaseFieldProps } from \"./form-base-field-meta\";\n\n\ninterface IFormBaseDyanmicFieldControllsProps {\n    index: number\n    formikArrayHelpers: ArrayHelpers\n}\n\nconst FormBaseDynamicFieldControlls = (props: IFormBaseDyanmicFieldControllsProps) => {\n\n    const deleteField = () => {\n        window.confirm(`Are you sure you want to delete this dynamic field?`) && props.formikArrayHelpers.remove(props.index);\n    }\n\n    return (\n        <div className=\"FormBaseDynamicFieldControlls\">\n            <IconButton type=\"button\" onClick={deleteField}>\n                <MaterialIcon hasRipple icon=\"delete\" />\n            </IconButton>\n        </div>\n    )\n}\n\nconst BaseDynamicFieldAddButton = (props: {\n    formikArrayHelpers: ArrayHelpers\n    model?: DataModelClass\n    label: string\n}) => {\n\n    const onAddClick = () => {\n        if (props.model) {\n            const model = props.model;\n            props.formikArrayHelpers.push(new model({}));\n        } else {\n            props.formikArrayHelpers.push({});\n        }\n    }\n\n    return (\n        <Button type=\"button\" onClick={onAddClick} children={`New ${props.label}`} />\n    )\n}\n\nexport const withFormBaseField = (FormFieldComponent: React.ComponentType<IFormBaseFieldProps>) => (props: IFormBaseFieldProps) => {\n\n    if (props.isDynamic && !props.formikValues) {\n        alert(\"Oops! Something's wrong.\");\n        throw Error(\"When `isDynamic` is true, you need to pass over `formikValues`.\");\n    }\n\n    const formikValues = props.formikValues;\n    const getInstanceDataFromFormikValues = props.getInstanceDataFromFormikValues;\n\n    return (\n        (props.isDynamic && getInstanceDataFromFormikValues && formikValues) ?\n            (<FieldArray\n                name={props.fieldName}\n                render={formikArrayHelpers => (\n                    <div className=\"FormApplicationStatusLinkFieldsContainer\">\n                        {getInstanceDataFromFormikValues(formikValues).map((instanceData: any, index: number) => (\n                            <div key={index} className=\"FormBaseDynamicField\">\n                                <FormFieldComponent\n                                    fieldName={`${props.fieldName}[${index}]`}\n                                    label={`${props.label} ${index}`}\n                                    formikValues={props.formikValues}\n                                    getInstanceDataFromFormikValues={props.getInstanceDataFromFormikValues}\n                                />\n                                <FormBaseDynamicFieldControlls\n                                    index={index}\n                                    formikArrayHelpers={formikArrayHelpers}\n                                />\n                            </div>\n                        ))}\n\n                        <BaseDynamicFieldAddButton\n                            formikArrayHelpers={formikArrayHelpers}\n                            label={props.label}\n                            model={props.model}\n                        />\n                    </div>\n                )}\n            />)\n            :\n            (<FormFieldComponent\n                fieldName={props.fieldName}\n                label={props.label}\n                formikValues={props.formikValues}\n                getInstanceDataFromFormikValues={props.getInstanceDataFromFormikValues}\n            />)\n    )\n}\n","/** Components */\n// base field\nimport { withFormBaseField } from \"../form-base-field/form-base-field\";\n// link field\nimport { FormLinkFieldComponent } from \"./form-link-field-component\";\n\nexport const FormLinkField = withFormBaseField(FormLinkFieldComponent);\n","import React, { Component } from \"react\";\n\n/** Components */\n// mdc-react input\nimport \"@material/react-text-field/dist/text-field.css\";\nimport { Overline } from \"@material/react-typography\";\n\nimport { FormInputFieldMeta } from \"../form-input-field/form-input-field-meta\";\nimport { FormInputField } from \"../form-input-field/form-input-field\";\nimport { IFormBaseFieldProps } from \"../form-base-field/form-base-field-meta\";\n\n\nexport interface IFormLinkFieldComponentProps extends IFormBaseFieldProps {\n}\n\nexport class FormLinkFieldComponent extends Component<IFormLinkFieldComponentProps> {\n\n    textInputFieldMeta: FormInputFieldMeta;\n    urlInputFieldMeta: FormInputFieldMeta;\n\n    constructor(props: IFormLinkFieldComponentProps) {\n        super(props)\n\n        this.textInputFieldMeta = new FormInputFieldMeta({\n            fieldName: `${this.props.fieldName}.text`,\n            label: \"Description\",\n            autoFocus: true\n        });\n        this.urlInputFieldMeta = new FormInputFieldMeta({\n            fieldName: `${this.props.fieldName}.url`,\n            label: \"Link url\"\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"FormLinkField\">\n                {this.props.label && <Overline>{this.props.label}</Overline>}\n                <FormInputField\n                    {...this.textInputFieldMeta}\n                />\n\n                <FormInputField\n                    {...this.urlInputFieldMeta}\n                />\n            </div>\n        );\n    }\n}","// data model\nimport { Link } from \"../../../data-model/link\";\n\n/** Components */\n// base field\nimport { IFieldBaseMetaProps, FormBaseFieldMeta } from \"../form-base-field/form-base-field-meta\";\nimport { FormLinkField } from \"./form-link-field\";\n\nexport class FormLinkFieldMeta extends FormBaseFieldMeta {\n\n    constructor(props: IFieldBaseMetaProps) {\n        super(props)\n        this.model = Link;\n        this.formField = FormLinkField;\n    }\n}\n","/** Components */\n// base field\nimport { withFormBaseField } from \"../form-base-field/form-base-field\";\n// link field\nimport { FormAddressFieldComponent } from \"./form-address-field-component\";\n\nexport const FormAddressField = withFormBaseField(FormAddressFieldComponent);\n","import React, { Component } from \"react\";\n\n/** Components */\n// mdc-react input\nimport \"@material/react-text-field/dist/text-field.css\";\nimport { Overline } from '@material/react-typography';\n\nimport { FormInputFieldMeta } from \"../form-input-field/form-input-field-meta\";\nimport { FormInputField } from \"../form-input-field/form-input-field\";\nimport { IFormBaseFieldProps } from \"../form-base-field/form-base-field-meta\";\n\n\nexport interface IFormAddressFieldComponentProps extends IFormBaseFieldProps {\n}\n\nexport class FormAddressFieldComponent extends Component<IFormAddressFieldComponentProps> {\n\n    fullAddressInputFieldMeta: FormInputFieldMeta;\n    placeNameInputFieldMeta: FormInputFieldMeta;\n\n    constructor(props: IFormAddressFieldComponentProps) {\n        super(props);\n\n        this.fullAddressInputFieldMeta = new FormInputFieldMeta({\n            fieldName: `${this.props.fieldName}.full_address`,\n            label: `Full Address`\n        });\n        this.placeNameInputFieldMeta = new FormInputFieldMeta({\n            fieldName: `${this.props.fieldName}.place_name`,\n            label: `Place Name`\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"FormAddressField\">\n                {this.props.label && <Overline>{this.props.label}</Overline>}\n                \n                <FormInputField\n                    {...this.placeNameInputFieldMeta}\n                />\n\n                <FormInputField\n                    {...this.fullAddressInputFieldMeta}\n                />\n                \n            </div>\n        );\n    }\n}","// data model\nimport { Address } from \"../../../data-model/address\";\n\n/** Components */\n// base field\nimport { IFieldBaseMetaProps, FormBaseFieldMeta } from \"../form-base-field/form-base-field-meta\";\nimport { FormAddressField } from \"./form-address-field\";\n\nexport class FormAddressFieldMeta extends FormBaseFieldMeta {\n\n    constructor(props: IFieldBaseMetaProps) {\n        super(props)\n        this.model = Address;\n        this.formField = FormAddressField;\n    }\n}\n","import React, { Component, FunctionComponent, useState, useEffect } from \"react\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { IRootState } from \"../../state-management/types/root-types\";\nimport { Label, labelTypes } from \"../../data-model/label\";\n\n/** Components */\nimport { ChipSet, Chip } from '@material/react-chips';\nimport \"@material/react-chips/dist/chips.css\";\nimport { Overline } from \"@material/react-typography\";\n\n\ninterface ILabelGroupComponentProps extends RouteComponentProps {\n    titleText?: string\n    selectedLabels?: Label[]\n    onChange?: (selectedLabelText: labelTypes) => void\n}\n\nconst LabelGroupComponent: FunctionComponent<ILabelGroupComponentProps> = (props) => {\n    const [selectedLabels, setSelectedLabels] = useState<labelTypes[]>(\n        props.selectedLabels && props.selectedLabels.length ? [props.selectedLabels[0].text] : [labelTypes.TARGET]\n    );\n\n    const handleSelectionChange = (selectedLabels: Array<string>) => {\n        setSelectedLabels(selectedLabels as labelTypes[]);\n    }\n\n    // signal the change to external world\n    useEffect(()=> {\n        props.onChange && props.onChange(selectedLabels[0]);\n    }, [selectedLabels]);\n\n    return (\n        <div className=\"LabelGroupComponent\">\n            {props.titleText && <Overline>{props.titleText}</Overline>}\n            <ChipSet choice selectedChipIds={selectedLabels} handleSelect={handleSelectionChange}>\n                {\n                    Object.values(labelTypes).map((labelText, index) => {\n                        return <Chip key={index} id={labelText} label={labelText} />\n                    })\n                }\n            </ChipSet>\n        </div>\n    )\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    // prop: store.prop\n});\n\nexport const LabelGroupComponentContainer = withRouter(connect(\n    mapStateToProps,\n    // mapDispatchToProps\n)(LabelGroupComponent));\n","import React, { Component } from \"react\";\n\n/** Components */\nimport { LabelGroupComponentContainer } from \"../../label/label-group-component\";\nimport { labelTypes } from \"../../../data-model/label\";\nimport { Label } from \"../../../data-model/label\";\n// formik\nimport {\n    Field, FieldProps,\n    ErrorMessage,\n} from \"formik\";\n// label field\nimport { IFormLabelFieldProps } from \"./form-label-field-meta\";\n\n\nexport class FormLabelField extends Component<IFormLabelFieldProps> {\n\n    render() {\n        return (\n            <div className=\"FormLabelField\">\n                <Field\n                    name={this.props.fieldName}\n                    render={({ field, form }: FieldProps<number | string>) => (\n                        <LabelGroupComponentContainer \n                            titleText={this.props.label}\n                            selectedLabels={field.value}\n                            onChange={(selectedLabelText: labelTypes) => {\n                                form.setFieldValue(field.name, [new Label({\n                                    text: selectedLabelText\n                                })]);\n                            }}\n                        />\n                    )}\n                />\n                <ErrorMessage name={this.props.fieldName} />\n            </div>\n        );\n    }\n}\n","// base field\nimport { FormBaseFieldMeta, IFormBaseFieldProps, IFieldBaseMetaProps } from \"../form-base-field/form-base-field-meta\";\n// label field\nimport { FormLabelField } from \"./form-label-field\";\n\n// data model\nimport { Label } from \"../../../data-model/label\";\n\n\n// API for caller to new props for label field\nexport interface IFormLabelFieldProps extends IFormBaseFieldProps {\n    onTrailingIconSelect?: () => void\n\n    autoFocus?: boolean\n}\n\n// for defining meta\nexport interface IFormLabelFieldMetaProps extends IFieldBaseMetaProps {\n    onTrailingIconSelect?: () => void\n\n    autoFocus?: boolean\n}\n\nexport class FormLabelFieldMeta extends FormBaseFieldMeta {\n    onTrailingIconSelect?: () => void\n\n    autoFocus?: boolean\n\n    constructor({\n        onTrailingIconSelect,\n        autoFocus,\n        ...props\n    }: IFormLabelFieldMetaProps) {\n        super(props)\n        this.model = Label;\n\n        this.onTrailingIconSelect = onTrailingIconSelect;\n        this.autoFocus = autoFocus;\n\n        this.formField = FormLabelField;\n    }\n}\n","import React, { Component } from \"react\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../state-management/types/root-types\";\nimport { CrudType, RequestStatus, ISingleRestApiResponse } from \"../../utils/rest-api\";\nimport {\n    IObjectAction, ObjectRestApiJsonResponse\n} from \"../../state-management/types/factory-types\";\n// data models\nimport { Company, labelTypesMapToCompanyGroupTypes } from \"../../data-model/company/company\";\nimport { CompanyActionCreators, GroupedCompanyActionCreators } from \"../../state-management/action-creators/root-actions\";\n\n/** Components */\nimport {\n    FormFactory,\n    FormActionButtonProps,\n    ActionButtonType\n} from \"../form-factory/form-factory\";\n// form field\nimport { FormBaseFieldMeta } from \"../form-factory/form-base-field/form-base-field-meta\";\nimport { FormInputFieldMeta } from \"../form-factory/form-input-field/form-input-field-meta\";\nimport { FormLinkFieldMeta } from \"../form-factory/form-link-field/form-link-field-meta\";\nimport { FormAddressFieldMeta } from \"../form-factory/form-address-field/form-address-field-meta\";\nimport { FormLabelFieldMeta } from \"../form-factory/form-label-field/form-label-field-meta\";\n\n\ninterface ICompanyFormComponentProps {\n    company?: Company;\n    onCancel: (event: any) => void;\n    onSubmitSuccess?: (jsonResponse: ObjectRestApiJsonResponse<Company>) => void;\n\n    /** redux */\n    createCompany: (companyFormData: Company, successCallback?: (jsonResponse: ISingleRestApiResponse<Company>) => void, finalCallback?: Function) => void;\n    updateCompany: (companyFormData: Company, successCallback?: Function, finalCallback?: Function) => void;\n}\n\nclass CompanyFormComponent extends Component<ICompanyFormComponentProps> {\n\n    formFieldPropsList: Array<FormBaseFieldMeta>;\n    actionButtonPropsList: Array<FormActionButtonProps>;\n\n    constructor(props: ICompanyFormComponentProps) {\n        super(props);\n\n        this.formFieldPropsList = [\n            new FormInputFieldMeta({\n                fieldName: \"name\",\n                label: \"Organization Name*\",\n                autoFocus: true\n            }),\n\n            new FormLabelFieldMeta({\n                fieldName: \"labels\",\n                label: \"Process Status\",\n            }),\n\n            new FormAddressFieldMeta({\n                fieldName: \"hq_location\",\n                label: \"Headquarter Location\"\n            }),\n\n            new FormLinkFieldMeta({\n                fieldName: \"home_page\",\n                label: \"Organization Website\"\n            }),\n        ];\n\n        this.actionButtonPropsList = [\n            new FormActionButtonProps(\n                !this.props.company ? \"Create Company\" : \"Save Company\",\n                undefined,\n                ActionButtonType.SUBMIT\n            ),\n            new FormActionButtonProps(\"Cancel\", this.props.onCancel)\n        ]\n\n    }\n\n    render() {\n        return (\n            <div className=\"CompanyFormComponent\">\n                <FormFactory\n                    model={Company}\n                    initialInstance={this.props.company}\n\n                    formFieldPropsList={this.formFieldPropsList}\n                    actionButtonPropsList={this.actionButtonPropsList}\n\n                    createInstanceTriggerAction={this.props.createCompany}\n                    updateInstanceTriggerAction={this.props.updateCompany}\n\n                    onSubmitSuccess={this.props.onSubmitSuccess}\n                />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => ({});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<Company>>) => {\n    return {\n        createCompany: (companyFormData: Company, successCallback?: (jsonResponse: ISingleRestApiResponse<Company>) => void, finalCallback?: Function) => (\n            // create company object in pool redux\n            dispatch(\n                CompanyActionCreators[CrudType.CREATE][RequestStatus.TRIGGERED].action(\n                    companyFormData,\n                    (jsonResponse: ISingleRestApiResponse<Company>) => {\n                        // create ref in grouped redux\n                        dispatch(\n                            // no api calls, so don't dispatch TRIGGER action, just SUCCESS action\n                            GroupedCompanyActionCreators[labelTypesMapToCompanyGroupTypes[Company.getLabel(jsonResponse)]][CrudType.CREATE][RequestStatus.SUCCESS].action({ uuid: jsonResponse.uuid })\n                        );\n                        // Only TRIGGER/SUCCESS has success callback. Since this is CREATE/SUCCESS, we can only call the func here. This is necessary because the form component rely on this callback to carry out order-critical operations, like page transition after create, etc.\n                        successCallback && successCallback(jsonResponse);\n                    },\n                    undefined,\n                    finalCallback\n                )\n            )\n        ),\n        updateCompany: (companyFormData: Company, successCallback?: Function, finalCallback?: Function, updateFromCompany?: Company) => dispatch(\n            CompanyActionCreators[CrudType.UPDATE][RequestStatus.TRIGGERED].action(\n                companyFormData,\n                successCallback,\n                undefined,\n                finalCallback,\n                undefined,\n                {\n                    updateFromObject: updateFromCompany\n                }\n            )\n        )\n    };\n};\n\nexport const CompanyFormComponentContainer = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(CompanyFormComponent);\n","import React, { Component } from \"react\";\n\n/** route */\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../state-management/types/root-types\";\n// REST API\nimport { ISingleRestApiResponse } from \"../../utils/rest-api\";\nimport {\n    IObjectAction,\n    IObjectStore\n} from \"../../state-management/types/factory-types\";\nimport { Company } from \"../../data-model/company/company\";\n\n/** Components */\nimport \"./add-com-page.css\"\n// mdc-react button\nimport \"@material/react-button/dist/button.css\";\n// mdc-react input\nimport \"@material/react-text-field/dist/text-field.css\";\nimport { CompanyFormComponentContainer } from \"../../components/company/company-form-component\";\n\n\ninterface IAddComPageParams {\n    uuid?: string;\n}\n\ninterface IAddComPageProps extends RouteComponentProps<IAddComPageParams> {\n    company: IObjectStore<Company>;\n}\n\nclass AddComPage extends Component<IAddComPageProps> {\n    render() {\n        const company: Company | undefined = (this.props.match.params.uuid && this.props.company.collection[this.props.match.params.uuid])\n            ? this.props.company.collection[this.props.match.params.uuid]\n            : undefined;\n        return (\n            <div className=\"AddComPage\">\n                <h1>{!company ? \"Add an Organization\" : `Update Organization`}</h1>\n                <CompanyFormComponentContainer\n                    company={company}\n                    onSubmitSuccess={(jsonResponse) => {\n                        const uuid = (jsonResponse as ISingleRestApiResponse<Company>).uuid;\n\n                        company ? (\n                            // case: update company, let user be able to go back to update form\n                            this.props.history.push(`/com-app/${uuid}/`)\n                        ) : (\n                            // case: create company, don't let user go back to form. If attempt to update company, user should click on edit; if attempt to create another company, should go to /home/ to do so\n                            this.props.history.replace(`/com-app/${uuid}/`)\n                        );\n                    }}\n                    onCancel={event => {\n                        this.props.history.goBack()\n                    }}\n                />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: IRootState) => ({\n    // prop: state.prop\n    company: state.company\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<Company>>) => {\n    // actionName = (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {};\n};\n\nexport const AddComPageContainer = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(AddComPage)\n);\n","import { BaseModel, IBaseModelProps, IRelationship } from \"../base-model\";\nimport { ApplicationStatusLink } from \"../application-status-link\";\nimport * as Yup from \"yup\";\n\n\ninterface IApplicationStatusProps {\n    text?: string;\n    application?: IRelationship;\n    applicationstatuslink_set?: Array<ApplicationStatusLink>\n    date?: string;\n    order?: number\n}\n\nexport class ApplicationStatus extends BaseModel {\n    public text: string;\n    public application: IRelationship;\n    public applicationstatuslink_set: Array<ApplicationStatusLink>\n    public date: string;\n    public order: number;\n\n    constructor({\n        text = \"\",\n        application = \"\",\n        // applicationstatuslink_set = [],\n        applicationstatuslink_set = [],\n        date = ApplicationStatus.localeNowDateString(),\n        order = 0,\n        ...args\n    }: IApplicationStatusProps & IBaseModelProps) {\n        super(args);\n        this.text = text;\n        this.application = application;\n        this.applicationstatuslink_set = applicationstatuslink_set;\n        this.date = date;\n        this.order = order;\n    }\n\n    static schema(){\n        return Yup.object<ApplicationStatus>().shape({\n            text: Yup.string().required(\"Give a quick one or two words for the status\").max(50, \"No more than 50 characters\"),\n\n            // date: Yup.string().matches(/[01]\\d{1}[-/][0123]\\d{1}[-/]\\d{4}/), // TODO: not working, always invalid, figure out why\n            date: Yup.string().length(10), // workaround\n            \n            order: Yup.number()\n        });\n    }\n\n    static localeNowDateString() {\n        const now = new Date();\n        const localeNow = new Date(Date.UTC(now.getUTCFullYear(), now.getUTCMonth(), now.getDate() ));\n        const localeNowTimeString = localeNow.toISOString().split(\"T\")[0]\n        return localeNowTimeString;\n    }\n}\n","import { BaseModel, IBaseModelProps, IRelationship } from \"./base-model\";\nimport { Link } from \"./link\";\n\ninterface IApplicationStatusLinkProps {\n    application_status?: IRelationship;\n    link?: Link;\n}\n\nexport class ApplicationStatusLink extends BaseModel {\n    public application_status: IRelationship;\n    public link: Link;\n\n    constructor({\n        application_status = \"\",\n        link = new Link({}),\n        ...args\n    }: IApplicationStatusLinkProps & IBaseModelProps) {\n        super(args);\n        this.application_status = application_status;\n        this.link = link;\n    }\n}","/** Components */\n// link field\nimport { FormApplicationStatusLinkFieldComponent } from \"./form-application-status-link-field-component\";\n// base dynamic field\nimport { withFormBaseField } from \"../form-base-field/form-base-field\";\n\nexport const FormApplicationStatusLinkField = withFormBaseField(FormApplicationStatusLinkFieldComponent);","import React, { Component } from \"react\";\n\n/** Components */\n// mdc-react input\nimport \"@material/react-text-field/dist/text-field.css\";\n// link form\nimport { FormLinkFieldMeta } from \"../form-link-field/form-link-field-meta\";\nimport { FormLinkField } from \"../form-link-field/form-link-field\";\nimport { IFormBaseFieldProps } from \"../form-base-field/form-base-field-meta\";\n\nexport interface IFormApplicationStatusLinkFieldComponentProps extends IFormBaseFieldProps {\n}\n\nexport class FormApplicationStatusLinkFieldComponent extends Component<IFormApplicationStatusLinkFieldComponentProps> {\n\n    linkFieldProps: FormLinkFieldMeta;\n\n    constructor(props: IFormApplicationStatusLinkFieldComponentProps) {\n        super(props)\n\n        this.linkFieldProps = new FormLinkFieldMeta({\n            fieldName: `${this.props.fieldName}.link`,\n            label: ``,\n            isDynamic: false, // Link is a one-to-one field in application status link model\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"FormApplicationStatusLinkField\">\n                {this.props.label && <h4>{this.props.label}</h4>}\n                <FormLinkField\n                    {...this.linkFieldProps}\n                    formikValues={this.props.formikValues}\n                    getInstanceDataFromFormikValues={this.props.getInstanceDataFromFormikValues}\n                />\n            </div>\n        );\n    }\n}","// data model\nimport { ApplicationStatusLink } from \"../../../data-model/application-status-link\";\n\n/** Components */\nimport { FormBaseFieldMeta, IFieldBaseMetaProps } from \"../form-base-field/form-base-field-meta\";\nimport { FormApplicationStatusLinkField } from \"./form-application-status-link-field\";\n\nexport class FormApplicationStatusLinkFieldMeta extends FormBaseFieldMeta {\n\n    constructor(props: IFieldBaseMetaProps) {\n        super(props)\n        this.model = ApplicationStatusLink;\n        this.formField = FormApplicationStatusLinkField;\n    }\n}\n","import React, { Component } from \"react\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../state-management/types/root-types\";\nimport { IObjectStore, IObjectAction } from \"../../state-management/types/factory-types\";\n// data models\nimport { ApplicationStatus } from \"../../data-model/application-status/application-status\";\nimport { ApplicationStatusLink } from \"../../data-model/application-status-link\";\nimport { Application } from \"../../data-model/application/application\";\nimport { ApplicationStatusActionCreators } from \"../../state-management/action-creators/root-actions\";\n\n/** Rest API */\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\n\n/** Components */\nimport {\n    FormFactory,\n    FormActionButtonProps,\n    ActionButtonType\n} from \"../form-factory/form-factory\";\nimport {FormInputFieldMeta } from \"../form-factory/form-input-field/form-input-field-meta\";\nimport { InputFieldType, FormBaseFieldMeta } from \"../form-factory/form-base-field/form-base-field-meta\";\n// form fields\nimport { FormApplicationStatusLinkFieldMeta } from \"../form-factory/form-application-status-link-field/form-application-status-link-field-meta\";\n\n\ninterface IApplicationStatusFormComponentProps extends RouteComponentProps {\n    applicationStatus?: ApplicationStatus; // for update form\n    onSubmitSuccess?: () => void;\n    onCancel: () => void;\n\n    /** redux */\n    application: Application;\n    applicationStatusStore: IObjectStore<ApplicationStatus>\n    createApplicationStatus: (\n        applicationStatusFormData: ApplicationStatus,\n        successCallback?: Function,\n        finalCallback?: Function,\n    ) => void;\n    updateApplicationStatus: (\n        applicationStatusFormData: ApplicationStatus,\n        successCallback?: Function,\n        finalCallback?: Function,\n    ) => void;\n}\n\nclass ApplicationStatusFormComponent extends Component<\n    IApplicationStatusFormComponentProps\n> {\n    formFieldPropsList: Array<FormBaseFieldMeta>;\n    actionButtonPropsList: Array<FormActionButtonProps>;\n\n    constructor(props: IApplicationStatusFormComponentProps) {\n        super(props);\n\n        this.formFieldPropsList = [\n            new FormInputFieldMeta({\n                fieldName: \"text\",\n                label: \"Status*\",\n                autoFocus: true\n            }),\n            new FormInputFieldMeta({\n                fieldName: \"date\",\n                label: \"Date\",\n                type: InputFieldType.DATE\n            }),\n            new FormApplicationStatusLinkFieldMeta({\n                fieldName: `applicationstatuslink_set`,\n                label: `Status Link`,\n                isDynamic: true,\n            }),\n        ];\n\n        this.actionButtonPropsList = [\n            new FormActionButtonProps(\n                this.props.applicationStatus ?\n                \"Save Status\":\n                \"Create Status\",\n                undefined,\n                ActionButtonType.SUBMIT\n            ),\n            new FormActionButtonProps(\"Cancel\", this.props.onCancel)\n        ];\n    }\n\n    render() {\n        return (\n            <div className=\"ApplicationStatusFormComponent\">\n                <FormFactory\n                    model={ApplicationStatus}\n                    initialInstance={new ApplicationStatus({\n                        ...this.props.applicationStatus,\n                    })}\n                    enforcedInstanceData={{\n                        application: this.props.application.uuid\n                    }}\n        \n                    formFieldPropsList={this.formFieldPropsList}\n                    actionButtonPropsList={this.actionButtonPropsList}\n        \n                    createInstanceTriggerAction={this.props.createApplicationStatus}\n                    updateInstanceTriggerAction={this.props.updateApplicationStatus}\n\n                    onSubmitSuccess={this.props.onSubmitSuccess}\n                />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    // prop: store.prop\n    applicationStatusStore: store.applicationStatus\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<ApplicationStatus> | IObjectAction<ApplicationStatusLink>>) => {\n    // actionName: (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {\n        createApplicationStatus: (\n            applicationStatusFormData: ApplicationStatus,\n            successCallback?: Function,\n            failureCallback?: Function,\n        ) =>\n            dispatch(\n                ApplicationStatusActionCreators[CrudType.CREATE][\n                    RequestStatus.TRIGGERED\n                ].action(applicationStatusFormData, successCallback, undefined, failureCallback)\n            )\n        ,\n        updateApplicationStatus: (\n            applicationStatusFormData: ApplicationStatus,\n            successCallback?: Function,\n            failureCallback?: Function,\n        ) =>\n            dispatch(\n                ApplicationStatusActionCreators[CrudType.UPDATE][\n                    RequestStatus.TRIGGERED\n                ].action(applicationStatusFormData, successCallback, undefined, failureCallback)\n            )\n        ,\n    };\n};\n\nexport const ApplicationStatusFormComponentContainer = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(ApplicationStatusFormComponent)\n);\n","import React, { Component } from \"react\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../state-management/types/root-types\";\nimport {\n    IObjectAction, IObjectStore,\n} from \"../../state-management/types/factory-types\";\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\nimport { ApplicationStatusActionCreators } from \"../../state-management/action-creators/root-actions\";\n\n/** data model */\nimport { ApplicationStatus } from \"../../data-model/application-status/application-status\";\nimport { Application } from \"../../data-model/application/application\";\n\n/** Components */\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc-react icon button\nimport \"@material/react-icon-button/dist/icon-button.css\";\nimport IconButton from \"@material/react-icon-button\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\nimport { ApplicationStatusFormComponentContainer } from \"./application-status-form-component\";\n\nimport Skeleton from 'react-loading-skeleton';\n\n\ninterface IApplicationStatusComponentProps extends RouteComponentProps {\n    applicationStatus?: ApplicationStatus;\n    application?: Application; // needed by form\n    isOnlyForm?: boolean; // needed by add-button\n\n    applicationStatusStore: IObjectStore<ApplicationStatus>;\n    deleteApplicationStatus: (\n        applicationStatusToDelete: ApplicationStatus,\n        callback?: Function\n    ) => void;\n}\n\ninterface IApplicationStatusComponentState {\n    isFormOpened: boolean;\n}\n\nclass ApplicationStatusComponent extends Component<\n    IApplicationStatusComponentProps,\n    IApplicationStatusComponentState\n    > {\n    state = {\n        isFormOpened: false\n    };\n\n    render() {\n        return (\n            <div className=\"ApplicationStatusComponent\">\n                {(this.state.isFormOpened || this.props.isOnlyForm) ? (\n                    this.renderFormController(\n                        this.props.application,\n                        this.props.applicationStatus\n                    )\n                ) : this.renderDisplay(this.props.applicationStatus)\n                }\n            </div>\n        );\n    }\n\n    renderDisplay = (applicationStatus?: ApplicationStatus) => {\n        return (\n            <div className=\"ApplicationStatusComponent\">\n                <span>Status: {applicationStatus ? applicationStatus.text : <Skeleton width=\"20vmin\" />}</span>\n\n                {/* edit button */}\n                {\n                    applicationStatus ? (\n                        <IconButton\n                            onClick={() => {\n                                this.setState({ isFormOpened: true });\n                            }}\n                        >\n                            <MaterialIcon hasRipple icon=\"edit\" />\n                        </IconButton>\n                    ) : (\n                            <IconButton disabled>\n                                <MaterialIcon hasRipple icon=\"edit\" />\n                            </IconButton>\n                        )\n                }\n\n                {/* delete button */}\n                {\n                    applicationStatus ? (\n                        <IconButton\n                            onClick={() =>\n                                window.confirm(`Are you sure you want to delete this status? ${applicationStatus.text}`) && this.props.deleteApplicationStatus(\n                                    applicationStatus\n                                )\n                            }\n                        >\n                            <MaterialIcon hasRipple icon=\"delete\" />\n                        </IconButton>\n                    ) : (\n                            <IconButton disabled>\n                                <MaterialIcon hasRipple icon=\"delete\" />\n                            </IconButton>\n                        )\n                }\n\n                <div>{applicationStatus ? applicationStatus.date : <Skeleton width=\"35vmin\" />}</div>\n\n                {applicationStatus ? applicationStatus.applicationstatuslink_set.map(\n                    applicationStatusLink => {\n                        return (\n                            applicationStatusLink &&\n                            applicationStatusLink.link && (\n                                <span key={applicationStatusLink.uuid}>\n                                    <a\n                                        href={\n                                            (\n                                                applicationStatusLink.link.url &&\n                                                applicationStatusLink.link.url.includes(\"//\")\n                                            ) ?\n                                                applicationStatusLink.link.url :\n                                                `//${applicationStatusLink.link.url}`\n                                        }\n                                        target=\"_blank\"\n                                    >\n                                        {applicationStatusLink.link.text}\n                                    </a>{\" \"}\n                                    |{\" \"}\n                                </span>\n                            )\n                        );\n                    }\n                ) : (\n                        <Skeleton width=\"10vmin\" />\n                    )}\n            </div>\n        );\n    };\n\n    renderFormController = (\n        application?: Application,\n        applicationStatus?: ApplicationStatus\n    ) => {\n        return (\n            <div className=\"application-status-form-controller\">\n                {/* new application status form */}\n                {(\n                    !this.state.isFormOpened ||\n                    !application // application may be still in requesting state\n                ) ? (\n                        <Button\n                            disabled={!application || this.props.applicationStatusStore.requestStatus === RequestStatus.REQUESTING} // disable action button \n                            onClick={clickEvent => {\n                                this.setState({\n                                    isFormOpened: true\n                                });\n                            }}\n                            unelevated\n                            icon={<MaterialIcon hasRipple icon=\"add\" />}\n                        >\n                            Add New Status\n                    </Button>\n                    ) : (\n                        <div className=\"application-component__status-form\">\n                            <h3>\n                                Add new status to application for{\" \"}\n                                {application.position_title}{\" \"}\n                            </h3>\n                            <ApplicationStatusFormComponentContainer\n                                application={application}\n                                applicationStatus={applicationStatus}\n                                onCancel={() => {\n                                    this.setState({\n                                        isFormOpened: false\n                                    });\n                                }}\n                                onSubmitSuccess={() => {\n                                    this.setState({\n                                        isFormOpened: false\n                                    });\n                                }}\n                            />\n                        </div>\n                    )}\n            </div>\n        );\n    };\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    // prop: store.prop\n    applicationStatusStore: store.applicationStatus\n});\n\nconst mapDispatchToProps = (\n    dispatch: Dispatch<IObjectAction<ApplicationStatus>>\n) => {\n    // actionName: (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {\n        deleteApplicationStatus: (\n            applicationStatusToDelete: ApplicationStatus,\n            callback?: Function\n        ) =>\n            dispatch(\n                ApplicationStatusActionCreators[CrudType.DELETE][\n                    RequestStatus.TRIGGERED\n                ].action(applicationStatusToDelete, callback)\n            )\n    };\n};\n\nexport const ApplicationStatusComponentContainer = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(ApplicationStatusComponent)\n);\n","import { BaseModel, IBaseModelProps, IRelationship, IReference } from \"../base-model\";\nimport { Link } from \"../link\";\nimport { ApplicationStatus } from \"../application-status/application-status\";\nimport * as Yup from \"yup\";\n\n\ninterface IApplicationProps {\n    user?: IRelationship;\n    user_company?: IRelationship;\n    position_title?: string;\n    job_description_page?: Link;\n    job_source?: Link;\n    labels?: any;\n    notes?: string;\n    statuses?: Array<ApplicationStatus> | Array<IReference>;\n}\n\nexport class Application extends BaseModel {\n    public user: IRelationship;\n    public user_company: IRelationship;\n    public position_title: string;\n    public job_description_page: Link;\n    public job_source: Link;\n    public labels: any;\n    public notes: string;\n    public statuses: Array<ApplicationStatus> | Array<IReference>;\n\n    constructor({\n        user = \"\",\n        user_company = \"\",\n        position_title = \"\",\n        job_description_page = new Link({}),\n        job_source = new Link({}),\n        labels = {},\n        notes = \"\",\n        statuses = [],\n        ...args\n    }: IApplicationProps & IBaseModelProps) {\n        super(args);\n        this.user = user;\n        this.user_company = user_company;\n        this.position_title = position_title;\n        this.job_description_page = job_description_page;\n        this.job_source = job_source;\n        this.labels = labels;\n        this.notes = notes;\n        this.statuses = statuses;\n    }\n\n    static schema(){\n        return Yup.object<Application>().shape({\n            position_title: Yup.string().required(\"We need a title...!\").max(150, \"No more than 150 characters\"),\n            job_description_page: Link.schema(),\n            job_source: Link.schema(),\n            notes: Yup.string(),\n        });\n    }\n}\n","import React, { Component } from \"react\";\n\n/** Components */\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\n// mdc-react input\nimport \"@material/react-text-field/dist/text-field.css\";\nimport TextField, { Input } from \"@material/react-text-field\";\n// formik\nimport {\n    Field, FieldProps,\n    ErrorMessage,\n} from \"formik\";\n// input field\nimport { IFormRichTextFieldProps } from \"./form-rich-text-field-meta\";\n// ckeditor\n// import CKEditor from '@ckeditor/ckeditor5-react';\nimport CKEditor from '@shaungc/custom-ckeditor5-react';\n// import BalloonEditor from '@ckeditor/ckeditor5-build-balloon';\nimport BalloonEditor from '@shaungc/ckeditor5-custom-balloon';\n\n\nexport class FormRichTextField extends Component<IFormRichTextFieldProps> {\n    render() {\n        return (\n            <div className=\"FormRichTextField\">\n                <Field\n                    name={this.props.fieldName}\n                    render={({ field, form }: FieldProps<number | string>) => {\n                        return (\n                            <>\n                                <h4>{this.props.label}</h4>\n                                <CKEditor\n                                    editor={BalloonEditor}\n                                    data={field.value}\n                                    onChange={(event: any, editor: any) => {\n                                        form.setFieldValue(field.name, editor.getData());\n                                    }}\n                                    onSaveKeystroke={this.props.onSaveKeystroke}\n                                />\n                            </>\n                        )\n                    }}\n                />\n                <ErrorMessage name={this.props.fieldName} />\n            </div>\n        );\n    }\n}","// base field\nimport { FormBaseFieldMeta, IFormBaseFieldProps, IFieldBaseMetaProps } from \"../form-base-field/form-base-field-meta\";\n// input field\nimport { FormRichTextField } from \"./form-rich-text-field\";\n\n\n// API for caller to new props for input field\nexport interface IFormRichTextFieldProps extends IFormBaseFieldProps {\n    onSaveKeystroke?: () => void\n}\n\n// for defining meta\nexport interface IFormRichTextFieldMetaProps extends IFieldBaseMetaProps {\n}\n\nexport class FormRichTextFieldMeta extends FormBaseFieldMeta {\n\n    constructor(props: IFormRichTextFieldMetaProps) {\n        super(props)\n        this.formField = FormRichTextField;\n    }\n}","import React, { Component } from \"react\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../state-management/types/root-types\";\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\nimport {\n    IObjectStore,\n    IObjectAction\n} from \"../../state-management/types/factory-types\";\nimport { ApplicationActionCreators } from \"../../state-management/action-creators/root-actions\";\n\n// data models\nimport { Company } from \"../../data-model/company/company\";\nimport { Application } from \"../../data-model/application/application\";\n\n/** Components */\nimport {\n    FormFactory,\n    FormActionButtonProps,\n    ActionButtonType\n} from \"../form-factory/form-factory\";\n// form field\nimport { FormBaseFieldMeta } from \"../form-factory/form-base-field/form-base-field-meta\";\nimport { FormInputFieldMeta } from \"../form-factory/form-input-field/form-input-field-meta\";\nimport { FormLinkFieldMeta } from \"../form-factory/form-link-field/form-link-field-meta\";\nimport { FormRichTextFieldMeta } from \"../form-factory/form-rich-text-field/form-rich-text-field-meta\";\n\n\ninterface IApplicationFormComponentProps {\n    application?: Application;\n    onCancel: (event: any) => void;\n    onSubmitSuccess?: () => void;\n\n    company: Company;\n    /** redux */\n    applicationStore: IObjectStore<Application>;\n    createApplication: (\n        applicationFormData: Application,\n        successCallback?: Function,\n        finalCallback?: Function,\n    ) => void;\n    updateApplication: (\n        applicationFormData: Application,\n        successCallback?: Function,\n        finalCallback?: Function,\n    ) => void;\n}\n\nclass ApplicationFormComponent extends Component<\n    IApplicationFormComponentProps\n> {\n\n    formFieldPropsList: Array<FormBaseFieldMeta>;\n    actionButtonPropsList: Array<FormActionButtonProps>;\n\n    constructor(props: IApplicationFormComponentProps) {\n        super(props);\n\n        this.formFieldPropsList = [\n            new FormInputFieldMeta({\n                fieldName: \"position_title\",\n                label: \"Position Title*\",\n                autoFocus: true\n            }),\n            new FormLinkFieldMeta({\n                fieldName: \"job_description_page\",\n                label: \"Job Description Link\",\n            }),\n            new FormLinkFieldMeta({\n                fieldName: \"job_source\",\n                label: \"Job Source Link\",\n            }),\n            new FormRichTextFieldMeta({\n                fieldName: \"notes\",\n                label: \"Notes\",\n            }),\n        ];\n        this.actionButtonPropsList = [\n            new FormActionButtonProps(\n                this.props.company ? \"Save Application\" : \"Create Application\",\n                undefined,\n                ActionButtonType.SUBMIT\n            ),\n            new FormActionButtonProps(\"Cancel\", this.props.onCancel)\n        ]\n    }\n\n    render() {\n        return (\n            <div className=\"ApplicationFormComponent\">\n                {/* <FormFactory {...this.formFactoryProps} /> */}\n                <FormFactory\n                    model={Application}\n                    initialInstance={new Application({\n                        ...this.props.application,\n                    })}\n                    enforcedInstanceData={{\n                        user_company: this.props.company.uuid\n                    }}\n        \n                    formFieldPropsList={this.formFieldPropsList}\n                    actionButtonPropsList={this.actionButtonPropsList}\n        \n                    createInstanceTriggerAction={this.props.createApplication}\n                    updateInstanceTriggerAction={this.props.updateApplication}\n\n                    onSubmitSuccess={this.props.onSubmitSuccess}\n                />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    applicationStore: store.application\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<Application>>) => {\n    return {\n        createApplication: (\n            applicationFormData: Application,\n            successCallback?: Function,\n            finalCallback?: Function,\n        ) =>\n            dispatch(\n                ApplicationActionCreators[CrudType.CREATE][\n                    RequestStatus.TRIGGERED\n                ].action(applicationFormData, successCallback, undefined, finalCallback)\n            )\n        ,\n        updateApplication: (\n            applicationFormData: Application,\n            successCallback?: Function,\n            finalCallback?: Function,\n        ) =>\n            dispatch(\n                ApplicationActionCreators[CrudType.UPDATE][\n                    RequestStatus.TRIGGERED\n                ].action(applicationFormData, successCallback, undefined, finalCallback)\n            )\n        ,\n    };\n};\n\nexport const ApplicationFormComponentContainer = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ApplicationFormComponent);\n","import React, { Component } from \"react\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Application } from \"../../data-model/application/application\";\nimport { IRootState } from \"../../state-management/types/root-types\";\nimport { IObjectAction, IObjectStore } from \"../../state-management/types/factory-types\";\nimport { Dispatch } from \"redux\";\n\n/** data model */\nimport { ApplicationStatus } from \"../../data-model/application-status/application-status\";\nimport { Company } from \"../../data-model/company/company\";\n\n/** rest api */\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\n\n/** Components */\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\nimport IconButton from \"@material/react-icon-button\";\nimport { ApplicationStatusComponentContainer } from \"../application-status/application-status-component\";\nimport { ApplicationFormComponentContainer } from \"./application-form-component\";\nimport {\n    Headline6,\n} from '@material/react-typography';\n/** CKeditor */\n// import CKEditor from '@ckeditor/ckeditor5-react';\nimport CKEditor from '@shaungc/custom-ckeditor5-react';\n// import BalloonEditor from '@ckeditor/ckeditor5-build-balloon';\nimport BalloonEditor from '@shaungc/ckeditor5-custom-balloon';\n\nimport Skeleton from 'react-loading-skeleton';\n\nimport styles from './application-component.module.css';\nimport { ApplicationActionCreators } from \"../../state-management/action-creators/root-actions\";\n\n\n/** Types */\ninterface IApplicationComponentProps {\n    application?: Application;\n\n    disableApplicationActionButtons?: boolean\n\n    /** application form */\n    company?: Company;\n\n    isOnlyForm?: boolean;\n\n    applicationStatusList?: Array<ApplicationStatus>;\n\n    /** redux */\n    applicationStatusStore: IObjectStore<ApplicationStatus>;\n\n    deleteApplication: (\n        applicationToDelete: Application,\n        callback?: Function\n    ) => void;\n}\n\ninterface IApplicationComponentState {\n    isFormOpened: boolean;\n}\n\n/** Main Class */\nexport class ApplicationComponent extends Component<\n    IApplicationComponentProps,\n    IApplicationComponentState\n    > {\n    state = {\n        isFormOpened: false\n    };\n\n    render() {\n        if (!this.state.isFormOpened && this.props.isOnlyForm) {  // company may still be in requesting state, when attempt to render form\n            return (\n                <Button\n                    disabled={!this.props.company}\n                    onClick={clickEvent => {\n                        this.setState({\n                            isFormOpened: true\n                        });\n                    }}\n                    unelevated\n                    icon={<MaterialIcon hasRipple icon=\"add\" />}\n                >\n                    Add Application\n                </Button>\n            )\n        }\n\n        return (\n            <div className={styles.applicationCard}>\n                <div className={styles.applicationCardContent}>\n                    {(!this.state.isFormOpened && !this.props.isOnlyForm) ? (\n                        this.renderApplicationDisplay(\n                            this.props.application,\n                            this.props.applicationStatusList\n                        )\n                    ) : (\n                            this.renderApplicationFormController()\n                        )}\n                </div>\n            </div>\n\n        )\n    }\n\n    renderApplicationFormController = () => {\n        return this.props.company && (\n            // application create or udpate must have company associate with it.\n            <div className=\"application-form-controller\">\n                <h2>{this.props.application ? \"Edit Application\" : \"New Application\"}</h2>\n                <ApplicationFormComponentContainer\n                    onCancel={event => {\n                        this.setState({\n                            isFormOpened: false\n                        });\n                    }}\n                    onSubmitSuccess={() =>\n                        this.setState({\n                            isFormOpened: false\n                        })\n                    }\n                    company={this.props.company}\n                    application={this.props.application}\n                />\n            </div>\n        );\n    };\n\n    renderApplicationDisplay = (\n        application?: Application,\n        applicationStatusList: Array<ApplicationStatus> = []\n    ) => {\n\n        return (\n            <div className=\"application-component-display\">\n                {/* application display view */}\n                <h3>{application ? application.position_title : <Skeleton />}\n                    {/* external link icon */}\n                    {\n                        application ? (\n                            <IconButton\n                                disabled={application.job_description_page.url == \"#\"}\n                                isLink={application.job_description_page.url != \"#\"} target=\"_blank\" href={application.job_description_page.url && application.job_description_page.url.includes(\"//\") ?\n                                    application.job_description_page.url :\n                                    `//${application.job_description_page.url}`}\n                            >\n                                <MaterialIcon hasRipple icon=\"launch\" />\n                            </IconButton>\n                        ) : (\n                                <IconButton disabled>\n                                    <MaterialIcon hasRipple icon=\"launch\" />\n                                </IconButton>\n                            )\n                    }\n\n                    {/* external link icon */}\n                    {\n                        application ? (\n                            <IconButton\n                                disabled={application.job_source.url == \"#\"}\n                                isLink={application.job_source.url != \"#\"} target=\"_blank\" href={application.job_source.url && application.job_source.url.includes(\"//\") ?\n                                    application.job_source.url :\n                                    `//${application.job_source.url}`}\n                            >\n                                <MaterialIcon hasRipple icon=\"language\" />\n                            </IconButton>\n                        ) : (\n                                <IconButton disabled>\n                                    <MaterialIcon hasRipple icon=\"language\" />\n                                </IconButton>\n                            )\n                    }\n\n                    {/* application actions */}\n                    {\n                        application ? (\n                            <IconButton\n                                disabled={this.props.disableApplicationActionButtons}\n                                onClick={() => {\n                                    this.setState({\n                                        isFormOpened: true // open form and close display\n                                    });\n                                }}\n                            >\n                                <MaterialIcon hasRipple icon=\"edit\" />\n                            </IconButton>\n                        ) : (\n                                <IconButton disabled>\n                                    <MaterialIcon hasRipple icon=\"edit\" />\n                                </IconButton>\n                            )\n                    }\n\n                    {\n                        application ? (\n                            <IconButton\n                                disabled={this.props.disableApplicationActionButtons}\n                                onClick={() =>\n                                    window.confirm(`Are you sure you want to delete ${application.position_title}?`) && this.props.deleteApplication(application)\n                                }\n                            >\n                                <MaterialIcon hasRipple icon=\"delete\" />\n                            </IconButton>\n                        ) : (\n                                <IconButton disabled>\n                                    <MaterialIcon hasRipple icon=\"delete\" />\n                                </IconButton>\n                            )\n                    }\n                </h3>\n\n                <div className=\"applicationNotesRichText\">\n                    {application ? (application.notes ? (\n                        <CKEditor\n                            editor={BalloonEditor}\n                            disabled={true}\n                            data={application.notes}\n                        />\n\n                    ) : (\n                            <p>\n                                No notes yet.\n                            </p>\n                        )) : (\n                            <div>\n                                <div><Skeleton width=\"70vmin\" /></div>\n                                <div><Skeleton width=\"30vmin\" /></div>\n                                <div><Skeleton width=\"50vmin\" /></div>\n                            </div>\n                        )}\n                </div>\n\n                {/* application statuses list */}\n                <div className=\"statusContainer\">\n                    <Headline6>Status</Headline6>\n\n                    {/* application status form controller */}\n                    {\n                        <ApplicationStatusComponentContainer\n                            application={application}\n                            isOnlyForm\n                        />\n                    }\n\n                    {\n                        /* show skeleton to indicate application status is loading */\n                        (this.props.applicationStatusStore.requestStatus === RequestStatus.REQUESTING) && (\n                            <ApplicationStatusComponentContainer />\n                        )\n                    }\n\n                    {\n                        application && (\n                            applicationStatusList.map((applicationStatus, index) => {\n                                return (\n                                    <ApplicationStatusComponentContainer\n                                        key={index}\n                                        applicationStatus={applicationStatus}\n                                        application={application}\n                                    />\n                                );\n                            })\n                        )\n                    }\n                </div>\n            </div>\n        );\n    };\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    applicationStatusStore: store.applicationStatus\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<Application>>) => {\n    // actionName: (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {\n        deleteApplication: (\n            applicationToDelete: Application,\n            callback?: Function\n        ) =>\n            dispatch(\n                ApplicationActionCreators[CrudType.DELETE][\n                    RequestStatus.TRIGGERED\n                ].action(applicationToDelete, callback)\n            )\n    };\n};\n\nexport const ApplicationComponentController = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ApplicationComponent);\n","import React, { Component } from \"react\";\n\n/** Redux */\nimport { Company } from \"../../data-model/company/company\";\n\n/** Components */\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc-react icon button\nimport '@material/react-icon-button/dist/icon-button.css';\nimport IconButton from '@material/react-icon-button';\n// mdc-chips\nimport { ChipSet, Chip } from '@material/react-chips';\nimport \"@material/react-chips/dist/chips.css\";\n\nimport Skeleton from 'react-loading-skeleton';\n\nimport styles from './company-component.module.css';\n\n\ninterface ICompanyComponentProps {\n    company: Company;\n    onDeleteIconClicked?: (event: any) => void\n    onEditIconClicked?: (event: any) => void\n    actionButtonsDisabled?: boolean\n}\n\nexport class CompanyComponent extends Component<ICompanyComponentProps> {\n    render() {\n        const company = this.props.company;\n\n        return (\n            <div className=\"CompanyComponent\">\n                <div className={styles.companyTitleContainer}>\n                    <h1>{company ? company.name : <Skeleton width=\"50vmin\" />}</h1>\n\n                    {company ? (\n                        company.labels.length && company.labels[0].text ? (\n                            <ChipSet>\n                                <Chip label={company.labels[0].text} />\n                            </ChipSet>\n                        ) : (\n                            <ChipSet>\n                                <Chip label=\"None\" />\n                            </ChipSet>\n                        )\n                    ) : (\n                        <Skeleton width=\"40px\" />\n                    )}\n\n                    {/* company link */}\n                    {\n                        company ? (\n                            <IconButton\n                                disabled={company.home_page.url == \"#\"}\n                                isLink={company.home_page.url != \"#\"} // isLink=true will make `disabled` useless, a bug\n                                target=\"_blank\"\n                                href={company.home_page.url && company.home_page.url.includes('//') ? company.home_page.url : `//${company.home_page.url}`}>\n                                <MaterialIcon hasRipple icon=\"launch\" />\n                            </IconButton>\n                        ) : (\n                                <IconButton disabled>\n                                    <MaterialIcon hasRipple icon=\"launch\" />\n                                </IconButton>\n                            )\n                    }\n\n                    {/* company actions */}\n                    {\n                        <div className=\"CompanyActionCreators\">\n                            <IconButton disabled={this.props.actionButtonsDisabled} onClick={this.props.onEditIconClicked}>\n                                <MaterialIcon hasRipple icon=\"edit\" />\n                            </IconButton>\n                            <IconButton disabled={this.props.actionButtonsDisabled} onClick={this.props.onDeleteIconClicked}>\n                                <MaterialIcon hasRipple icon=\"delete\" />\n                            </IconButton>\n                        </div>\n                    }\n                </div>\n                <div className={styles.companyTitleCaption}>{company ? company.hq_location.place_name : <Skeleton />}{company ? company.hq_location.full_address : <Skeleton />}</div>\n            </div>\n        );\n    }\n}\n","import React, { Component } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { RouteComponentProps } from \"react-router\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../state-management/types/root-types\";\n// rest api\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\nimport {\n    IObjectStore,\n    IObjectAction\n} from \"../../state-management/types/factory-types\";\nimport { Company, labelTypesMapToCompanyGroupTypes, companyGroupTypes } from \"../../data-model/company/company\";\nimport { Application } from \"../../data-model/application/application\";\nimport { ApplicationStatus } from \"../../data-model/application-status/application-status\";\n\n/** Components */\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n// mdc-react input\nimport \"@material/react-text-field/dist/text-field.css\";\nimport { ApplicationComponentController } from \"../../components/application/application-component\";\nimport { CompanyComponent } from \"../../components/company/company-component\";\n\nimport styles from \"./user-com-app-page.module.css\";\nimport { IReference } from \"../../data-model/base-model\";\nimport { CompanyActionCreators, ApplicationActionCreators } from \"../../state-management/action-creators/root-actions\";\n\n\ninterface IUserComAppPageParams {\n    uuid: string;\n}\n\ninterface IUserComAppPageNoGroupCompanyProps\n    extends RouteComponentProps<IUserComAppPageParams> {\n    companyStore: IObjectStore<Company>;\n    applicationStore: IObjectStore<Application>;\n    applicationStatusStore: IObjectStore<ApplicationStatus>;\n\n    createApplication: (\n        applicationFormData: Application,\n        callback?: Function\n    ) => void;\n\n    deleteCompany: (companyToDelete: Company, callback?: Function) => void;\n    updateCompany: (companyToUpdate: Company, callback?: Function) => void;\n}\n\ntype IUserComAppPageProps = IUserComAppPageNoGroupCompanyProps & {\n    [key in companyGroupTypes]: IObjectStore<Company>\n}\n\nclass UserComAppPage extends Component<IUserComAppPageProps> {\n    componentDidMount() {\n        const companyUuid = this.props.match.params.uuid;\n    }\n\n    goBackToCompanyListPage = () => {\n        this.props.history.replace('/home/');\n    }\n\n    onCompanyDelete = () => {\n        if (this.props.match.params.uuid) {\n            const company = this.props.companyStore.collection[this.props.match.params.uuid];\n            window.confirm(`Are you sure you want to delete company ${company.name}?`) && this.props.deleteCompany(company, this.goBackToCompanyListPage);\n            return;\n        }\n\n        console.error(\"Attempted to delete but company obj has no uuid\");\n    }\n\n    onCompanyEdit = () => {\n        if (this.props.match.params.uuid) {\n            const company = this.props.companyStore.collection[this.props.match.params.uuid];\n            this.props.history.push(`/com-form/${company.uuid}/`);\n            return;\n        }\n\n        console.error(\"Attempted to edit but no company uuid provided\");\n    }\n\n    renderPage() {\n        if (!this.props.match.params.uuid) {\n            return;\n        }\n\n        const company = this.props.companyStore.collection[this.props.match.params.uuid];\n        const applications = company ? company.applications as Array<IReference> : [];\n\n        return (\n            <div className={styles.UserCompanyPage}>\n                <Button\n                    onClick={_ => {\n                        this.props.history.length > 1 ? this.props.history.goBack()  : this.props.history.push('/home/');\n                    }}\n                >\n                    Back\n                </Button>\n\n                <CompanyComponent\n                    company={company}\n                    onDeleteIconClicked={this.onCompanyDelete}\n                    onEditIconClicked={this.onCompanyEdit}\n                    actionButtonsDisabled={this.props.companyStore.requestStatus === RequestStatus.REQUESTING}\n                />\n\n                <h2>Your Applications</h2>\n                {/* add application button - application form controller - always create form */}\n                <div>\n                    <ApplicationComponentController\n                        company={company}\n                        isOnlyForm\n                    />\n                </div>\n\n                {/* application list */}\n                {company ? applications.map((applicationRef, applicationsIndex) => {\n                    const application = this.props.applicationStore.collection[applicationRef as IReference];\n\n                    const applicationStatusList =  application ? (application.statuses as Array<IReference>).map((statusUuid) => this.props.applicationStatusStore.collection[statusUuid]) : undefined;\n                    return (\n                        <ApplicationComponentController\n                            key={applicationsIndex}\n                            application={application}\n                            company={company}\n                            applicationStatusList={applicationStatusList}\n                            disableApplicationActionButtons={this.props.applicationStore.requestStatus === RequestStatus.REQUESTING}\n                        />\n                    )\n                }) : (\n                    <ApplicationComponentController \n                        disableApplicationActionButtons\n                    />\n                )}\n\n            </div>\n        );\n    }\n\n    renderController() {\n        if (!this.props.match.params.uuid) {\n            return <h1>Company uuid not specified</h1>\n        }\n\n        // if such company in store, just take it\n        if (this.props.match.params.uuid in this.props.companyStore.collection) {\n            return this.renderPage();\n        }\n\n        // need to really make sure company not found in database\n        // will not show \"not found\" till all requesting finish\n        let someStillRequesting: boolean = false;\n        for (const companyGroupText of Object.values(labelTypesMapToCompanyGroupTypes)) {\n            if (\n                this.props[companyGroupText].requestStatus !== RequestStatus.SUCCESS ||\n                this.props[companyGroupText].requestStatus !== RequestStatus.FAILURE\n            ) {\n                someStillRequesting = true;\n                break;\n            }\n        }\n\n        if (\n            !someStillRequesting &&\n            !(this.props.match.params.uuid in this.props.companyStore.collection)\n        ) {\n            return <h1>Company not found</h1>\n        }\n\n        return this.renderPage();\n    }\n\n    // handle invalid company uuid given in url\n    render() {\n        return (\n            <div className=\"UserComAppPageContainer\">\n                {this.renderController()}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => {\n    return {\n        // prop: store.prop\n        companyStore: store.company,\n        ...(Object.values(labelTypesMapToCompanyGroupTypes).reduce((accumulate, companyGroupText) => ({\n            ...accumulate,\n            [companyGroupText]: store[companyGroupText]\n        }), {})),\n        applicationStore: store.application,\n        applicationStatusStore: store.applicationStatus\n    };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<IObjectAction<Application>>) => {\n    // actionName = (newState for that action & its type) => dispatch(ActionCreatorFunction(newState))\n    return {\n        createApplication: (\n            applicationFormData: Application,\n            callback?: Function\n        ) =>\n            dispatch(\n                ApplicationActionCreators[CrudType.CREATE][\n                    RequestStatus.TRIGGERED\n                ].action(applicationFormData, callback)\n            )\n        ,\n        deleteCompany: (companyToDelete: Company, callback?: Function) =>\n            dispatch(\n                CompanyActionCreators[CrudType.DELETE][RequestStatus.TRIGGERED].action(\n                    companyToDelete,\n                    callback\n                )\n            ),\n        updateCompany: (companyToUpdate: Company, callback?: Function) =>\n            dispatch(\n                CompanyActionCreators[CrudType.UPDATE][RequestStatus.TRIGGERED].action(\n                    companyToUpdate,\n                    callback\n                )\n            )\n    };\n};\n\nexport const UserComAppPageContainer = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(UserComAppPage)\n);\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { IUpdateAuthState } from \"../../state-management/types/auth-types\";\n\ninterface UserInfoProps {\n    auth: IUpdateAuthState;\n}\n\nexport class UserInfo extends Component<UserInfoProps, any> {\n    render() {\n        return (\n            <div>\n                <div>\n                    Logged in:{\" \"}\n                    {(this.props.auth.isLogin &&\n                        this.props.auth.isLogin.toString()) ||\n                        \"undefine\"}\n                </div>\n                <div>User Name: {this.props.auth.userName || \"(empty)\"}</div>\n            </div>\n        );\n    }\n}\n","import React from \"react\";\n\n/** Components */\n// mdc react icon\nimport MaterialIcon from \"@material/react-material-icon\";\n// mdc react button\nimport \"@material/react-button/dist/button.css\";\nimport Button from \"@material/react-button\";\n\ninterface ILocalLogoutButtonProps {\n    onClick: () => void;\n    disabled?: boolean;\n}\n\nconst LocalLogoutButton = (props: ILocalLogoutButtonProps) => {\n    return (\n        <div className=\"UserAuthButton\">\n            <Button\n                onClick={props.onClick}\n                unelevated\n                icon={\n                    <MaterialIcon hasRipple icon=\"account_circle\" />\n                }\n                disabled={props.disabled}\n            >\n                Local Logout\n                    </Button>\n        </div>\n    );\n}\n\nexport {\n    LocalLogoutButton\n};","import React, { Component, Dispatch } from \"react\";\n\n/** redux */\nimport { AnyAction } from \"redux\";\nimport { connect } from \"react-redux\";\nimport { IRootState } from \"../../state-management/types/root-types\";\nimport { IUpdateAuthState } from \"../../state-management/types/auth-types\";\nimport { RequestedLogoutAuth } from \"../../state-management/action-creators/auth-actions\";\n\n/** Routes & pages */\nimport { UserInfo } from \"../../components/user-info/user-info\";\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\n\n/** Components */\nimport \"./user-profile-page.css\"\n\nimport { SocialAuthButtonContainer } from \"../../components/login/social-auth-button\";\nimport { LocalLogoutButton } from \"../../components/login/local-logout-button\";\n\n\ninterface IUserProfilePageProps extends RouteComponentProps {\n    /** redux store state */\n    auth: IUpdateAuthState;\n\n    /** action dispatcher */\n    requestedLogoutAuth: () => void;\n}\n\nclass UserProfilePage extends Component<IUserProfilePageProps, any> {\n    localLogoutButton = () => {\n        this.props.requestedLogoutAuth();\n    }\n\n    render() {\n        return (\n            <div className=\"UserProfilePage\">\n                <h1>{this.props.auth.userName}'s profile</h1>\n                <div>\n                    isLocal = {JSON.stringify(this.props.auth.isLocal)}\n                </div>\n                <UserInfo auth={this.props.auth} />\n                {\n                    !this.props.auth.isLocal ? (\n                        <SocialAuthButtonContainer />\n                    ) : (\n                        <LocalLogoutButton \n                            onClick={this.localLogoutButton}\n                        />\n                    )\n                }\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => {\n    return {\n        auth: store.auth\n    };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>) => { \n    return {\n        requestedLogoutAuth: () => {\n            dispatch(\n                RequestedLogoutAuth()\n            );\n        },\n    }\n}\n\nexport const UserProfilePageContainer = withRouter(connect(mapStateToProps, mapDispatchToProps)(UserProfilePage));\n","import { createMuiTheme } from \"@material-ui/core/styles\";\n\nexport const lightTheme = createMuiTheme({\n    // palette: {\n    //     primary: {\n    //         main: purple[500]\n    //     }\n    // }\n});\n\nexport const darkTheme = createMuiTheme({\n    palette: {\n        type: 'dark'\n    }\n});","import React, { useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { IRootState } from \"../../state-management/types/root-types\";\n\nimport Button from '@material-ui/core/Button';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\n\nimport { labelTypes } from \"../../data-model/label\";\nimport { ApplyAllSelectCompanyChangesStatus, CancelAllSelectCompany, SetDestinationStatus } from \"../../state-management/action-creators/select-company-actions\";\nimport { RequestStatus } from \"../../utils/rest-api\";\n\nimport { MuiThemeProvider } from \"@material-ui/core/styles\";\nimport { darkTheme } from \"../themes\";\n\ninterface ICompanyStatusDropdownListItem {\n    label: labelTypes;\n    onSelect: () => void\n}\n\nconst CompanyStatusDropdownListItem = ({ label, onSelect }: ICompanyStatusDropdownListItem) => {\n    const dispatch = useDispatch();\n\n    const onDropdownListItemSelected = useCallback(() => {\n        dispatch(SetDestinationStatus(label));\n        onSelect && onSelect();\n    }, [dispatch, onSelect, label])\n\n    return (\n        <MenuItem onClick={onDropdownListItemSelected}>{label}</MenuItem>\n    )\n}\n\nexport const SelectCompanyMenu = () => {\n    const dispatch = useDispatch();\n    const selectCompanyApplyRequestStatus = useSelector((state: IRootState) => state.selectCompany.requestStatus);\n    const stagedStatus = useSelector((state: IRootState) => state.selectCompany.destinationStatus);\n    const selectCompanyCollection = useSelector((state: IRootState) => state.selectCompany.selectCompanyCollection);\n\n    const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n\n    const onDropdownListClick = useCallback((event: React.MouseEvent<HTMLButtonElement>) => {\n        setAnchorEl(event.currentTarget);\n    }, [])\n\n    const onDropdownListSelect = useCallback(() => {\n        setAnchorEl(null);\n    }, [])\n\n    const onApply = useCallback(() => {\n        dispatch(ApplyAllSelectCompanyChangesStatus(stagedStatus));\n    }, [dispatch, stagedStatus])\n\n    const onCancel = useCallback(() => {\n        dispatch(CancelAllSelectCompany());\n    }, [dispatch]);\n    \n    \n    return (\n        <MuiThemeProvider theme={darkTheme}>\n            Move {selectCompanyCollection.size} companies to \n\n            <Button aria-controls=\"simple-menu\" aria-haspopup=\"true\" onClick={onDropdownListClick}>\n                {stagedStatus} <ArrowDropDownIcon />\n            </Button>\n            <Menu\n                id=\"simple-menu\"\n                anchorEl={anchorEl}\n                keepMounted\n                open={Boolean(anchorEl)}\n            >\n                {Object.values(labelTypes).map((label, index) => {\n                    return <div key={index}>\n                        <CompanyStatusDropdownListItem label={label} onSelect={onDropdownListSelect} />\n                    </div>\n                })}\n            </Menu>\n            <Button onClick={onApply} disabled={selectCompanyApplyRequestStatus === RequestStatus.REQUESTING} size=\"small\" variant=\"contained\">\n                Apply\n            </Button>\n            <Button onClick={onCancel} disabled={selectCompanyApplyRequestStatus === RequestStatus.REQUESTING} size=\"small\" variant=\"contained\">\n                Cancel\n            </Button>\n        </MuiThemeProvider>\n    )\n}","import React, { useCallback } from 'react';\n\nimport {\n    Link,\n    useLocation,\n    useHistory\n} from \"react-router-dom\";\n\n// font awesome\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faGithub } from '@fortawesome/free-brands-svg-icons'\n\n\n/** MDC React */\nimport TopAppBar, {\n    TopAppBarIcon,\n    TopAppBarRow,\n    TopAppBarSection,\n    TopAppBarTitle,\n} from '@material/react-top-app-bar';\nimport \"@material/react-top-app-bar/dist/top-app-bar.css\";\n\n\nimport '@material/react-material-icon/dist/material-icon.css';\nimport MaterialIcon from \"@material/react-material-icon\";\nimport { useSelector } from 'react-redux';\nimport { IRootState } from '../../state-management/types/root-types';\n\nimport styles from './app-top-bar.module.css';\nimport { SelectCompanyMenu } from './select-company-menu';\n\n\nexport const AppTopBar = () => {\n    const auth = useSelector((state: IRootState) => state.auth);\n    const location = useLocation();\n    const history = useHistory();\n\n    const goHome = useCallback(() => {\n        location.pathname === '/home/' ? history.replace('/home/') : history.push('/home/');\n    }, [history, location.pathname])\n\n    const selectCompanyCollection = useSelector((state: IRootState) => state.selectCompany.selectCompanyCollection);\n\n    return (<>\n        <TopAppBar>\n            <TopAppBarRow>\n                <TopAppBarSection align=\"start\">\n                    {/* <TopAppBarIcon>\n                        <MaterialIcon hasRipple icon='menu' />\n                    </TopAppBarIcon> */}\n                    <TopAppBarTitle className={styles.topAppBarTitle} onClick={goHome}>Appl Tracky</TopAppBarTitle>\n                </TopAppBarSection>\n\n                {selectCompanyCollection.size ? (\n                    <TopAppBarSection align=\"start\">\n                        <SelectCompanyMenu />\n                    </TopAppBarSection>\n                ) : null}\n\n                <TopAppBarSection align='end' role='toolbar'>\n                    <TopAppBarIcon navIcon tabIndex={0}>\n                        <Link to=\"/home/\">\n                            <MaterialIcon\n                                hasRipple\n                                key=\"itemHome\"\n                                icon=\"home\"\n                            />\n                        </Link>\n                    </TopAppBarIcon>\n                    <TopAppBarIcon navIcon tabIndex={1}>\n                        <a target=\"_blank\" href=\"//github.com/rivernews/appl-tracky-spa\">\n                            <FontAwesomeIcon icon={faGithub} size=\"lg\" />\n                        </a>\n                    </TopAppBarIcon>\n                    <TopAppBarIcon navIcon tabIndex={2}>\n                        <Link to=\"/profile/\">\n                            {!auth.avatarUrl ? (\n                                <MaterialIcon\n                                    hasRipple\n                                    key=\"itemProfile\"\n                                    icon=\"account_circle\"\n                                />\n                            ) : (\n                                    <img style={{\n                                        \"height\": \"100%\",\n                                        \"borderRadius\": \"50%\",\n                                    }} src={auth.avatarUrl} alt=\"user avatar\" />\n                                )}\n                        </Link>\n                    </TopAppBarIcon>\n                </TopAppBarSection>\n            </TopAppBarRow>\n        </TopAppBar>\n    </>)\n}","import React, { Component } from \"react\";\n\n/** Redux */\nimport { connect } from \"react-redux\";\nimport { IRootState } from \"../../state-management/types/root-types\";\nimport { IUpdateAuthState } from \"../../state-management/types/auth-types\";\n\nimport { RequestStatus } from \"../../utils/rest-api\";\n\n/** Routing & Pages */\nimport {\n    Route,\n    Redirect,\n    Switch,\n    Link,\n    withRouter,\n    RouteComponentProps\n} from \"react-router-dom\";\nimport {\n    TopAppBarFixedAdjust,\n} from '@material/react-top-app-bar';\n\n// transition effects\nimport {\n    TransitionGroup,\n    CSSTransition\n} from \"react-transition-group\";\n\n// pages\nimport { LandingPageContainer } from \"../landing-page/landing-page\";\nimport { LocalLoginPageContainer } from \"../login-page/local-login-page\";\nimport { UserAppPageContainer } from \"../../pages/user-app-page/user-app-page\";\nimport { AddComPageContainer } from \"../../pages/add-com-page/add-com-page\";\nimport { UserComAppPageContainer } from \"../../pages/user-com-app-page/user-com-app-page\";\nimport { UserProfilePageContainer } from \"../../pages/user-profile-page/user-profile-page\";\n\nimport pageTransitionStyles from \"./page-routes-transition.module.css\";\n\nimport LinearProgress from '@material/react-linear-progress';\nimport '@material/react-linear-progress/dist/linear-progress.css';\n\nimport \"@material/react-ripple/dist/ripple.css\";\n\nimport { AppTopBar } from \"../../components/app-top-bar/app-top-bar\";\n\n\nconst publicPageSet = new Set([\n    \"/\",\n    \"/local-login/\",\n    // add more public page routres here\n    // ...\n]);\n\n\ninterface IPageRoutesRouterParams {\n    next?: string;\n}\n\n\ninterface IPageRoutesProps extends RouteComponentProps<IPageRoutesRouterParams> {\n    auth: IUpdateAuthState;\n}\n\n\nclass PageRoutes extends Component<IPageRoutesProps> {\n    goInternal = (): string => {\n        if (!this.props.location.search) {\n            return \"/home/\";\n        }\n\n        const query = new URLSearchParams(this.props.location.search);\n        const nextUrl = query.get(\"next\");\n        if (!nextUrl) {\n            return \"\";\n        }\n\n        return nextUrl;\n    }\n\n    isCurrentPublicPage = () => {\n        return publicPageSet.has(this.props.location.pathname);\n    }\n\n    render() {\n        return (\n            <div>\n                {this.isCurrentPublicPage() ? (\n                    <div className=\"PublicRoutesContainer\">\n                        {/** direct user to internal page if logged in */\n                            this.props.auth.isLogin && <Redirect to={this.goInternal()} />}\n\n                        <Switch>\n                            <Route path=\"/\" exact component={LandingPageContainer} />\n                            <Route path=\"/local-login/\" exact component={LocalLoginPageContainer} />\n                            {\n                                /** add more public page routes here */\n                                // ...\n                            }\n                        </Switch>\n                    </div>\n                ) : (\n                        <div className=\"PrivateRoutesContainer\">\n                            {/** protect private routes, but let people come back the internal page they want to access after they login */\n                                !this.props.auth.isLogin && <Redirect to={`/?next=${this.props.location.pathname}`} />}\n\n                            <AppTopBar />\n\n                            <TopAppBarFixedAdjust>\n                                <LinearProgress\n                                    indeterminate={this.props.auth.requestStatus === RequestStatus.REQUESTING}\n\n                                    // mdc's progress bar bug workaround\n                                    // when press back button, avoid showing dotted buffer animation\n                                    buffer={1}\n                                    bufferingDots={true}\n                                />\n\n                                <TransitionGroup>\n                                    <CSSTransition\n                                        key={this.props.location.key}\n                                        classNames={{ ...pageTransitionStyles }}\n                                        timeout={500}\n                                    >\n                                        <Switch location={this.props.location}>\n                                            <Route\n                                                path=\"/home/\"\n                                                component={UserAppPageContainer}\n                                            />\n                                            <Route\n                                                path=\"/com-form/:uuid?/\"\n                                                component={AddComPageContainer}\n                                            />\n                                            <Route\n                                                path=\"/com-app/:uuid/\"\n                                                component={UserComAppPageContainer}\n                                            />\n                                            <Route\n                                                path=\"/com-app/\"\n                                                component={UserComAppPageContainer}\n                                            />\n                                            <Route\n                                                path=\"/profile/\"\n                                                component={UserProfilePageContainer}\n                                            />\n                                            {/** add more private page routes here */}\n                                        </Switch>\n                                    </CSSTransition>\n                                </TransitionGroup>\n                            </TopAppBarFixedAdjust>\n                        </div>\n                    )}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => ({\n    auth: store.auth\n});\n\nconst mapDispatchToProps = {};\n\nexport const PageRoutesContainer = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(PageRoutes)\n);\n","/** React core */\nimport React, { Component, Dispatch } from \"react\";\n\n/** Redux */\nimport { AnyAction } from \"redux\";\nimport { connect } from \"react-redux\";\nimport { IRootState } from \"./state-management/types/root-types\";\nimport { RequestedLoginAuth } from \"./state-management/action-creators/auth-actions\";\nimport { RequestedLoginMode } from \"./state-management/types/auth-types\";\n\n/** Routes & pages */\nimport { PageRoutesContainer } from \"./pages/page-routes/page-routes\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport { MuiThemeProvider } from \"@material-ui/core/styles\";\n\n/** Locals */\nimport \"./App.css\";\nimport \"./ckeditor.css\";\nimport { lightTheme } from \"./components/themes\";\n\n\ninterface IAppProps {\n    retrieveLoginAuth: () => void;\n}\n\nclass App extends Component<IAppProps> {\n    componentDidMount() {\n        this.props.retrieveLoginAuth();\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <CssBaseline />\n                <MuiThemeProvider theme={lightTheme}>\n                    <PageRoutesContainer />\n                </MuiThemeProvider>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IRootState) => {\n    return {\n    };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>) => { \n    return {\n        retrieveLoginAuth: () => {\n            dispatch(\n                RequestedLoginAuth(RequestedLoginMode.PREFILL)\n            );\n        },\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          process.env.NODE_ENV === 'development' && console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              process.env.NODE_ENV === 'development' && console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              process.env.NODE_ENV === 'development' && console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      process.env.NODE_ENV === 'development' && console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { Reducer, Action } from 'redux';\n\nimport { \n    /** store */\n    IUpdateAuthState, \n    /** action */\n    AuthActionNames, TAuthActions, AuthActionNamesValue \n} from \"../types/auth-types\";\n\nimport { RequestStatus } from \"../../utils/rest-api\";\n\nconst initialAuthState: IUpdateAuthState = {\n    requestStatus: RequestStatus.SUCCESS, // initial status just set to SUCCESS\n    isLogin: false,\n    isLocal: false,\n    socialAuthToken: \"\",\n    apiToken: \"\",\n    userName: \"\",\n    expireDateTime: \"\",\n    avatarUrl: \"\",\n}\n\n// authStore will be stored as a sub-entry in global store; this is defined in ./store/types.ts\nexport const authReducer: Reducer<IUpdateAuthState> = (authStore = initialAuthState, action: Action)  => {\n    // add reducer for new actions here\n    // ...\n\n    if (!(AuthActionNamesValue.includes(action.type))) {\n        return authStore;\n    }\n\n    const authAction = action as TAuthActions;\n\n    if (authAction.type === AuthActionNames.SUCCESS_AUTH) {\n        localStorage.setItem(process.env.NODE_ENV === 'development' ? 'dev__applyTracky__authState' : 'applyTracky__authState', JSON.stringify(authAction.payload));\n    }\n\n    return {\n        ...authStore,\n        ...authAction.payload\n    }\n}","import { IObjectStore, IObjectAction, TObject, IObjectList, IObjectBase } from \"../types/factory-types\";\n\nimport { RequestStatus, CrudType } from \"../../utils/rest-api\";\n\nimport { Action, Reducer } from \"redux\";\n\nimport { omit } from \"lodash\";\n\n\nexport const RestApiReducerFactory = <ObjectRestApiSchema extends IObjectBase>(\n    objectName: string,\n): Reducer<IObjectStore<ObjectRestApiSchema>> => {\n    const initialState: IObjectStore<ObjectRestApiSchema> = {\n        collection: {},\n        requestStatus: RequestStatus.SUCCESS\n    };\n\n    const storeReducer: Reducer<IObjectStore<ObjectRestApiSchema>> = (\n        objectStore: IObjectStore<ObjectRestApiSchema> = initialState,\n        action: Action\n    ): IObjectStore<ObjectRestApiSchema> => {\n\n        const objectAction = action as IObjectAction<ObjectRestApiSchema>;\n\n        if (\n            !(objectAction && objectAction.payload && objectAction.payload.requestStatus) ||\n            !(action.type.split(\"_\")[2] === objectName.toUpperCase())\n        ) {\n            return {\n                ...objectStore\n            };\n        }\n\n        // async success\n        if (objectAction.payload.requestStatus === RequestStatus.SUCCESS) {\n            // CREATE\n            if (objectAction.crudType === CrudType.CREATE) {\n                let newObject = <TObject<ObjectRestApiSchema>>objectAction.payload.formData;\n\n                return {\n                    collection: {\n                        ...objectStore.collection,\n                        [newObject.uuid]: newObject\n                    },\n                    requestStatus: objectAction.payload.requestStatus\n                };\n            }\n            // BATCH CREATE\n            else if (objectAction.crudType === CrudType.BATCHCREATE) {\n                const newObjects = <Array<TObject<ObjectRestApiSchema>>>objectAction.payload.formData;\n                // turn into a collection so we can spread\n                const newObjectsCollection = newObjects.reduce((collection, object) => {\n                    collection[object.uuid] = object;\n                    return collection;\n                }, <IObjectList<ObjectRestApiSchema>>{});\n\n                return {\n                    collection: {\n                        ...objectStore.collection,\n                        ...newObjectsCollection\n                    },\n                    requestStatus: objectAction.payload.requestStatus\n                };\n            }\n\n            // LIST\n            else if (objectAction.crudType === CrudType.LIST) {\n                const resObjects = <Array<TObject<ObjectRestApiSchema>>>objectAction.payload.formData;\n                // turn into a collection so we can spread\n                const newObjectsCollection: IObjectList<ObjectRestApiSchema> = {};\n                for (let object of resObjects) {\n                    newObjectsCollection[object.uuid] = object;\n                }\n\n                const afterStore: IObjectStore<ObjectRestApiSchema> = {\n                    collection: {\n                        ...objectStore.collection,\n                        ...newObjectsCollection\n                    },\n                    requestStatus: objectAction.payload.requestStatus\n                };\n\n                return afterStore;\n            }\n\n            // UPDATE\n            else if (objectAction.crudType === CrudType.UPDATE) {\n                let updatedObject = <TObject<ObjectRestApiSchema>>objectAction.payload.formData;\n\n                return {\n                    collection: {\n                        ...objectStore.collection,\n                        // support partial update - only update attributes included by updatedObject\n                        [updatedObject.uuid]: {\n                            ...objectStore.collection[updatedObject.uuid],\n                            ...updatedObject\n                        }\n                    },\n                    requestStatus: objectAction.payload.requestStatus\n                };\n            }\n            // BATCH UPDATE\n            else if (objectAction.crudType === CrudType.BATCHUPDATE) {\n                let updatedObjects = <Array<TObject<ObjectRestApiSchema>>>objectAction.payload.formData;\n                // turn into a collection so we can spread\n                const updatedObjectsCollection = updatedObjects.reduce((collection, updatedObject) => {\n                    // support partial update - only update attributes included by updatedObject\n                    collection[updatedObject.uuid] = {\n                        ...objectStore.collection[updatedObject.uuid],\n                        ...updatedObject\n                    };\n                    return collection;\n                }, <IObjectList<ObjectRestApiSchema>>{});\n\n                return {\n                    collection: {\n                        ...objectStore.collection,\n                        ...updatedObjectsCollection\n                    },\n                    requestStatus: objectAction.payload.requestStatus\n                };\n            }\n\n            // DELETE & BATCH DELETE\n            else if (objectAction.crudType === CrudType.DELETE) {\n                let targetDeleteUuids: Array<string> = [];\n                if (objectAction.triggerFormData) {\n                    if (!Array.isArray(objectAction.triggerFormData) && typeof objectAction.triggerFormData === 'object') {\n                        const targetDeleteObject = <TObject<ObjectRestApiSchema>>objectAction.triggerFormData;\n                        targetDeleteUuids.push(targetDeleteObject.uuid);\n                    }\n                    else if (objectAction.triggerFormData.length) {\n                        if (typeof (objectAction.triggerFormData[0]) === \"string\") {\n                            targetDeleteUuids = objectAction.triggerFormData as Array<string>;\n                        }\n                        else {\n                            const targetDeleteObjectList = <Array<TObject<ObjectRestApiSchema>>>objectAction.triggerFormData;\n    \n                            targetDeleteUuids = targetDeleteObjectList.map(targetDeleteObject => targetDeleteObject.uuid);\n                        }\n                    }\n                }\n\n                const afterStore = {\n                    collection: omit(objectStore.collection, targetDeleteUuids),\n                    requestStatus: objectAction.payload.requestStatus\n                }\n\n                return afterStore;\n            }\n        }\n\n        // async trigger\n        else if (objectAction.payload.requestStatus === RequestStatus.TRIGGERED) {\n            return {\n                ...objectStore,\n                requestStatus: objectAction.payload.requestStatus\n            };\n        }\n\n        // async requesting & failure\n        else {\n            return {\n                ...objectStore,\n                ...objectAction.payload\n            };\n        }\n\n        // no effect\n        return {\n            ...objectStore\n        };\n    };\n\n    return storeReducer;\n}","import { Reducer, Action } from \"redux\";\nimport { IReference } from \"../../data-model/base-model\";\nimport { labelTypes } from \"../../data-model/label\";\nimport { RequestStatus } from \"../../utils/rest-api\";\nimport { ISelectCompanyState, SelectCompanyActionNames, TSelectCompanyActions } from \"../types/select-company-types\";\n\nconst initialSelectCompanyState: ISelectCompanyState = {\n    selectCompanyCollection: new Map<IReference, labelTypes>(),\n    destinationStatus: labelTypes.TARGET,\n    requestStatus: RequestStatus.SUCCESS\n}\n\nexport const selectCompanyReducer: Reducer<ISelectCompanyState> = (state = initialSelectCompanyState, action: Action) => {\n    const selectCompanyAction = action as TSelectCompanyActions;\n    switch (selectCompanyAction.type) {\n        case SelectCompanyActionNames.CANCEL_ALL:\n            return initialSelectCompanyState;\n        \n        case SelectCompanyActionNames.ADD_SELECT_COMPANY:\n            const isFound = state.selectCompanyCollection.has(selectCompanyAction.companyId);\n            if (isFound) {\n                return state;\n            } else {\n                return {\n                    ...state,\n                    selectCompanyCollection: new Map([...state.selectCompanyCollection, [selectCompanyAction.companyId, selectCompanyAction.companyStatus]])\n                }\n            }\n        \n        case SelectCompanyActionNames.REMOVE_SELECT_COMPANY:\n            return {\n                ...state,\n                selectCompanyCollection: new Map(\n                    [...state.selectCompanyCollection]\n                        .filter(([uuid,]) => uuid !== selectCompanyAction.companyId)\n                )\n            }\n        \n        case SelectCompanyActionNames.SET_DESTINATION_STATUS:\n            return {\n                ...state,\n                destinationStatus: selectCompanyAction.status\n            }\n        \n        case SelectCompanyActionNames.SET_REQUEST_STATUS:\n            // if request success, also reset the state\n            if (selectCompanyAction.requestStatus === RequestStatus.SUCCESS) {\n                return initialSelectCompanyState;\n            }\n            return {\n                ...state,\n                requestStatus: selectCompanyAction.requestStatus\n            }\n    }\n\n    return state;\n}","/** redux */\nimport { Reducer, Action } from \"redux\";\nimport { connectRouter, LocationChangeAction } from 'connected-react-router';\nimport { authReducer } from \"./auth-reducers\";\nimport { IRootState } from \"../types/root-types\";\nimport { IObjectStore } from \"../types/factory-types\";\nimport { RootActionNames } from \"../action-creators/root-actions\";\nimport { RestApiReducerFactory } from \"./reducer-factory\";\nimport { ApplicationStatus } from \"../../data-model/application-status/application-status\";\nimport { Application } from \"../../data-model/application/application\";\n// rest api\nimport { labelTypesMapToCompanyGroupTypes, companyGroupTypes, Company } from \"../../data-model/company/company\";\n\n/** router */\nimport { History } from \"history\";\nimport { selectCompanyReducer } from \"./select-company-reducers\";\n\n\n// create reducer for each data model\n\nexport const CompanyReducer = RestApiReducerFactory<Company>(\"companies\");\n\nexport const GroupCompanyReducer = Object.values(labelTypesMapToCompanyGroupTypes).reduce((accumulated, companyGroupText) => {\n    return {\n        ...accumulated,\n        [companyGroupText]: RestApiReducerFactory(companyGroupText)\n    }\n}, {}) as { [key in companyGroupTypes]: Reducer<IObjectStore<Company>> };\n\nexport const ApplicationReducer = RestApiReducerFactory<Application>(\"applications\");\n\nexport const ApplicationStatusReducer = RestApiReducerFactory<ApplicationStatus>(\"application-statuses\");\n\n\n// root reducer with router state\n\nexport const createRootReducer = (history: History<any>): Reducer<IRootState> => {\n    // return combineReducers<IRootState>({\n    //     router: connectRouter(history),\n    \n    //     // add more reducers here\n    //     auth: authReducer,\n    //     company: CompanyReducer,\n    //     address: AddressReducer,\n    //     application: ApplicationReducer,\n    //     // ...\n    // })\n\n    const rootReducer: Reducer<IRootState> = (rootState: IRootState | undefined, action: Action): IRootState  => {\n\n        let rootStateChecked: {\n            [storeName: string]: any\n        } = {};\n        if (!rootState) {\n            rootStateChecked.router = undefined;\n            rootStateChecked.auth = undefined;\n\n            rootStateChecked.company = undefined;\n            Object.values(labelTypesMapToCompanyGroupTypes).forEach((companyGroupText) => {\n                rootStateChecked[companyGroupText] = undefined;\n            });\n\n            rootStateChecked.application = undefined;\n            rootStateChecked.applicationStatus = undefined;\n            // add initial state for new sub-store here\n            // ...\n        } else if (action.type === RootActionNames.ResetAllStore) {\n            // exclude all store instead of the router's\n            rootStateChecked = {\n                router: rootState.router\n            }\n        } else {\n            rootStateChecked = rootState;\n        }\n\n        const afterStore = { \n            ...rootState,\n            router: connectRouter(history)(rootStateChecked.router, action as LocationChangeAction),\n            auth: authReducer(rootStateChecked.auth, action),\n\n            company: CompanyReducer(rootStateChecked.company, action),\n            \n            // add grouped company reducers\n            ...(Object.values(labelTypesMapToCompanyGroupTypes).reduce((accumulate, companyGroupText) => {\n                const Reducer = GroupCompanyReducer[companyGroupText];\n                return ({\n                    ...accumulate,\n                    [companyGroupText]: Reducer(rootStateChecked[companyGroupText], action)\n                })\n            }, {}) as {\n                [key in companyGroupTypes]: IObjectStore<Company>\n            }),\n\n            application: ApplicationReducer(rootStateChecked.application, action),\n            applicationStatus: ApplicationStatusReducer(rootStateChecked.applicationStatus, action),\n\n            selectCompany: selectCompanyReducer(rootStateChecked.selectCompany, action),\n            \n            // add new reducer here\n            // ...\n        }\n        \n        return afterStore;\n    }\n\n    return rootReducer;\n}","/** redux */\nimport {\n    AuthActionNames,\n    IRequestedLoginAuthAction,\n    IRequestedLogoutAuthAction\n} from \"../types/auth-types\";\nimport {\n    SuccessLoginAuth,\n    SuccessLogoutAuth,\n    FailureAuth\n} from \"../action-creators/auth-actions\";\nimport { resetAllStoreAction, GroupedCompanyActionCreators } from \"../action-creators/root-actions\";\nimport { labelTypesMapToCompanyGroupTypes } from \"../../data-model/company/company\";\nimport { labelTypes } from \"../../data-model/label\";\n// redux-saga\nimport { takeEvery, call, put } from \"redux-saga/effects\";\n\n/** api */\nimport { AuthenticationService } from \"../../utils/authentication\";\nimport { CrudType, RequestStatus, RestApiService } from \"../../utils/rest-api\";\n\n\nfunction* authLoginSagaHandler(\n    requestedLoginAuthAction: IRequestedLoginAuthAction\n) {\n    // RequestAuth action triggered & injecting side effects here...\n    \n    const {\n        loginMode, \n        params={},\n        onCompleteCallback,\n    } = requestedLoginAuthAction;\n    \n    try {\n        // TODO: define interface typing for api response\n\n        const jsonResponse = yield call(AuthenticationService.serverLogin, loginMode, params);\n\n        // In prefill login case, if cannot restore/refresh login session\n        if (!jsonResponse.token) {\n            yield put(SuccessLogoutAuth());\n            return;\n        }\n\n        yield put(SuccessLoginAuth(\n            jsonResponse.email, \"\", \n            jsonResponse.token, \n            jsonResponse.avatar_url,\n            jsonResponse.isLocal\n        ));\n\n        // initial fetch user data\n        // yield put(\n        //     CompanyActionCreators[CrudType.LIST][RequestStatus.TRIGGERED].action()\n        // );\n\n        // fetch companies that do not have label status yet, treat them as `target` and put them in target group\n        yield put(\n            GroupedCompanyActionCreators[\"targetCompany\"][CrudType.LIST][RequestStatus.TRIGGERED].action(\n                {}, undefined, undefined, undefined,\n                `${RestApiService.state.apiBaseUrl}companies/?labels__isnull=True`\n            )\n        );\n        // fetch companies filter by their label status\n        for (let labelText of Object.values(labelTypes)) {\n            yield put(\n                GroupedCompanyActionCreators[labelTypesMapToCompanyGroupTypes[labelText as labelTypes]][CrudType.LIST][RequestStatus.TRIGGERED].action(\n                    {}, undefined, undefined, undefined,\n                    `${RestApiService.state.apiBaseUrl}companies/?labels__text=${labelText}`\n                )\n            )\n        }\n    } catch (error) {\n        console.warn(`auth saga error: ${JSON.stringify(error)}`);\n        yield put(FailureAuth(error));\n    }\n\n    onCompleteCallback && onCompleteCallback();\n}\n\nexport function* authLoginSaga() {\n    yield takeEvery(AuthActionNames.REQUESTED_LOGIN_AUTH, authLoginSagaHandler);\n}\n\nfunction* authLogoutSagaHandler(\n    requestedLogoutAuthAction: IRequestedLogoutAuthAction\n) {\n    // RequestAuth action triggered & injecting side effects here...\n    try {\n        yield call(AuthenticationService.serverLogout);\n\n        // clear all store\n    } catch (error) {\n        yield put(FailureAuth(error));\n        return;\n    }\n\n    yield put(SuccessLogoutAuth());\n    // yield put(push(\"/\"));\n\n    // clear all redux store\n    yield put(resetAllStoreAction());\n}\n\nexport function* authLogoutSaga() {\n    yield takeEvery(\n        AuthActionNames.REQUESTED_LOGOUT_AUTH,\n        authLogoutSagaHandler\n    );\n}\n\n// add new saga handler here && a `takeEvery` saga.\n// ...","import { IObjectBase, IObjectRestApiReduxFactoryActions, JsonResponseType, ITriggerActionOptions, IObjectAction, ISuccessSagaHandlerArgs, ISagaFactoryOptions } from \"../types/factory-types\";\n\nimport { CrudType, RequestStatus, IsSingleRestApiResponseTypeGuard, ISingleRestApiResponse, IListRestApiResponse, IRequestParams, RestApiService, CrudMapToRest } from \"../../utils/rest-api\";\nimport { SagaIterator } from \"redux-saga\";\nimport { actionChannel, take, call, put } from \"redux-saga/effects\";\nimport { normalize } from \"normalizr\";\n\n\nexport const RestApiSagaFactory = <ObjectRestApiSchema extends IObjectBase>(\n    /** should have uuid */ objectName: string,\n    ObjectRestApiActions: IObjectRestApiReduxFactoryActions,\n    sagaFactoryOptions: ISagaFactoryOptions<ObjectRestApiSchema>\n): Array<() => SagaIterator> => {\n    const crudKeywords = Object.values(CrudType) as Array<CrudType>;\n\n    const sagas = crudKeywords.map((crudKeyword) => {\n\n        const sagaHandler = function* (\n            triggerAction: IObjectAction<ObjectRestApiSchema>\n        ) {\n            let formData: ObjectRestApiSchema | Array<ObjectRestApiSchema> | undefined = triggerAction.payload.formData;\n            const absoluteUrl = triggerAction.absoluteUrl;\n\n            yield put(\n                ObjectRestApiActions[crudKeyword][\n                    RequestStatus.REQUESTING\n                ].action()\n            );\n\n            try {\n                // api call\n                let jsonResponse: JsonResponseType<ObjectRestApiSchema> = yield call(\n                    (<(params: IRequestParams<ObjectRestApiSchema>) => void>RestApiService[CrudMapToRest(crudKeyword)]),\n                    {\n                        data: formData,\n                        objectName,\n                        absoluteUrl,\n                    }\n                );\n\n                if (jsonResponse.status && jsonResponse.status >= 400) {\n                    console.error(\"Server error, see message in res.\");\n                    throw new Error(\"Server error, see message in res.\");\n                }\n\n                // if there is .next in res, then it's paginated data and we should perform a next request to next page data\n                if (jsonResponse.next) {\n                    yield put(ObjectRestApiActions[CrudType.LIST][RequestStatus.TRIGGERED].action(\n                        undefined, undefined, undefined, undefined, jsonResponse.next\n                    ));\n                }\n\n                // normalize primary object data (for relational object normalizing, will do it later) if  normalize manifest speciified\n                let normalizeData: undefined | Array<ObjectRestApiSchema> = undefined;\n                let relationalNormalizeData: undefined | {\n                    [relationalEntityKey: string]: Array<ObjectRestApiSchema>\n                } = undefined;\n\n                if (sagaFactoryOptions.normalizeManifest) {\n\n                    const normalizeObjectEntityKey = sagaFactoryOptions.normalizeManifest.objectEntityKey;\n\n                    // collect data from meaningful source\n                    let dataSource = undefined;\n                    if (crudKeyword === CrudType.DELETE) {\n                        dataSource = formData;\n                    }\n                    else if (IsSingleRestApiResponseTypeGuard(jsonResponse)) {\n                        dataSource = jsonResponse as ObjectRestApiSchema;\n                    }\n                    else {\n                        dataSource = jsonResponse.results as Array<ObjectRestApiSchema>;\n                    }\n\n                    // normalize all data once for all\n                    const normalizeDataSourceSchema = Array.isArray(dataSource) ? (sagaFactoryOptions.normalizeManifest.listSchema) : (sagaFactoryOptions.normalizeManifest.schema);\n                    const normalizeDataSource = normalize(dataSource, normalizeDataSourceSchema);\n\n                    // place noramlized data to variables to fit in existing framework\n                    normalizeData = Object.values(normalizeDataSource.entities[normalizeObjectEntityKey]);\n                    if (crudKeyword === CrudType.DELETE) {\n                        formData = normalizeData.length === 1 ? normalizeData[0] : normalizeData;\n                    }\n                    else if (IsSingleRestApiResponseTypeGuard(jsonResponse)) {\n                        jsonResponse = normalizeData[0];\n                    }\n                    else {\n                        jsonResponse.results = normalizeData;\n                    }\n\n                    // prepare relational data for later use\n                    relationalNormalizeData = Object.keys(sagaFactoryOptions.normalizeManifest.relationalEntityReduxActionsMap).filter(key => normalizeDataSource.entities.hasOwnProperty(key)).reduce((accumulate, relationalEntityKey) => ({\n                        ...accumulate,\n                        [relationalEntityKey]: Object.values(normalizeDataSource.entities[relationalEntityKey])\n                    }), {});\n                }\n\n                // handle success state --\n\n                // dispatch relational object actions, if normalize is needed (normalize manifest specified)\n                if (sagaFactoryOptions.normalizeManifest && relationalNormalizeData) {\n\n                    switch (crudKeyword) {\n                        case CrudType.UPDATE:\n                            // relational object will do nothing when primary action is UPDATE - UPDATE is purely on primary object\n                            break\n\n                        case CrudType.LIST:\n                        // relational objects should also apply LIST\n                        case CrudType.CREATE:\n                            // when there's a fresh new object created, if there're relational objects present then will also apply LIST to them\n                            for (const relationalEntityKey in sagaFactoryOptions.normalizeManifest.relationalEntityReduxActionsMap) {\n                                if (\n                                    // if no embed data, normalizr will not include it in `entities`\n                                    // so don't compare length; just compare its key existence\n                                    !relationalNormalizeData[relationalEntityKey]\n                                ) {\n                                    process.env.NODE_ENV === 'development' && console.log('skip for relational key', relationalEntityKey)\n                                    continue;\n                                }\n\n                                const dispatchResponseData = IsSingleRestApiResponseTypeGuard(jsonResponse) ? (\n                                    relationalNormalizeData[relationalEntityKey][0]\n                                ) : {\n                                        results: relationalNormalizeData[relationalEntityKey]\n                                    };\n\n                                const relationalActions = sagaFactoryOptions.normalizeManifest.relationalEntityReduxActionsMap[relationalEntityKey] as IObjectRestApiReduxFactoryActions;\n\n                                yield put(\n                                    relationalActions[crudKeyword][RequestStatus.SUCCESS].action(dispatchResponseData)\n                                );\n                            }\n                            break;\n\n                        case CrudType.DELETE:\n                            // if got `overrideCrudSuccessHandler.delete`, we will not do any side effects (dispatching actions) to redux store\n                            // we'll let `overrideCrudSuccessHandler.delete` handle all side effects to redux store\n                            if (sagaFactoryOptions.overrideCrudSuccessSagaHandler && sagaFactoryOptions.overrideCrudSuccessSagaHandler.delete) {\n                                break;\n                            }\n\n                            // because formData is always already normalized and we only have 1st-level-relationship's uuids, we will only dispatch delete action for 1st level relational fields. \n                            // we will not do cascade delete for nested && relational field.\n                            // if you need cascade delete to deal with nested relational fields, you'll have to write your own `overrideCrudSuccessHandler.delete` in the sagaOptions.\n\n                            // in backend, cascade delete should already be handled.\n                            // here we are only cleaning up / cascade delete the frontend redux store\n\n                            for (const relationalEntityKey in sagaFactoryOptions.normalizeManifest.relationalEntityReduxActionsMap) {\n                                const relationalActions = sagaFactoryOptions.normalizeManifest.relationalEntityReduxActionsMap[relationalEntityKey] as IObjectRestApiReduxFactoryActions;\n\n                                // relational objects should apply DELETE action -- this is a bulk deletion, not single delete\n                                const dispatchDeleteData = relationalNormalizeData[relationalEntityKey] ? relationalNormalizeData[relationalEntityKey] : (\n                                    formData && !Array.isArray(formData) && formData.hasOwnProperty(relationalEntityKey) ? (<ObjectRestApiSchema>formData)[relationalEntityKey as keyof ObjectRestApiSchema] : []\n                                );\n\n                                yield put(\n                                    relationalActions[CrudType.DELETE][RequestStatus.SUCCESS].action(undefined, dispatchDeleteData)\n                                );\n                            }\n                            break;\n\n                        default:\n                            break;\n                    }\n                }\n\n                // dispatch primary object action\n                const overrideCrudSuccessSagaHandler: ((args: ISuccessSagaHandlerArgs<ObjectRestApiSchema>) => void) | undefined = (\n                    sagaFactoryOptions.overrideCrudSuccessSagaHandler &&\n                    sagaFactoryOptions.overrideCrudSuccessSagaHandler.hasOwnProperty(crudKeyword) &&\n                    sagaFactoryOptions.overrideCrudSuccessSagaHandler[crudKeyword as CrudType] // only call the corresponding CRUD success saga handler\n                ) ? (\n                        sagaFactoryOptions.overrideCrudSuccessSagaHandler[crudKeyword as CrudType]\n                    ) : undefined;\n                if (overrideCrudSuccessSagaHandler) {\n                    // use custom handler if provided\n                    yield call(overrideCrudSuccessSagaHandler, {\n                        data: normalizeData ? normalizeData : (\n                            crudKeyword === CrudType.DELETE ? formData : jsonResponse\n                        ),\n                        updateFromObject: triggerAction.triggerActionOptions ? triggerAction.triggerActionOptions.updateFromObject : undefined\n                    });\n                }\n                else {\n                    // default handler\n                    if (crudKeyword === CrudType.DELETE) {\n                        yield put(\n                            ObjectRestApiActions[CrudType.DELETE][\n                                RequestStatus.SUCCESS\n                            ].action(undefined, formData)\n                        );\n                    } else {\n                        yield put(\n                            ObjectRestApiActions[crudKeyword][\n                                RequestStatus.SUCCESS\n                            ].action(jsonResponse)\n                        );\n                    }\n                }\n\n                // add-on behavior\n                const doneCrudSuccessSagaHandler = sagaFactoryOptions.doneCrudSuccessSagaHandler && sagaFactoryOptions.doneCrudSuccessSagaHandler[crudKeyword as CrudType] ? sagaFactoryOptions.doneCrudSuccessSagaHandler[crudKeyword as CrudType] : undefined;\n                if (doneCrudSuccessSagaHandler) {\n                    yield call(doneCrudSuccessSagaHandler, {\n                        data: normalizeData ? normalizeData : (\n                            crudKeyword === CrudType.DELETE ? formData : jsonResponse\n                        ),\n                        updateFromObject: triggerAction.triggerActionOptions ? triggerAction.triggerActionOptions.updateFromObject : undefined\n                    }\n                    );\n                }\n\n                if (triggerAction.successCallback) {\n                    triggerAction.successCallback(jsonResponse);\n                }\n            } catch (error) {\n                // error state\n                yield put(\n                    ObjectRestApiActions[crudKeyword][\n                        RequestStatus.FAILURE\n                    ].action(error)\n                );\n\n                if (triggerAction.failureCallback) {\n                    triggerAction.failureCallback(error);\n                }\n                return;\n            }\n\n            if (triggerAction.finalCallback) {\n                triggerAction.finalCallback();\n            }\n        };\n\n        // saga listener\n        const saga = function* () {\n\n            // queue style \n            const objectTriggerActionChannel = yield actionChannel(\n                ObjectRestApiActions[crudKeyword][RequestStatus.TRIGGERED]\n                    .actionTypeName\n            )\n\n            while (true) {\n                const objectTriggerAction = yield take(objectTriggerActionChannel);\n                yield call(sagaHandler, objectTriggerAction);\n            }\n        };\n\n        return saga;\n    }\n    );\n\n    return sagas;\n}","import { ISuccessSagaHandlerArgs, IObjectStore } from \"../types/factory-types\";\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\nimport { Company, labelTypesMapToCompanyGroupTypes } from \"../../data-model/company/company\";\nimport { CompanyActionCreators, GroupedCompanyActionCreators, ApplicationStatusActionCreators, ApplicationActionCreators } from \"../action-creators/root-actions\";\n\nimport { put, select } from \"redux-saga/effects\";\nimport { getApplicationStore } from \"../store/store-config\";\nimport { Application } from \"../../data-model/application/application\";\nimport { IReference } from \"../../data-model/base-model\";\n\n\nexport const companyDoneUpdateSuccessSagaHandler = function*(args: ISuccessSagaHandlerArgs<Company>) {\n    if (!args.data || (Array.isArray(args.data) && !args.data.length)) {\n        return;\n    }\n\n    const destinationCompany = Array.isArray(args.data) ? args.data[0] : args.data;\n    const destinationLabelText = Company.getLabel(destinationCompany);\n\n    // formData will always be a single company since we are dealing with Update only\n    const currentCompany = args.updateFromObject as Company;\n    const currentLabelText = Company.getLabel(currentCompany);\n\n    // update ref in grouped redux\n    if (destinationLabelText === currentLabelText) {\n        return;\n    }\n\n    // dispatch a success/CREATE action to the destination company group's action\n    const destinationCreateAction = GroupedCompanyActionCreators[labelTypesMapToCompanyGroupTypes[destinationLabelText]][CrudType.CREATE][RequestStatus.SUCCESS].action;\n    yield put(\n        destinationCreateAction({ uuid: destinationCompany.uuid })\n    );\n    \n    // dispatch a success/DELETE action of the original (current) company group \n    const currentDeleteAction = GroupedCompanyActionCreators[labelTypesMapToCompanyGroupTypes[currentLabelText]][CrudType.DELETE][RequestStatus.SUCCESS].action;\n    yield put(\n        currentDeleteAction(undefined, { uuid: currentCompany.uuid })\n    );\n}\nexport const companyOverrideDeleteSuccessSagaHandler = function*(args: ISuccessSagaHandlerArgs<Company>) {\n    if (!args.data || (Array.isArray(args.data) && !args.data.length)) {\n        return;\n    }\n    // delete ref in grouped company redux\n    const currentCompany = Array.isArray(args.data) ? args.data[0] : args.data;\n    const currentLabelText = Company.getLabel(currentCompany);\n    const currentAction = GroupedCompanyActionCreators[labelTypesMapToCompanyGroupTypes[currentLabelText]][CrudType.DELETE][RequestStatus.SUCCESS].action;\n    yield put(\n        currentAction(undefined, { uuid: currentCompany.uuid })\n    );\n\n    // handle cascade delete - delete relational data in their redux\n    \n    // delete related statuses\n    const applicationStore: IObjectStore<Application> = yield select(getApplicationStore);\n    alert(`currentCompany applications: ${JSON.stringify(currentCompany.applications)}`);\n    const deleteStatusUuids = (currentCompany.applications as Array<IReference>).flatMap((applicationUuid) => {\n        alert(`flatMap, application uuid: ${applicationUuid}`);\n        alert(`applicationUuid in applicationStore.collection?: ${applicationUuid in applicationStore.collection}`);\n        alert(`hasownProperty?: ${applicationStore.collection.hasOwnProperty(applicationUuid)}`);\n        alert(`statuses?: ${JSON.stringify(applicationStore.collection[applicationUuid].statuses)}`);\n        return applicationUuid in applicationStore.collection ? (\n            applicationStore.collection[applicationUuid].statuses as Array<IReference>\n        ) : []\n    });\n    alert(`cascade delete statuses: ${JSON.stringify(deleteStatusUuids)}`);\n\n    yield put(\n        ApplicationStatusActionCreators[CrudType.DELETE][RequestStatus.SUCCESS].action(\n            undefined,\n            deleteStatusUuids\n        )\n    );\n\n    // delete related applications\n    yield put(\n        ApplicationActionCreators[CrudType.DELETE][RequestStatus.SUCCESS].action(\n            undefined,\n            currentCompany.applications\n        )\n    );\n\n    // handle deleting company itself\n    yield put(\n        CompanyActionCreators[CrudType.DELETE][RequestStatus.SUCCESS].action(\n            undefined,\n            currentCompany\n        )\n    );\n}\n\n// grouped redux can only do api call when it's fetch (LIST), using the absolute url when dispatching TRIGGER action (in login saga).\n// if operation is others like UPDATE, CREATE, DELETE, then cannot do api call because the absolute url might not work for POST/PATCH/DELET.\nexport const groupedCompanyListSuccessSagaHandler = function*(args: ISuccessSagaHandlerArgs<Company>) {\n    // In redux factory saga, already ensure the right CRUD so no need to check crudType\n\n    if (!args.data || Array.isArray(args.data) && !args.data.length) {\n        return;\n    }\n\n    const fetchedCompanyList: Array<Company> = Array.isArray(args.data) ? args.data : [args.data];\n\n    const currentLabelText = Company.getLabel(fetchedCompanyList[0]);\n\n    // place company objects in pool redux\n    yield put(\n        CompanyActionCreators[CrudType.LIST][RequestStatus.SUCCESS].action({\n            results: fetchedCompanyList\n        })\n    );\n\n    // place \"pointers\", i.e., uuids, of company objects to grouped redux\n    const fetchedCompanyListUuids = fetchedCompanyList.map(company => ({\n        uuid: company.uuid\n    }));\n    yield put(\n        GroupedCompanyActionCreators[labelTypesMapToCompanyGroupTypes[currentLabelText]][CrudType.LIST][RequestStatus.SUCCESS].action({ results: fetchedCompanyListUuids })\n    );\n}","import { schema } from \"normalizr\";\n\nexport const ApplicationStatusNormalizeSchema = new schema.Entity(\"statuses\", {}, {\n    idAttribute: \"uuid\"\n})\n\nexport const ApplicationStatusListNormalizeSchema = new schema.Array(ApplicationStatusNormalizeSchema);","import { schema } from \"normalizr\";\nimport { ApplicationStatusListNormalizeSchema } from \"../application-status/application-status-normalize-schema\";\nimport { ApplicationStatusActionCreators } from \"../../state-management/action-creators/root-actions\";\n\n\nconst ApplicationNormalizeDefinition = {\n    \"statuses\": ApplicationStatusListNormalizeSchema\n};\n\nexport const ApplicationNormalizeSchema = new schema.Entity(\"applications\", ApplicationNormalizeDefinition, {\n    idAttribute: \"uuid\"\n});\n\nexport const ApplicationListNormalizeSchema = new schema.Array(ApplicationNormalizeSchema);\n\nexport const ApplicationNormalizeManifest = {\n    schema: ApplicationNormalizeSchema,\n    listSchema: ApplicationListNormalizeSchema,\n    objectEntityKey: \"applications\",\n    relationalEntityReduxActionsMap: {\n        \"statuses\": ApplicationStatusActionCreators\n    }\n}\n","import { schema } from 'normalizr';\nimport { ApplicationListNormalizeSchema } from \"../application/application-normalize-schema\";\nimport { ApplicationActionCreators, ApplicationStatusActionCreators } from '../../state-management/action-creators/root-actions';\n\n\nconst CompanyNormalizeDefinition = {\n    applications: ApplicationListNormalizeSchema\n};\n\nexport const CompanyNormalizeSchema = new schema.Entity(\"companies\", CompanyNormalizeDefinition, {\n    idAttribute: \"uuid\"\n});\n\nexport const CompanyListNormalizeSchema = new schema.Array(CompanyNormalizeSchema);\nexport const CompanyNormalizeManifest = {\n    schema: CompanyNormalizeSchema,\n    listSchema: CompanyListNormalizeSchema,\n    objectEntityKey: \"companies\",\n    relationalEntityReduxActionsMap: {\n        \"applications\": ApplicationActionCreators,\n        \"statuses\": ApplicationStatusActionCreators\n    }\n}","import { ISuccessSagaHandlerArgs } from \"../types/factory-types\";\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\nimport { IReference } from \"../../data-model/base-model\";\nimport { Company } from \"../../data-model/company/company\";\nimport { CompanyActionCreators } from \"../action-creators/root-actions\";\nimport { Application } from \"../../data-model/application/application\";\n\nimport { select, put } from \"redux-saga/effects\";\nimport { getCompanyStore } from \"../store/store-config\";\n\n\n// create a ref (uuid) in the upstream object - company\nexport const applicationDoneCreateSuccessSagaHandler = function*(args: ISuccessSagaHandlerArgs<Application>) {\n    if (!args.data || (Array.isArray(args.data) && !args.data.length)) {\n        return;\n    }\n    const application = (Array.isArray(args.data) ? args.data[0] : args.data) as Application;\n    const companyStore = yield select(getCompanyStore);\n    const company = companyStore.collection[application.user_company as IReference];\n    let updatedCompany = new Company(company);\n    updatedCompany.applications = [\n        application.uuid,\n        ...updatedCompany.applications as Array<IReference>\n    ];\n\n    yield put(\n        CompanyActionCreators[CrudType.UPDATE][RequestStatus.SUCCESS].action(updatedCompany)\n    );\n}\nexport const applicationDoneDeleteSuccessSagaHandler = function*(args: ISuccessSagaHandlerArgs<Application>) {\n    if (!args.data || (Array.isArray(args.data) && !args.data.length)) {\n        return;\n    }\n    const application = (Array.isArray(args.data) ? args.data[0] : args.data) as Application;\n    const companyStore = yield select(getCompanyStore);\n    const company = companyStore.collection[application.user_company as IReference];\n    let updatedCompany = new Company(company);\n    updatedCompany.applications = (updatedCompany.applications as Array<IReference>).filter(applicationUuid => applicationUuid !== application.uuid);\n\n    yield put(\n        CompanyActionCreators[CrudType.UPDATE][RequestStatus.SUCCESS].action(updatedCompany)\n    );\n}\n","import { ISuccessSagaHandlerArgs } from \"../types/factory-types\";\nimport { IReference } from \"../../data-model/base-model\";\nimport { IRootState } from \"../types/root-types\";\nimport { Application } from \"../../data-model/application/application\";\nimport { ApplicationStatus } from \"../../data-model/application-status/application-status\";\nimport { CrudType, RequestStatus } from \"../../utils/rest-api\";\n\nimport { select, put } from \"redux-saga/effects\";\nimport { ApplicationActionCreators } from \"../action-creators/root-actions\";\n\n\nconst getApplicationStore = (store: IRootState) => store.application;\nexport const applicationStatusDoneCreateSuccessSagaHandler = function*(args: ISuccessSagaHandlerArgs<ApplicationStatus>) {\n    if (!args.data || (Array.isArray(args.data) && !args.data.length)) {\n        return;\n    }\n    const status = (Array.isArray(args.data) ? args.data[0] : args.data) as ApplicationStatus;\n    const applicationStore = yield select(getApplicationStore);\n    const application = applicationStore.collection[status.application as IReference];\n    let updatedApplication = new Application(application);\n    updatedApplication.statuses = [\n        status.uuid,\n        ...updatedApplication.statuses as Array<IReference>\n    ];\n    yield put(\n        ApplicationActionCreators[CrudType.UPDATE][RequestStatus.SUCCESS].action(updatedApplication)\n    );\n}\nexport const applicationStatusDoneDeleteSuccessSagaHandler = function*(args: ISuccessSagaHandlerArgs<ApplicationStatus>) {\n    if (!args.data || (Array.isArray(args.data) && !args.data.length)) {\n        return;\n    }\n    const status = (Array.isArray(args.data) ? args.data[0] : args.data) as ApplicationStatus;\n    const applicationStore = yield select(getApplicationStore);\n    const application = applicationStore.collection[status.application as IReference];\n    let updatedApplication = new Application(application);\n    updatedApplication.statuses = (updatedApplication.statuses as Array<IReference>).filter(applicationStatusUuid => applicationStatusUuid !== status.uuid);\n\n    yield put(\n        ApplicationActionCreators[CrudType.UPDATE][RequestStatus.SUCCESS].action(updatedApplication)\n    );\n}","import { put, call, takeEvery, all, select } from \"redux-saga/effects\";\nimport { IReference } from \"../../data-model/base-model\";\nimport { Company, labelTypesMapToCompanyGroupTypes } from \"../../data-model/company/company\";\nimport { labelTypes } from \"../../data-model/label\";\nimport { CrudType, RequestStatus, RestApiService } from \"../../utils/rest-api\";\nimport { CompanyActionCreators, GroupedCompanyActionCreators } from \"../action-creators/root-actions\";\nimport { SetApplyAllSelectCompanyRequestStatus } from \"../action-creators/select-company-actions\";\nimport { IRootState } from \"../types/root-types\";\nimport { SelectCompanyActionNames, IApplyAllSelectCompanyChangesAction, ISelectCompanyState } from \"../types/select-company-types\";\n\nfunction* selectCompanyApplySagaHandler(\n    applyAllAction: IApplyAllSelectCompanyChangesAction\n) {\n    const { destinationStatus } = applyAllAction;\n    const selectCompanyState: ISelectCompanyState = yield select((state: IRootState) => state.selectCompany);\n    const selectCompanyCollection = selectCompanyState.selectCompanyCollection;\n\n    const partialUpdateCompanies = [...selectCompanyCollection].map(([uuid]) => {\n        return {\n            uuid,\n            labels: [{ text: destinationStatus }]\n        }\n    });\n\n    let res;\n    yield put(SetApplyAllSelectCompanyRequestStatus(RequestStatus.REQUESTING));\n    try {\n        res = yield call(RestApiService.patch, {\n            data: partialUpdateCompanies,\n            objectName: 'companies'\n        })\n        if (!res) {\n            throw new Error('Failed to apply company changes. Server response is empty.');\n        }\n    } catch (error) {\n        yield put(SetApplyAllSelectCompanyRequestStatus(RequestStatus.FAILURE));\n        console.error('Failed to apply company changes', error)\n        // TODO: just do nothing for now, but in the future we may \n        // want to add alerts, danger highlights in UI, etc\n        return;\n    }\n\n    const updateCompaniesResult = res as Company[];\n\n    // move company uuids out of company buckets\n    const removeGroupsMapping = new Map<labelTypes, Set<IReference>>();\n    selectCompanyCollection.forEach((label, uuid) => {\n        if (label !== destinationStatus) {\n            const removeGroupSet = removeGroupsMapping.get(label) || new Set<IReference>();\n            removeGroupSet.add(uuid);\n            removeGroupsMapping.set(label, removeGroupSet);\n        }\n    })\n    yield all(Array.from(removeGroupsMapping).map(([label, uuidSet]) => {\n        const deleteAction = GroupedCompanyActionCreators[\n            labelTypesMapToCompanyGroupTypes[label]\n        ][CrudType.DELETE][RequestStatus.SUCCESS].action;\n        return put(\n            deleteAction(undefined, Array.from(uuidSet).map(uuid => ({ uuid })) )\n        );\n    }));\n\n    // move company uuids into destination company bucket\n    const batchCreateAction = GroupedCompanyActionCreators[\n        labelTypesMapToCompanyGroupTypes[destinationStatus]\n    ][CrudType.BATCHCREATE][RequestStatus.SUCCESS].action;\n    yield put(\n        batchCreateAction(updateCompaniesResult.map(company => {\n            return { uuid: company.uuid }\n        }))\n    )\n    \n    // update companies (TODO: limit to just status, but need to pull in company redux state)\n    const batchUpdateAction = CompanyActionCreators[CrudType.BATCHUPDATE][RequestStatus.SUCCESS].action;\n    yield put(\n        batchUpdateAction(updateCompaniesResult.map(company => {\n            return { uuid: company.uuid, labels: company.labels }\n        }))\n    );\n\n    yield put(\n        SetApplyAllSelectCompanyRequestStatus(RequestStatus.SUCCESS)\n    );\n    return;\n}\n\nexport function* selectCompanyApplySaga(): Generator {\n    yield takeEvery(SelectCompanyActionNames.APPLY_ALL_CHANGES, selectCompanyApplySagaHandler);\n}","import createSagaMiddleware, { SagaIterator } from 'redux-saga';\nimport { all } from \"redux-saga/effects\";\nimport { authLoginSaga, authLogoutSaga } from \"./auth-sagas\";\n// rest api\nimport { labelTypesMapToCompanyGroupTypes, companyGroupTypes} from \"../../data-model/company/company\";\nimport { RestApiSagaFactory } from './saga-factory';\nimport { CompanyActionCreators, ApplicationActionCreators, ApplicationStatusActionCreators, GroupedCompanyActionCreators } from '../action-creators/root-actions';\nimport { companyDoneUpdateSuccessSagaHandler, groupedCompanyListSuccessSagaHandler, companyOverrideDeleteSuccessSagaHandler } from './company-custom-saga';\nimport { CompanyNormalizeManifest } from '../../data-model/company/company-normalize-schema';\nimport { applicationDoneCreateSuccessSagaHandler, applicationDoneDeleteSuccessSagaHandler } from './applicaiton-custom-saga';\nimport { ApplicationNormalizeManifest } from '../../data-model/application/application-normalize-schema';\nimport { applicationStatusDoneCreateSuccessSagaHandler, applicationStatusDoneDeleteSuccessSagaHandler } from './application-status-custom-saga';\nimport { selectCompanyApplySaga } from './select-company-saga';\n\n\n// saga for company\nexport const CompanySagas = RestApiSagaFactory(\"companies\", CompanyActionCreators, {\n    doneCrudSuccessSagaHandler: {\n        update: companyDoneUpdateSuccessSagaHandler,\n    },\n    overrideCrudSuccessSagaHandler: {\n        delete: companyOverrideDeleteSuccessSagaHandler\n    },\n    normalizeManifest: CompanyNormalizeManifest\n})\n\nexport const GroupCompanySagas = Object.values(labelTypesMapToCompanyGroupTypes).reduce((accumulated, companyGroupText) => {\n    return {\n        ...accumulated,\n        [companyGroupText]: RestApiSagaFactory(companyGroupText, GroupedCompanyActionCreators[companyGroupText], {\n            overrideCrudSuccessSagaHandler: {\n                list: groupedCompanyListSuccessSagaHandler\n            },\n            normalizeManifest: CompanyNormalizeManifest\n        })\n    }\n}, {}) as {\n    [groupText in companyGroupTypes]: Array<() => SagaIterator>\n};\n\n\n// saga for application\nexport const ApplicationSagas = RestApiSagaFactory(\"applications\", ApplicationActionCreators, {\n    doneCrudSuccessSagaHandler: {\n        create: applicationDoneCreateSuccessSagaHandler,\n        delete: applicationDoneDeleteSuccessSagaHandler\n    },\n    normalizeManifest: ApplicationNormalizeManifest\n});\n\n\n// saga for statuses\nexport const ApplicationStatusSagas = RestApiSagaFactory(\"application-statuses\", ApplicationStatusActionCreators, {\n    doneCrudSuccessSagaHandler: {\n        create: applicationStatusDoneCreateSuccessSagaHandler,\n        delete: applicationStatusDoneDeleteSuccessSagaHandler\n    }\n});\n\n\n// collect all sagas in root saga\n\nconst rootSaga = function*() {\n    yield all([\n        authLoginSaga(),\n        authLogoutSaga(),\n\n        ...CompanySagas.map((saga) => saga()),\n        ...Object.values(labelTypesMapToCompanyGroupTypes).map(companyGroupText => {\n            return GroupCompanySagas[companyGroupText].map(saga => saga())\n        }).flat(),\n\n        ...ApplicationSagas.map((saga) => saga()),\n        ...ApplicationStatusSagas.map((saga) => saga()),\n\n        selectCompanyApplySaga(),\n\n        // add new saga here\n        // ...\n    ]);\n};\n\n\n/** setup saga */\nexport const sagaMiddleware = createSagaMiddleware();\n\n\nexport const runSagaMiddleaware = () => {\n    sagaMiddleware.run(rootSaga)\n}\n","/** redux */\nimport { createStore, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension/developmentOnly\";\nimport { IRootState } from \"../types/root-types\";\nimport { createRootReducer } from \"../reducers/root-reducers\";\n\n/** router */\nimport { createBrowserHistory } from 'history';\nimport { routerMiddleware } from 'connected-react-router';\n\n/** middleware */\n// saga\nimport { sagaMiddleware, runSagaMiddleaware } from \"../sagas/root-saga\";\n\n\nexport const history = createBrowserHistory({\n    basename: (process.env.NODE_ENV === 'development') ?  \n    ``\n    :\n    // since we use custom domain which has root dir of /\n    // we no longer need a base subpath\n    // the subpath is originally used for github page\n    ``\n    // `/appl-tracky-spa`\n});\n\nconst preloadedState = {\n\n};\n\n// generate the singleton store from redux\nexport const store = createStore<IRootState, any, any, any>(\n    createRootReducer(history),\n    preloadedState,\n    \n    // for redux debugging (only enabled in development)\n    // https://extension.remotedev.io/#usage\n    composeWithDevTools(\n        applyMiddleware(\n            routerMiddleware(history),\n            sagaMiddleware,\n            // ... add other middlewares ...\n        )\n    )\n);\n\n/** after mount saga middlewares to store, run them */\nrunSagaMiddleaware();\n\nexport const getCompanyStore = (store: IRootState) => store.company;\nexport const getApplicationStore = (store: IRootState) => store.application;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n/** redux */\nimport { Provider } from \"react-redux\";\nimport { Store } from \"redux\";\n/** root store */\nimport { IRootState } from \"./state-management/types/root-types\";\nimport { store } from \"./state-management/store/store-config\";\n\n/** router */\nimport { ConnectedRouter } from \"connected-react-router\";\nimport { history } from \"./state-management/store/store-config\";\n\n/** types */\ninterface IRootProps {\n    store: Store<IRootState>;\n}\n\n/** root component - just to wrap the App into redux store */\nconst Root: React.SFC<IRootProps> = props => {\n    return (\n        <Provider store={props.store}>\n            <ConnectedRouter history={history} >\n                <App />\n            </ConnectedRouter>\n        </Provider>\n    );\n};\n\nReactDOM.render(<Root store={store} />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"LandingPage\":\"landing-page_LandingPage__2ZnLo\",\"primaryPageContent\":\"landing-page_primaryPageContent__YLaLX\",\"headlineContent\":\"landing-page_headlineContent__2vF0w\",\"headlineText\":\"landing-page_headlineText__33RBB\",\"headlineSubText\":\"landing-page_headlineSubText__3tLwP\",\"loginActionsContainer\":\"landing-page_loginActionsContainer__2SARI\",\"divider\":\"landing-page_divider__3PurT\",\"sideNoteContent\":\"landing-page_sideNoteContent__NMAYC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"UserAppPageHeader\":\"user-app-page_UserAppPageHeader__x_cfW\",\"companyListHeader\":\"user-app-page_companyListHeader__19QUw\",\"searchField\":\"user-app-page_searchField__3q0QO\"};"],"sourceRoot":""}